""" This log sets up a few true|false, 0|1 aliases
    for basic checks. It also uses the team context
    for more advanced checks.
    (examples/contexts/team)
"""

alias @first_valid(__nil__, true) as t
alias @first_valid(__nil__, false) as f

alias @first_valid(__nil__, true) as x
alias @first_valid(__nil__, false) as y

alias @first_valid(__nil__, 0) as zero 
alias @first_valid(__nil__, 1) as one

alias my.team as team

@log("Test Conditions")
@log('-- All output should be "pass: ...". If you see a "fail: ..." something is wrong.')

"""Single-expression tests that should pass.
========================================================================
"""
@log(" ")
@log("true tests: -------------------------------------------------------- single-expression tests")
@log("-- output is good")
@log(" ")

if exists t
    @log("0) pass: exists t")
if t
    @log("1) pass: if t")
if not f
    @log("2) pass: if not f")
if t is Boolean
    @log("3) pass: t is Boolean")
if t == true
    @log("4) pass: t == true")
if t != f
    @log("5) pass: t != f")
if t != false
    @log("6) pass: t != false")
if t > f
    @log("7) pass: t > f")
if t >= f
    @log("8) pass: t >= f")
if not exists some.non.existent.path
    @log("9) pass: not exists some.non.existent.path")
if exists team[0]
    @log("10) pass: exists team[0]")
if team[0].first_name == 'Alice'
    @log("11) pass: team[0].first_name == 'Alice'")
if team[0].first_name != 'Bob'
    @log("12) pass: team[0].first_name != 'Bob'")
if team[0].first_name != 0
    @log("13) pass: team[0].first_name != 0")
if team[0].first_name != team[0]
    @log("14) pass: team[0].first_name != team[0]")
if team[0].first_name is String
    @log("15) pass: team[0].first_name is String")
if team[0].first_name not is Hash
    @log("16) pass: team[0].first_name not is Hash")
if 'my' in root
    @log("17) pass: 'my' in root")
if 'non_existent' not in root
    @log("18) pass: 'non_existent' not in root")
if 'A' in team[0].first_name
    @log("19) pass: 'A' in team[0].first_name")
if 'XXX' not in team[0].first_name
    @log("20) pass: 'XXX' not in team[0].first_name")
if 'X' not in team[0].first_name
    @log("21) pass: 'X' not in team[0].first_name")
if zero < one
    @log("22) pass: zero < one")
if zero <= one
    @log("23) pass: zero <= one")

"""Compound-expression tests that should pass. 
========================================================================
"""
@log(" ")
@log("true tests -------------------------------------------------------- compound-expression tests")
@log("-- output is good")
@log(" ")

if x and not y
    @log("0) pass: if x and not y")
if not y and x
    @log("1) pass: if not y and x")
if y == false and x == true
    @log("2) pass: if y == false and x == true")
if y or x
    @log("3) pass: if y or x")
if not x or not y
    @log("4) pass: if not x or not y")
if x or y and y and y and y
    @log("5) pass: if x or y and y and y and y")
if f or y or false or t
    @log("6) pass: if f or y or false or t")

"""Single-expression tests that should fail. None of these should be in the log output. 
========================================================================
"""
@log(" ")
@log("false tests -------------------------------------------------------- single-expression tests")
@log("-- no output is good")
@log(" ")

if not exists t
    @log("0) fail: exists t")
if not t
    @log("1) fail: not t")
if f
    @log("2) fail: if f")
if t not is Boolean
    @log("3) fail: t not is Boolean")
if t == false
    @log("4) fail: t == false")
if t == f
    @log("5) fail: t == f")
if t != true
    @log("6) fail: t != true")
if t < f
    @log("7) fail: t < f")
if t <= f
    @log("8) fail: t <= f")
if exists some.non.existent.path
    @log("9) fail: exists some.non.existent.path")
if not exists team[0]
    @log("10) fail: not exists team[0]")
if team[0].first_name == 'Ali'
    @log("11) fail: team[0].first_name == 'Ali'")
if team[0].first_name == 'Bobby'
    @log("11) fail: team[0].first_name == 'Bobby'")
if team[0].first_name == 0
    @log("11) fail: team[0].first_name == 0")
if team[0].first_name == team[0]
    @log("11) fail: team[0].first_name == team[0]")
if team[0].first_name not is String
    @log("12) fail: team[0].first_name not is String")
if team[0].first_name is Hash
    @log("12) fail: team[0].first_name is Hash")
if 'myx' in root
    @log("13) fail: 'myx' in root")
if 'non_existent' in root
    @log("14) fail: 'non_existent' in root")
if 'A' not in team[0].first_name
    @log("15) fail: 'A' not in team[0].first_name")
if 'XXX' in team[0].first_name
    @log("16) fail: 'XXX' in team[0].first_name")
if 'X' in team[0].first_name
    @log("17) fail: 'X' in team[0].first_name")

"""Compound-expression tests that should fail. None of these should be in the log output. 
========================================================================
"""
@log(" ")
@log("false tests -------------------------------------------------------- compound-expression tests")
@log("-- no output is good")
@log(" ")

if x and y
    @log("0) fail: if x and y")
if y and x
    @log("1) fail: if y and x")
if y == false and x == false 
    @log("2) fail: if y == false and x == false")
if y or f
    @log("3) fail: if y or f")
if not x or not t
    @log("4) fail: if not x or not t")
if f or y and y and y and y
    @log("5) fail: if f or y and y and y and y")
if f or y or false or f
    @log("6) fail: if f or y or false or f")
