/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var manana_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"prog_list":4,"EOF":5,"stmt":6,"block":7,"INDENT":8,"stmt_list":9,"DEDENT":10,"tag_stmt":11,"void_tag_stmt":12,"filter_stmt":13,"for_stmt":14,"alias_stmt":15,"if_stmt":16,"with_stmt":17,"tag":18,"END_TAG":19,"text":20,"tag_attrs":21,"TAG":22,"void_tag":23,"VOID_TAG":24,"tag_attr":25,"tag_attr_args":26,"TAG_ID":27,"tag_classes":28,"TAG_ATTR":29,"EQ":30,"string":31,"TAG_DATA_ATTR":32,"LPAREN":33,"tag_attr_arg_list":34,"RPAREN":35,"tag_attr_arg":36,"STRING":37,"COMMA":38,"TAG_CLASS":39,"FILTER":40,"word_list":41,"word":42,"WORD":43,"name":44,"FOR":45,"ID":46,"IN":47,"path":48,"END_EXPR":49,"IF":50,"ELSE":51,"ALIAS":52,"WITH":53,"AS":54,"DOT":55,"id":56,"meths":57,"LBRACK":58,"INT":59,"RBRACK":60,"COLON":61,"meth":62,"meth_args":63,"meth_arg":64,"START_NAME":65,"RBRACE":66,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",10:"DEDENT",19:"END_TAG",22:"TAG",24:"VOID_TAG",27:"TAG_ID",29:"TAG_ATTR",30:"EQ",31:"string",32:"TAG_DATA_ATTR",33:"LPAREN",35:"RPAREN",37:"STRING",38:"COMMA",39:"TAG_CLASS",40:"FILTER",43:"WORD",45:"FOR",46:"ID",47:"IN",49:"END_EXPR",50:"IF",51:"ELSE",52:"ALIAS",53:"WITH",54:"AS",55:"DOT",58:"LBRACK",59:"INT",60:"RBRACK",61:"COLON",65:"START_NAME",66:"RBRACE"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[9,2],[9,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,2],[11,3],[11,3],[11,3],[11,4],[11,4],[18,1],[12,2],[12,3],[23,1],[21,2],[21,1],[21,1],[25,1],[25,1],[25,3],[25,3],[26,3],[34,2],[34,1],[36,3],[36,4],[36,3],[36,4],[28,2],[28,1],[13,4],[20,1],[41,2],[41,1],[42,1],[42,1],[14,6],[14,8],[14,10],[16,4],[16,7],[15,5],[17,6],[48,3],[48,3],[48,1],[56,1],[56,4],[56,4],[56,6],[56,6],[56,6],[56,6],[57,3],[57,1],[62,3],[62,4],[63,3],[63,1],[64,1],[64,1],[64,1],[44,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: 
           console.log("\n\n==>\n", JSON.stringify($$[$0-1], null, "\t"));
           console.log("\n\n==> %j\n", $$[$0-1]); 
           return $$[$0-1];
         
break;
case 2: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0-1]; 
break;
case 5: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 6: this.$ = [$$[$0]]; 
break;
case 14: this.$ = new TagNode($$[$0-1], null, null, null, new Location(_$[$0-1], _$[$0-1])); 
break;
case 15: this.$ = new TagNode($$[$0-2], null, $$[$0-1],   null, new Location(_$[$0-2], _$[$0-1])); 
break;
case 16: this.$ = new TagNode($$[$0-2], null, null, $$[$0],   new Location(_$[$0-2], _$[$0])); 
break;
case 17: this.$ = new TagNode($$[$0-2], $$[$0-1],   null, null, new Location(_$[$0-2], _$[$0-1])); 
break;
case 18: this.$ = new TagNode($$[$0-3], $$[$0-2],   $$[$0-1],   null, new Location(_$[$0-3], _$[$0-1])); 
break;
case 19: this.$ = new TagNode($$[$0-3], $$[$0-2],   null, $$[$0],   new Location(_$[$0-3], _$[$0])); 
break;
case 20: this.$ = $$[$0]; 
break;
case 21: this.$ = new TagNode($$[$0-1], null, null, null, new Location(_$[$0-1], _$[$0-1])); 
break;
case 22: this.$ = new TagNode($$[$0-2], $$[$0-1],   null, null, new Location(_$[$0-2], _$[$0-1])); 
break;
case 23: this.$ = $$[$0]; 
break;
case 24: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 25: this.$ = [$$[$0]]; 
break;
case 26: this.$ = $$[$0]; 
break;
case 27: this.$ = ['id', $$[$0]]; 
break;
case 28: this.$ = ['class', $$[$0].join(" ")]; 
break;
case 29: this.$ = ['ATTR', $$[$0-2], $$[$0]]; 
break;
case 30: this.$ = ['DATA', $$[$0-2], $$[$0]]; 
break;
case 31: this.$ = $$[$0-1]; 
break;
case 32: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 33: this.$ = [$$[$0]]; 
break;
case 34: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 35: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 36: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 37: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 38: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 39: this.$ = [$$[$0]]; 
break;
case 40: this.$ = ['FILTER', $$[$0-3], $$[$0-1]]; 
break;
case 41: this.$ = new TextNode($$[$0], new Location(_$[$0], _$[$0])); 
break;
case 42: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 43: this.$ = [$$[$0]]; 
break;
case 46: this.$ = ['FOR', $$[$0-4], $$[$0-2], $$[$0]]; 
break;
case 47: this.$ = ['FOR', $$[$0-6], $$[$0-4], $$[$0-2], $$[$0]]; 
break;
case 48: this.$ = ['FOR', $$[$0-8], $$[$0-6], $$[$0-4], $$[$0-2], $$[$0]]; 
break;
case 49: this.$ = ['IF', $$[$0-2], $$[$0]]; 
break;
case 50: this.$ = ['IF', $$[$0-5], $$[$0-3], $$[$0]]; 
break;
case 51: this.$ = ['ALIAS', $$[$0-3], $$[$0-1]]; 
break;
case 52: this.$ = ['WITH', $$[$0-4], $$[$0-2], $$[$0]]; 
break;
case 53: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 54: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 55: this.$ = ['NAME', $$[$0]]; 
break;
case 56: this.$ = $$[$0]; 
break;
case 57: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 58: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 59: this.$ = [$$[$0-5], $$[$0-3], $$[$0-1]]; 
break;
case 60: this.$ = [$$[$0-5], $$[$0-3], $$[$0-1]]; 
break;
case 61: this.$ = [$$[$0-5], $$[$0-3], $$[$0-1]]; 
break;
case 62: this.$ = [$$[$0-5], $$[$0-3], $$[$0-1]]; 
break;
case 63: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 64: this.$ = ['METH', $$[$0]]; 
break;
case 65: this.$ = [$$[$0-2], []]; 
break;
case 66: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 67: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 68: this.$ = [$$[$0]]; 
break;
case 72: this.$ = $$[$0-1]; 
break;
}
},
table: [{3:1,4:2,6:3,11:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,22:[1,18],23:12,24:[1,19],40:[1,13],45:[1,14],50:[1,16],52:[1,15],53:[1,17]},{1:[3]},{5:[1,20],6:21,11:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,22:[1,18],23:12,24:[1,19],40:[1,13],45:[1,14],50:[1,16],52:[1,15],53:[1,17]},{5:[2,3],22:[2,3],24:[2,3],40:[2,3],45:[2,3],50:[2,3],52:[2,3],53:[2,3]},{5:[2,7],10:[2,7],22:[2,7],24:[2,7],40:[2,7],45:[2,7],50:[2,7],52:[2,7],53:[2,7]},{5:[2,8],10:[2,8],22:[2,8],24:[2,8],40:[2,8],45:[2,8],50:[2,8],52:[2,8],53:[2,8]},{5:[2,9],10:[2,9],22:[2,9],24:[2,9],40:[2,9],45:[2,9],50:[2,9],52:[2,9],53:[2,9]},{5:[2,10],10:[2,10],22:[2,10],24:[2,10],40:[2,10],45:[2,10],50:[2,10],52:[2,10],53:[2,10]},{5:[2,11],10:[2,11],22:[2,11],24:[2,11],40:[2,11],45:[2,11],50:[2,11],52:[2,11],53:[2,11]},{5:[2,12],10:[2,12],22:[2,12],24:[2,12],40:[2,12],45:[2,12],50:[2,12],52:[2,12],53:[2,12]},{5:[2,13],10:[2,13],22:[2,13],24:[2,13],40:[2,13],45:[2,13],50:[2,13],52:[2,13],53:[2,13]},{19:[1,22],20:23,21:24,25:26,26:27,27:[1,29],28:30,29:[1,31],32:[1,32],33:[1,33],39:[1,36],41:25,42:28,43:[1,34],44:35,65:[1,37]},{19:[1,38],21:39,25:26,26:27,27:[1,29],28:30,29:[1,31],32:[1,32],33:[1,33],39:[1,36]},{8:[1,40]},{46:[1,41]},{46:[1,42]},{46:[1,45],48:43,56:44},{46:[1,45],48:46,56:44},{19:[2,20],27:[2,20],29:[2,20],32:[2,20],33:[2,20],39:[2,20],43:[2,20],65:[2,20]},{19:[2,23],27:[2,23],29:[2,23],32:[2,23],33:[2,23],39:[2,23]},{1:[2,1]},{5:[2,2],22:[2,2],24:[2,2],40:[2,2],45:[2,2],50:[2,2],52:[2,2],53:[2,2]},{5:[2,14],7:47,8:[1,48],10:[2,14],22:[2,14],24:[2,14],40:[2,14],45:[2,14],50:[2,14],52:[2,14],53:[2,14]},{19:[1,49]},{19:[1,50],20:51,25:52,27:[1,29],28:30,29:[1,31],32:[1,32],39:[1,36],41:25,42:28,43:[1,34],44:35,65:[1,37]},{10:[2,41],19:[2,41],42:53,43:[1,34],44:35,65:[1,37]},{19:[2,25],27:[2,25],29:[2,25],32:[2,25],39:[2,25],43:[2,25],65:[2,25]},{19:[2,26],27:[2,26],29:[2,26],32:[2,26],39:[2,26],43:[2,26],65:[2,26]},{10:[2,43],19:[2,43],43:[2,43],65:[2,43]},{19:[2,27],27:[2,27],29:[2,27],32:[2,27],39:[2,27],43:[2,27],65:[2,27]},{19:[2,28],27:[2,28],29:[2,28],32:[2,28],39:[1,54],43:[2,28],65:[2,28]},{30:[1,55]},{30:[1,56]},{29:[1,59],32:[1,60],34:57,36:58},{10:[2,44],19:[2,44],43:[2,44],65:[2,44]},{10:[2,45],19:[2,45],43:[2,45],65:[2,45]},{19:[2,39],27:[2,39],29:[2,39],32:[2,39],39:[2,39],43:[2,39],65:[2,39]},{46:[1,45],48:61,56:44},{5:[2,21],10:[2,21],22:[2,21],24:[2,21],40:[2,21],45:[2,21],50:[2,21],52:[2,21],53:[2,21]},{19:[1,62],25:52,27:[1,29],28:30,29:[1,31],32:[1,32],39:[1,36]},{20:63,41:25,42:28,43:[1,34],44:35,65:[1,37]},{38:[1,65],47:[1,64]},{30:[1,66]},{49:[1,67],55:[1,68]},{35:[2,55],38:[2,55],49:[2,55],54:[2,55],55:[2,55],60:[2,55],61:[2,55],66:[2,55]},{35:[2,56],38:[2,56],49:[2,56],54:[2,56],55:[2,56],58:[1,69],60:[2,56],61:[2,56],66:[2,56]},{54:[1,70],55:[1,68]},{5:[2,16],10:[2,16],22:[2,16],24:[2,16],40:[2,16],45:[2,16],50:[2,16],52:[2,16],53:[2,16]},{6:72,9:71,11:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,22:[1,18],23:12,24:[1,19],40:[1,13],45:[1,14],50:[1,16],52:[1,15],53:[1,17]},{5:[2,15],10:[2,15],22:[2,15],24:[2,15],40:[2,15],45:[2,15],50:[2,15],52:[2,15],53:[2,15]},{5:[2,17],7:73,8:[1,48],10:[2,17],22:[2,17],24:[2,17],40:[2,17],45:[2,17],50:[2,17],52:[2,17],53:[2,17]},{19:[1,74]},{19:[2,24],27:[2,24],29:[2,24],32:[2,24],39:[2,24],43:[2,24],65:[2,24]},{10:[2,42],19:[2,42],43:[2,42],65:[2,42]},{19:[2,38],27:[2,38],29:[2,38],32:[2,38],39:[2,38],43:[2,38],65:[2,38]},{31:[1,75]},{31:[1,76]},{29:[1,59],32:[1,60],35:[1,77],36:78},{29:[2,33],32:[2,33],35:[2,33]},{30:[1,79]},{30:[1,80]},{55:[1,68],66:[1,81]},{5:[2,22],10:[2,22],22:[2,22],24:[2,22],40:[2,22],45:[2,22],50:[2,22],52:[2,22],53:[2,22]},{10:[1,82]},{46:[1,45],48:83,56:44},{46:[1,84]},{46:[1,45],48:85,56:44},{7:86,8:[1,48]},{46:[1,89],56:87,57:88,62:90},{46:[1,45],48:92,56:44,59:[1,91]},{46:[1,93]},{6:95,10:[1,94],11:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,22:[1,18],23:12,24:[1,19],40:[1,13],45:[1,14],50:[1,16],52:[1,15],53:[1,17]},{10:[2,6],22:[2,6],24:[2,6],40:[2,6],45:[2,6],50:[2,6],52:[2,6],53:[2,6]},{5:[2,19],10:[2,19],22:[2,19],24:[2,19],40:[2,19],45:[2,19],50:[2,19],52:[2,19],53:[2,19]},{5:[2,18],10:[2,18],22:[2,18],24:[2,18],40:[2,18],45:[2,18],50:[2,18],52:[2,18],53:[2,18]},{19:[2,29],27:[2,29],29:[2,29],32:[2,29],39:[2,29],43:[2,29],65:[2,29]},{19:[2,30],27:[2,30],29:[2,30],32:[2,30],39:[2,30],43:[2,30],65:[2,30]},{19:[2,31],27:[2,31],29:[2,31],32:[2,31],39:[2,31],43:[2,31],65:[2,31]},{29:[2,32],32:[2,32],35:[2,32]},{37:[1,96]},{37:[1,97]},{10:[2,72],19:[2,72],43:[2,72],65:[2,72]},{5:[2,40],10:[2,40],22:[2,40],24:[2,40],40:[2,40],45:[2,40],50:[2,40],52:[2,40],53:[2,40]},{49:[1,98],55:[1,68]},{38:[1,100],47:[1,99]},{49:[1,101],55:[1,68]},{5:[2,49],10:[2,49],22:[2,49],24:[2,49],40:[2,49],45:[2,49],50:[2,49],51:[1,102],52:[2,49],53:[2,49]},{35:[2,53],38:[2,53],49:[2,53],54:[2,53],55:[2,53],60:[2,53],61:[2,53],66:[2,53]},{35:[2,54],38:[2,54],49:[2,54],54:[2,54],55:[1,103],60:[2,54],61:[2,54],66:[2,54]},{33:[1,104],35:[2,56],38:[2,56],49:[2,56],54:[2,56],55:[2,56],58:[1,69],60:[2,56],61:[2,56],66:[2,56]},{35:[2,64],38:[2,64],49:[2,64],54:[2,64],55:[2,64],60:[2,64],61:[2,64],66:[2,64]},{60:[1,105],61:[1,106]},{55:[1,68],60:[1,107],61:[1,108]},{49:[1,109]},{5:[2,4],10:[2,4],22:[2,4],24:[2,4],40:[2,4],45:[2,4],50:[2,4],51:[2,4],52:[2,4],53:[2,4]},{10:[2,5],22:[2,5],24:[2,5],40:[2,5],45:[2,5],50:[2,5],52:[2,5],53:[2,5]},{29:[2,34],32:[2,34],35:[2,34],38:[1,110]},{29:[2,36],32:[2,36],35:[2,36],38:[1,111]},{7:112,8:[1,48]},{46:[1,45],48:113,56:44},{46:[1,114]},{5:[2,51],10:[2,51],22:[2,51],24:[2,51],40:[2,51],45:[2,51],50:[2,51],52:[2,51],53:[2,51]},{49:[1,115]},{46:[1,117],62:116},{35:[1,118],37:[1,123],46:[1,45],48:121,56:44,59:[1,122],63:119,64:120},{35:[2,57],38:[2,57],49:[2,57],54:[2,57],55:[2,57],60:[2,57],61:[2,57],66:[2,57]},{46:[1,45],48:125,56:44,59:[1,124]},{35:[2,58],38:[2,58],49:[2,58],54:[2,58],55:[2,58],60:[2,58],61:[2,58],66:[2,58]},{46:[1,45],48:127,56:44,59:[1,126]},{7:128,8:[1,48]},{29:[2,35],32:[2,35],35:[2,35]},{29:[2,37],32:[2,37],35:[2,37]},{5:[2,46],10:[2,46],22:[2,46],24:[2,46],40:[2,46],45:[2,46],50:[2,46],52:[2,46],53:[2,46]},{49:[1,129],55:[1,68]},{47:[1,130]},{7:131,8:[1,48]},{35:[2,63],38:[2,63],49:[2,63],54:[2,63],55:[2,63],60:[2,63],61:[2,63],66:[2,63]},{33:[1,104]},{35:[2,65],38:[2,65],49:[2,65],54:[2,65],55:[2,65],60:[2,65],61:[2,65],66:[2,65]},{35:[1,132],38:[1,133]},{35:[2,68],38:[2,68]},{35:[2,69],38:[2,69],55:[1,68]},{35:[2,70],38:[2,70]},{35:[2,71],38:[2,71]},{60:[1,134]},{55:[1,68],60:[1,135]},{60:[1,136]},{55:[1,68],60:[1,137]},{5:[2,52],10:[2,52],22:[2,52],24:[2,52],40:[2,52],45:[2,52],50:[2,52],52:[2,52],53:[2,52]},{7:138,8:[1,48]},{46:[1,45],48:139,56:44},{5:[2,50],10:[2,50],22:[2,50],24:[2,50],40:[2,50],45:[2,50],50:[2,50],52:[2,50],53:[2,50]},{35:[2,66],38:[2,66],49:[2,66],54:[2,66],55:[2,66],60:[2,66],61:[2,66],66:[2,66]},{37:[1,123],46:[1,45],48:121,56:44,59:[1,122],64:140},{35:[2,59],38:[2,59],49:[2,59],54:[2,59],55:[2,59],60:[2,59],61:[2,59],66:[2,59]},{35:[2,60],38:[2,60],49:[2,60],54:[2,60],55:[2,60],60:[2,60],61:[2,60],66:[2,60]},{35:[2,61],38:[2,61],49:[2,61],54:[2,61],55:[2,61],60:[2,61],61:[2,61],66:[2,61]},{35:[2,62],38:[2,62],49:[2,62],54:[2,62],55:[2,62],60:[2,62],61:[2,62],66:[2,62]},{5:[2,47],10:[2,47],22:[2,47],24:[2,47],40:[2,47],45:[2,47],50:[2,47],52:[2,47],53:[2,47]},{49:[1,141],55:[1,68]},{35:[2,67],38:[2,67]},{7:142,8:[1,48]},{5:[2,48],10:[2,48],22:[2,48],24:[2,48],40:[2,48],45:[2,48],50:[2,48],52:[2,48],53:[2,48]}],
defaultActions: {20:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function Location(start, end) {
  this.start = { line: start.first_line, column: start.first_column };
  this.end   = { line: end.last_line, column: end.last_column };
}

/* AST nodes */

function TagNode(tag, attrs, text, block, loc) {
  this.type = "Tag";
  this.tag = tag;
  this.attrs = attrs;
  this.body = text || block;
  this.loc = loc;
}

function TextNode(words, loc) {
  var t = ['TEXT'],
      w = words, 
      i = 0, 
      s = '';
  while (w[i]) {
    if (typeof w[i] === "string") {
      s += w[i] + ' ';
    } else {
      t.push(s.substring(0, s.length-1));
      t.push(w[i]);
      s = '';
    }
    i++;
  }
  if (s) {
    t.push(s.substring(0, s.length-1));
  }

  this.type = "Text";
  this.body = words;
  this.loc = loc;
}

/* expose AST constructors to parser */

parser.ast = {};
parser.ast.TextNode = TextNode;
parser.ast.TagNode = TagNode;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
 
  function strip(start, end) {
    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.pushState("comment"); /* ignore */ 
break;
case 1:this.popState(); /* ignore */ 
break;
case 2:/* ignore */
break;
case 3:/* ignore */
break;
case 4:this.pushState("expr"); return "FOR";
break;
case 5:this.pushState("expr"); return "IF";
break;
case 6:this.pushState("expr"); return "ELSE";
break;
case 7:this.pushState("expr"); return "ALIAS";
break;
case 8:this.pushState("expr"); return "WITH";
break;
case 9:this.popState(); return "END_EXPR";
break;
case 10:return "IN";
break;
case 11:return "EQ";
break;
case 12:return "AS";
break;
case 13:this.pushState("tag"); return "VOID_TAG";
break;
case 14:this.pushState("tag"); return "TAG";
break;
case 15:this.popState(); return "END_TAG";
break;
case 16:yy_.yytext = yy_.yytext.slice(1); return "TAG_ID";
break;
case 17:yy_.yytext = yy_.yytext.slice(1); return "TAG_CLASS";
break;
case 18:this.pushState("tagargs"); return "LPAREN";
break;
case 19:this.popState(); return "RPAREN";
break;
case 20:/* ignore */
break;
case 21:/* ignore */
break;
case 22:return "EQ";
break;
case 23:return "COMMA";
break;
case 24:return "TAG_ATTR";
break;
case 25:yy_.yytext = "data-" + yy_.yytext.slice(1); return "TAG_DATA_ATTR";
break;
case 26:this.pushState("filter"); yy_.yytext = yy_.yytext.slice(1); return "FILTER";
break;
case 27:this.pushState("name"); return "START_NAME";
break;
case 28:this.popState(); return "RBRACE"
break;
case 29:return "ID";
break;
case 30:return "DOT";
break;
case 31:return "LPAREN";
break;
case 32:return "RPAREN";
break;
case 33:return "LBRACK";
break;
case 34:return "RBRACK";
break;
case 35:return "COLON"; 
break;
case 36:return "COMMA";
break;
case 37:return "INT";
break;
case 38:yy_.yytext = strip(1,2).replace(/\\"/g, '"'); return "STRING";
break;
case 39:return "WORD";
break;
case 40:return 5;
break;
case 41:
  var tokens = [];
  while (0 < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }
  if (tokens.length) return tokens;

break;
case 42:/* eat blank lines */
break;
case 43:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;
  if (indentation > _indent_stack[0]) {
    _indent_stack.unshift(indentation);
    return 8;
  }
  var tokens = [];
  while (indentation < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }
  if (tokens.length) return tokens;

break;
case 44:/* ignore all other whitespace */
break;
}
},
rules: [/^(?:""")/,/^(?:""")/,/^(?:.+)/,/^(?:\n)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:alias\b)/,/^(?:with\b)/,/^(?:(?=\n))/,/^(?:in\b)/,/^(?:=)/,/^(?:as\b)/,/^(?:((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)))/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:(?=\n))/,/^(?:(#[a-zA-Z][a-zA-Z0-9\-\:_]*))/,/^(?:(\.-?[_a-zA-Z]+[_a-zA-Z0-9\-]*(?=["."\s\n])))/,/^(?:\()/,/^(?:\))/,/^(?:\s)/,/^(?:\n)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z][a-zA-Z0-9\-_]*(?==)))/,/^(?:(\*[a-zA-Z][a-zA-Z0-9\-]*(?==)))/,/^(?::(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:@\{)/,/^(?:\})/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:(\+|-)?(0|[1-9][0-9]*))/,/^(?:(('(\\'|[^"'"])*')|("(\\"|[^'"'])*")))/,/^(?:((?!\$\{)[^\s\n][^\s\n]*))/,/^(?:$)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"comment":{"rules":[1,2,3,40,42,44],"inclusive":true},"tag":{"rules":[15,16,17,18,27,39,40,42,44],"inclusive":true},"tagargs":{"rules":[19,20,21,22,23,24,25,38,40,42,44],"inclusive":true},"filter":{"rules":[39,40,41,42,43,44],"inclusive":true},"expr":{"rules":[9,10,11,12,29,30,31,32,33,34,35,36,37,38,40,42,44],"inclusive":true},"name":{"rules":[28,29,30,31,32,33,34,35,36,37,38,40,42,44],"inclusive":true},"INITIAL":{"rules":[0,4,5,6,7,8,13,14,26,27,39,40,41,42,43,44],"inclusive":true}}
};
_indent_stack = [0];;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = manana_parser;
exports.Parser = manana_parser.Parser;
exports.parse = function () { return manana_parser.parse.apply(manana_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}