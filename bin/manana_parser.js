/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var manana_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"prog_list":4,"EOF":5,"stmt":6,"block":7,"INDENT":8,"stmt_list":9,"DEDENT":10,"tag_stmt":11,"void_tag_stmt":12,"filter_stmt":13,"for_stmt":14,"tag":15,"END_TAG":16,"text":17,"tag_attrs":18,"TAG":19,"void_tag":20,"VOID_TAG":21,"tag_attr":22,"tag_attr_args":23,"TAG_ID":24,"tag_classes":25,"TAG_ATTR":26,"EQ":27,"string":28,"TAG_DATA_ATTR":29,"LPAREN":30,"tag_attr_arg_list":31,"RPAREN":32,"tag_attr_arg":33,"STRING":34,"COMMA":35,"TAG_CLASS":36,"FILTER":37,"word_list":38,"word":39,"WORD":40,"name":41,"FOR":42,"ID":43,"IN":44,"path":45,"END_EXPR":46,"DOT":47,"id":48,"LBRACK":49,"INT":50,"RBRACK":51,"COLON":52,"LBRACE":53,"RBRACE":54,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",10:"DEDENT",16:"END_TAG",19:"TAG",21:"VOID_TAG",24:"TAG_ID",26:"TAG_ATTR",27:"EQ",28:"string",29:"TAG_DATA_ATTR",30:"LPAREN",32:"RPAREN",34:"STRING",35:"COMMA",36:"TAG_CLASS",37:"FILTER",40:"WORD",42:"FOR",43:"ID",44:"IN",46:"END_EXPR",47:"DOT",49:"LBRACK",50:"INT",51:"RBRACK",52:"COLON",53:"LBRACE",54:"RBRACE"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[9,2],[9,1],[6,1],[6,1],[6,1],[6,1],[11,2],[11,3],[11,3],[11,3],[11,4],[11,4],[15,1],[12,2],[12,3],[20,1],[18,2],[18,1],[18,1],[22,1],[22,1],[22,3],[22,3],[23,3],[31,2],[31,1],[33,3],[33,4],[33,3],[33,4],[25,2],[25,1],[13,4],[17,1],[38,2],[38,1],[39,1],[39,1],[14,6],[14,8],[14,10],[45,3],[45,1],[48,1],[48,4],[48,4],[48,6],[48,6],[48,6],[48,6],[41,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: 
      console.log("\n\n==>\n", JSON.stringify($$[$0-1],null, "\t"));
      console.log("\n\n==> %j\n", $$[$0-1]); 
      return $$[$0-1];
    
break;
case 2: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0-1]; 
break;
case 5: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 6: this.$ = [$$[$0]]; 
break;
case 11: this.$ = $$[$0-1]; 
break;
case 12: this.$ = $$[$0-2]; this.$.push($$[$0-1]); 
break;
case 13: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 14: this.$ = $$[$0-2]; this.$[1].push.apply(this.$[1], $$[$0-1]); 
break;
case 15: this.$ = $$[$0-3]; this.$[1].push.apply(this.$[1], $$[$0-2]); this.$.push($$[$0-1]); 
break;
case 16: this.$ = $$[$0-3]; this.$[1].push.apply(this.$[1], $$[$0-2]); this.$.push($$[$0]); 
break;
case 17: this.$ = ['TAG', [$$[$0]]]; 
break;
case 18: this.$ = $$[$0-1]; 
break;
case 19: this.$ = $$[$0-2]; this.$[1].push.apply(this.$[1], $$[$0-1]); 
break;
case 20: this.$ = ['VOID_TAG', $$[$0]]; 
break;
case 21: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 22: this.$ = [$$[$0]]; 
break;
case 23: this.$ = $$[$0]; 
break;
case 24: this.$ = ['id', $$[$0]]; 
break;
case 25: this.$ = ['class', $$[$0].join(" ")]; 
break;
case 26: this.$ = ['ATTR', $$[$0-2], $$[$0]]; 
break;
case 27: this.$ = ['DATA', $$[$0-2], $$[$0]]; 
break;
case 28: this.$ = $$[$0-1]; 
break;
case 29: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 30: this.$ = [$$[$0]]; 
break;
case 31: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 32: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 33: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 34: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 35: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 36: this.$ = [$$[$0]]; 
break;
case 37: this.$ = ['FILTER', $$[$0-3], $$[$0-1]]; 
break;
case 38:
      var t = ['TEXT'], w = $$[$0], i = 0, s = '';
      while (w[i]) {
        if (typeof w[i] === "string") {
          s += w[i] + ' ';
        } else {
          t.push(s.substring(0, s.length-1));
          t.push(w[i]);
          s = '';
        }
        i++;
      }
      if (s) {
        t.push(s.substring(0, s.length-1));
      }
      this.$ = t;
    
break;
case 39: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 40: this.$ = [$$[$0]]; 
break;
case 43: this.$ = ['FOR', $$[$0-4], $$[$0-2], $$[$0]]; 
break;
case 44: this.$ = ['FOR', $$[$0-6], $$[$0-4], $$[$0-2], $$[$0]]; 
break;
case 45: this.$ = ['FOR', $$[$0-8], $$[$0-6], $$[$0-4], $$[$0-2], $$[$0]]; 
break;
case 46: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 47: this.$ = ['NAME', $$[$0]]; 
break;
case 48: this.$ = $$[$0]; 
break;
case 49: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 50: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 51: this.$ = [$$[$0-5], $$[$0-3], $$[$0-1]]; 
break;
case 52: this.$ = [$$[$0-5], $$[$0-3], $$[$0-1]]; 
break;
case 53: this.$ = [$$[$0-5], $$[$0-3], $$[$0-1]]; 
break;
case 54: this.$ = [$$[$0-5], $$[$0-3], $$[$0-1]]; 
break;
case 55: this.$ = $$[$0-1]; 
break;
}
},
table: [{3:1,4:2,6:3,11:4,12:5,13:6,14:7,15:8,19:[1,12],20:9,21:[1,13],37:[1,10],42:[1,11]},{1:[3]},{5:[1,14],6:15,11:4,12:5,13:6,14:7,15:8,19:[1,12],20:9,21:[1,13],37:[1,10],42:[1,11]},{5:[2,3],19:[2,3],21:[2,3],37:[2,3],42:[2,3]},{5:[2,7],10:[2,7],19:[2,7],21:[2,7],37:[2,7],42:[2,7]},{5:[2,8],10:[2,8],19:[2,8],21:[2,8],37:[2,8],42:[2,8]},{5:[2,9],10:[2,9],19:[2,9],21:[2,9],37:[2,9],42:[2,9]},{5:[2,10],10:[2,10],19:[2,10],21:[2,10],37:[2,10],42:[2,10]},{16:[1,16],17:17,18:18,22:20,23:21,24:[1,23],25:24,26:[1,25],29:[1,26],30:[1,27],36:[1,30],38:19,39:22,40:[1,28],41:29,53:[1,31]},{16:[1,32],18:33,22:20,23:21,24:[1,23],25:24,26:[1,25],29:[1,26],30:[1,27],36:[1,30]},{8:[1,34]},{43:[1,35]},{16:[2,17],24:[2,17],26:[2,17],29:[2,17],30:[2,17],36:[2,17],40:[2,17],53:[2,17]},{16:[2,20],24:[2,20],26:[2,20],29:[2,20],30:[2,20],36:[2,20]},{1:[2,1]},{5:[2,2],19:[2,2],21:[2,2],37:[2,2],42:[2,2]},{5:[2,11],7:36,8:[1,37],10:[2,11],19:[2,11],21:[2,11],37:[2,11],42:[2,11]},{16:[1,38]},{16:[1,39],17:40,22:41,24:[1,23],25:24,26:[1,25],29:[1,26],36:[1,30],38:19,39:22,40:[1,28],41:29,53:[1,31]},{10:[2,38],16:[2,38],39:42,40:[1,28],41:29,53:[1,31]},{16:[2,22],24:[2,22],26:[2,22],29:[2,22],36:[2,22],40:[2,22],53:[2,22]},{16:[2,23],24:[2,23],26:[2,23],29:[2,23],36:[2,23],40:[2,23],53:[2,23]},{10:[2,40],16:[2,40],40:[2,40],53:[2,40]},{16:[2,24],24:[2,24],26:[2,24],29:[2,24],36:[2,24],40:[2,24],53:[2,24]},{16:[2,25],24:[2,25],26:[2,25],29:[2,25],36:[1,43],40:[2,25],53:[2,25]},{27:[1,44]},{27:[1,45]},{26:[1,48],29:[1,49],31:46,33:47},{10:[2,41],16:[2,41],40:[2,41],53:[2,41]},{10:[2,42],16:[2,42],40:[2,42],53:[2,42]},{16:[2,36],24:[2,36],26:[2,36],29:[2,36],36:[2,36],40:[2,36],53:[2,36]},{43:[1,52],45:50,48:51},{5:[2,18],10:[2,18],19:[2,18],21:[2,18],37:[2,18],42:[2,18]},{16:[1,53],22:41,24:[1,23],25:24,26:[1,25],29:[1,26],36:[1,30]},{17:54,38:19,39:22,40:[1,28],41:29,53:[1,31]},{35:[1,56],44:[1,55]},{5:[2,13],10:[2,13],19:[2,13],21:[2,13],37:[2,13],42:[2,13]},{6:58,9:57,11:4,12:5,13:6,14:7,15:8,19:[1,12],20:9,21:[1,13],37:[1,10],42:[1,11]},{5:[2,12],10:[2,12],19:[2,12],21:[2,12],37:[2,12],42:[2,12]},{5:[2,14],7:59,8:[1,37],10:[2,14],19:[2,14],21:[2,14],37:[2,14],42:[2,14]},{16:[1,60]},{16:[2,21],24:[2,21],26:[2,21],29:[2,21],36:[2,21],40:[2,21],53:[2,21]},{10:[2,39],16:[2,39],40:[2,39],53:[2,39]},{16:[2,35],24:[2,35],26:[2,35],29:[2,35],36:[2,35],40:[2,35],53:[2,35]},{28:[1,61]},{28:[1,62]},{26:[1,48],29:[1,49],32:[1,63],33:64},{26:[2,30],29:[2,30],32:[2,30]},{27:[1,65]},{27:[1,66]},{47:[1,68],54:[1,67]},{46:[2,47],47:[2,47],51:[2,47],52:[2,47],54:[2,47]},{46:[2,48],47:[2,48],49:[1,69],51:[2,48],52:[2,48],54:[2,48]},{5:[2,19],10:[2,19],19:[2,19],21:[2,19],37:[2,19],42:[2,19]},{10:[1,70]},{43:[1,52],45:71,48:51},{43:[1,72]},{6:74,10:[1,73],11:4,12:5,13:6,14:7,15:8,19:[1,12],20:9,21:[1,13],37:[1,10],42:[1,11]},{10:[2,6],19:[2,6],21:[2,6],37:[2,6],42:[2,6]},{5:[2,16],10:[2,16],19:[2,16],21:[2,16],37:[2,16],42:[2,16]},{5:[2,15],10:[2,15],19:[2,15],21:[2,15],37:[2,15],42:[2,15]},{16:[2,26],24:[2,26],26:[2,26],29:[2,26],36:[2,26],40:[2,26],53:[2,26]},{16:[2,27],24:[2,27],26:[2,27],29:[2,27],36:[2,27],40:[2,27],53:[2,27]},{16:[2,28],24:[2,28],26:[2,28],29:[2,28],36:[2,28],40:[2,28],53:[2,28]},{26:[2,29],29:[2,29],32:[2,29]},{34:[1,75]},{34:[1,76]},{10:[2,55],16:[2,55],40:[2,55],53:[2,55]},{43:[1,52],48:77},{43:[1,52],45:79,48:51,50:[1,78]},{5:[2,37],10:[2,37],19:[2,37],21:[2,37],37:[2,37],42:[2,37]},{46:[1,80],47:[1,68]},{35:[1,82],44:[1,81]},{5:[2,4],10:[2,4],19:[2,4],21:[2,4],37:[2,4],42:[2,4]},{10:[2,5],19:[2,5],21:[2,5],37:[2,5],42:[2,5]},{26:[2,31],29:[2,31],32:[2,31],35:[1,83]},{26:[2,33],29:[2,33],32:[2,33],35:[1,84]},{46:[2,46],47:[2,46],51:[2,46],52:[2,46],54:[2,46]},{51:[1,85],52:[1,86]},{47:[1,68],51:[1,87],52:[1,88]},{7:89,8:[1,37]},{43:[1,52],45:90,48:51},{43:[1,91]},{26:[2,32],29:[2,32],32:[2,32]},{26:[2,34],29:[2,34],32:[2,34]},{46:[2,49],47:[2,49],51:[2,49],52:[2,49],54:[2,49]},{43:[1,52],45:93,48:51,50:[1,92]},{46:[2,50],47:[2,50],51:[2,50],52:[2,50],54:[2,50]},{43:[1,52],45:95,48:51,50:[1,94]},{5:[2,43],10:[2,43],19:[2,43],21:[2,43],37:[2,43],42:[2,43]},{46:[1,96],47:[1,68]},{44:[1,97]},{51:[1,98]},{47:[1,68],51:[1,99]},{51:[1,100]},{47:[1,68],51:[1,101]},{7:102,8:[1,37]},{43:[1,52],45:103,48:51},{46:[2,51],47:[2,51],51:[2,51],52:[2,51],54:[2,51]},{46:[2,52],47:[2,52],51:[2,52],52:[2,52],54:[2,52]},{46:[2,53],47:[2,53],51:[2,53],52:[2,53],54:[2,53]},{46:[2,54],47:[2,54],51:[2,54],52:[2,54],54:[2,54]},{5:[2,44],10:[2,44],19:[2,44],21:[2,44],37:[2,44],42:[2,44]},{46:[1,104],47:[1,68]},{7:105,8:[1,37]},{5:[2,45],10:[2,45],19:[2,45],21:[2,45],37:[2,45],42:[2,45]}],
defaultActions: {14:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
 
  function strip(start, end) {
    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.pushState("comment"); /* ignore */ 
break;
case 1:this.popState(); /* ignore */ 
break;
case 2:/* ignore */
break;
case 3:/* ignore */
break;
case 4:this.pushState("tag"); return "TAG";
break;
case 5:this.pushState("tag"); yy_.yytext = yy_.yytext.slice(1); return "VOID_TAG";
break;
case 6:this.popState(); return "END_TAG";
break;
case 7:yy_.yytext = yy_.yytext.slice(1); return "TAG_ID";
break;
case 8:yy_.yytext = yy_.yytext.slice(1); return "TAG_CLASS";
break;
case 9:this.pushState("tagargs"); return "LPAREN";
break;
case 10:this.popState(); return "RPAREN";
break;
case 11:/* ignore */
break;
case 12:/* ignore */
break;
case 13:return "EQ";
break;
case 14:return "COMMA";
break;
case 15:return "TAG_ATTR";
break;
case 16:yy_.yytext = "data-" + yy_.yytext.slice(1); return "TAG_DATA_ATTR";
break;
case 17:yy_.yytext = strip(1,2).replace(/\\"/g, '"'); return "STRING";
break;
case 18:this.pushState("filter"); yy_.yytext = yy_.yytext.slice(1); return "FILTER";
break;
case 19:this.pushState("expr"); return "FOR";
break;
case 20:this.pushState("expr"); return "IF";
break;
case 21:this.pushState("expr"); return "ELSE";
break;
case 22:this.popState(); return "END_EXPR";
break;
case 23:return "IN";
break;
case 24:return "COMMA";
break;
case 25:this.pushState("name"); return "LBRACE";
break;
case 26:this.popState(); return "RBRACE"
break;
case 27:return "ID";
break;
case 28:return "DOT";
break;
case 29:return "LBRACK";
break;
case 30:return "RBRACK";
break;
case 31:return "COLON"; 
break;
case 32:return "INT";
break;
case 33:return "WORD";
break;
case 34:return 5;
break;
case 35:
  var tokens = [];
  while (0 < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }
  if (tokens.length) return tokens;

break;
case 36:/* eat blank lines */
break;
case 37:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;
  if (indentation > _indent_stack[0]) {
    _indent_stack.unshift(indentation);
    return 8;
  }
  var tokens = [];
  while (indentation < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }
  if (tokens.length) return tokens;

break;
case 38:/* ignore all other whitespace */
break;
}
},
rules: [/^(?:""")/,/^(?:""")/,/^(?:.+)/,/^(?:\n)/,/^(?:([a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)))/,/^(?:(?=\n))/,/^(?:(#[a-zA-Z][a-zA-Z0-9\-\:_]*))/,/^(?:(\.-?[_a-zA-Z]+[_a-zA-Z0-9\-]*(?=["."\s\n])))/,/^(?:\()/,/^(?:\))/,/^(?:\s)/,/^(?:\n)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z][a-zA-Z0-9\-_]*(?==)))/,/^(?:(\*[a-zA-Z][a-zA-Z0-9\-]*(?==)))/,/^(?:(('(\\'|[^"'"])*')|("(\\"|[^'"'])*")))/,/^(?::([a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:%for\b)/,/^(?:%if\b)/,/^(?:%else\b)/,/^(?:(?=\n))/,/^(?:in\b)/,/^(?:,)/,/^(?:@\{)/,/^(?:\})/,/^(?:([a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:(\+|-)?(0|[1-9][0-9]*))/,/^(?:((?!\$\{)[^\s\n][^\s\n]*))/,/^(?:$)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"comment":{"rules":[1,2,3,34,36,38],"inclusive":true},"tag":{"rules":[6,7,8,9,25,33,34,36,38],"inclusive":true},"tagargs":{"rules":[10,11,12,13,14,15,16,17,34,36,38],"inclusive":true},"filter":{"rules":[33,34,35,36,37,38],"inclusive":true},"expr":{"rules":[22,23,24,27,28,29,30,31,32,34,36,38],"inclusive":true},"name":{"rules":[26,27,28,29,30,31,32,34,36,38],"inclusive":true},"INITIAL":{"rules":[0,4,5,18,19,20,21,25,33,34,35,36,37,38],"inclusive":true}}
};
_indent_stack = [0];;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = manana_parser;
exports.Parser = manana_parser.Parser;
exports.parse = function () { return manana_parser.parse.apply(manana_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}