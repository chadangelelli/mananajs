/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var manana_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"prog_list":4,"EOF":5,"stmt":6,"stmt_block":7,"INDENT":8,"stmt_list":9,"DEDENT":10,"tag_stmt":11,"void_tag_stmt":12,"for_stmt":13,"text":14,"fn":15,"tag":16,"END_TAG":17,"tag_attrs":18,"tag_text":19,"TAG":20,"void_tag":21,"VOID_TAG":22,"tag_attr":23,"TAG_ID":24,"tag_classes":25,"TAG_ATTR":26,"EQ":27,"string":28,"TAG_DATA_ATTR":29,"tag_class":30,"TAG_CLASS":31,"TAG_TEXT":32,"FOR":33,"id":34,"IN":35,"END_EXPR":36,"COMMA":37,"FN":38,"END_FN":39,"fn_args":40,"fn_arg":41,"path":42,"DOT":43,"path_el":44,"ID":45,"TEXT":46,"STRING":47,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",10:"DEDENT",17:"END_TAG",20:"TAG",22:"VOID_TAG",24:"TAG_ID",26:"TAG_ATTR",27:"EQ",29:"TAG_DATA_ATTR",31:"TAG_CLASS",32:"TAG_TEXT",33:"FOR",35:"IN",36:"END_EXPR",37:"COMMA",38:"FN",39:"END_FN",43:"DOT",45:"ID",46:"TEXT",47:"STRING"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[9,2],[9,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,2],[11,3],[11,3],[11,4],[11,3],[11,4],[11,4],[11,5],[16,1],[12,2],[12,3],[21,1],[18,2],[18,1],[23,1],[23,1],[23,3],[23,3],[25,2],[25,1],[30,1],[19,1],[13,6],[13,8],[13,10],[15,2],[15,3],[40,3],[40,1],[41,1],[41,1],[42,3],[42,1],[44,1],[14,1],[34,1],[28,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: 
      console.log("\n\n==>\n", JSON.stringify($$[$0-1],null, "\t"));
      console.log("\n\n==>%j\n", $$[$0-1]); 
      return $$[$0-1];
    
break;
case 2: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0-1]; 
break;
case 5: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 6: this.$ = [$$[$0]]; 
break;
case 12: this.$ = $$[$0-1]; 
break;
case 13: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 14: this.$ = $$[$0-2]; this.$[1].push.apply(this.$[1], $$[$0-1]); 
break;
case 15: this.$ = $$[$0-3]; this.$[1].push.apply(this.$[1], $$[$0-2]); this.$.push($$[$0]); 
break;
case 16: this.$ = $$[$0-2]; this.$.push([$$[$0-1]]); 
break;
case 17: this.$ = $$[$0-3]; this.$[1].push.apply(this.$[1], $$[$0-2]); this.$.push([$$[$0-1]]); 
break;
case 18: 
                                                this.$ = $$[$0-3]; 
                                                var a = [$$[$0-2]];
                                                a.push.apply(a, $$[$0]);
                                                this.$.push(a);
                                              
break;
case 19: 
                                                this.$ = $$[$0-4]; 
                                                this.$[1].push.apply(this.$[1], $$[$0-3]); 
                                                var a = [$$[$0-2]];
                                                a.push.apply(a, $$[$0]);
                                                this.$.push(a);
                                              
break;
case 20: this.$ = ['TAG', [['NAME', $$[$0].slice(1)]]]; 
break;
case 21: this.$ = $$[$0-1]; 
break;
case 22: this.$ = $$[$0-2]; this.$[1].push.apply(this.$[1], $$[$0-1]); 
break;
case 23: this.$ = ['VOID_TAG', [['NAME', $$[$0].slice(1)]]]; 
break;
case 24: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 25: this.$ = [$$[$0]]; 
break;
case 26: this.$ = ['ID', $$[$0].slice(1)]; 
break;
case 27: this.$ = $$[$0]; 
break;
case 28: this.$ = ['ATTR', $$[$0-2], $$[$0]]; 
break;
case 29: this.$ = ['DATA', $$[$0-2].slice(1), $$[$0]]; 
break;
case 30: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 31: this.$ = ['CLASS', $$[$0]]; 
break;
case 32: this.$ = $$[$0].slice(1); 
break;
case 33: this.$ = ['TEXT', $$[$0].replace(/^\s\s*/, '').replace('~', '')]; 
break;
case 34: this.$ = ['FOR', [$$[$0-4], $$[$0-2]], $$[$0]]; 
break;
case 35: this.$ = ['FOR', [$$[$0-6], $$[$0-4], $$[$0-2]], $$[$0]]; 
break;
case 36: this.$ = ['FOR', [$$[$0-8], $$[$0-6], $$[$0-4], $$[$0-2]], $$[$0]]; 
break;
case 37: this.$ = ['FN', $$[$0-1].slice(1, $$[$0-1].length-1)]; 
break;
case 38: 
      var fn = ['FN', $$[$0-2].slice(1, $$[$0-2].length-1), $$[$0-1]];
      if ( ! fn[1].length) {
        fn[1] = '@';
      }
      this.$ = fn;
    
break;
case 39: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 40: this.$ = ['ARGS', $$[$0]]; 
break;
case 43: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 44: this.$ = ['PATH', $$[$0]]; 
break;
case 45: this.$ = $$[$0]; 
break;
case 46: this.$ = ['TEXT', $$[$0]]; 
break;
case 47: this.$ = ['ID', $$[$0]]; 
break;
case 48: this.$ = $$[$0].slice(1, $$[$0].length-1); 
break;
}
},
table: [{3:1,4:2,6:3,11:4,12:5,13:6,14:7,15:8,16:9,20:[1,14],21:10,22:[1,15],33:[1,11],38:[1,13],46:[1,12]},{1:[3]},{5:[1,16],6:17,11:4,12:5,13:6,14:7,15:8,16:9,20:[1,14],21:10,22:[1,15],33:[1,11],38:[1,13],46:[1,12]},{5:[2,3],20:[2,3],22:[2,3],33:[2,3],38:[2,3],46:[2,3]},{5:[2,7],10:[2,7],20:[2,7],22:[2,7],33:[2,7],38:[2,7],46:[2,7]},{5:[2,8],10:[2,8],20:[2,8],22:[2,8],33:[2,8],38:[2,8],46:[2,8]},{5:[2,9],10:[2,9],20:[2,9],22:[2,9],33:[2,9],38:[2,9],46:[2,9]},{5:[2,10],10:[2,10],20:[2,10],22:[2,10],33:[2,10],38:[2,10],46:[2,10]},{5:[2,11],10:[2,11],20:[2,11],22:[2,11],33:[2,11],38:[2,11],46:[2,11]},{17:[1,18],18:19,19:20,23:21,24:[1,23],25:24,26:[1,25],29:[1,26],30:27,31:[1,28],32:[1,22]},{17:[1,29],18:30,23:21,24:[1,23],25:24,26:[1,25],29:[1,26],30:27,31:[1,28]},{34:31,45:[1,32]},{5:[2,46],10:[2,46],20:[2,46],22:[2,46],33:[2,46],38:[2,46],46:[2,46]},{28:37,39:[1,33],40:34,41:35,42:36,44:38,45:[1,40],47:[1,39]},{17:[2,20],24:[2,20],26:[2,20],29:[2,20],31:[2,20],32:[2,20]},{17:[2,23],24:[2,23],26:[2,23],29:[2,23],31:[2,23]},{1:[2,1]},{5:[2,2],20:[2,2],22:[2,2],33:[2,2],38:[2,2],46:[2,2]},{5:[2,12],7:41,8:[1,42],10:[2,12],20:[2,12],22:[2,12],33:[2,12],38:[2,12],46:[2,12]},{17:[1,43],19:44,23:45,24:[1,23],25:24,26:[1,25],29:[1,26],30:27,31:[1,28],32:[1,22]},{17:[1,46]},{17:[2,25],24:[2,25],26:[2,25],29:[2,25],31:[2,25],32:[2,25]},{17:[2,33]},{17:[2,26],24:[2,26],26:[2,26],29:[2,26],31:[2,26],32:[2,26]},{17:[2,27],24:[2,27],26:[2,27],29:[2,27],30:47,31:[1,28],32:[2,27]},{27:[1,48]},{27:[1,49]},{17:[2,31],24:[2,31],26:[2,31],29:[2,31],31:[2,31],32:[2,31]},{17:[2,32],24:[2,32],26:[2,32],29:[2,32],31:[2,32],32:[2,32]},{5:[2,21],10:[2,21],20:[2,21],22:[2,21],33:[2,21],38:[2,21],46:[2,21]},{17:[1,50],23:45,24:[1,23],25:24,26:[1,25],29:[1,26],30:27,31:[1,28]},{35:[1,51],37:[1,52]},{35:[2,47],36:[2,47],37:[2,47]},{5:[2,37],10:[2,37],20:[2,37],22:[2,37],33:[2,37],38:[2,37],46:[2,37]},{37:[1,54],39:[1,53]},{37:[2,40],39:[2,40]},{37:[2,41],39:[2,41],43:[1,55]},{37:[2,42],39:[2,42]},{37:[2,44],39:[2,44],43:[2,44]},{17:[2,48],24:[2,48],26:[2,48],29:[2,48],31:[2,48],32:[2,48],37:[2,48],39:[2,48]},{37:[2,45],39:[2,45],43:[2,45]},{5:[2,13],10:[2,13],20:[2,13],22:[2,13],33:[2,13],38:[2,13],46:[2,13]},{6:57,9:56,11:4,12:5,13:6,14:7,15:8,16:9,20:[1,14],21:10,22:[1,15],33:[1,11],38:[1,13],46:[1,12]},{5:[2,14],7:58,8:[1,42],10:[2,14],20:[2,14],22:[2,14],33:[2,14],38:[2,14],46:[2,14]},{17:[1,59]},{17:[2,24],24:[2,24],26:[2,24],29:[2,24],31:[2,24],32:[2,24]},{5:[2,16],7:60,8:[1,42],10:[2,16],20:[2,16],22:[2,16],33:[2,16],38:[2,16],46:[2,16]},{17:[2,30],24:[2,30],26:[2,30],29:[2,30],31:[2,30],32:[2,30]},{28:61,47:[1,39]},{28:62,47:[1,39]},{5:[2,22],10:[2,22],20:[2,22],22:[2,22],33:[2,22],38:[2,22],46:[2,22]},{34:63,45:[1,32]},{34:64,45:[1,32]},{5:[2,38],10:[2,38],20:[2,38],22:[2,38],33:[2,38],38:[2,38],46:[2,38]},{28:37,41:65,42:36,44:38,45:[1,40],47:[1,39]},{44:66,45:[1,40]},{6:68,10:[1,67],11:4,12:5,13:6,14:7,15:8,16:9,20:[1,14],21:10,22:[1,15],33:[1,11],38:[1,13],46:[1,12]},{10:[2,6],20:[2,6],22:[2,6],33:[2,6],38:[2,6],46:[2,6]},{5:[2,15],10:[2,15],20:[2,15],22:[2,15],33:[2,15],38:[2,15],46:[2,15]},{5:[2,17],7:69,8:[1,42],10:[2,17],20:[2,17],22:[2,17],33:[2,17],38:[2,17],46:[2,17]},{5:[2,18],10:[2,18],20:[2,18],22:[2,18],33:[2,18],38:[2,18],46:[2,18]},{17:[2,28],24:[2,28],26:[2,28],29:[2,28],31:[2,28],32:[2,28]},{17:[2,29],24:[2,29],26:[2,29],29:[2,29],31:[2,29],32:[2,29]},{36:[1,70]},{35:[1,71],37:[1,72]},{37:[2,39],39:[2,39]},{37:[2,43],39:[2,43],43:[2,43]},{5:[2,4],10:[2,4],20:[2,4],22:[2,4],33:[2,4],38:[2,4],46:[2,4]},{10:[2,5],20:[2,5],22:[2,5],33:[2,5],38:[2,5],46:[2,5]},{5:[2,19],10:[2,19],20:[2,19],22:[2,19],33:[2,19],38:[2,19],46:[2,19]},{7:73,8:[1,42]},{34:74,45:[1,32]},{34:75,45:[1,32]},{5:[2,34],10:[2,34],20:[2,34],22:[2,34],33:[2,34],38:[2,34],46:[2,34]},{36:[1,76]},{35:[1,77]},{7:78,8:[1,42]},{34:79,45:[1,32]},{5:[2,35],10:[2,35],20:[2,35],22:[2,35],33:[2,35],38:[2,35],46:[2,35]},{36:[1,80]},{7:81,8:[1,42]},{5:[2,36],10:[2,36],20:[2,36],22:[2,36],33:[2,36],38:[2,36],46:[2,36]}],
defaultActions: {16:[2,1],22:[2,33]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.begin('tag'); return 22;
break;
case 1:this.begin('tag'); return 20;
break;
case 2:return 24;
break;
case 3:return 31
break;
case 4:return 26;
break;
case 5:return 29;
break;
case 6:return 32;
break;
case 7:this.popState(); return 17;
break;
case 8:this.begin('expr'); return 33;
break;
case 9:this.begin('expr'); return 'CASE';
break;
case 10:this.begin('expr'); return 'IF';
break;
case 11:return 35;
break;
case 12:return 'ELSE';
break;
case 13:return 45;
break;
case 14:return 37;
break;
case 15:this.popState(); return 36;
break;
case 16:return 46;
break;
case 17:return 5;
break;
case 18:
  var tokens = [];
  while (0 < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }
  if (tokens.length) return tokens;

break;
case 19:/* eat blank lines */
break;
case 20:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;
  if (indentation > _indent_stack[0]) {
    _indent_stack.unshift(indentation);
    return 8;
  }
  var tokens = [];
  while (indentation < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }
  if (tokens.length) return tokens;

break;
case 21:/* ignore all other whitespace */
break;
}
},
rules: [/^(?:(%(area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)))/,/^(?:(%[a-zA-Z][a-zA-Z0-9]*))/,/^(?:(#[a-zA-Z][a-zA-Z0-9\-\.\:_]*))/,/^(?:(\.-?[_a-zA-Z]+[_a-zA-Z0-9\-]*(?=["."\s\n])))/,/^(?:([a-zA-Z][a-zA-Z0-9\-_]*(?==)))/,/^(?:(\*[a-zA-Z][a-zA-Z0-9\-]*(?==)))/,/^(?:~.+)/,/^(?:(?=\n))/,/^(?::for\b)/,/^(?::case\b)/,/^(?::if\b)/,/^(?:in\b)/,/^(?::else\b)/,/^(?:@?([a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:,)/,/^(?:(?=\n))/,/^(?:.+)/,/^(?:$)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"tag":{"rules":[0,1,2,3,4,5,6,7,8,9,10,17,19,21],"inclusive":true},"expr":{"rules":[0,1,8,9,10,11,12,13,14,15,17,19,21],"inclusive":true},"INITIAL":{"rules":[0,1,8,9,10,16,17,18,19,20,21],"inclusive":true}}
};
_indent_stack = [0];;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = manana_parser;
exports.Parser = manana_parser.Parser;
exports.parse = function () { return manana_parser.parse.apply(manana_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}