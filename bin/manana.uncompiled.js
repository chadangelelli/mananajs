/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var manana_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"prog_list":4,"EOF":5,"stmt":6,"block":7,"INDENT":8,"stmt_list":9,"DEDENT":10,"html_stmt":11,"void_tag_stmt":12,"code_tag_stmt":13,"tag_stmt":14,"filter_stmt":15,"alias_stmt":16,"unalias_stmt":17,"include_stmt":18,"with_stmt":19,"if_stmt":20,"switch_stmt":21,"for_stmt":22,"name":23,"fn":24,"break":25,"continue":26,"HTML":27,"i_html":28,"I_HTML_START":29,"i_html_text":30,"I_HTML_END":31,"i_html_text_el":32,"I_HTML_TEXT":33,"void_tag":34,"END_TAG":35,"tag_attrs":36,"VOID_TAG":37,"CODE_TAG":38,"END_CODE_TAG":39,"code":40,"line":41,"LINE":42,"BLANK_LINE":43,"tag":44,"text":45,"TAG":46,"tag_attr":47,"tag_attr_args":48,"TAG_ID":49,"TAG_SRC":50,"TAG_SRC_I_STRING":51,"string":52,"tag_classes":53,"TAG_ATTR":54,"EQ":55,"TAG_DATA_ATTR":56,"LPAREN":57,"tag_attr_arg_list":58,"RPAREN":59,"LBRACE":60,"tag_attr_arg_list_alt":61,"RBRACE":62,"tag_attr_arg":63,"COMMA":64,"tag_attr_arg_alt":65,"COLON":66,"TAG_CLASS":67,"FILTER":68,"word_list":69,"word":70,"WORD":71,"SPACE":72,"path_or_fn":73,"path":74,"WITH":75,"END_EXPR":76,"FOR":77,"ID":78,"IN":79,"BREAK":80,"CONTINUE":81,"ifs":82,"if":83,"else":84,"elifs":85,"IF":86,"conds":87,"elif":88,"ELIF":89,"cond":90,"AND":91,"OR":92,"ev":93,"NOT":94,"COND":95,"IS":96,"TYPE":97,"EXISTS":98,"ELSE":99,"INT":100,"BOOL":101,"CASE":102,"cases":103,"case":104,"WHEN":105,"ALIAS":106,"AS":107,"UNALIAS":108,"INCLUDE":109,"id":110,"DOT":111,"meths":112,"LBRACK":113,"RBRACK":114,"meth":115,"meth_args":116,"meth_arg":117,"FN":118,"fn_args":119,"fn_arg":120,"hash":121,"hash_data":122,"hash_pair":123,"hash_val":124,"START_NAME":125,"STRING":126,"i_string":127,"I_STRING_D":128,"i_string_text":129,"END_I_STRING_D":130,"I_STRING_S":131,"END_I_STRING_S":132,"i_string_text_el":133,"I_STRING_TEXT":134,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",10:"DEDENT",27:"HTML",29:"I_HTML_START",31:"I_HTML_END",33:"I_HTML_TEXT",35:"END_TAG",37:"VOID_TAG",38:"CODE_TAG",39:"END_CODE_TAG",42:"LINE",43:"BLANK_LINE",46:"TAG",49:"TAG_ID",50:"TAG_SRC",51:"TAG_SRC_I_STRING",54:"TAG_ATTR",55:"EQ",56:"TAG_DATA_ATTR",57:"LPAREN",59:"RPAREN",60:"LBRACE",62:"RBRACE",64:"COMMA",66:"COLON",67:"TAG_CLASS",68:"FILTER",71:"WORD",72:"SPACE",75:"WITH",76:"END_EXPR",77:"FOR",78:"ID",79:"IN",80:"BREAK",81:"CONTINUE",86:"IF",89:"ELIF",91:"AND",92:"OR",94:"NOT",95:"COND",96:"IS",97:"TYPE",98:"EXISTS",99:"ELSE",100:"INT",101:"BOOL",102:"CASE",105:"WHEN",106:"ALIAS",107:"AS",108:"UNALIAS",109:"INCLUDE",111:"DOT",113:"LBRACK",114:"RBRACK",118:"FN",125:"START_NAME",126:"STRING",128:"I_STRING_D",130:"END_I_STRING_D",131:"I_STRING_S",132:"END_I_STRING_S",134:"I_STRING_TEXT"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,3],[9,2],[9,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,1],[11,1],[28,3],[30,2],[30,1],[32,1],[32,1],[12,2],[12,3],[34,1],[13,4],[13,5],[40,2],[40,1],[41,2],[41,1],[14,2],[14,3],[14,3],[14,3],[14,4],[14,4],[44,1],[36,2],[36,1],[36,1],[47,1],[47,1],[47,2],[47,1],[47,3],[47,3],[48,3],[48,3],[58,2],[58,1],[63,3],[63,4],[63,3],[63,4],[61,2],[61,1],[65,3],[65,4],[65,3],[65,4],[53,2],[53,1],[15,4],[45,1],[69,1],[69,2],[70,1],[70,1],[70,1],[70,1],[70,1],[73,1],[73,1],[19,4],[22,6],[22,6],[25,1],[26,1],[20,1],[82,1],[82,2],[82,2],[82,3],[83,4],[85,2],[85,1],[88,4],[87,1],[87,3],[87,3],[90,1],[90,2],[90,3],[90,3],[90,4],[90,3],[90,4],[90,2],[90,3],[84,3],[93,1],[93,1],[93,1],[93,1],[93,1],[21,6],[21,7],[103,1],[103,2],[104,4],[16,5],[17,3],[18,3],[18,3],[74,1],[74,3],[74,3],[110,1],[110,4],[110,6],[110,6],[110,4],[110,6],[110,6],[110,5],[110,5],[110,4],[112,1],[112,3],[115,3],[115,4],[116,3],[116,1],[117,1],[117,1],[117,1],[24,3],[24,4],[119,3],[119,1],[120,1],[120,1],[120,1],[120,1],[120,1],[120,1],[120,1],[120,3],[120,3],[120,3],[120,3],[120,3],[120,3],[120,3],[121,3],[121,4],[122,3],[122,1],[123,3],[124,1],[124,1],[124,1],[124,1],[124,1],[124,1],[23,3],[52,1],[52,1],[127,3],[127,3],[129,2],[129,1],[133,1],[133,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0-1]; 
break;
case 6: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = [$$[$0]]; 
break;
case 24: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 26: 
      var body = [$$[$0-2]];
      body.push.apply(body, $$[$0-1]);
      body.push($$[$0]);
      this.$ = new MananaStringNode(body, new Loc(_$[$0-2], _$[$0])); 
    
break;
case 27: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 28: this.$ = [$$[$0]]; 
break;
case 31: this.$ = new VoidTagNode($$[$0-1], null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 32: this.$ = new VoidTagNode($$[$0-2], $$[$0-1],   new Loc(_$[$0-2], _$[$0-1])); 
break;
case 33: this.$ = $$[$0]; 
break;
case 34: this.$ = new CodeTagNode($$[$0-3], null, $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 35: this.$ = new CodeTagNode($$[$0-4], $$[$0-3],   $$[$0-1], new Loc(_$[$0-4], _$[$0-1])); 
break;
case 36: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 37: this.$ = [$$[$0]]; 
break;
case 38: this.$ = $$[$0-1] + $$[$0] 
break;
case 39: this.$ = ''; 
break;
case 40: this.$ = new TagNode($$[$0-1], null, null, null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 41: this.$ = new TagNode($$[$0-2], null, $$[$0-1],   null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 42: this.$ = new TagNode($$[$0-2], null, null, $$[$0],   new Loc(_$[$0-2], _$[$0])); 
break;
case 43: this.$ = new TagNode($$[$0-2], $$[$0-1],   null, null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 44: this.$ = new TagNode($$[$0-3], $$[$0-2],   $$[$0-1],   null, new Loc(_$[$0-3], _$[$0-1])); 
break;
case 45: this.$ = new TagNode($$[$0-3], $$[$0-2],   null, $$[$0],   new Loc(_$[$0-3], _$[$0])); 
break;
case 46: this.$ = $$[$0]; 
break;
case 47: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 48: this.$ = [$$[$0]]; 
break;
case 49: this.$ = $$[$0]; 
break;
case 50: this.$ = ['id', $$[$0]]; 
break;
case 51: this.$ = ['src', new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])) ]; 
break;
case 52: this.$ = ['src', $$[$0]]; 
break;
case 53: this.$ = ['class', $$[$0].join(" ")]; 
break;
case 54: this.$ = ['attr', $$[$0-2], $$[$0]]; 
break;
case 55: this.$ = ['data', $$[$0-2], $$[$0]]; 
break;
case 56: this.$ = $$[$0-1]; 
break;
case 57: this.$ = $$[$0-1]; 
break;
case 58: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 59: this.$ = [$$[$0]]; 
break;
case 60: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 61: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 62: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 63: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 64: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 65: this.$ = [$$[$0]]; 
break;
case 66: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 67: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 68: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 69: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 70: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 71: this.$ = [$$[$0]]; 
break;
case 72: this.$ = new FilterNode($$[$0-3], $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 73: this.$ = new TextNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 74: this.$ = [$$[$0]]; 
break;
case 75: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 83: this.$ = new WithNode($$[$0-2], $$[$0], new Loc(_$[$0-3], _$[$0])); 
break;
case 84: this.$ = new ForNode($$[$0-4], $$[$0-2], $$[$0], new Loc(_$[$0-5], _$[$0])); 
break;
case 85: this.$ = new ForNode($$[$0-4], $$[$0-2], $$[$0], new Loc(_$[$0-5], _$[$0])); 
break;
case 86: this.$ = new BreakNode(new Loc(_$[$0], _$[$0])); 
break;
case 87: this.$ = new ContinueNode(new Loc(_$[$0], _$[$0])); 
break;
case 88: this.$ = new IfNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 89: this.$ = [$$[$0]]; 
break;
case 90: this.$ = [$$[$0-1], $$[$0]]; 
break;
case 91: this.$ = [$$[$0-1]]; this.$.push.apply(this.$, $$[$0]); 
break;
case 92: this.$ = [$$[$0-2]]; this.$.push.apply(this.$, $$[$0-1]); this.$.push($$[$0]); 
break;
case 93: this.$ = { "case": $$[$0-3], conditions: $$[$0-2], body: $$[$0] }; 
break;
case 94: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 95: this.$ = [$$[$0]]; 
break;
case 96: this.$ = { "case": $$[$0-3], conditions: $$[$0-2], body: $$[$0] }; 
break;
case 97: this.$ = [[null,  $$[$0]]]; 
break;
case 98: this.$ = $$[$0-2]; this.$.push([$$[$0-1], $$[$0]]); 
break;
case 99: this.$ = $$[$0-2]; this.$.push([$$[$0-1], $$[$0]]); 
break;
case 100: this.$ = ["true", $$[$0]]; 
break;
case 101: this.$ = ["not_true", $$[$0-1]]; 
break;
case 102: this.$ = [$$[$0-1], $$[$0-2], $$[$0]]; 
break;
case 103: this.$ = [$$[$0-1], $$[$0-2], $$[$0]]; 
break;
case 104: this.$ = ["not_is", $$[$0-3], $$[$0]]; 
break;
case 105: this.$ = [$$[$0-1], $$[$0-2], $$[$0]]; 
break;
case 106: this.$ = ["not_in", $$[$0-3], $$[$0]]; 
break;
case 107: this.$ = [$$[$0-1], $$[$0]]; 
break;
case 108: this.$ = ["not_exists", $$[$0-1]]; 
break;
case 109: this.$ = { "case": $$[$0-2], "body": $$[$0] }; 
break;
case 115: this.$ = new SwitchNode($$[$0-4], $$[$0-1], null   , new Loc(_$[$0-5], _$[$0])); 
break;
case 116: this.$ = new SwitchNode($$[$0-5], $$[$0-2], $$[$0-1].body, new Loc(_$[$0-6], _$[$0])); 
break;
case 117: this.$ = [$$[$0]]; 
break;
case 118: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 119: this.$ = { value: $$[$0-2], block: $$[$0] }; 
break;
case 120: this.$ = new AliasNode($$[$0-3], $$[$0-1], new Loc(_$[$0-4], _$[$0])); 
break;
case 121: this.$ = new UnaliasNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 122: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 123: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 124: this.$ = new PathNode(null, $$[$0]  , null, new Loc(_$[$0], _$[$0])); 
break;
case 125: this.$ = new PathNode($$[$0-2]  , $$[$0]  , null, new Loc(_$[$0-2], _$[$0])); 
break;
case 126: this.$ = new PathNode($$[$0-2]  , null, $$[$0]  , new Loc(_$[$0-2], _$[$0])); 
break;
case 127: this.$ = new IdNode($$[$0], null, null, new Loc(_$[$0], _$[$0])); 
break;
case 128: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 129: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 130: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 131: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 132: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 133: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 134: this.$ = new IdNode($$[$0-4], 0   , $$[$0-1]  , new Loc(_$[$0-4], _$[$0])); 
break;
case 135: this.$ = new IdNode($$[$0-4], $$[$0-2]  , '*' , new Loc(_$[$0-4], _$[$0])); 
break;
case 136: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 137: this.$ = new MethodChainNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 138: this.$ = $$[$0-2]; this.$.chain.push($$[$0])                        ; 
break;
case 139: this.$ = new MethodNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 140: this.$ = new MethodNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 141: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 142: this.$ = [$$[$0]]; 
break;
case 146: this.$ = new FunctionNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 147: this.$ = new FunctionNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 148: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 149: this.$ = [$$[$0]]; 
break;
case 157: this.$ = $$[$0]; 
break;
case 158: this.$ = $$[$0]; 
break;
case 159: this.$ = $$[$0]; 
break;
case 160: this.$ = $$[$0]; 
break;
case 161: this.$ = $$[$0]; 
break;
case 162: this.$ = $$[$0]; 
break;
case 163: this.$ = $$[$0]; 
break;
case 164: this.$ = new MananaHash($$[$0-1]); 
break;
case 165: this.$ = new MananaHash($$[$0-2]); 
break;
case 166: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 167: this.$ = [$$[$0]]; 
break;
case 168: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 175: this.$ = $$[$0-1]; 
break;
case 176: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 178: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 179: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 180: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 181: this.$ = [$$[$0]]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,21],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:[1,22],28:23,29:[1,39],34:24,37:[1,40],38:[1,25],44:26,46:[1,41],68:[1,27],75:[1,31],77:[1,34],80:[1,37],81:[1,38],82:32,83:42,86:[1,43],102:[1,33],106:[1,28],108:[1,29],109:[1,30],118:[1,36],125:[1,35]},{1:[3]},{5:[1,44],6:45,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:[1,22],28:23,29:[1,39],34:24,37:[1,40],38:[1,25],44:26,46:[1,41],68:[1,27],75:[1,31],77:[1,34],80:[1,37],81:[1,38],82:32,83:42,86:[1,43],102:[1,33],106:[1,28],108:[1,29],109:[1,30],118:[1,36],125:[1,35]},{5:[2,3],27:[2,3],29:[2,3],37:[2,3],38:[2,3],46:[2,3],68:[2,3],75:[2,3],77:[2,3],80:[2,3],81:[2,3],86:[2,3],102:[2,3],106:[2,3],108:[2,3],109:[2,3],118:[2,3],125:[2,3]},{5:[2,4],27:[2,4],29:[2,4],37:[2,4],38:[2,4],46:[2,4],68:[2,4],75:[2,4],77:[2,4],80:[2,4],81:[2,4],86:[2,4],102:[2,4],106:[2,4],108:[2,4],109:[2,4],118:[2,4],125:[2,4]},{5:[2,8],10:[2,8],27:[2,8],29:[2,8],37:[2,8],38:[2,8],46:[2,8],68:[2,8],75:[2,8],77:[2,8],80:[2,8],81:[2,8],86:[2,8],102:[2,8],106:[2,8],108:[2,8],109:[2,8],118:[2,8],125:[2,8]},{5:[2,9],10:[2,9],27:[2,9],29:[2,9],37:[2,9],38:[2,9],46:[2,9],68:[2,9],75:[2,9],77:[2,9],80:[2,9],81:[2,9],86:[2,9],102:[2,9],106:[2,9],108:[2,9],109:[2,9],118:[2,9],125:[2,9]},{5:[2,10],10:[2,10],27:[2,10],29:[2,10],37:[2,10],38:[2,10],46:[2,10],68:[2,10],75:[2,10],77:[2,10],80:[2,10],81:[2,10],86:[2,10],102:[2,10],106:[2,10],108:[2,10],109:[2,10],118:[2,10],125:[2,10]},{5:[2,11],10:[2,11],27:[2,11],29:[2,11],37:[2,11],38:[2,11],46:[2,11],68:[2,11],75:[2,11],77:[2,11],80:[2,11],81:[2,11],86:[2,11],102:[2,11],106:[2,11],108:[2,11],109:[2,11],118:[2,11],125:[2,11]},{5:[2,12],10:[2,12],27:[2,12],29:[2,12],37:[2,12],38:[2,12],46:[2,12],68:[2,12],75:[2,12],77:[2,12],80:[2,12],81:[2,12],86:[2,12],102:[2,12],106:[2,12],108:[2,12],109:[2,12],118:[2,12],125:[2,12]},{5:[2,13],10:[2,13],27:[2,13],29:[2,13],37:[2,13],38:[2,13],46:[2,13],68:[2,13],75:[2,13],77:[2,13],80:[2,13],81:[2,13],86:[2,13],102:[2,13],106:[2,13],108:[2,13],109:[2,13],118:[2,13],125:[2,13]},{5:[2,14],10:[2,14],27:[2,14],29:[2,14],37:[2,14],38:[2,14],46:[2,14],68:[2,14],75:[2,14],77:[2,14],80:[2,14],81:[2,14],86:[2,14],102:[2,14],106:[2,14],108:[2,14],109:[2,14],118:[2,14],125:[2,14]},{5:[2,15],10:[2,15],27:[2,15],29:[2,15],37:[2,15],38:[2,15],46:[2,15],68:[2,15],75:[2,15],77:[2,15],80:[2,15],81:[2,15],86:[2,15],102:[2,15],106:[2,15],108:[2,15],109:[2,15],118:[2,15],125:[2,15]},{5:[2,16],10:[2,16],27:[2,16],29:[2,16],37:[2,16],38:[2,16],46:[2,16],68:[2,16],75:[2,16],77:[2,16],80:[2,16],81:[2,16],86:[2,16],102:[2,16],106:[2,16],108:[2,16],109:[2,16],118:[2,16],125:[2,16]},{5:[2,17],10:[2,17],27:[2,17],29:[2,17],37:[2,17],38:[2,17],46:[2,17],68:[2,17],75:[2,17],77:[2,17],80:[2,17],81:[2,17],86:[2,17],102:[2,17],106:[2,17],108:[2,17],109:[2,17],118:[2,17],125:[2,17]},{5:[2,18],10:[2,18],27:[2,18],29:[2,18],37:[2,18],38:[2,18],46:[2,18],68:[2,18],75:[2,18],77:[2,18],80:[2,18],81:[2,18],86:[2,18],102:[2,18],106:[2,18],108:[2,18],109:[2,18],118:[2,18],125:[2,18]},{5:[2,19],10:[2,19],27:[2,19],29:[2,19],37:[2,19],38:[2,19],46:[2,19],68:[2,19],75:[2,19],77:[2,19],80:[2,19],81:[2,19],86:[2,19],102:[2,19],106:[2,19],108:[2,19],109:[2,19],118:[2,19],125:[2,19]},{5:[2,20],10:[2,20],27:[2,20],29:[2,20],37:[2,20],38:[2,20],46:[2,20],68:[2,20],75:[2,20],77:[2,20],80:[2,20],81:[2,20],86:[2,20],102:[2,20],106:[2,20],108:[2,20],109:[2,20],118:[2,20],125:[2,20]},{5:[2,21],10:[2,21],27:[2,21],29:[2,21],37:[2,21],38:[2,21],46:[2,21],68:[2,21],75:[2,21],77:[2,21],80:[2,21],81:[2,21],86:[2,21],102:[2,21],106:[2,21],108:[2,21],109:[2,21],118:[2,21],125:[2,21]},{5:[2,22],10:[2,22],27:[2,22],29:[2,22],37:[2,22],38:[2,22],46:[2,22],68:[2,22],75:[2,22],77:[2,22],80:[2,22],81:[2,22],86:[2,22],102:[2,22],106:[2,22],108:[2,22],109:[2,22],118:[2,22],125:[2,22]},{5:[2,23],10:[2,23],27:[2,23],29:[2,23],37:[2,23],38:[2,23],46:[2,23],68:[2,23],75:[2,23],77:[2,23],80:[2,23],81:[2,23],86:[2,23],102:[2,23],106:[2,23],108:[2,23],109:[2,23],118:[2,23],125:[2,23]},{6:47,9:46,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:[1,22],28:23,29:[1,39],34:24,37:[1,40],38:[1,25],44:26,46:[1,41],68:[1,27],75:[1,31],77:[1,34],80:[1,37],81:[1,38],82:32,83:42,86:[1,43],102:[1,33],106:[1,28],108:[1,29],109:[1,30],118:[1,36],125:[1,35]},{5:[2,24],10:[2,24],27:[2,24],29:[2,24],37:[2,24],38:[2,24],46:[2,24],68:[2,24],75:[2,24],77:[2,24],80:[2,24],81:[2,24],86:[2,24],102:[2,24],106:[2,24],108:[2,24],109:[2,24],118:[2,24],125:[2,24]},{5:[2,25],10:[2,25],27:[2,25],29:[2,25],37:[2,25],38:[2,25],46:[2,25],68:[2,25],75:[2,25],77:[2,25],80:[2,25],81:[2,25],86:[2,25],102:[2,25],106:[2,25],108:[2,25],109:[2,25],118:[2,25],125:[2,25]},{35:[1,48],36:49,47:50,48:51,49:[1,52],50:[1,53],51:[1,54],53:55,54:[1,56],56:[1,57],57:[1,58],60:[1,59],67:[1,60]},{36:62,39:[1,61],47:50,48:51,49:[1,52],50:[1,53],51:[1,54],53:55,54:[1,56],56:[1,57],57:[1,58],60:[1,59],67:[1,60]},{23:69,24:70,35:[1,63],36:65,45:64,47:50,48:51,49:[1,52],50:[1,53],51:[1,54],52:71,53:55,54:[1,56],56:[1,57],57:[1,58],60:[1,59],67:[1,60],69:66,70:67,71:[1,68],72:[1,72],118:[1,36],125:[1,35],126:[1,73],127:74,128:[1,75],131:[1,76]},{8:[1,77]},{24:80,73:78,74:79,78:[1,82],110:81,118:[1,36]},{78:[1,83]},{52:84,74:85,78:[1,82],110:81,126:[1,73],127:74,128:[1,75],131:[1,76]},{74:86,78:[1,82],110:81},{5:[2,88],10:[2,88],27:[2,88],29:[2,88],37:[2,88],38:[2,88],46:[2,88],68:[2,88],75:[2,88],77:[2,88],80:[2,88],81:[2,88],86:[2,88],102:[2,88],106:[2,88],108:[2,88],109:[2,88],118:[2,88],125:[2,88]},{24:92,52:88,74:91,78:[1,82],93:87,100:[1,89],101:[1,90],110:81,118:[1,36],126:[1,73],127:74,128:[1,75],131:[1,76]},{78:[1,93]},{74:94,78:[1,82],110:81},{57:[1,95]},{5:[2,86],10:[2,86],27:[2,86],29:[2,86],37:[2,86],38:[2,86],46:[2,86],68:[2,86],75:[2,86],77:[2,86],80:[2,86],81:[2,86],86:[2,86],102:[2,86],106:[2,86],108:[2,86],109:[2,86],118:[2,86],125:[2,86]},{5:[2,87],10:[2,87],27:[2,87],29:[2,87],37:[2,87],38:[2,87],46:[2,87],68:[2,87],75:[2,87],77:[2,87],80:[2,87],81:[2,87],86:[2,87],102:[2,87],106:[2,87],108:[2,87],109:[2,87],118:[2,87],125:[2,87]},{23:99,30:96,32:97,33:[1,98],125:[1,35]},{35:[2,33],49:[2,33],50:[2,33],51:[2,33],54:[2,33],56:[2,33],57:[2,33],60:[2,33],67:[2,33]},{35:[2,46],49:[2,46],50:[2,46],51:[2,46],54:[2,46],56:[2,46],57:[2,46],60:[2,46],67:[2,46],71:[2,46],72:[2,46],118:[2,46],125:[2,46],126:[2,46],128:[2,46],131:[2,46]},{5:[2,89],10:[2,89],27:[2,89],29:[2,89],37:[2,89],38:[2,89],46:[2,89],68:[2,89],75:[2,89],77:[2,89],80:[2,89],81:[2,89],84:100,85:101,86:[2,89],88:103,89:[1,104],99:[1,102],102:[2,89],106:[2,89],108:[2,89],109:[2,89],118:[2,89],125:[2,89]},{24:92,52:88,74:91,78:[1,82],87:105,90:106,93:107,94:[1,108],98:[1,109],100:[1,89],101:[1,90],110:81,118:[1,36],126:[1,73],127:74,128:[1,75],131:[1,76]},{1:[2,1]},{5:[2,2],27:[2,2],29:[2,2],37:[2,2],38:[2,2],46:[2,2],68:[2,2],75:[2,2],77:[2,2],80:[2,2],81:[2,2],86:[2,2],102:[2,2],106:[2,2],108:[2,2],109:[2,2],118:[2,2],125:[2,2]},{6:111,10:[1,110],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:[1,22],28:23,29:[1,39],34:24,37:[1,40],38:[1,25],44:26,46:[1,41],68:[1,27],75:[1,31],77:[1,34],80:[1,37],81:[1,38],82:32,83:42,86:[1,43],102:[1,33],106:[1,28],108:[1,29],109:[1,30],118:[1,36],125:[1,35]},{10:[2,7],27:[2,7],29:[2,7],37:[2,7],38:[2,7],46:[2,7],68:[2,7],75:[2,7],77:[2,7],80:[2,7],81:[2,7],86:[2,7],102:[2,7],106:[2,7],108:[2,7],109:[2,7],118:[2,7],125:[2,7]},{5:[2,31],10:[2,31],27:[2,31],29:[2,31],37:[2,31],38:[2,31],46:[2,31],68:[2,31],75:[2,31],77:[2,31],80:[2,31],81:[2,31],86:[2,31],102:[2,31],106:[2,31],108:[2,31],109:[2,31],118:[2,31],125:[2,31]},{35:[1,112],47:113,49:[1,52],50:[1,53],51:[1,54],53:55,54:[1,56],56:[1,57],67:[1,60]},{35:[2,48],39:[2,48],49:[2,48],50:[2,48],51:[2,48],54:[2,48],56:[2,48],67:[2,48],71:[2,48],72:[2,48],118:[2,48],125:[2,48],126:[2,48],128:[2,48],131:[2,48]},{35:[2,49],39:[2,49],49:[2,49],50:[2,49],51:[2,49],54:[2,49],56:[2,49],67:[2,49],71:[2,49],72:[2,49],118:[2,49],125:[2,49],126:[2,49],128:[2,49],131:[2,49]},{35:[2,50],39:[2,50],49:[2,50],50:[2,50],51:[2,50],54:[2,50],56:[2,50],67:[2,50],71:[2,50],72:[2,50],118:[2,50],125:[2,50],126:[2,50],128:[2,50],131:[2,50]},{35:[2,51],39:[2,51],49:[2,51],50:[2,51],51:[2,51],54:[2,51],56:[2,51],67:[2,51],71:[2,51],72:[2,51],118:[2,51],125:[2,51],126:[2,51],128:[2,51],131:[2,51]},{52:114,126:[1,73],127:74,128:[1,75],131:[1,76]},{35:[2,53],39:[2,53],49:[2,53],50:[2,53],51:[2,53],54:[2,53],56:[2,53],67:[1,115],71:[2,53],72:[2,53],118:[2,53],125:[2,53],126:[2,53],128:[2,53],131:[2,53]},{55:[1,116]},{55:[1,117]},{54:[1,120],56:[1,121],58:118,63:119},{54:[1,124],56:[1,125],61:122,65:123},{35:[2,71],39:[2,71],49:[2,71],50:[2,71],51:[2,71],54:[2,71],56:[2,71],67:[2,71],71:[2,71],72:[2,71],118:[2,71],125:[2,71],126:[2,71],128:[2,71],131:[2,71]},{8:[1,128],40:126,41:127,43:[1,129]},{39:[1,130],47:113,49:[1,52],50:[1,53],51:[1,54],53:55,54:[1,56],56:[1,57],67:[1,60]},{5:[2,40],7:131,8:[1,21],10:[2,40],27:[2,40],29:[2,40],37:[2,40],38:[2,40],46:[2,40],68:[2,40],75:[2,40],77:[2,40],80:[2,40],81:[2,40],86:[2,40],102:[2,40],106:[2,40],108:[2,40],109:[2,40],118:[2,40],125:[2,40]},{35:[1,132]},{23:69,24:70,35:[1,133],45:134,47:113,49:[1,52],50:[1,53],51:[1,54],52:71,53:55,54:[1,56],56:[1,57],67:[1,60],69:66,70:67,71:[1,68],72:[1,72],118:[1,36],125:[1,35],126:[1,73],127:74,128:[1,75],131:[1,76]},{10:[2,73],23:69,24:70,35:[2,73],52:71,70:135,71:[1,68],72:[1,72],118:[1,36],125:[1,35],126:[1,73],127:74,128:[1,75],131:[1,76]},{10:[2,74],35:[2,74],71:[2,74],72:[2,74],118:[2,74],125:[2,74],126:[2,74],128:[2,74],131:[2,74]},{10:[2,76],35:[2,76],71:[2,76],72:[2,76],118:[2,76],125:[2,76],126:[2,76],128:[2,76],131:[2,76]},{10:[2,77],35:[2,77],71:[2,77],72:[2,77],118:[2,77],125:[2,77],126:[2,77],128:[2,77],131:[2,77]},{10:[2,78],35:[2,78],71:[2,78],72:[2,78],118:[2,78],125:[2,78],126:[2,78],128:[2,78],131:[2,78]},{10:[2,79],35:[2,79],71:[2,79],72:[2,79],118:[2,79],125:[2,79],126:[2,79],128:[2,79],131:[2,79]},{10:[2,80],35:[2,80],71:[2,80],72:[2,80],118:[2,80],125:[2,80],126:[2,80],128:[2,80],131:[2,80]},{10:[2,176],35:[2,176],39:[2,176],49:[2,176],50:[2,176],51:[2,176],54:[2,176],56:[2,176],59:[2,176],62:[2,176],64:[2,176],67:[2,176],71:[2,176],72:[2,176],76:[2,176],79:[2,176],91:[2,176],92:[2,176],94:[2,176],95:[2,176],96:[2,176],114:[2,176],118:[2,176],125:[2,176],126:[2,176],128:[2,176],131:[2,176]},{10:[2,177],35:[2,177],39:[2,177],49:[2,177],50:[2,177],51:[2,177],54:[2,177],56:[2,177],59:[2,177],62:[2,177],64:[2,177],67:[2,177],71:[2,177],72:[2,177],76:[2,177],79:[2,177],91:[2,177],92:[2,177],94:[2,177],95:[2,177],96:[2,177],114:[2,177],118:[2,177],125:[2,177],126:[2,177],128:[2,177],131:[2,177]},{23:138,125:[1,35],129:136,133:137,134:[1,139]},{23:138,125:[1,35],129:140,133:137,134:[1,139]},{23:69,24:70,45:141,52:71,69:66,70:67,71:[1,68],72:[1,72],118:[1,36],125:[1,35],126:[1,73],127:74,128:[1,75],131:[1,76]},{107:[1,142]},{107:[2,81],111:[1,143]},{107:[2,82]},{59:[2,124],62:[2,124],64:[2,124],66:[2,124],76:[2,124],79:[2,124],91:[2,124],92:[2,124],94:[2,124],95:[2,124],96:[2,124],107:[2,124],111:[2,124],114:[2,124]},{59:[2,127],62:[2,127],64:[2,127],66:[2,127],76:[2,127],79:[2,127],91:[2,127],92:[2,127],94:[2,127],95:[2,127],96:[2,127],107:[2,127],111:[2,127],113:[1,144],114:[2,127]},{76:[1,145]},{76:[1,146]},{76:[1,147],111:[1,143]},{76:[1,148],111:[1,143]},{76:[1,149]},{76:[2,110],79:[2,110],91:[2,110],92:[2,110],94:[2,110],95:[2,110],96:[2,110]},{76:[2,111],79:[2,111],91:[2,111],92:[2,111],94:[2,111],95:[2,111],96:[2,111]},{76:[2,112],79:[2,112],91:[2,112],92:[2,112],94:[2,112],95:[2,112],96:[2,112]},{76:[2,113],79:[2,113],91:[2,113],92:[2,113],94:[2,113],95:[2,113],96:[2,113],111:[1,143]},{76:[2,114],79:[2,114],91:[2,114],92:[2,114],94:[2,114],95:[2,114],96:[2,114]},{79:[1,150]},{62:[1,151],111:[1,143]},{24:158,52:157,59:[1,152],60:[1,163],74:155,78:[1,162],97:[1,161],100:[1,156],101:[1,160],110:81,118:[1,36],119:153,120:154,121:159,126:[1,73],127:74,128:[1,75],131:[1,76]},{23:99,31:[1,164],32:165,33:[1,98],125:[1,35]},{31:[2,28],33:[2,28],125:[2,28]},{31:[2,29],33:[2,29],125:[2,29]},{31:[2,30],33:[2,30],125:[2,30]},{5:[2,90],10:[2,90],27:[2,90],29:[2,90],37:[2,90],38:[2,90],46:[2,90],68:[2,90],75:[2,90],77:[2,90],80:[2,90],81:[2,90],86:[2,90],102:[2,90],106:[2,90],108:[2,90],109:[2,90],118:[2,90],125:[2,90]},{5:[2,91],10:[2,91],27:[2,91],29:[2,91],37:[2,91],38:[2,91],46:[2,91],68:[2,91],75:[2,91],77:[2,91],80:[2,91],81:[2,91],84:166,86:[2,91],88:167,89:[1,104],99:[1,102],102:[2,91],106:[2,91],108:[2,91],109:[2,91],118:[2,91],125:[2,91]},{76:[1,168]},{5:[2,95],10:[2,95],27:[2,95],29:[2,95],37:[2,95],38:[2,95],46:[2,95],68:[2,95],75:[2,95],77:[2,95],80:[2,95],81:[2,95],86:[2,95],89:[2,95],99:[2,95],102:[2,95],106:[2,95],108:[2,95],109:[2,95],118:[2,95],125:[2,95]},{24:92,52:88,74:91,78:[1,82],87:169,90:106,93:107,94:[1,108],98:[1,109],100:[1,89],101:[1,90],110:81,118:[1,36],126:[1,73],127:74,128:[1,75],131:[1,76]},{76:[1,170],91:[1,171],92:[1,172]},{76:[2,97],91:[2,97],92:[2,97]},{76:[2,100],79:[1,176],91:[2,100],92:[2,100],94:[1,175],95:[1,173],96:[1,174]},{24:92,52:88,74:91,78:[1,82],93:177,98:[1,178],100:[1,89],101:[1,90],110:81,118:[1,36],126:[1,73],127:74,128:[1,75],131:[1,76]},{24:92,52:88,74:91,78:[1,82],93:179,100:[1,89],101:[1,90],110:81,118:[1,36],126:[1,73],127:74,128:[1,75],131:[1,76]},{5:[2,5],10:[2,5],27:[2,5],29:[2,5],37:[2,5],38:[2,5],46:[2,5],68:[2,5],75:[2,5],77:[2,5],80:[2,5],81:[2,5],86:[2,5],89:[2,5],99:[2,5],102:[2,5],105:[2,5],106:[2,5],108:[2,5],109:[2,5],118:[2,5],125:[2,5]},{10:[2,6],27:[2,6],29:[2,6],37:[2,6],38:[2,6],46:[2,6],68:[2,6],75:[2,6],77:[2,6],80:[2,6],81:[2,6],86:[2,6],102:[2,6],106:[2,6],108:[2,6],109:[2,6],118:[2,6],125:[2,6]},{5:[2,32],10:[2,32],27:[2,32],29:[2,32],37:[2,32],38:[2,32],46:[2,32],68:[2,32],75:[2,32],77:[2,32],80:[2,32],81:[2,32],86:[2,32],102:[2,32],106:[2,32],108:[2,32],109:[2,32],118:[2,32],125:[2,32]},{35:[2,47],39:[2,47],49:[2,47],50:[2,47],51:[2,47],54:[2,47],56:[2,47],67:[2,47],71:[2,47],72:[2,47],118:[2,47],125:[2,47],126:[2,47],128:[2,47],131:[2,47]},{35:[2,52],39:[2,52],49:[2,52],50:[2,52],51:[2,52],54:[2,52],56:[2,52],67:[2,52],71:[2,52],72:[2,52],118:[2,52],125:[2,52],126:[2,52],128:[2,52],131:[2,52]},{35:[2,70],39:[2,70],49:[2,70],50:[2,70],51:[2,70],54:[2,70],56:[2,70],67:[2,70],71:[2,70],72:[2,70],118:[2,70],125:[2,70],126:[2,70],128:[2,70],131:[2,70]},{52:180,126:[1,73],127:74,128:[1,75],131:[1,76]},{52:181,126:[1,73],127:74,128:[1,75],131:[1,76]},{54:[1,120],56:[1,121],59:[1,182],63:183},{54:[2,59],56:[2,59],59:[2,59]},{55:[1,184]},{55:[1,185]},{54:[1,124],56:[1,125],62:[1,186],65:187},{54:[2,65],56:[2,65],62:[2,65]},{66:[1,188]},{66:[1,189]},{8:[1,128],10:[1,190],41:191,43:[1,129]},{8:[2,37],10:[2,37],43:[2,37]},{42:[1,192]},{8:[2,39],10:[2,39],43:[2,39]},{8:[1,128],40:193,41:127,43:[1,129]},{5:[2,42],10:[2,42],27:[2,42],29:[2,42],37:[2,42],38:[2,42],46:[2,42],68:[2,42],75:[2,42],77:[2,42],80:[2,42],81:[2,42],86:[2,42],102:[2,42],106:[2,42],108:[2,42],109:[2,42],118:[2,42],125:[2,42]},{5:[2,41],10:[2,41],27:[2,41],29:[2,41],37:[2,41],38:[2,41],46:[2,41],68:[2,41],75:[2,41],77:[2,41],80:[2,41],81:[2,41],86:[2,41],102:[2,41],106:[2,41],108:[2,41],109:[2,41],118:[2,41],125:[2,41]},{5:[2,43],7:194,8:[1,21],10:[2,43],27:[2,43],29:[2,43],37:[2,43],38:[2,43],46:[2,43],68:[2,43],75:[2,43],77:[2,43],80:[2,43],81:[2,43],86:[2,43],102:[2,43],106:[2,43],108:[2,43],109:[2,43],118:[2,43],125:[2,43]},{35:[1,195]},{10:[2,75],35:[2,75],71:[2,75],72:[2,75],118:[2,75],125:[2,75],126:[2,75],128:[2,75],131:[2,75]},{23:138,125:[1,35],130:[1,196],133:197,134:[1,139]},{125:[2,181],130:[2,181],132:[2,181],134:[2,181]},{125:[2,182],130:[2,182],132:[2,182],134:[2,182]},{125:[2,183],130:[2,183],132:[2,183],134:[2,183]},{23:138,125:[1,35],132:[1,198],133:197,134:[1,139]},{10:[1,199]},{78:[1,200]},{78:[1,203],110:201,112:202,115:204},{52:208,66:[1,207],74:206,78:[1,82],100:[1,205],110:81,126:[1,73],127:74,128:[1,75],131:[1,76]},{5:[2,121],10:[2,121],27:[2,121],29:[2,121],37:[2,121],38:[2,121],46:[2,121],68:[2,121],75:[2,121],77:[2,121],80:[2,121],81:[2,121],86:[2,121],102:[2,121],106:[2,121],108:[2,121],109:[2,121],118:[2,121],125:[2,121]},{5:[2,122],10:[2,122],27:[2,122],29:[2,122],37:[2,122],38:[2,122],46:[2,122],68:[2,122],75:[2,122],77:[2,122],80:[2,122],81:[2,122],86:[2,122],102:[2,122],106:[2,122],108:[2,122],109:[2,122],118:[2,122],125:[2,122]},{5:[2,123],10:[2,123],27:[2,123],29:[2,123],37:[2,123],38:[2,123],46:[2,123],68:[2,123],75:[2,123],77:[2,123],80:[2,123],81:[2,123],86:[2,123],102:[2,123],106:[2,123],108:[2,123],109:[2,123],118:[2,123],125:[2,123]},{7:209,8:[1,21]},{8:[1,210]},{52:212,74:211,78:[1,82],110:81,126:[1,73],127:74,128:[1,75],131:[1,76]},{5:[2,175],10:[2,175],27:[2,175],29:[2,175],31:[2,175],33:[2,175],35:[2,175],37:[2,175],38:[2,175],46:[2,175],68:[2,175],71:[2,175],72:[2,175],75:[2,175],77:[2,175],80:[2,175],81:[2,175],86:[2,175],102:[2,175],106:[2,175],108:[2,175],109:[2,175],118:[2,175],125:[2,175],126:[2,175],128:[2,175],130:[2,175],131:[2,175],132:[2,175],134:[2,175]},{5:[2,146],10:[2,146],27:[2,146],29:[2,146],35:[2,146],37:[2,146],38:[2,146],46:[2,146],59:[2,146],62:[2,146],64:[2,146],68:[2,146],71:[2,146],72:[2,146],75:[2,146],76:[2,146],77:[2,146],79:[2,146],80:[2,146],81:[2,146],86:[2,146],91:[2,146],92:[2,146],94:[2,146],95:[2,146],96:[2,146],102:[2,146],106:[2,146],107:[2,146],108:[2,146],109:[2,146],118:[2,146],125:[2,146],126:[2,146],128:[2,146],131:[2,146]},{59:[1,213],64:[1,214]},{59:[2,149],64:[2,149]},{59:[2,150],64:[2,150],111:[1,143]},{59:[2,151],64:[2,151]},{59:[2,152],64:[2,152]},{59:[2,153],64:[2,153]},{59:[2,154],64:[2,154]},{59:[2,155],64:[2,155]},{59:[2,156],64:[2,156]},{55:[1,215],59:[2,127],64:[2,127],111:[2,127],113:[1,144]},{78:[1,218],122:216,123:217},{5:[2,26],10:[2,26],27:[2,26],29:[2,26],37:[2,26],38:[2,26],46:[2,26],68:[2,26],75:[2,26],77:[2,26],80:[2,26],81:[2,26],86:[2,26],102:[2,26],106:[2,26],108:[2,26],109:[2,26],118:[2,26],125:[2,26]},{31:[2,27],33:[2,27],125:[2,27]},{5:[2,92],10:[2,92],27:[2,92],29:[2,92],37:[2,92],38:[2,92],46:[2,92],68:[2,92],75:[2,92],77:[2,92],80:[2,92],81:[2,92],86:[2,92],102:[2,92],106:[2,92],108:[2,92],109:[2,92],118:[2,92],125:[2,92]},{5:[2,94],10:[2,94],27:[2,94],29:[2,94],37:[2,94],38:[2,94],46:[2,94],68:[2,94],75:[2,94],77:[2,94],80:[2,94],81:[2,94],86:[2,94],89:[2,94],99:[2,94],102:[2,94],106:[2,94],108:[2,94],109:[2,94],118:[2,94],125:[2,94]},{7:219,8:[1,21]},{76:[1,220],91:[1,171],92:[1,172]},{7:221,8:[1,21]},{24:92,52:88,74:91,78:[1,82],90:222,93:107,94:[1,108],98:[1,109],100:[1,89],101:[1,90],110:81,118:[1,36],126:[1,73],127:74,128:[1,75],131:[1,76]},{24:92,52:88,74:91,78:[1,82],90:223,93:107,94:[1,108],98:[1,109],100:[1,89],101:[1,90],110:81,118:[1,36],126:[1,73],127:74,128:[1,75],131:[1,76]},{24:92,52:88,74:91,78:[1,82],93:224,100:[1,89],101:[1,90],110:81,118:[1,36],126:[1,73],127:74,128:[1,75],131:[1,76]},{97:[1,225]},{79:[1,227],96:[1,226]},{24:92,52:88,74:91,78:[1,82],93:228,100:[1,89],101:[1,90],110:81,118:[1,36],126:[1,73],127:74,128:[1,75],131:[1,76]},{76:[2,101],91:[2,101],92:[2,101]},{24:92,52:88,74:91,78:[1,82],93:229,100:[1,89],101:[1,90],110:81,118:[1,36],126:[1,73],127:74,128:[1,75],131:[1,76]},{76:[2,107],91:[2,107],92:[2,107]},{35:[2,54],39:[2,54],49:[2,54],50:[2,54],51:[2,54],54:[2,54],56:[2,54],67:[2,54],71:[2,54],72:[2,54],118:[2,54],125:[2,54],126:[2,54],128:[2,54],131:[2,54]},{35:[2,55],39:[2,55],49:[2,55],50:[2,55],51:[2,55],54:[2,55],56:[2,55],67:[2,55],71:[2,55],72:[2,55],118:[2,55],125:[2,55],126:[2,55],128:[2,55],131:[2,55]},{35:[2,56],39:[2,56],49:[2,56],50:[2,56],51:[2,56],54:[2,56],56:[2,56],67:[2,56],71:[2,56],72:[2,56],118:[2,56],125:[2,56],126:[2,56],128:[2,56],131:[2,56]},{54:[2,58],56:[2,58],59:[2,58]},{52:230,126:[1,73],127:74,128:[1,75],131:[1,76]},{52:231,126:[1,73],127:74,128:[1,75],131:[1,76]},{35:[2,57],39:[2,57],49:[2,57],50:[2,57],51:[2,57],54:[2,57],56:[2,57],67:[2,57],71:[2,57],72:[2,57],118:[2,57],125:[2,57],126:[2,57],128:[2,57],131:[2,57]},{54:[2,64],56:[2,64],62:[2,64]},{52:232,126:[1,73],127:74,128:[1,75],131:[1,76]},{52:233,126:[1,73],127:74,128:[1,75],131:[1,76]},{5:[2,34],10:[2,34],27:[2,34],29:[2,34],37:[2,34],38:[2,34],46:[2,34],68:[2,34],75:[2,34],77:[2,34],80:[2,34],81:[2,34],86:[2,34],102:[2,34],106:[2,34],108:[2,34],109:[2,34],118:[2,34],125:[2,34]},{8:[2,36],10:[2,36],43:[2,36]},{8:[2,38],10:[2,38],43:[2,38]},{8:[1,128],10:[1,234],41:191,43:[1,129]},{5:[2,45],10:[2,45],27:[2,45],29:[2,45],37:[2,45],38:[2,45],46:[2,45],68:[2,45],75:[2,45],77:[2,45],80:[2,45],81:[2,45],86:[2,45],102:[2,45],106:[2,45],108:[2,45],109:[2,45],118:[2,45],125:[2,45]},{5:[2,44],10:[2,44],27:[2,44],29:[2,44],37:[2,44],38:[2,44],46:[2,44],68:[2,44],75:[2,44],77:[2,44],80:[2,44],81:[2,44],86:[2,44],102:[2,44],106:[2,44],108:[2,44],109:[2,44],118:[2,44],125:[2,44]},{10:[2,178],35:[2,178],39:[2,178],49:[2,178],50:[2,178],51:[2,178],54:[2,178],56:[2,178],59:[2,178],62:[2,178],64:[2,178],67:[2,178],71:[2,178],72:[2,178],76:[2,178],79:[2,178],91:[2,178],92:[2,178],94:[2,178],95:[2,178],96:[2,178],114:[2,178],118:[2,178],125:[2,178],126:[2,178],128:[2,178],131:[2,178]},{125:[2,180],130:[2,180],132:[2,180],134:[2,180]},{10:[2,179],35:[2,179],39:[2,179],49:[2,179],50:[2,179],51:[2,179],54:[2,179],56:[2,179],59:[2,179],62:[2,179],64:[2,179],67:[2,179],71:[2,179],72:[2,179],76:[2,179],79:[2,179],91:[2,179],92:[2,179],94:[2,179],95:[2,179],96:[2,179],114:[2,179],118:[2,179],125:[2,179],126:[2,179],128:[2,179],131:[2,179]},{5:[2,72],10:[2,72],27:[2,72],29:[2,72],37:[2,72],38:[2,72],46:[2,72],68:[2,72],75:[2,72],77:[2,72],80:[2,72],81:[2,72],86:[2,72],102:[2,72],106:[2,72],108:[2,72],109:[2,72],118:[2,72],125:[2,72]},{76:[1,235]},{59:[2,125],62:[2,125],64:[2,125],66:[2,125],76:[2,125],79:[2,125],91:[2,125],92:[2,125],94:[2,125],95:[2,125],96:[2,125],107:[2,125],111:[2,125],114:[2,125]},{59:[2,126],62:[2,126],64:[2,126],66:[2,126],76:[2,126],79:[2,126],91:[2,126],92:[2,126],94:[2,126],95:[2,126],96:[2,126],107:[2,126],111:[1,236],114:[2,126]},{57:[1,237],59:[2,127],62:[2,127],64:[2,127],66:[2,127],76:[2,127],79:[2,127],91:[2,127],92:[2,127],94:[2,127],95:[2,127],96:[2,127],107:[2,127],111:[2,127],113:[1,144],114:[2,127]},{59:[2,137],62:[2,137],64:[2,137],66:[2,137],76:[2,137],79:[2,137],91:[2,137],92:[2,137],94:[2,137],95:[2,137],96:[2,137],107:[2,137],111:[2,137],114:[2,137]},{66:[1,239],114:[1,238]},{66:[1,241],111:[1,143],114:[1,240]},{100:[1,242]},{114:[1,243]},{5:[2,83],10:[2,83],27:[2,83],29:[2,83],37:[2,83],38:[2,83],46:[2,83],68:[2,83],75:[2,83],77:[2,83],80:[2,83],81:[2,83],86:[2,83],102:[2,83],106:[2,83],108:[2,83],109:[2,83],118:[2,83],125:[2,83]},{103:244,104:245,105:[1,246]},{76:[1,247],111:[1,143]},{76:[1,248]},{5:[2,147],10:[2,147],27:[2,147],29:[2,147],35:[2,147],37:[2,147],38:[2,147],46:[2,147],59:[2,147],62:[2,147],64:[2,147],68:[2,147],71:[2,147],72:[2,147],75:[2,147],76:[2,147],77:[2,147],79:[2,147],80:[2,147],81:[2,147],86:[2,147],91:[2,147],92:[2,147],94:[2,147],95:[2,147],96:[2,147],102:[2,147],106:[2,147],107:[2,147],108:[2,147],109:[2,147],118:[2,147],125:[2,147],126:[2,147],128:[2,147],131:[2,147]},{24:158,52:157,60:[1,163],74:155,78:[1,162],97:[1,161],100:[1,156],101:[1,160],110:81,118:[1,36],120:249,121:159,126:[1,73],127:74,128:[1,75],131:[1,76]},{24:253,52:252,60:[1,163],74:250,78:[1,82],97:[1,256],100:[1,251],101:[1,255],110:81,118:[1,36],121:254,126:[1,73],127:74,128:[1,75],131:[1,76]},{62:[1,257],64:[1,258]},{62:[2,167],64:[2,167]},{66:[1,259]},{5:[2,109],10:[2,109],27:[2,109],29:[2,109],37:[2,109],38:[2,109],46:[2,109],68:[2,109],75:[2,109],77:[2,109],80:[2,109],81:[2,109],86:[2,109],102:[2,109],106:[2,109],108:[2,109],109:[2,109],118:[2,109],125:[2,109]},{7:260,8:[1,21]},{5:[2,93],10:[2,93],27:[2,93],29:[2,93],37:[2,93],38:[2,93],46:[2,93],68:[2,93],75:[2,93],77:[2,93],80:[2,93],81:[2,93],86:[2,93],89:[2,93],99:[2,93],102:[2,93],106:[2,93],108:[2,93],109:[2,93],118:[2,93],125:[2,93]},{76:[2,98],91:[2,98],92:[2,98]},{76:[2,99],91:[2,99],92:[2,99]},{76:[2,102],91:[2,102],92:[2,102]},{76:[2,103],91:[2,103],92:[2,103]},{97:[1,261]},{24:92,52:88,74:91,78:[1,82],93:262,100:[1,89],101:[1,90],110:81,118:[1,36],126:[1,73],127:74,128:[1,75],131:[1,76]},{76:[2,105],91:[2,105],92:[2,105]},{76:[2,108],91:[2,108],92:[2,108]},{54:[2,60],56:[2,60],59:[2,60],64:[1,263]},{54:[2,62],56:[2,62],59:[2,62],64:[1,264]},{54:[2,66],56:[2,66],62:[2,66],64:[1,265]},{54:[2,68],56:[2,68],62:[2,68],64:[1,266]},{5:[2,35],10:[2,35],27:[2,35],29:[2,35],37:[2,35],38:[2,35],46:[2,35],68:[2,35],75:[2,35],77:[2,35],80:[2,35],81:[2,35],86:[2,35],102:[2,35],106:[2,35],108:[2,35],109:[2,35],118:[2,35],125:[2,35]},{5:[2,120],10:[2,120],27:[2,120],29:[2,120],37:[2,120],38:[2,120],46:[2,120],68:[2,120],75:[2,120],77:[2,120],80:[2,120],81:[2,120],86:[2,120],102:[2,120],106:[2,120],108:[2,120],109:[2,120],118:[2,120],125:[2,120]},{78:[1,268],115:267},{52:274,59:[1,269],74:272,78:[1,82],100:[1,273],110:81,116:270,117:271,126:[1,73],127:74,128:[1,75],131:[1,76]},{59:[2,128],62:[2,128],64:[2,128],66:[2,128],76:[2,128],79:[2,128],91:[2,128],92:[2,128],94:[2,128],95:[2,128],96:[2,128],107:[2,128],111:[2,128],114:[2,128]},{74:276,78:[1,82],100:[1,275],110:81,114:[1,277]},{59:[2,131],62:[2,131],64:[2,131],66:[2,131],76:[2,131],79:[2,131],91:[2,131],92:[2,131],94:[2,131],95:[2,131],96:[2,131],107:[2,131],111:[2,131],114:[2,131]},{74:279,78:[1,82],100:[1,278],110:81},{114:[1,280]},{59:[2,136],62:[2,136],64:[2,136],66:[2,136],76:[2,136],79:[2,136],91:[2,136],92:[2,136],94:[2,136],95:[2,136],96:[2,136],107:[2,136],111:[2,136],114:[2,136]},{10:[1,281],84:282,99:[1,102],104:283,105:[1,246]},{10:[2,117],99:[2,117],105:[2,117]},{24:92,52:88,74:91,78:[1,82],93:284,100:[1,89],101:[1,90],110:81,118:[1,36],126:[1,73],127:74,128:[1,75],131:[1,76]},{7:285,8:[1,21]},{7:286,8:[1,21]},{59:[2,148],64:[2,148]},{59:[2,157],64:[2,157],111:[1,143]},{59:[2,158],64:[2,158]},{59:[2,159],64:[2,159]},{59:[2,160],64:[2,160]},{59:[2,161],64:[2,161]},{59:[2,162],64:[2,162]},{59:[2,163],64:[2,163]},{59:[2,164],62:[2,164],64:[2,164]},{62:[1,287],78:[1,218],123:288},{24:293,52:292,60:[1,163],74:295,78:[1,82],100:[1,290],101:[1,291],110:81,118:[1,36],121:294,124:289,126:[1,73],127:74,128:[1,75],131:[1,76]},{5:[2,96],10:[2,96],27:[2,96],29:[2,96],37:[2,96],38:[2,96],46:[2,96],68:[2,96],75:[2,96],77:[2,96],80:[2,96],81:[2,96],86:[2,96],89:[2,96],99:[2,96],102:[2,96],106:[2,96],108:[2,96],109:[2,96],118:[2,96],125:[2,96]},{76:[2,104],91:[2,104],92:[2,104]},{76:[2,106],91:[2,106],92:[2,106]},{54:[2,61],56:[2,61],59:[2,61]},{54:[2,63],56:[2,63],59:[2,63]},{54:[2,67],56:[2,67],62:[2,67]},{54:[2,69],56:[2,69],62:[2,69]},{59:[2,138],62:[2,138],64:[2,138],66:[2,138],76:[2,138],79:[2,138],91:[2,138],92:[2,138],94:[2,138],95:[2,138],96:[2,138],107:[2,138],111:[2,138],114:[2,138]},{57:[1,237]},{59:[2,139],62:[2,139],64:[2,139],66:[2,139],76:[2,139],79:[2,139],91:[2,139],92:[2,139],94:[2,139],95:[2,139],96:[2,139],107:[2,139],111:[2,139],114:[2,139]},{59:[1,296],64:[1,297]},{59:[2,142],64:[2,142]},{59:[2,143],64:[2,143],111:[1,143]},{59:[2,144],64:[2,144]},{59:[2,145],64:[2,145]},{114:[1,298]},{111:[1,143],114:[1,299]},{59:[2,135],62:[2,135],64:[2,135],66:[2,135],76:[2,135],79:[2,135],91:[2,135],92:[2,135],94:[2,135],95:[2,135],96:[2,135],107:[2,135],111:[2,135],114:[2,135]},{114:[1,300]},{111:[1,143],114:[1,301]},{59:[2,134],62:[2,134],64:[2,134],66:[2,134],76:[2,134],79:[2,134],91:[2,134],92:[2,134],94:[2,134],95:[2,134],96:[2,134],107:[2,134],111:[2,134],114:[2,134]},{5:[2,115],10:[2,115],27:[2,115],29:[2,115],37:[2,115],38:[2,115],46:[2,115],68:[2,115],75:[2,115],77:[2,115],80:[2,115],81:[2,115],86:[2,115],102:[2,115],106:[2,115],108:[2,115],109:[2,115],118:[2,115],125:[2,115]},{10:[1,302]},{10:[2,118],99:[2,118],105:[2,118]},{76:[1,303]},{5:[2,84],10:[2,84],27:[2,84],29:[2,84],37:[2,84],38:[2,84],46:[2,84],68:[2,84],75:[2,84],77:[2,84],80:[2,84],81:[2,84],86:[2,84],102:[2,84],106:[2,84],108:[2,84],109:[2,84],118:[2,84],125:[2,84]},{5:[2,85],10:[2,85],27:[2,85],29:[2,85],37:[2,85],38:[2,85],46:[2,85],68:[2,85],75:[2,85],77:[2,85],80:[2,85],81:[2,85],86:[2,85],102:[2,85],106:[2,85],108:[2,85],109:[2,85],118:[2,85],125:[2,85]},{59:[2,165],62:[2,165],64:[2,165]},{62:[2,166],64:[2,166]},{62:[2,168],64:[2,168]},{62:[2,169],64:[2,169]},{62:[2,170],64:[2,170]},{62:[2,171],64:[2,171]},{62:[2,172],64:[2,172]},{62:[2,173],64:[2,173]},{62:[2,174],64:[2,174],111:[1,143]},{59:[2,140],62:[2,140],64:[2,140],66:[2,140],76:[2,140],79:[2,140],91:[2,140],92:[2,140],94:[2,140],95:[2,140],96:[2,140],107:[2,140],111:[2,140],114:[2,140]},{52:274,74:272,78:[1,82],100:[1,273],110:81,117:304,126:[1,73],127:74,128:[1,75],131:[1,76]},{59:[2,129],62:[2,129],64:[2,129],66:[2,129],76:[2,129],79:[2,129],91:[2,129],92:[2,129],94:[2,129],95:[2,129],96:[2,129],107:[2,129],111:[2,129],114:[2,129]},{59:[2,130],62:[2,130],64:[2,130],66:[2,130],76:[2,130],79:[2,130],91:[2,130],92:[2,130],94:[2,130],95:[2,130],96:[2,130],107:[2,130],111:[2,130],114:[2,130]},{59:[2,132],62:[2,132],64:[2,132],66:[2,132],76:[2,132],79:[2,132],91:[2,132],92:[2,132],94:[2,132],95:[2,132],96:[2,132],107:[2,132],111:[2,132],114:[2,132]},{59:[2,133],62:[2,133],64:[2,133],66:[2,133],76:[2,133],79:[2,133],91:[2,133],92:[2,133],94:[2,133],95:[2,133],96:[2,133],107:[2,133],111:[2,133],114:[2,133]},{5:[2,116],10:[2,116],27:[2,116],29:[2,116],37:[2,116],38:[2,116],46:[2,116],68:[2,116],75:[2,116],77:[2,116],80:[2,116],81:[2,116],86:[2,116],102:[2,116],106:[2,116],108:[2,116],109:[2,116],118:[2,116],125:[2,116]},{7:305,8:[1,21]},{59:[2,141],64:[2,141]},{10:[2,119],99:[2,119],105:[2,119]}],
defaultActions: {44:[2,1],80:[2,82]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* tracing/debugging functions */

function Loc(start, end) {
  this.start = { line: start.first_line, column: start.first_column };
  this.end = { line: end.last_line, column: end.last_column };
}

/* Manana data types */

function MananaHash(data, loc) {
  var hash = {}, i = 0;

  while (data[i]) {
    hash[data[i][0]] = data[i][1];
    i++;
  }

  return hash;
}

/* AST nodes */

function VoidTagNode(tag, attrs, loc) {
  this.type = "VoidTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
}

function CodeTagNode(tag, attrs, code, loc) {
  this.type = "CodeTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = code;
}

function TagNode(tag, attrs, text, block, loc) {
  this.type = "Tag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = text ? [text] : block;
}

function TextNode(words, loc) {
  this.type = "Text";
  this.loc = loc;

  var w = words, t = [], s = [], i = 0; 

  while (typeof w[i] !== "undefined") {
    if (typeof w[i] === "string") {
      s.push(w[i]);
    } else {
      if (s.length) {
        t.push(s.join(' '));
        s = [];
      }
      t.push(w[i]);
    }
    i++;
  }
  if (s.length) {
    t.push(s.join(' '));
  }

  this.body = t;
}

function NameNode(path, loc) {
  this.type = "Name";
  this.loc = loc;
  this.body = path;
}

function WithNode(path, body, loc) {
  this.type = "With";
  this.loc = loc;
  this.path = path;
  this.body = body;
}

function IdNode(id, start, end, loc) {
  this.type = "Id";
  this.loc = loc;
  this.id = id;
  this.start = start;
  this.end = end;
}

function PathNode(path_node, component, methods, loc) {
  var k, c;

  if (path_node === null) {
    this.type = "Path";
    this.loc = loc;
    this.methods = null;
    this.components = [];
  } else {
    for (k in path_node) {
      if (path_node.hasOwnProperty(k)) {
        this[k] = path_node[k];
      }
    }

    if (loc && path_node.loc) {
      if (loc.end.line > path_node.loc.end.line || loc.end.column > path_node.loc.end.column) {
        this.loc.end = loc.end;
      }
    }
  }

  if (component) {
    c = [component.id];
    if (component.start !== null) {
      c.push(component.start);
    }
    if (component.end !== null) {
      c.push(component.end);
    }
    this.components.push(c);
  }

  if (methods !== null) {
    this.methods = methods;
  }
}

function MethodNode(name, args, loc) {
  this.type = "Method";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function MethodChainNode(method, loc) {
  this.type = "MethodChain";
  this.loc = loc;
  this.chain = [method];
}

function FunctionNode(name, args, loc) {
  this.type = "Function";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function ForNode(id, path, body, loc) {
  this.type = "For";
  this.loc = loc;
  this.id = id;
  this.path = path;
  this.body = body;
}

function IfNode(conditions, loc) {
  this.type = "If";
  this.loc = loc;
  this.body = conditions;
}

function SwitchNode(control, cases, else_case, loc) {
  this.type = "Switch";
  this.loc = loc;
  this.control = control;
  this.cases = cases;
  this.else_case = else_case;
}

function AliasNode(path, id, loc) {
  this.type = "Alias";
  this.loc = loc;
  this.path = path;
  this.id = id;
}

function UnaliasNode(id, loc) {
  this.type = "Unalias";
  this.loc = loc;
  this.id = id;
}

function IncludeNode(path, loc) {
  this.type = "Include";
  this.loc = loc;
  this.path = path;
}

function FilterNode(filter, body, loc) {
  this.type = "Filter";
  this.loc = loc;
  this.body = [body];
}

function MananaStringNode(body, loc) {
  this.type = "MananaString";
  this.loc = loc;
  if (typeof body === "string") {
    this.body = [body];
  } else {
    this.body = body;
  }
}

function BreakNode(loc) {
  this.type = "Break";
  this.loc = loc;
}

function ContinueNode(loc) {
  this.type = "Continue";
  this.loc = loc;
}

/* expose AST constructors to parser */

parser.ast = {};
parser.ast.Loc = Loc;
parser.ast.MananaStringNode = MananaStringNode;
parser.ast.VoidTagNode = VoidTagNode;
parser.ast.CodeTagNode = CodeTagNode;
parser.ast.TagNode = TagNode;
parser.ast.TextNode = TextNode;
parser.ast.NameNode = NameNode;
parser.ast.WithNode = WithNode;
parser.ast.IdNode = IdNode;
parser.ast.PathNode = PathNode;
parser.ast.MethodNode = MethodNode;
parser.ast.MethodChainNode = MethodChainNode;
parser.ast.FunctionNode = FunctionNode;
parser.ast.ForNode = ForNode;
parser.ast.IfNode = IfNode;
parser.ast.SwitchNode = SwitchNode;
parser.ast.AliasNode = AliasNode;
parser.ast.UnaliasNode = UnaliasNode;
parser.ast.IncludeNode = IncludeNode;
parser.ast.FilterNode = FilterNode;
parser.ast.BreakNode = BreakNode;
parser.ast.ContinueNode = ContinueNode;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

  function strip(start, end) {
    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comments */
break;
case 1:this.pushState("expr"); return "FOR";
break;
case 2:this.pushState("expr"); return "IF";
break;
case 3:this.pushState("expr"); return "ELIF";
break;
case 4:this.pushState("expr"); return "ELSE";
break;
case 5:this.pushState("expr"); return "ALIAS";
break;
case 6:this.pushState("expr"); return "UNALIAS";
break;
case 7:this.pushState("expr"); return "WITH";
break;
case 8:this.pushState("expr"); return "INCLUDE";
break;
case 9:this.pushState("expr"); return "CASE";
break;
case 10:this.pushState("expr"); return "WHEN";
break;
case 11:return "BREAK";
break;
case 12:return "CONTINUE";
break;
case 13:return "BOOL";
break;
case 14:return "BOOL";
break;
case 15:this.popState(); return "END_EXPR";
break;
case 16:return "AND";
break;
case 17:return "OR";
break;
case 18:return "IN";
break;
case 19:return "IS";
break;
case 20:return "AS";
break;
case 21:return "NOT";
break;
case 22:return "TYPE";
break;
case 23:return "TYPE";
break;
case 24:return "TYPE";
break;
case 25:return "TYPE";
break;
case 26:return "TYPE";
break;
case 27:return "TYPE";
break;
case 28:return "COND";
break;
case 29:return "COND";
break;
case 30:return "COND";
break;
case 31:return "COND";
break;
case 32:return "COND";
break;
case 33:return "COND";
break;
case 34:return "COND";
break;
case 35:return "COND";
break;
case 36:return "EXISTS";
break;
case 37:this.pushState("tag");      return "VOID_TAG";
break;
case 38:this.pushState("code_tag"); return "CODE_TAG";
break;
case 39:this.pushState("tag");      return "TAG";
break;
case 40:this.popState();            return "END_TAG";
break;
case 41:yy_.yytext = yy_.yytext.slice(1);   return "TAG_ID";
break;
case 42:yy_.yytext = yy_.yytext.slice(1);   return "TAG_CLASS";
break;
case 43:this.popState(); this.pushState("code"); return "END_CODE_TAG";
break;
case 44:
                                            yy_.yytext = yy_.yytext.replace("->", '');
                                            yy_.yytext = yy_.yytext.replace(/\s*/, '')
                                            yy_.yytext = yy_.yytext.slice(1, -1)
                                            return "TAG_SRC";
                                         
break;
case 45:this.pushState("i_string_d"); return ["TAG_SRC_I_STRING", "I_STRING_D"];
break;
case 46:this.pushState("i_string_d"); return "I_STRING_D";
break;
case 47:this.pushState("i_string_d"); return "I_STRING_D";                                      
break;
case 48:this.pushState("name");       return "START_NAME";
break;
case 49:this.popState();              return "END_I_STRING_D";
break;
case 50:return "I_STRING_TEXT";
break;
case 51:this.pushState("i_string_s"); return ["TAG_SRC_I_STRING", "I_STRING_S"];
break;
case 52:this.pushState("i_string_s"); return "I_STRING_S";
break;
case 53:this.pushState("i_string_s"); return "I_STRING_S";                                      
break;
case 54:this.pushState("name");       return "START_NAME";
break;
case 55:this.popState();              return "END_I_STRING_S"; // "
break;
case 56:return "I_STRING_TEXT";
break;
case 57:this.pushState("i_html"); return "I_HTML_START";
break;
case 58:this.pushState("name");   return "START_NAME";
break;
case 59:this.popState();          return "I_HTML_END";
break;
case 60:return "I_HTML_TEXT";
break;
case 61:return "HTML";
break;
case 62:this.pushState("tagargs"); return "LPAREN";
break;
case 63:this.popState();           return "RPAREN";
break;
case 64:this.pushState("tagargs"); return "LBRACE";
break;
case 65:this.popState();           return "RBRACE";
break;
case 66:return "COLON";
break;
case 67:return "EQ";
break;
case 68:return "COMMA";
break;
case 69:return "TAG_ATTR";
break;
case 70:yy_.yytext = "data-" + yy_.yytext.slice(1); return "TAG_DATA_ATTR";
break;
case 71:/* ignore */
break;
case 72:/* ignore */
break;
case 73:this.pushState("filter"); yy_.yytext = yy_.yytext.slice(1); return "FILTER";
break;
case 74:this.pushState("name"); return "START_NAME";
break;
case 75:this.popState(); return "RBRACE"
break;
case 76:this.pushState("fn"); yy_.yytext = yy_.yytext.slice(1); return "FN";
break;
case 77:this.popState(); return "RPAREN";
break;
case 78:/* ignore */
break;
case 79:/* ignore */
break;
case 80:return "LBRACE";
break;
case 81:return "RBRACE";
break;
case 82:return "COMMA";
break;
case 83:return "EQ";
break;
case 84:return "ID";
break;
case 85:return "DOT";
break;
case 86:return "LPAREN";
break;
case 87:return "RPAREN";
break;
case 88:return "LBRACK";
break;
case 89:return "RBRACK";
break;
case 90:return "COLON"; 
break;
case 91:return "COMMA";
break;
case 92:return "INT";
break;
case 93:yy_.yytext = strip(1,2).replace(/\\"/g, '"'); return "STRING";
break;
case 94:return "STRING"; // Do not strip quotes
break;
case 95:return "WORD";
break;
case 96:
  var tokens = [];
  while (0 < indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  if (tokens.length) {
    tokens.push("EOF");
    return tokens;
  } else {
    return "EOF";
  }

break;
case 97:/* eat blank lines */
break;
case 98:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (indentation > indent_stack[0]) {
    indent_stack.unshift(indentation);
    return "INDENT";
  }

  var tokens = [];
  while (indentation < indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  if (tokens.length) {
    return tokens;
  }

break;
case 99:
  this.popState();

  var tokens = [];
  while (code_indent_level >= indent_stack[0]) {
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  code_indent_level = 0;

  tokens.shift();
  tokens.push("EOF");

  return tokens;

break;
case 100:yy_.yytext = ''; return "BLANK_LINE";
break;
case 101:
  var indent_level = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (code_indent_level === 0) {
    code_indent_level = indent_level;
    indent_stack.unshift(indent_level);
    yy_.yytext = yy_.yytext.slice(code_indent_level + 1);
    return "INDENT";

  } else if (indent_level < code_indent_level) {
    code_indent_level = 0;

    var tokens = [];
    while (indent_level < indent_stack[0]) {
      tokens.unshift("DEDENT");
      indent_stack.shift();
    }

    this.popState();
    return tokens;

  } else if (code_indent_level > 0) {
    yy_.yytext = yy_.yytext.slice(code_indent_level + 1);
    return "INDENT";
  }

break;
case 102:return "LINE";
break;
case 103:
  this.popState();

  var tokens = [];
  while (filter_indent_level >= indent_stack[0]) {
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  filter_indent_level = 0;

  tokens.shift();
  tokens.push("EOF");

  return tokens;

break;
case 104:
  var indent_level, tokens;
    
  indent_level = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (filter_indent_level === 0) {
    filter_indent_level = indent_level;
    indent_stack.unshift(indent_level);
    return "INDENT";

  } else if (indent_level < filter_indent_level) {
    this.popState();
    filter_indent_level = 0;
    
    tokens = [];
    while (indent_stack[0] > indent_level) {
      tokens.push("DEDENT");
      indent_stack.shift();
    }

    return tokens;
  }

break;
case 105:/* ignore all other whitespace */
break;
}
},
rules: [/^(?:[\n\r]*([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*"""(.|\n)*?""")/,/^(?:for\b)/,/^(?:if\b)/,/^(?:elif\b)/,/^(?:else\b)/,/^(?:alias\b)/,/^(?:unalias\b)/,/^(?:with\b)/,/^(?:include\b)/,/^(?:case\b)/,/^(?:when\b)/,/^(?:!break\b)/,/^(?:!continue\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:(?=\n))/,/^(?:and\b)/,/^(?:or\b)/,/^(?:in\b)/,/^(?:is\b)/,/^(?:as\b)/,/^(?:not\b)/,/^(?:Hash\b)/,/^(?:List\b)/,/^(?:String\b)/,/^(?:Integer\b)/,/^(?:Number\b)/,/^(?:Boolean\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?:>)/,/^(?:<)/,/^(?:%)/,/^(?:exists\b)/,/^(?:((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)))/,/^(?:pre|code\b)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:(?=\n))/,/^(?:(#[a-zA-Z][a-zA-Z0-9\-\:_]*))/,/^(?:(\.-?[_a-zA-Z]+[_a-zA-Z0-9\-]*(?=["."\s\n])))/,/^(?:(?=\n))/,/^(?:->\s*(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:->\s*(i"(?=.*?@\{)))/,/^(?:(i"(?=.*?@\{)))/,/^(?:(i"(?=.*?@\{)))/,/^(?:@\{)/,/^(?:")/,/^(?:[^"@"'"']*)/,/^(?:->\s*(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:@\{)/,/^(?:')/,/^(?:[^"@""'"]*)/,/^(?:(<(?=.*?@\{)))/,/^(?:@\{)/,/^(?:>(?=\s*\n))/,/^(?:.)/,/^(?:<.*(?=\n))/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z][a-zA-Z0-9\-_]*(?=\s*["="":"])))/,/^(?:(\*[a-zA-Z][a-zA-Z0-9\-]*(?=["="":"])))/,/^(?:\s)/,/^(?:\n)/,/^(?::(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:@\{)/,/^(?:\})/,/^(?:@(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254})\s?(?=\())/,/^(?:\)(?!\)))/,/^(?:\s)/,/^(?:\n)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:=)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:(\+|-)?(0|[1-9][0-9]*))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:([^\s\n"@"][^\s\n]*))/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:.*)/,/^(?:\s*$)/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"tag":{"rules":[40,41,42,44,45,47,51,53,62,64,74,76,94,95,97,105],"inclusive":true},"tagargs":{"rules":[46,52,63,65,66,67,68,69,70,71,72,93,97,105],"inclusive":true},"filter":{"rules":[47,53,74,94,95,97,103,104,105],"inclusive":true},"expr":{"rules":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,46,52,76,84,85,86,87,88,89,90,91,92,93,105],"inclusive":true},"name":{"rules":[46,52,75,84,85,86,87,88,89,90,91,92,93,105],"inclusive":true},"fn":{"rules":[13,14,46,52,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,97,105],"inclusive":true},"i_string_d":{"rules":[48,49,50,105],"inclusive":true},"i_string_s":{"rules":[54,55,56,105],"inclusive":true},"i_html":{"rules":[58,59,60,97,105],"inclusive":true},"code_tag":{"rules":[41,42,43,105],"inclusive":true},"code":{"rules":[99,100,101,102,105],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,37,38,39,47,53,57,61,73,74,76,94,95,96,97,98,105],"inclusive":true}}
};
indent_stack = [0];
filter_indent_level = 0;
code_indent_level = 0;;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = manana_parser;
exports.Parser = manana_parser.Parser;
exports.parse = function () { return manana_parser.parse.apply(manana_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}/* ******************************************************
 * Author: Chad Angelelli <chad@angelel.li>
 * Contributors/Special Thanks:
 *    Ray Harris <ray@harris.net>
 *    Mason Armour <mason@myshorttrack.com>
 *    Chris Hacker <chris@myshorttrack.com>
 *    Brigette LeVert <brigette.levert@gmail.com>
 * ******************************************************/

(function(exports) {
  var _manana_is_server_side, _manana_is_client_side;

  // _____________________________________________ Validation shorthand 
  function is(v, t)  { return typeof v === t; }
  function isNull(v) { return v === null; }
  function isStr(v)  { return is(v, "string"); }
  function isNum(v)  { return is(v, "number"); }
  function isInt(v)  { return is(v, "number") && parseFloat(v) == parseInt(v, 10) && ! isNaN(v); }
  function isArr(v)  { return Object.prototype.toString.call(v) === '[object Array]'; }
  function isObj(v)  { return Object.prototype.toString.call(v) === '[object Object]'; }

  _manana_is_server_side =  typeof require        !== 'undefined' && 
                            typeof module         !== 'undefined' && 
                            typeof module.exports !== 'undefined' ;

  _manana_is_client_side = ! _manana_is_server_side;
 
  // _____________________________________________ Extensions 
  String.prototype.intpol = function(o) {
    return this.replace(/{([^{}]*)}/g, function (a, b) { 
      var r = o[b]; 
      return isStr(r) || isNum(r) ? r : a; 
    });
  };

  String.prototype.repeat = function(n) {
    return new Array(n + 1).join(this);
  };

  Object.size = function(obj) {
    var size = 0, key;
    for (key in obj) {
      if (obj.hasOwnProperty(key)) {
        size++;
      }
    }
    return size;
  };

  function jd(label, x) {
    console.log("\n\n" + label + "\n==========================================>\n>>>");
    console.log(JSON.stringify(x, null, 4));
    console.log("\n\n<<< END " + label + "\n\n");
  }

  // _____________________________________________ Mañana
  function MananaNamespace(name, data, $parent) {
    this.type    = 'MananaNamespace';
    this.name    = name;
    this.data    = data;
    this.$parent = $parent;
  } // end MananaNamespace()

  function MananaView(args) {
    this.name     = args.name;
    this.template = args.template;
    this.context  = args.context;
    this.$level   = args.$level; 
    this.$parent  = args.$parent;
  } // end MananaView()

  function MananaError(message, loc) {
    this.name = "MananaError";
    this.message = message;
    this.loc = loc;
  } // end Error()

  function Manana(view_dir) {
    var self = this;

    // ........................................... 
    this.name           = '';
    this.template       = '';
    this.ir             = '';
    this.result         = '';
    this.context        = {};
    this.aliases        = [];
    this.namespace      = {};
    this.view           = {}; // the current view object
    this.views          = {}; // a cache of all known views
    this.view_level     = 0;
    this.ancestry       = [];
    this.fns            = {};
    this.is_server_side = _manana_is_server_side;
    this.is_client_side = ! _manana_is_server_side;
    this.in_loop        = false;
    this.break_loop     = false;
    this.continue_loop  = false;

    // ........................................... 
    if (this.is_server_side) {
      if (typeof manana_parser !== 'undefined') {
        this.parser = manana_parser;
        this.Parser = manana_parser.Parser;
      } else {
        this.Parser = require('./manana_parser');
        this.parser = this.Parser.parser;
      }

      this.file_system = require('fs');

      this.__dirname = require('path').dirname(require.main.filename);

      if (is(view_dir, "undefined")) {
        this.view_dir = this.__dirname; 
      } else { 
        this.view_dir = view_dir;
      }

      if (this.view_dir[this.view_dir.length - 1] == '/') {
        this.view_dir = this.view_dir.slice(0, -1);
      }
    } else {
      this.parser = manana_parser;
      this.Parser = manana_parser.Parser;
    }

    // ...........................................  
    this.getTemplate = function(name) {
      var template, abs_name, scripts, i, l, s, s_name;

      if (self.is_server_side) {
        try {
          if (name[0] == '.') {
            abs_name = self.__dirname + '/' + name.slice(2);
          } else if (name[0] == '/') {
            abs_name = name;
          } else {
            abs_name = self.view_dir + '/' + name; 
          }

          if ( ! /\.manana$/.test(abs_name)) {
            abs_name += ".manana";
          }

          template = self.file_system.readFileSync(abs_name, 'utf-8');

        } catch (e) {
          throw new MananaError("Invalid name '{p}' provided to getTemplate function".intpol({p:name}));
        }
      } else { // self.is_client_side
        scripts = document.getElementsByTagName("script"); 
        for (i = 0, l = scripts.length; i < l; i++) {
          s = scripts[i];
          s_name = s.getAttribute("data-view-name");
          if (s_name == name) {
            template = s.innerHTML;
          }
        }
      }

      if ( ! template.length) {
        throw new MananaError("Template '{n}' has no content.".intpol({n:name}));
      }

      return template;
    }; // end Manana.getTemplate()

    // ...........................................  
    this.evalForm = function(form, context) {
      var res = '', i;

      if (form && (form.type == 'Path' || form.type == 'Function')) {
        return self[form.type](form, context);

      } else if (isObj(form) && ! is(form.type, "undefined")) {
        res += self[form.type](form, context);

      } else if (isArr(form)) {
        i = 0;
        while ( ! is(form[i], "undefined")) {
          res += self.evalForm(form[i], context);
          i++;
        }
      } else {
        res = form;
      }

      return res;
    }; // end Manana.evalForm()

    // ...........................................  
    this.render = function(name, context, options) {
      var i, form, r;

      self.name = name;
      self.template = self.getTemplate(self.name);
      self.ir = self.parser.parse(self.template);

      self.namespace.root = new MananaNamespace('root', context || {}, null);
      self.context = self.namespace.root;
      self.aliases = [];

      self.views[name] = new MananaView({
        name: name,
        template: self.template,
        context: self.context,
        $level: 0,
        $parent: null
      });

      self.view = self.views[name];
      self.ancestry = [self.view];

      self['$window'];
      if (typeof window !== "undefined") {
        self['$window'] = window;
      }

      self.result = '';

      i = 0;
      while (form = self.ir[i]) {
        r = self.evalForm(form, self.context);
        self.result += isObj(r) ? JSON.stringify(r) : r;
        i++;
      }

      if (is(options, "undefined")) {
        options = {};
      }

      options.return_single_line = options.return_single_line || false;
      options.encode = options.encode || false;

      if ( ! options.return_single_line) {
        self.result = self.format(self.result, "  ", 0);
      }

      if (options.encode) {
        self.result = self.encode(self.result);
      }

      i = 0;
      while (self.aliases[i]) {
        i++;
        delete self.namespace[self.aliases[i]];
      }

      return self.result;
    }; // end Manana.render()

    // ...........................................  
    this.Include = function(form, context) {
      var name, template, ir, $parent, i, form, res;

      name = self.evalForm(form.path, context);
      template = self.getTemplate(name);
      ir = self.parser.parse(template);

      self.view_level++;

      self.views[name] = new MananaView({
        name: name,
        template: template,
        context: context,
        $level: self.view_level,
        $parent: $parent 
      });

      $parent = self.ancestry[self.view_level - 1]; 
      self.view = self.views[name];

      if (self.view_level < self.ancestry.length) {
        self.ancestry = self.ancestry.slice(0, self.view_level);
      }

      self.ancestry.push(self.views[name]);

      i = 0;
      res = '';
      while (form = ir[i]) {
        res += self.evalForm(form, context);
        i++;
      }

      self.view = $parent;
      self.view_level--;

      return res;
    }; // end Manana.Include()

    // ...........................................  
    this.isNamespace = function(node) {
      var is_ns = false;

      is_ns = node instanceof MananaNamespace;

      if ( ! is_ns) {
        if (node
            && node.type 
            && node.type == 'MananaNamespace'
            && node.name
            && ! is(node.$parent, 'undefined')
            && ! is(node.data, 'undefined'))
        {
          is_ns = true;
        }
      }

      return is_ns;
    }; // end Manana.isNamespace()

    // ...........................................  
    this.Path = function(form, context) {
      var node, components, target, i, index, slice, traceback, meth;

      node = context;
      components = JSON.parse(JSON.stringify(form.components));
      traceback = [];

      if (components[0][0] == '$manana') {
        node = self;
        traceback.push(components[0][0]);
        components.shift();

      } else if (components[0][0] == '$window') {
        if (typeof window !== 'undefined') {
          node = window;
          traceback.push(components[0][0]);
          components.shift();
        } else {
          throw new MananaError("Invalid path: $window is not defined");
        }
      }

      i = 0;
      while ( ! is(components[i], "undefined")) {
        target = self.evalForm(components[i][0], context);
        index  = self.evalForm(components[i][1], context);
        slice  = self.evalForm(components[i][2], context);

        traceback.push(target);

        //................ 
        if (self.isNamespace(node)) {
          if (target[0] == '$' && ! is(node[target], 'undefined')) {
            node = node[target];

          } else if ( ! isNull(node.data) && ! is(node.data[target], 'undefined')) {
            node = node.data[target];

          } else if (node.name == target) {
            node = node.data;

          } else if ( ! is(self.namespace[target], 'undefined')) {
            node = self.namespace[target];

          } else if (node.$parent && ! is(node.$parent.data[target], 'undefined')) {
            node = node.$parent.data[target];

          } else {
            throw new MananaError('Invalid path in namespace: "' + traceback.join('.') + '"', form.loc);
          }

        } else if ( ! is(node, 'undefined')) { 
          if ( ! is(node[target], "undefined")) {
            node = node[target];
          } else {
            throw new MananaError('Invalid path: "' + traceback.join('.') + '"', form.loc);
          }

        } else {
          throw new MananaError("Undefined path: " + traceback.join('.'), form.loc);
        }

        //................ 
        if ( ! is(slice, 'undefined')) {
          if (isStr(node)) {
            node = node.split('');
          } else if ( ! isArr(node)) {
            throw new MananaError('slicing attempted on non-list: ' + traceback.join('.'), form.loc);
          }

          index = parseInt(index);

          if (slice == '*') {
            slice = node.length;
          } else {
            slice = parseInt(slice);
          }

          node  = node.slice(index, slice);

        } else if ( ! is(index, 'undefined')) {
          if (isObj(node) && ! is(node[index], 'undefined')) {
            node = node[index];
          } else {
            index = parseInt(index);
            if (index < 0) {
              index = node.length + index;
            }
            node = node[index];
          }
        }

        i++;
      } // end while

      //................ 
      if (form.methods) {
        i = 0;
        while (meth = form.methods.chain[i]) {
          if (is(node[meth.name], 'undefined')) {
            throw new MananaError("Undefined method '{name}' called: ".intpol(meth) + traceback.join('.'), meth.loc);
          }

          if ( ! is(node[meth.name], 'function')) {
            throw new MananaError("Requested method '{name}' is not a function.".intpol(meth) + traceback.join('.'), meth.loc);
          }

          try {
            if (isArr(meth.args) && meth.args.length) {
              node = node[meth.name].apply(self, meth.args);
            } else {
              node = node[meth.name]();
            }
          } catch (e) {
            throw new MananaError(e, meth.loc);
          }
          i++;
        }
      }

      //................ 
      if (is(node, 'undefined')) {
        throw new MananaError("Can't find path: " + traceback.join('.'), form.loc);
      }

      //................ 
      return node;
    }; // end Interprteter.Path()

    // ........................................... 
    this.With = function(form, context) {
      var name, data, i, min, max, res;

      min = 1000000;
      max = 9999999;

      name = '__with__' + Math.floor(Math.random() * (max - min) + min);
      data = self.evalForm(form.path, context);

      self.namespace[name] = new MananaNamespace(name, data, context);

      res = '';
      for (i in form.body) {
        res += self.evalForm(form.body[i], self.namespace[name]);
      }

      delete self.namespace[name];

      return res;
    }; // end Manana.With()

    // ...........................................  
    this.Alias = function(form, context) {
      var name, data;

      if ( ! self.isNamespace(context)) {
        throw new MananaError("Invalid context passed to Alias method. Must be a valid namespace.");
      }

      if ( ! is(context[name], "undefined")) {
        throw new MananaError("Can't alias '{id}'. Name already taken in current context.".intpol(form));
      }

      name = form.id;
      data = self.evalForm(form.path, context);

      self.namespace[name] = data;
      self.aliases.push(name);

      return '';
    }; // end Manana.Alias()

    // ...........................................  
    this.Unalias = function(form, context) {
      var id;

      id = self.evalForm(form.id, context);

      if (is(self.namespace[id], 'undefined'))
        throw new MananaError('Unknown alias "{id}". Can not unalias.'.intpol(form));

      delete self.namespace[id];

      return '';
    }; // end Manana.Unalias()

    // ...........................................  
    this.If = function(form, context) {
      var cases, else_case, i, j, c, cond, compound, operator, value, previous_outcome, outcome, res;

      cases = JSON.parse(JSON.stringify(form.body));

      if (cases[cases.length-1]['case'] == 'else') {
        else_case = cases.pop();
      }

      i = 0;
      while (c = cases[i]) {
        outcome = false;

        j = 0;
        while (cond = c.conditions[j]) {
          compound = cond[0];
          operator = cond[1][0];
          value = cond[1].slice(1);

          previous_outcome = outcome;

          if (operator == 'true' || operator == 'not_true') {
            value[0] = self.evalForm(value[0], context);

            if (value[0]) {
              outcome = true;
            } else {
              outcome = false;
            }

            if (operator == 'not_true') {
              outcome = ! outcome;
            }

          } else if (operator == 'exists' || operator == 'not_exists') {
            try {
              value[0] = self.evalForm(value[0], context);
              outcome = true;
            } catch (e) {
              outcome = false;
            }

            if (operator == 'not_exists') {
              outcome = ! outcome;
            }

          } else if (operator == 'in' || operator == 'not_in') {
            value[0] = self.evalForm(value[0], context);
            value[1] = self.evalForm(value[1], context);

            if (isArr(value[1]) || isStr(value[1])) {
              outcome = value[1].indexOf(value[0]) > -1;
            } else if (isObj(value[1])) {
              outcome = value[0] in value[1];
            }

            if (operator == 'not_in') {
              outcome = ! outcome;
            }

          } else if (operator == 'is' || operator == 'not_is') {
            value[0] = self.evalForm(value[0], context);

            if      (value[1] == 'Hash'   ) outcome = isObj(value[0]);
            else if (value[1] == 'List'   ) outcome = isArr(value[0]);
            else if (value[1] == 'String' ) outcome = isStr(value[0]);
            else if (value[1] == 'Number' ) outcome = isNum(value[0]);
            else if (value[1] == 'Integer') outcome = isInt(value[0]);

            if (operator == 'not_is') {
              outcome = ! outcome;
            } 

          } else {
            value[0] = self.evalForm(value[0], context);
            value[1] = self.evalForm(value[1], context);

            switch (operator) {
              case '==': outcome = value[0] == value[1]; break;
              case '!=': outcome = value[0] != value[1]; break;
              case '>' : outcome = value[0] >  value[1]; break;
              case '<' : outcome = value[0] <  value[1]; break;
              case '>=': outcome = value[0] >= value[1]; break;
              case '<=': outcome = value[0] <= value[1]; break;
              default  : outcome = false;
            }
          }

          if (compound == 'and') {
            outcome = outcome && previous_outcome;
          } else if (compound == 'or') {
            outcome = outcome || previous_outcome;
          }

          j++;
        } // end while(conditions)

        if (outcome) {
          res = self.evalForm(c.body, context);
          break;
        }

        i++;
      } // end while(if/elif)

      if ( ! outcome && else_case) {
        res = self.evalForm(else_case.body, context);
      }

      if (is(res, 'undefined')) {
        res = '';
      }

      return res;
    }; // end Manana.If()

    // ...........................................  
    this.Switch = function(form, context) {
      var control, i, c, j, len, value, res;

      control = self.evalForm(form.control, context);

      res = '';

      i = 0; 
      while (c = form.cases[i]) {
        ++i;

        value = self.evalForm(c.value, context);

        if (value == control) {
          len = c.block.length;
          for (j = 0; j < len; j++) {
            res += self.evalForm(c.block[j], context);
          }
        }
      }

      if ( ! res.length && form.else_case) {
        i = 0;
        while (c = form.else_case[i]) { 
          ++i;
          res += self.evalForm(c, context);
        }
      }

      return res;
    }; // end Manana.Switch()

    // ...........................................  
    this.For = function(form, context) {
      var name, loop_name, $parent, scope, local_scope, key, i, count, total, _is_obj, res;

      $parent = self.context;
      scope = self.evalForm(form.path, context);

      if (isObj(scope)) {
        _is_obj = true;
      } else if (isArr(scope)) {
        _is_obj = false;
      } else if (isStr(scope)) {
        _is_obj = false;
        scope = scope.split('');
      } else {
        throw new MananaError('Invalid context provided to loop. Must be Hash, List, or String.');
      }

      name = form.id;
      loop_name = '__loop__' + name;
      total = _is_obj ? Object.size(scope) : scope.length;
      count = 0;

      if ( ! self.isNamespace(scope))
        scope = new MananaNamespace(loop_name, scope, $parent);
      scope = self.namespace[loop_name] = scope;

      self.in_loop = true;

      function cleanUp() {
        delete self.namespace[loop_name];
        delete self.namespace[name];
        self.in_loop = false;
        self.break_loop = false;
        self.continue_loop = false;
      }

      res = '';
      for (key in scope.data) {
        ++count;

        self.namespace[name] = new MananaNamespace(name, scope.data[key], $parent);
        local_scope = self.namespace[name];

        local_scope.$count    = count;
        local_scope.$total    = total;
        local_scope.$is_first = count == 1;
        local_scope.$is_last  = count == total;

        if (_is_obj) {
          local_scope.$key = key;
        } else {
          local_scope.$index    = key;
          local_scope.$previous = scope[key-1] || null;
          local_scope.$next     = scope[key+1] || null;
        }

        for (i in form.body) {
          if (self.break_loop) {
            cleanUp();
            break;
          }

          if (self.continue_loop)
            continue;

          res += self.evalForm(form.body[i], local_scope); 
        }
      }

      cleanUp();

      return res;
    }; // end Manana.For()

    // ...........................................  
    this.Break = function(form, context) {
      if ( ! self.in_loop) {
        throw new MananaError('Break statement can only exist inside loop!', form.loc);
      }
      self.break_loop = true;
      return '';
    }; // end Manana.Break()

    // ...........................................  
    this.Continue = function(form, context) {
      if ( ! self.in_loop) {
        throw new MananaError('Continue statement can only exist inside loop!', form.loc);
      }
      self.continue_loop = true;
      return '';
    }; // end Manana.Continue()
    
    // ...........................................  
    this.MananaString = function(form, context) {
      var i = 0, res = '';

      while (form.body[i]) {
        res += self.evalForm(form.body[i], context);
        i++;
      }

      return res;
    } // end Manana.MananaString()

    // ...........................................  
    this.Tag = function(form, context) {
      var html, attr_tpl, content, i, kv;

      html = '<{tag}{attrs}>{body}</{tag}>'; 
      attr_tpl = ' {key}="{val}"'; 
      content = { tag: form.tag, attrs: '', body: '' };

      if (isArr(form.attrs)) {
        i = 0;
        while (form.attrs[i]) {
          kv = {};
          if (form.attrs[i][0] == "src" && form.tag == "a") {
            kv.key = "href";
          } else {
            kv.key = self.evalForm(form.attrs[i][0], context);
          } 
          kv.val = self.evalForm(form.attrs[i][1], context); 
          content.attrs += attr_tpl.intpol(kv); 
          i++; 
        }
      }

      if (isArr(form.body)) {
        i = 0;
        while (form.body[i]) {
          content.body += self.evalForm(form.body[i], context);
          i++;
        }
      }

      return html.intpol(content);
    }; // end Manana.Tag()

    // ...........................................  
    this.CodeTag = function(form, context) {
      var html, attr_tpl, content, i, kv;

      html = '<{tag}{attrs}>{body}</{tag}>'; 
      attr_tpl = ' {key}="{val}"'; 
      content = { tag: form.tag, attrs: '', body: '' };

      if (isArr(form.attrs)) {
        i = 0;
        while (form.attrs[i]) {
          kv = {};
          if (form.attrs[i][0] == "src" && form.tag == "a") {
            kv.key = "href";
          } else {
            kv.key = self.evalForm(form.attrs[i][0], context);
          } 
          kv.val = self.evalForm(form.attrs[i][1], context); 
          content.attrs += attr_tpl.intpol(kv); 
          i++; 
        }
      }

      content.body = "\n" + form.body.join("\n");

      return html.intpol(content);
    }; // end Manana.PreTag()

    // ...........................................  
    this.VoidTag = function(form, context) {
      var html, attr_tpl, content, i;

      html = '<{tag}{attrs}>';
      attr_tpl = ' {key}="{val}"';
      content = { tag: form.tag, attrs: '' };

      if (isArr(form.attrs)) {
        i = 0;
        while (form.attrs[i]) {
          content.attrs += attr_tpl.intpol({ 
                             key: self.evalForm(form.attrs[i][0], context), 
                             val: self.evalForm(form.attrs[i][1], context)
                           })
          i++; 
        }
      }

      return html.intpol(content);
    }; // end Manana.VoidTag()

    // ...........................................  
    this.Text = function(form, context) {
      var i = 0, res = [];
      while ( ! is(form.body[i], "undefined")) {
        res.push(self.evalForm(form.body[i], context));
        i++;
      }
      return res.join(' ');
    }; // end Manana.Text()

    // ...........................................  
    this.Filter = function(form, context) {
      var i = 0, res = [];
      while ( ! is(form.body[i], "undefined")) {
        res.push(self.evalForm(form.body[i], context));
        i++;
      }
      return res.join(' ');
    }; // end Manana.Filter()

    // ...........................................  
    this.format = function(html, indent, indent_level, loc) {
      var orig_indent_level, tokens, extract_close_tag, open_tags, void_tags, padding, tag, i, t, r;

      if (is(html, "undefined")) {
        throw new MananaError("format() functions requires render() to be run first");
      }

      if (is(indent, "undefined")) {
        throw new MananaError("format() requires and indentation string for its 2nd arg.");
      }

      if (is(indent_level, "undefined")) {
        indent_level = 0;
      }

      function line(token, indent_plus_one) {
        if ( ! is(indent_plus_one, "undefined")) {
          padding = indent.repeat(indent_level + 1);
        } else {
          padding = indent.repeat(indent_level);
        }
        return '{p}{t}'.intpol({p:padding, t:token})
      }

      function is_main_block(tag) {
        return ['html', 'head', 'body'].indexOf(tag) > -1;
      }

      void_tags = [
        "area", "base", "br", "col", "embed", "hr", "img", "input", "keygen",
        "link", "menuitem", "meta", "param", "source", "track", "wbr"
      ];

      orig_indent_level = indent_level;
      tokens = self.result.split(/(<[^>]+>)/);
      open_tags = [];
     
      r = [];
      for (i in tokens) {
        t = tokens[i];

        if (t.length) {
          if ('<!' == t.slice(0, 2)) {
            r.push(line(t));
          } else if ('</' == t.slice(0, 2)) {
            r.push(line(t));
            tag = t.replace(/[<>\/ ]/g, '');
            if (tag == open_tags[open_tags.length-1]) {
              open_tags.pop();
              indent_level--;
            }
          } else if ('<' == t[0]) {
            tag = t.split(' ')[0].slice(1).replace('>', '');
            if (void_tags.indexOf(tag) == -1) {
              open_tags.push(tag);
              indent_level++;
            }
            if (is_main_block(tag)) {
              indent_level = orig_indent_level;
            }
            r.push(line(t))
          } else {
            r.push(line(t, indent_level))
          }
        }
      }
    
      return r.join("\n");
    }; // end Manana.format()

    // ...........................................  
    this.encode = function(html) {
      return String(html)
               .replace( /&/g, '&amp;'  )
               .replace( /"/g, '&quot;' )
               .replace( /'/g, '&#39;'  )
               .replace( /</g, '&lt;'   )
               .replace( />/g, '&gt;'   );
    }; // end Manana.encode()

    // ...........................................  
    this.decode = function(encoded) {
      return String(encoded)
               .replace( /&amp;/g  , '&' )
               .replace( /&quot;/g , '"' )
               .replace( /&\#39;/g , "'" )
               .replace( /&lt;/g   , '<' )
               .replace( /&gt;/g   , '>' );
    }; // end Manana.decode()

    // ...........................................  
    this.bottle = function(code, context) {
      var i, lines, line, indent_pat, indent, brew;

      if (is(context, "undefined")) {
        context = {};
      }

      try {
        self.parser.parse(code);
      } catch (e) {
        throw new MananaError("Invalid Mañana code sent to Bottle method.");
      }

      try {
        JSON.parse(JSON.stringify(context));
      } catch (e) {
        throw new MananaError("Invalid context sent to Bottle method.");
      }

      lines = code.split(/\n/g);
      indent_pat = /^([\t\s][\t\s]*)/;

      brew = '#ñ(role="template")';
      for (i in lines) {
        line = lines[i];

        indent = line.match(indent_pat);
        if (indent === null) {
          indent = 0;
        } else {
          indent = indent[1].length;
        }

        line = line.replace(indent_pat, '');
        brew += '#ñ{' + indent + '}' + line;
      }

      brew += '#ñ(role="context")' + JSON.stringify(context);

      return brew;
    }; // end Manana.bottle()

    // ...........................................  
    this.pour = function(brew, indent_char) {
      var parts, tpl, ctx, i, lines, line, indent;

      if ( ! /^\#ñ\(role="template"\)(?=\#ñ\{)/.test(brew)) {
        throw new MananaError("Invalid brew provided to Unbottle method.");
      }

      brew = brew.replace('#ñ(role="template")', '');
      parts = brew.split('#ñ(role="context")');
      tpl = parts[0];
      ctx = parts[1];

      try {
        ctx = JSON.parse(ctx);
      } catch (e) {
        throw new MananaError("Invalid context provided to Unbottle method.");
      }

      if ( ! indent_char) {
        indent_char = ' ';
      }

      lines = tpl.split(/(\#ñ\{[0-9][0-9]*\})/g);
      if (lines[0] === '') {
        lines = lines.slice(1);
      }

      tpl = '';
      for (i=0, l=lines.length; i < l; i += 2) {
        indent = lines[i]
                   .replace( '#ñ{' , '')
                   .replace( '}'   , '');
        indent = indent_char.repeat(parseInt(indent));

        line = lines[i + 1];

        tpl += indent + line + "\n";
      }

      try {
        self.parser.parse(tpl);
      } catch (e) {
        throw new MananaError("Invalid Mañana code pourd..");
      }

      return { "template": tpl, "context": ctx }
    }; // end Manana.pour()

    // ...........................................  
    this.Function = function(form, context) {
      var fn_name, i, args, res;

      fn_name = form.name;

      if (is(self.fns[fn_name], "undefined")) {
        throw new MananaError(
                    "Function '{name}' is not defined. Call 'Manana.add_fn(name, fn)' to add it"
                    .intpol(form)
                  );
      }

      if ( ! is(self.fns[fn_name], "function")) {
        throw new MananaError("'{name}' is not a function".intpol(form));
      }

      args = [];
      if (form.args) {
        i = 0;
        while ( ! is(form.args[i], "undefined")) {
          args.push(self.evalForm(form.args[i], context));
          i++;
        }
      }
      args.push(form);

      try {
        res = self.fns[fn_name].apply(self, args);
      } catch (e) {
        throw new MananaError(e, form.loc);
      }

      return res;
    }; // end Manana.Function()

    // ...........................................  
    self.fns.debug = function(form) {
      console.log('view: ', self.view);
      console.log('context: ', self.context);
      console.log('Manana: ', self);
      return '';
    }; // end Manana.debug()

    // ...........................................  
    self.fns.print = function(form) {
      var res = '', i = 0;
      while ( ! is(arguments[i], "undefined")) {
        res += JSON.stringify(arguments[i], null, 4);
        i++;
      }
      return res;
    }; // end Manana.print()

    // ...........................................  
    self.fns.context = function(form) {
      return JSON.stringify(self.context);
    }; // end Manana.context()

    // ...........................................  
    self.fns.view = function(form) {
      var out = JSON.stringify(self.view, null, 4).split("\n")
      out.unshift("<pre>");
      out.push("</pre>");
      return out.join("\n    ");
    }; // end Manana.view()

    // ...........................................  
    self.fns.whatis = function(x, form) {
      var description;

      try {
        description = '@whatis({target}) ==> '.intpol({ target: form.args[0].components.join('.') });
      } catch (e) {
        description = '@whatis() ==> ';
      }

      console.log(description, x);

      return '<h2>' + description + '<pre>' + JSON.stringify(x, null, 4) + '</pre>';
    };

    // ...........................................  
    this.addFunction = function(name, fn) {
      if ( ! isStr(name)) {
        throw new MananaError("1st arg to Manana.add_fn() must be a string");
      }

      if ( ! is(fn, "function")) {
        throw new MananaError("2nd arg to Manana.add_fn() must be a function");
      }

      self.fns[name] = fn;
    }; // end Manana.add_fn()

    this.add_fn = this.addFunction; // switching to camelcase, leaving for backward compatability

  } // end Manana() 


  // _____________________________________________ Make available in both node.js & browser 
  if (_manana_is_server_side) {
    exports['Manana'] = Manana;
    exports['MananaNamespace'] = MananaNamespace;
    exports['MananaView'] = MananaView;
    exports['MananaError'] = MananaError;
  }

  if (typeof window === 'undefined') {
    window = {};
  }
  window['Manana'] = Manana;
  window['MananaNamespace'] = MananaNamespace;
  window['MananaView'] = MananaView;
  window['MananaError'] = MananaError;

})(typeof exports === "undefined" ? {} : exports);
