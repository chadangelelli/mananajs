/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var manana_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"prog_list":4,"EOF":5,"stmt":6,"block":7,"INDENT":8,"stmt_list":9,"DEDENT":10,"html_stmt":11,"void_tag_stmt":12,"code_tag_stmt":13,"tag_stmt":14,"filter_stmt":15,"alias_stmt":16,"include_stmt":17,"with_stmt":18,"if_stmt":19,"for_stmt":20,"name":21,"fn":22,"break":23,"continue":24,"HTML":25,"i_html":26,"I_HTML_START":27,"i_html_text":28,"I_HTML_END":29,"i_html_text_el":30,"I_HTML_TEXT":31,"void_tag":32,"END_TAG":33,"tag_attrs":34,"VOID_TAG":35,"CODE_TAG":36,"END_CODE_TAG":37,"code":38,"line":39,"LINE":40,"BLANK_LINE":41,"tag":42,"text":43,"TAG":44,"tag_attr":45,"tag_attr_args":46,"TAG_ID":47,"TAG_SRC":48,"TAG_SRC_I_STRING":49,"string":50,"tag_classes":51,"TAG_ATTR":52,"EQ":53,"TAG_DATA_ATTR":54,"LPAREN":55,"tag_attr_arg_list":56,"RPAREN":57,"LBRACE":58,"tag_attr_arg_list_alt":59,"RBRACE":60,"tag_attr_arg":61,"COMMA":62,"tag_attr_arg_alt":63,"COLON":64,"TAG_CLASS":65,"FILTER":66,"word_list":67,"word":68,"WORD":69,"SPACE":70,"path_or_fn":71,"path":72,"WITH":73,"AS":74,"ID":75,"END_EXPR":76,"FOR":77,"IN":78,"BREAK":79,"CONTINUE":80,"ifs":81,"if":82,"else":83,"elifs":84,"IF":85,"conds":86,"elif":87,"ELIF":88,"cond":89,"AND":90,"OR":91,"ev":92,"NOT":93,"COND":94,"IS":95,"TYPE":96,"EXISTS":97,"ELSE":98,"INT":99,"BOOL":100,"ALIAS":101,"INCLUDE":102,"id":103,"DOT":104,"meths":105,"LBRACK":106,"RBRACK":107,"meth":108,"meth_args":109,"meth_arg":110,"FN":111,"fn_args":112,"fn_arg":113,"hash":114,"hash_data":115,"hash_pair":116,"hash_val":117,"START_NAME":118,"STRING":119,"i_string":120,"I_STRING_D":121,"i_string_text":122,"END_I_STRING_D":123,"I_STRING_S":124,"END_I_STRING_S":125,"i_string_text_el":126,"I_STRING_TEXT":127,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",10:"DEDENT",25:"HTML",27:"I_HTML_START",29:"I_HTML_END",31:"I_HTML_TEXT",33:"END_TAG",35:"VOID_TAG",36:"CODE_TAG",37:"END_CODE_TAG",40:"LINE",41:"BLANK_LINE",44:"TAG",47:"TAG_ID",48:"TAG_SRC",49:"TAG_SRC_I_STRING",52:"TAG_ATTR",53:"EQ",54:"TAG_DATA_ATTR",55:"LPAREN",57:"RPAREN",58:"LBRACE",60:"RBRACE",62:"COMMA",64:"COLON",65:"TAG_CLASS",66:"FILTER",69:"WORD",70:"SPACE",73:"WITH",74:"AS",75:"ID",76:"END_EXPR",77:"FOR",78:"IN",79:"BREAK",80:"CONTINUE",85:"IF",88:"ELIF",90:"AND",91:"OR",93:"NOT",94:"COND",95:"IS",96:"TYPE",97:"EXISTS",98:"ELSE",99:"INT",100:"BOOL",101:"ALIAS",102:"INCLUDE",104:"DOT",106:"LBRACK",107:"RBRACK",111:"FN",118:"START_NAME",119:"STRING",121:"I_STRING_D",123:"END_I_STRING_D",124:"I_STRING_S",125:"END_I_STRING_S",127:"I_STRING_TEXT"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,3],[9,2],[9,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,1],[11,1],[26,3],[28,2],[28,1],[30,1],[30,1],[12,2],[12,3],[32,1],[13,4],[13,5],[38,2],[38,1],[39,2],[39,1],[14,2],[14,3],[14,3],[14,3],[14,4],[14,4],[42,1],[34,2],[34,1],[34,1],[45,1],[45,1],[45,2],[45,1],[45,3],[45,3],[46,3],[46,3],[56,2],[56,1],[61,3],[61,4],[61,3],[61,4],[59,2],[59,1],[63,3],[63,4],[63,3],[63,4],[51,2],[51,1],[15,4],[43,1],[67,1],[67,2],[68,1],[68,1],[68,1],[68,1],[68,1],[71,1],[71,1],[18,6],[20,6],[23,1],[24,1],[19,1],[81,1],[81,2],[81,2],[81,3],[82,4],[84,2],[84,1],[87,4],[86,1],[86,3],[86,3],[89,1],[89,2],[89,3],[89,3],[89,4],[89,3],[89,4],[89,2],[89,3],[83,3],[92,1],[92,1],[92,1],[92,1],[92,1],[16,5],[17,3],[17,3],[72,1],[72,3],[72,3],[103,1],[103,4],[103,6],[103,6],[103,4],[103,6],[103,6],[103,5],[103,5],[103,4],[105,1],[105,3],[108,3],[108,4],[109,3],[109,1],[110,1],[110,1],[110,1],[22,3],[22,4],[112,3],[112,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,3],[113,3],[113,3],[113,3],[113,3],[113,3],[113,3],[114,3],[114,4],[115,3],[115,1],[116,3],[117,1],[117,1],[117,1],[117,1],[117,1],[117,1],[21,3],[50,1],[50,1],[120,3],[120,3],[122,2],[122,1],[126,1],[126,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0-1]; 
break;
case 6: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = [$$[$0]]; 
break;
case 22: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 24: 
      var body = [$$[$0-2]];
      body.push.apply(body, $$[$0-1]);
      body.push($$[$0]);
      this.$ = new MananaStringNode(body, new Loc(_$[$0-2], _$[$0])); 
    
break;
case 25: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 26: this.$ = [$$[$0]]; 
break;
case 29: this.$ = new VoidTagNode($$[$0-1], null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 30: this.$ = new VoidTagNode($$[$0-2], $$[$0-1],   new Loc(_$[$0-2], _$[$0-1])); 
break;
case 31: this.$ = $$[$0]; 
break;
case 32: this.$ = new CodeTagNode($$[$0-3], null, $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 33: this.$ = new CodeTagNode($$[$0-4], $$[$0-3],   $$[$0-1], new Loc(_$[$0-4], _$[$0-1])); 
break;
case 34: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 35: this.$ = [$$[$0]]; 
break;
case 36: this.$ = $$[$0-1] + $$[$0] 
break;
case 37: this.$ = ''; 
break;
case 38: this.$ = new TagNode($$[$0-1], null, null, null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 39: this.$ = new TagNode($$[$0-2], null, $$[$0-1],   null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 40: this.$ = new TagNode($$[$0-2], null, null, $$[$0],   new Loc(_$[$0-2], _$[$0])); 
break;
case 41: this.$ = new TagNode($$[$0-2], $$[$0-1],   null, null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 42: this.$ = new TagNode($$[$0-3], $$[$0-2],   $$[$0-1],   null, new Loc(_$[$0-3], _$[$0-1])); 
break;
case 43: this.$ = new TagNode($$[$0-3], $$[$0-2],   null, $$[$0],   new Loc(_$[$0-3], _$[$0])); 
break;
case 44: this.$ = $$[$0]; 
break;
case 45: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 46: this.$ = [$$[$0]]; 
break;
case 47: this.$ = $$[$0]; 
break;
case 48: this.$ = ['id', $$[$0]]; 
break;
case 49: this.$ = ['src', new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])) ]; 
break;
case 50: this.$ = ['src', $$[$0]]; 
break;
case 51: this.$ = ['class', $$[$0].join(" ")]; 
break;
case 52: this.$ = ['attr', $$[$0-2], $$[$0]]; 
break;
case 53: this.$ = ['data', $$[$0-2], $$[$0]]; 
break;
case 54: this.$ = $$[$0-1]; 
break;
case 55: this.$ = $$[$0-1]; 
break;
case 56: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 57: this.$ = [$$[$0]]; 
break;
case 58: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 59: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 60: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 61: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 62: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 63: this.$ = [$$[$0]]; 
break;
case 64: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 65: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 66: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 67: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 68: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 69: this.$ = [$$[$0]]; 
break;
case 70: this.$ = new FilterNode($$[$0-3], $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 71: this.$ = new TextNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 72: this.$ = [$$[$0]]; 
break;
case 73: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 81: this.$ = new WithNode($$[$0-4], $$[$0-2], $$[$0], new Loc(_$[$0-5], _$[$0])); 
break;
case 82: this.$ = new ForNode($$[$0-4], $$[$0-2], $$[$0] , new Loc(_$[$0-5], _$[$0])) ; 
break;
case 83: this.$ = new BreakNode(new Loc(_$[$0], _$[$0])); 
break;
case 84: this.$ = new ContinueNode(new Loc(_$[$0], _$[$0])); 
break;
case 85: this.$ = new IfNode($$[$0]); 
break;
case 86: this.$ = [$$[$0]]; 
break;
case 87: this.$ = [$$[$0-1], $$[$0]]; 
break;
case 88: this.$ = [$$[$0-1]]; this.$.push.apply(this.$, $$[$0]); 
break;
case 89: this.$ = [$$[$0-2]]; this.$.push.apply(this.$, $$[$0-1]); this.$.push($$[$0]); 
break;
case 90: this.$ = { case: $$[$0-3], conditions: $$[$0-2], body: $$[$0] }; 
break;
case 91: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 92: this.$ = [$$[$0]]; 
break;
case 93: this.$ = { case: $$[$0-3], conditions: $$[$0-2], body: $$[$0] }; 
break;
case 94: this.$ = [[null,  $$[$0]]]; 
break;
case 95: this.$ = $$[$0-2]; this.$.push([$$[$0-1], $$[$0]]); 
break;
case 96: this.$ = $$[$0-2]; this.$.push([$$[$0-1], $$[$0]]); 
break;
case 97: this.$ = ["true", $$[$0]]; 
break;
case 98: this.$ = ["not_true", $$[$0-1]]; 
break;
case 99: this.$ = [$$[$0-1], $$[$0-2], $$[$0]]; 
break;
case 100: this.$ = [$$[$0-1], $$[$0-2], $$[$0]]; 
break;
case 101: this.$ = ["not_is", $$[$0-3], $$[$0]]; 
break;
case 102: this.$ = [$$[$0-1], $$[$0-2], $$[$0]]; 
break;
case 103: this.$ = ["not_in", $$[$0-3], $$[$0]]; 
break;
case 104: this.$ = [$$[$0-1], $$[$0]]; 
break;
case 105: this.$ = ["not_exists", $$[$0-1]]; 
break;
case 106: this.$ = { case: $$[$0-2], body: $$[$0] }; 
break;
case 112: this.$ = new AliasNode($$[$0-3], $$[$0-1], new Loc(_$[$0-4], _$[$0])); 
break;
case 113: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 114: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 115: this.$ = new PathNode(null, $$[$0]  , null, new Loc(_$[$0], _$[$0])); 
break;
case 116: this.$ = new PathNode($$[$0-2]  , $$[$0]  , null, new Loc(_$[$0-2], _$[$0])); 
break;
case 117: this.$ = new PathNode($$[$0-2]  , null, $$[$0]  , new Loc(_$[$0-2], _$[$0])); 
break;
case 118: this.$ = new IdNode($$[$0], null, null, new Loc(_$[$0], _$[$0])); 
break;
case 119: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 120: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 121: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 122: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 123: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 124: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 125: this.$ = new IdNode($$[$0-4], 0   , $$[$0-1]  , new Loc(_$[$0-4], _$[$0])); 
break;
case 126: this.$ = new IdNode($$[$0-4], $$[$0-2]  , '*' , new Loc(_$[$0-4], _$[$0])); 
break;
case 127: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 128: this.$ = new MethodChainNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 129: this.$ = $$[$0-2]; this.$.chain.push($$[$0])                        ; 
break;
case 130: this.$ = new MethodNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 131: this.$ = new MethodNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 132: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 133: this.$ = [$$[$0]]; 
break;
case 137: this.$ = new FunctionNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 138: this.$ = new FunctionNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 139: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 140: this.$ = [$$[$0]]; 
break;
case 148: this.$ = $$[$0]; 
break;
case 149: this.$ = $$[$0]; 
break;
case 150: this.$ = $$[$0]; 
break;
case 151: this.$ = $$[$0]; 
break;
case 152: this.$ = $$[$0]; 
break;
case 153: this.$ = $$[$0]; 
break;
case 154: this.$ = $$[$0]; 
break;
case 155: this.$ = new MananaHash($$[$0-1]); 
break;
case 156: this.$ = new MananaHash($$[$0-2]); 
break;
case 157: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 158: this.$ = [$$[$0]]; 
break;
case 159: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 166: this.$ = $$[$0-1]; 
break;
case 167: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 169: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 170: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 171: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 172: this.$ = [$$[$0]]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,19],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:[1,20],26:21,27:[1,35],32:22,35:[1,36],36:[1,23],42:24,44:[1,37],66:[1,25],73:[1,28],77:[1,30],79:[1,33],80:[1,34],81:29,82:38,85:[1,39],101:[1,26],102:[1,27],111:[1,32],118:[1,31]},{1:[3]},{5:[1,40],6:41,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:[1,20],26:21,27:[1,35],32:22,35:[1,36],36:[1,23],42:24,44:[1,37],66:[1,25],73:[1,28],77:[1,30],79:[1,33],80:[1,34],81:29,82:38,85:[1,39],101:[1,26],102:[1,27],111:[1,32],118:[1,31]},{5:[2,3],25:[2,3],27:[2,3],35:[2,3],36:[2,3],44:[2,3],66:[2,3],73:[2,3],77:[2,3],79:[2,3],80:[2,3],85:[2,3],101:[2,3],102:[2,3],111:[2,3],118:[2,3]},{5:[2,4],25:[2,4],27:[2,4],35:[2,4],36:[2,4],44:[2,4],66:[2,4],73:[2,4],77:[2,4],79:[2,4],80:[2,4],85:[2,4],101:[2,4],102:[2,4],111:[2,4],118:[2,4]},{5:[2,8],10:[2,8],25:[2,8],27:[2,8],35:[2,8],36:[2,8],44:[2,8],66:[2,8],73:[2,8],77:[2,8],79:[2,8],80:[2,8],85:[2,8],101:[2,8],102:[2,8],111:[2,8],118:[2,8]},{5:[2,9],10:[2,9],25:[2,9],27:[2,9],35:[2,9],36:[2,9],44:[2,9],66:[2,9],73:[2,9],77:[2,9],79:[2,9],80:[2,9],85:[2,9],101:[2,9],102:[2,9],111:[2,9],118:[2,9]},{5:[2,10],10:[2,10],25:[2,10],27:[2,10],35:[2,10],36:[2,10],44:[2,10],66:[2,10],73:[2,10],77:[2,10],79:[2,10],80:[2,10],85:[2,10],101:[2,10],102:[2,10],111:[2,10],118:[2,10]},{5:[2,11],10:[2,11],25:[2,11],27:[2,11],35:[2,11],36:[2,11],44:[2,11],66:[2,11],73:[2,11],77:[2,11],79:[2,11],80:[2,11],85:[2,11],101:[2,11],102:[2,11],111:[2,11],118:[2,11]},{5:[2,12],10:[2,12],25:[2,12],27:[2,12],35:[2,12],36:[2,12],44:[2,12],66:[2,12],73:[2,12],77:[2,12],79:[2,12],80:[2,12],85:[2,12],101:[2,12],102:[2,12],111:[2,12],118:[2,12]},{5:[2,13],10:[2,13],25:[2,13],27:[2,13],35:[2,13],36:[2,13],44:[2,13],66:[2,13],73:[2,13],77:[2,13],79:[2,13],80:[2,13],85:[2,13],101:[2,13],102:[2,13],111:[2,13],118:[2,13]},{5:[2,14],10:[2,14],25:[2,14],27:[2,14],35:[2,14],36:[2,14],44:[2,14],66:[2,14],73:[2,14],77:[2,14],79:[2,14],80:[2,14],85:[2,14],101:[2,14],102:[2,14],111:[2,14],118:[2,14]},{5:[2,15],10:[2,15],25:[2,15],27:[2,15],35:[2,15],36:[2,15],44:[2,15],66:[2,15],73:[2,15],77:[2,15],79:[2,15],80:[2,15],85:[2,15],101:[2,15],102:[2,15],111:[2,15],118:[2,15]},{5:[2,16],10:[2,16],25:[2,16],27:[2,16],35:[2,16],36:[2,16],44:[2,16],66:[2,16],73:[2,16],77:[2,16],79:[2,16],80:[2,16],85:[2,16],101:[2,16],102:[2,16],111:[2,16],118:[2,16]},{5:[2,17],10:[2,17],25:[2,17],27:[2,17],35:[2,17],36:[2,17],44:[2,17],66:[2,17],73:[2,17],77:[2,17],79:[2,17],80:[2,17],85:[2,17],101:[2,17],102:[2,17],111:[2,17],118:[2,17]},{5:[2,18],10:[2,18],25:[2,18],27:[2,18],35:[2,18],36:[2,18],44:[2,18],66:[2,18],73:[2,18],77:[2,18],79:[2,18],80:[2,18],85:[2,18],101:[2,18],102:[2,18],111:[2,18],118:[2,18]},{5:[2,19],10:[2,19],25:[2,19],27:[2,19],35:[2,19],36:[2,19],44:[2,19],66:[2,19],73:[2,19],77:[2,19],79:[2,19],80:[2,19],85:[2,19],101:[2,19],102:[2,19],111:[2,19],118:[2,19]},{5:[2,20],10:[2,20],25:[2,20],27:[2,20],35:[2,20],36:[2,20],44:[2,20],66:[2,20],73:[2,20],77:[2,20],79:[2,20],80:[2,20],85:[2,20],101:[2,20],102:[2,20],111:[2,20],118:[2,20]},{5:[2,21],10:[2,21],25:[2,21],27:[2,21],35:[2,21],36:[2,21],44:[2,21],66:[2,21],73:[2,21],77:[2,21],79:[2,21],80:[2,21],85:[2,21],101:[2,21],102:[2,21],111:[2,21],118:[2,21]},{6:43,9:42,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:[1,20],26:21,27:[1,35],32:22,35:[1,36],36:[1,23],42:24,44:[1,37],66:[1,25],73:[1,28],77:[1,30],79:[1,33],80:[1,34],81:29,82:38,85:[1,39],101:[1,26],102:[1,27],111:[1,32],118:[1,31]},{5:[2,22],10:[2,22],25:[2,22],27:[2,22],35:[2,22],36:[2,22],44:[2,22],66:[2,22],73:[2,22],77:[2,22],79:[2,22],80:[2,22],85:[2,22],101:[2,22],102:[2,22],111:[2,22],118:[2,22]},{5:[2,23],10:[2,23],25:[2,23],27:[2,23],35:[2,23],36:[2,23],44:[2,23],66:[2,23],73:[2,23],77:[2,23],79:[2,23],80:[2,23],85:[2,23],101:[2,23],102:[2,23],111:[2,23],118:[2,23]},{33:[1,44],34:45,45:46,46:47,47:[1,48],48:[1,49],49:[1,50],51:51,52:[1,52],54:[1,53],55:[1,54],58:[1,55],65:[1,56]},{34:58,37:[1,57],45:46,46:47,47:[1,48],48:[1,49],49:[1,50],51:51,52:[1,52],54:[1,53],55:[1,54],58:[1,55],65:[1,56]},{21:65,22:66,33:[1,59],34:61,43:60,45:46,46:47,47:[1,48],48:[1,49],49:[1,50],50:67,51:51,52:[1,52],54:[1,53],55:[1,54],58:[1,55],65:[1,56],67:62,68:63,69:[1,64],70:[1,68],111:[1,32],118:[1,31],119:[1,69],120:70,121:[1,71],124:[1,72]},{8:[1,73]},{22:76,71:74,72:75,75:[1,78],103:77,111:[1,32]},{50:79,72:80,75:[1,78],103:77,119:[1,69],120:70,121:[1,71],124:[1,72]},{22:76,71:81,72:75,75:[1,78],103:77,111:[1,32]},{5:[2,85],10:[2,85],25:[2,85],27:[2,85],35:[2,85],36:[2,85],44:[2,85],66:[2,85],73:[2,85],77:[2,85],79:[2,85],80:[2,85],85:[2,85],101:[2,85],102:[2,85],111:[2,85],118:[2,85]},{75:[1,82]},{72:83,75:[1,78],103:77},{55:[1,84]},{5:[2,83],10:[2,83],25:[2,83],27:[2,83],35:[2,83],36:[2,83],44:[2,83],66:[2,83],73:[2,83],77:[2,83],79:[2,83],80:[2,83],85:[2,83],101:[2,83],102:[2,83],111:[2,83],118:[2,83]},{5:[2,84],10:[2,84],25:[2,84],27:[2,84],35:[2,84],36:[2,84],44:[2,84],66:[2,84],73:[2,84],77:[2,84],79:[2,84],80:[2,84],85:[2,84],101:[2,84],102:[2,84],111:[2,84],118:[2,84]},{21:88,28:85,30:86,31:[1,87],118:[1,31]},{33:[2,31],47:[2,31],48:[2,31],49:[2,31],52:[2,31],54:[2,31],55:[2,31],58:[2,31],65:[2,31]},{33:[2,44],47:[2,44],48:[2,44],49:[2,44],52:[2,44],54:[2,44],55:[2,44],58:[2,44],65:[2,44],69:[2,44],70:[2,44],111:[2,44],118:[2,44],119:[2,44],121:[2,44],124:[2,44]},{5:[2,86],10:[2,86],25:[2,86],27:[2,86],35:[2,86],36:[2,86],44:[2,86],66:[2,86],73:[2,86],77:[2,86],79:[2,86],80:[2,86],83:89,84:90,85:[2,86],87:92,88:[1,93],98:[1,91],101:[2,86],102:[2,86],111:[2,86],118:[2,86]},{22:103,50:99,72:102,75:[1,78],86:94,89:95,92:96,93:[1,97],97:[1,98],99:[1,100],100:[1,101],103:77,111:[1,32],119:[1,69],120:70,121:[1,71],124:[1,72]},{1:[2,1]},{5:[2,2],25:[2,2],27:[2,2],35:[2,2],36:[2,2],44:[2,2],66:[2,2],73:[2,2],77:[2,2],79:[2,2],80:[2,2],85:[2,2],101:[2,2],102:[2,2],111:[2,2],118:[2,2]},{6:105,10:[1,104],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:[1,20],26:21,27:[1,35],32:22,35:[1,36],36:[1,23],42:24,44:[1,37],66:[1,25],73:[1,28],77:[1,30],79:[1,33],80:[1,34],81:29,82:38,85:[1,39],101:[1,26],102:[1,27],111:[1,32],118:[1,31]},{10:[2,7],25:[2,7],27:[2,7],35:[2,7],36:[2,7],44:[2,7],66:[2,7],73:[2,7],77:[2,7],79:[2,7],80:[2,7],85:[2,7],101:[2,7],102:[2,7],111:[2,7],118:[2,7]},{5:[2,29],10:[2,29],25:[2,29],27:[2,29],35:[2,29],36:[2,29],44:[2,29],66:[2,29],73:[2,29],77:[2,29],79:[2,29],80:[2,29],85:[2,29],101:[2,29],102:[2,29],111:[2,29],118:[2,29]},{33:[1,106],45:107,47:[1,48],48:[1,49],49:[1,50],51:51,52:[1,52],54:[1,53],65:[1,56]},{33:[2,46],37:[2,46],47:[2,46],48:[2,46],49:[2,46],52:[2,46],54:[2,46],65:[2,46],69:[2,46],70:[2,46],111:[2,46],118:[2,46],119:[2,46],121:[2,46],124:[2,46]},{33:[2,47],37:[2,47],47:[2,47],48:[2,47],49:[2,47],52:[2,47],54:[2,47],65:[2,47],69:[2,47],70:[2,47],111:[2,47],118:[2,47],119:[2,47],121:[2,47],124:[2,47]},{33:[2,48],37:[2,48],47:[2,48],48:[2,48],49:[2,48],52:[2,48],54:[2,48],65:[2,48],69:[2,48],70:[2,48],111:[2,48],118:[2,48],119:[2,48],121:[2,48],124:[2,48]},{33:[2,49],37:[2,49],47:[2,49],48:[2,49],49:[2,49],52:[2,49],54:[2,49],65:[2,49],69:[2,49],70:[2,49],111:[2,49],118:[2,49],119:[2,49],121:[2,49],124:[2,49]},{50:108,119:[1,69],120:70,121:[1,71],124:[1,72]},{33:[2,51],37:[2,51],47:[2,51],48:[2,51],49:[2,51],52:[2,51],54:[2,51],65:[1,109],69:[2,51],70:[2,51],111:[2,51],118:[2,51],119:[2,51],121:[2,51],124:[2,51]},{53:[1,110]},{53:[1,111]},{52:[1,114],54:[1,115],56:112,61:113},{52:[1,118],54:[1,119],59:116,63:117},{33:[2,69],37:[2,69],47:[2,69],48:[2,69],49:[2,69],52:[2,69],54:[2,69],65:[2,69],69:[2,69],70:[2,69],111:[2,69],118:[2,69],119:[2,69],121:[2,69],124:[2,69]},{8:[1,122],38:120,39:121,41:[1,123]},{37:[1,124],45:107,47:[1,48],48:[1,49],49:[1,50],51:51,52:[1,52],54:[1,53],65:[1,56]},{5:[2,38],7:125,8:[1,19],10:[2,38],25:[2,38],27:[2,38],35:[2,38],36:[2,38],44:[2,38],66:[2,38],73:[2,38],77:[2,38],79:[2,38],80:[2,38],85:[2,38],101:[2,38],102:[2,38],111:[2,38],118:[2,38]},{33:[1,126]},{21:65,22:66,33:[1,127],43:128,45:107,47:[1,48],48:[1,49],49:[1,50],50:67,51:51,52:[1,52],54:[1,53],65:[1,56],67:62,68:63,69:[1,64],70:[1,68],111:[1,32],118:[1,31],119:[1,69],120:70,121:[1,71],124:[1,72]},{10:[2,71],21:65,22:66,33:[2,71],50:67,68:129,69:[1,64],70:[1,68],111:[1,32],118:[1,31],119:[1,69],120:70,121:[1,71],124:[1,72]},{10:[2,72],33:[2,72],69:[2,72],70:[2,72],111:[2,72],118:[2,72],119:[2,72],121:[2,72],124:[2,72]},{10:[2,74],33:[2,74],69:[2,74],70:[2,74],111:[2,74],118:[2,74],119:[2,74],121:[2,74],124:[2,74]},{10:[2,75],33:[2,75],69:[2,75],70:[2,75],111:[2,75],118:[2,75],119:[2,75],121:[2,75],124:[2,75]},{10:[2,76],33:[2,76],69:[2,76],70:[2,76],111:[2,76],118:[2,76],119:[2,76],121:[2,76],124:[2,76]},{10:[2,77],33:[2,77],69:[2,77],70:[2,77],111:[2,77],118:[2,77],119:[2,77],121:[2,77],124:[2,77]},{10:[2,78],33:[2,78],69:[2,78],70:[2,78],111:[2,78],118:[2,78],119:[2,78],121:[2,78],124:[2,78]},{10:[2,167],33:[2,167],37:[2,167],47:[2,167],48:[2,167],49:[2,167],52:[2,167],54:[2,167],57:[2,167],60:[2,167],62:[2,167],65:[2,167],69:[2,167],70:[2,167],76:[2,167],78:[2,167],90:[2,167],91:[2,167],93:[2,167],94:[2,167],95:[2,167],107:[2,167],111:[2,167],118:[2,167],119:[2,167],121:[2,167],124:[2,167]},{10:[2,168],33:[2,168],37:[2,168],47:[2,168],48:[2,168],49:[2,168],52:[2,168],54:[2,168],57:[2,168],60:[2,168],62:[2,168],65:[2,168],69:[2,168],70:[2,168],76:[2,168],78:[2,168],90:[2,168],91:[2,168],93:[2,168],94:[2,168],95:[2,168],107:[2,168],111:[2,168],118:[2,168],119:[2,168],121:[2,168],124:[2,168]},{21:132,118:[1,31],122:130,126:131,127:[1,133]},{21:132,118:[1,31],122:134,126:131,127:[1,133]},{21:65,22:66,43:135,50:67,67:62,68:63,69:[1,64],70:[1,68],111:[1,32],118:[1,31],119:[1,69],120:70,121:[1,71],124:[1,72]},{74:[1,136]},{74:[2,79],104:[1,137]},{74:[2,80]},{57:[2,115],60:[2,115],62:[2,115],64:[2,115],74:[2,115],76:[2,115],78:[2,115],90:[2,115],91:[2,115],93:[2,115],94:[2,115],95:[2,115],104:[2,115],107:[2,115]},{57:[2,118],60:[2,118],62:[2,118],64:[2,118],74:[2,118],76:[2,118],78:[2,118],90:[2,118],91:[2,118],93:[2,118],94:[2,118],95:[2,118],104:[2,118],106:[1,138],107:[2,118]},{76:[1,139]},{76:[1,140],104:[1,137]},{74:[1,141]},{78:[1,142]},{60:[1,143],104:[1,137]},{22:150,50:149,57:[1,144],58:[1,155],72:147,75:[1,154],96:[1,153],99:[1,148],100:[1,152],103:77,111:[1,32],112:145,113:146,114:151,119:[1,69],120:70,121:[1,71],124:[1,72]},{21:88,29:[1,156],30:157,31:[1,87],118:[1,31]},{29:[2,26],31:[2,26],118:[2,26]},{29:[2,27],31:[2,27],118:[2,27]},{29:[2,28],31:[2,28],118:[2,28]},{5:[2,87],10:[2,87],25:[2,87],27:[2,87],35:[2,87],36:[2,87],44:[2,87],66:[2,87],73:[2,87],77:[2,87],79:[2,87],80:[2,87],85:[2,87],101:[2,87],102:[2,87],111:[2,87],118:[2,87]},{5:[2,88],10:[2,88],25:[2,88],27:[2,88],35:[2,88],36:[2,88],44:[2,88],66:[2,88],73:[2,88],77:[2,88],79:[2,88],80:[2,88],83:158,85:[2,88],87:159,88:[1,93],98:[1,91],101:[2,88],102:[2,88],111:[2,88],118:[2,88]},{76:[1,160]},{5:[2,92],10:[2,92],25:[2,92],27:[2,92],35:[2,92],36:[2,92],44:[2,92],66:[2,92],73:[2,92],77:[2,92],79:[2,92],80:[2,92],85:[2,92],88:[2,92],98:[2,92],101:[2,92],102:[2,92],111:[2,92],118:[2,92]},{22:103,50:99,72:102,75:[1,78],86:161,89:95,92:96,93:[1,97],97:[1,98],99:[1,100],100:[1,101],103:77,111:[1,32],119:[1,69],120:70,121:[1,71],124:[1,72]},{76:[1,162],90:[1,163],91:[1,164]},{76:[2,94],90:[2,94],91:[2,94]},{76:[2,97],78:[1,168],90:[2,97],91:[2,97],93:[1,167],94:[1,165],95:[1,166]},{22:103,50:99,72:102,75:[1,78],92:169,97:[1,170],99:[1,100],100:[1,101],103:77,111:[1,32],119:[1,69],120:70,121:[1,71],124:[1,72]},{22:103,50:99,72:102,75:[1,78],92:171,99:[1,100],100:[1,101],103:77,111:[1,32],119:[1,69],120:70,121:[1,71],124:[1,72]},{76:[2,107],78:[2,107],90:[2,107],91:[2,107],93:[2,107],94:[2,107],95:[2,107]},{76:[2,108],78:[2,108],90:[2,108],91:[2,108],93:[2,108],94:[2,108],95:[2,108]},{76:[2,109],78:[2,109],90:[2,109],91:[2,109],93:[2,109],94:[2,109],95:[2,109]},{76:[2,110],78:[2,110],90:[2,110],91:[2,110],93:[2,110],94:[2,110],95:[2,110],104:[1,137]},{76:[2,111],78:[2,111],90:[2,111],91:[2,111],93:[2,111],94:[2,111],95:[2,111]},{5:[2,5],10:[2,5],25:[2,5],27:[2,5],35:[2,5],36:[2,5],44:[2,5],66:[2,5],73:[2,5],77:[2,5],79:[2,5],80:[2,5],85:[2,5],88:[2,5],98:[2,5],101:[2,5],102:[2,5],111:[2,5],118:[2,5]},{10:[2,6],25:[2,6],27:[2,6],35:[2,6],36:[2,6],44:[2,6],66:[2,6],73:[2,6],77:[2,6],79:[2,6],80:[2,6],85:[2,6],101:[2,6],102:[2,6],111:[2,6],118:[2,6]},{5:[2,30],10:[2,30],25:[2,30],27:[2,30],35:[2,30],36:[2,30],44:[2,30],66:[2,30],73:[2,30],77:[2,30],79:[2,30],80:[2,30],85:[2,30],101:[2,30],102:[2,30],111:[2,30],118:[2,30]},{33:[2,45],37:[2,45],47:[2,45],48:[2,45],49:[2,45],52:[2,45],54:[2,45],65:[2,45],69:[2,45],70:[2,45],111:[2,45],118:[2,45],119:[2,45],121:[2,45],124:[2,45]},{33:[2,50],37:[2,50],47:[2,50],48:[2,50],49:[2,50],52:[2,50],54:[2,50],65:[2,50],69:[2,50],70:[2,50],111:[2,50],118:[2,50],119:[2,50],121:[2,50],124:[2,50]},{33:[2,68],37:[2,68],47:[2,68],48:[2,68],49:[2,68],52:[2,68],54:[2,68],65:[2,68],69:[2,68],70:[2,68],111:[2,68],118:[2,68],119:[2,68],121:[2,68],124:[2,68]},{50:172,119:[1,69],120:70,121:[1,71],124:[1,72]},{50:173,119:[1,69],120:70,121:[1,71],124:[1,72]},{52:[1,114],54:[1,115],57:[1,174],61:175},{52:[2,57],54:[2,57],57:[2,57]},{53:[1,176]},{53:[1,177]},{52:[1,118],54:[1,119],60:[1,178],63:179},{52:[2,63],54:[2,63],60:[2,63]},{64:[1,180]},{64:[1,181]},{8:[1,122],10:[1,182],39:183,41:[1,123]},{8:[2,35],10:[2,35],41:[2,35]},{40:[1,184]},{8:[2,37],10:[2,37],41:[2,37]},{8:[1,122],38:185,39:121,41:[1,123]},{5:[2,40],10:[2,40],25:[2,40],27:[2,40],35:[2,40],36:[2,40],44:[2,40],66:[2,40],73:[2,40],77:[2,40],79:[2,40],80:[2,40],85:[2,40],101:[2,40],102:[2,40],111:[2,40],118:[2,40]},{5:[2,39],10:[2,39],25:[2,39],27:[2,39],35:[2,39],36:[2,39],44:[2,39],66:[2,39],73:[2,39],77:[2,39],79:[2,39],80:[2,39],85:[2,39],101:[2,39],102:[2,39],111:[2,39],118:[2,39]},{5:[2,41],7:186,8:[1,19],10:[2,41],25:[2,41],27:[2,41],35:[2,41],36:[2,41],44:[2,41],66:[2,41],73:[2,41],77:[2,41],79:[2,41],80:[2,41],85:[2,41],101:[2,41],102:[2,41],111:[2,41],118:[2,41]},{33:[1,187]},{10:[2,73],33:[2,73],69:[2,73],70:[2,73],111:[2,73],118:[2,73],119:[2,73],121:[2,73],124:[2,73]},{21:132,118:[1,31],123:[1,188],126:189,127:[1,133]},{118:[2,172],123:[2,172],125:[2,172],127:[2,172]},{118:[2,173],123:[2,173],125:[2,173],127:[2,173]},{118:[2,174],123:[2,174],125:[2,174],127:[2,174]},{21:132,118:[1,31],125:[1,190],126:189,127:[1,133]},{10:[1,191]},{75:[1,192]},{75:[1,195],103:193,105:194,108:196},{50:200,64:[1,199],72:198,75:[1,78],99:[1,197],103:77,119:[1,69],120:70,121:[1,71],124:[1,72]},{5:[2,113],10:[2,113],25:[2,113],27:[2,113],35:[2,113],36:[2,113],44:[2,113],66:[2,113],73:[2,113],77:[2,113],79:[2,113],80:[2,113],85:[2,113],101:[2,113],102:[2,113],111:[2,113],118:[2,113]},{5:[2,114],10:[2,114],25:[2,114],27:[2,114],35:[2,114],36:[2,114],44:[2,114],66:[2,114],73:[2,114],77:[2,114],79:[2,114],80:[2,114],85:[2,114],101:[2,114],102:[2,114],111:[2,114],118:[2,114]},{75:[1,201]},{72:202,75:[1,78],103:77},{5:[2,166],10:[2,166],25:[2,166],27:[2,166],29:[2,166],31:[2,166],33:[2,166],35:[2,166],36:[2,166],44:[2,166],66:[2,166],69:[2,166],70:[2,166],73:[2,166],77:[2,166],79:[2,166],80:[2,166],85:[2,166],101:[2,166],102:[2,166],111:[2,166],118:[2,166],119:[2,166],121:[2,166],123:[2,166],124:[2,166],125:[2,166],127:[2,166]},{5:[2,137],10:[2,137],25:[2,137],27:[2,137],33:[2,137],35:[2,137],36:[2,137],44:[2,137],57:[2,137],60:[2,137],62:[2,137],66:[2,137],69:[2,137],70:[2,137],73:[2,137],74:[2,137],76:[2,137],77:[2,137],78:[2,137],79:[2,137],80:[2,137],85:[2,137],90:[2,137],91:[2,137],93:[2,137],94:[2,137],95:[2,137],101:[2,137],102:[2,137],111:[2,137],118:[2,137],119:[2,137],121:[2,137],124:[2,137]},{57:[1,203],62:[1,204]},{57:[2,140],62:[2,140]},{57:[2,141],62:[2,141],104:[1,137]},{57:[2,142],62:[2,142]},{57:[2,143],62:[2,143]},{57:[2,144],62:[2,144]},{57:[2,145],62:[2,145]},{57:[2,146],62:[2,146]},{57:[2,147],62:[2,147]},{53:[1,205],57:[2,118],62:[2,118],104:[2,118],106:[1,138]},{75:[1,208],115:206,116:207},{5:[2,24],10:[2,24],25:[2,24],27:[2,24],35:[2,24],36:[2,24],44:[2,24],66:[2,24],73:[2,24],77:[2,24],79:[2,24],80:[2,24],85:[2,24],101:[2,24],102:[2,24],111:[2,24],118:[2,24]},{29:[2,25],31:[2,25],118:[2,25]},{5:[2,89],10:[2,89],25:[2,89],27:[2,89],35:[2,89],36:[2,89],44:[2,89],66:[2,89],73:[2,89],77:[2,89],79:[2,89],80:[2,89],85:[2,89],101:[2,89],102:[2,89],111:[2,89],118:[2,89]},{5:[2,91],10:[2,91],25:[2,91],27:[2,91],35:[2,91],36:[2,91],44:[2,91],66:[2,91],73:[2,91],77:[2,91],79:[2,91],80:[2,91],85:[2,91],88:[2,91],98:[2,91],101:[2,91],102:[2,91],111:[2,91],118:[2,91]},{7:209,8:[1,19]},{76:[1,210],90:[1,163],91:[1,164]},{7:211,8:[1,19]},{22:103,50:99,72:102,75:[1,78],89:212,92:96,93:[1,97],97:[1,98],99:[1,100],100:[1,101],103:77,111:[1,32],119:[1,69],120:70,121:[1,71],124:[1,72]},{22:103,50:99,72:102,75:[1,78],89:213,92:96,93:[1,97],97:[1,98],99:[1,100],100:[1,101],103:77,111:[1,32],119:[1,69],120:70,121:[1,71],124:[1,72]},{22:103,50:99,72:102,75:[1,78],92:214,99:[1,100],100:[1,101],103:77,111:[1,32],119:[1,69],120:70,121:[1,71],124:[1,72]},{96:[1,215]},{78:[1,217],95:[1,216]},{22:103,50:99,72:102,75:[1,78],92:218,99:[1,100],100:[1,101],103:77,111:[1,32],119:[1,69],120:70,121:[1,71],124:[1,72]},{76:[2,98],90:[2,98],91:[2,98]},{22:103,50:99,72:102,75:[1,78],92:219,99:[1,100],100:[1,101],103:77,111:[1,32],119:[1,69],120:70,121:[1,71],124:[1,72]},{76:[2,104],90:[2,104],91:[2,104]},{33:[2,52],37:[2,52],47:[2,52],48:[2,52],49:[2,52],52:[2,52],54:[2,52],65:[2,52],69:[2,52],70:[2,52],111:[2,52],118:[2,52],119:[2,52],121:[2,52],124:[2,52]},{33:[2,53],37:[2,53],47:[2,53],48:[2,53],49:[2,53],52:[2,53],54:[2,53],65:[2,53],69:[2,53],70:[2,53],111:[2,53],118:[2,53],119:[2,53],121:[2,53],124:[2,53]},{33:[2,54],37:[2,54],47:[2,54],48:[2,54],49:[2,54],52:[2,54],54:[2,54],65:[2,54],69:[2,54],70:[2,54],111:[2,54],118:[2,54],119:[2,54],121:[2,54],124:[2,54]},{52:[2,56],54:[2,56],57:[2,56]},{50:220,119:[1,69],120:70,121:[1,71],124:[1,72]},{50:221,119:[1,69],120:70,121:[1,71],124:[1,72]},{33:[2,55],37:[2,55],47:[2,55],48:[2,55],49:[2,55],52:[2,55],54:[2,55],65:[2,55],69:[2,55],70:[2,55],111:[2,55],118:[2,55],119:[2,55],121:[2,55],124:[2,55]},{52:[2,62],54:[2,62],60:[2,62]},{50:222,119:[1,69],120:70,121:[1,71],124:[1,72]},{50:223,119:[1,69],120:70,121:[1,71],124:[1,72]},{5:[2,32],10:[2,32],25:[2,32],27:[2,32],35:[2,32],36:[2,32],44:[2,32],66:[2,32],73:[2,32],77:[2,32],79:[2,32],80:[2,32],85:[2,32],101:[2,32],102:[2,32],111:[2,32],118:[2,32]},{8:[2,34],10:[2,34],41:[2,34]},{8:[2,36],10:[2,36],41:[2,36]},{8:[1,122],10:[1,224],39:183,41:[1,123]},{5:[2,43],10:[2,43],25:[2,43],27:[2,43],35:[2,43],36:[2,43],44:[2,43],66:[2,43],73:[2,43],77:[2,43],79:[2,43],80:[2,43],85:[2,43],101:[2,43],102:[2,43],111:[2,43],118:[2,43]},{5:[2,42],10:[2,42],25:[2,42],27:[2,42],35:[2,42],36:[2,42],44:[2,42],66:[2,42],73:[2,42],77:[2,42],79:[2,42],80:[2,42],85:[2,42],101:[2,42],102:[2,42],111:[2,42],118:[2,42]},{10:[2,169],33:[2,169],37:[2,169],47:[2,169],48:[2,169],49:[2,169],52:[2,169],54:[2,169],57:[2,169],60:[2,169],62:[2,169],65:[2,169],69:[2,169],70:[2,169],76:[2,169],78:[2,169],90:[2,169],91:[2,169],93:[2,169],94:[2,169],95:[2,169],107:[2,169],111:[2,169],118:[2,169],119:[2,169],121:[2,169],124:[2,169]},{118:[2,171],123:[2,171],125:[2,171],127:[2,171]},{10:[2,170],33:[2,170],37:[2,170],47:[2,170],48:[2,170],49:[2,170],52:[2,170],54:[2,170],57:[2,170],60:[2,170],62:[2,170],65:[2,170],69:[2,170],70:[2,170],76:[2,170],78:[2,170],90:[2,170],91:[2,170],93:[2,170],94:[2,170],95:[2,170],107:[2,170],111:[2,170],118:[2,170],119:[2,170],121:[2,170],124:[2,170]},{5:[2,70],10:[2,70],25:[2,70],27:[2,70],35:[2,70],36:[2,70],44:[2,70],66:[2,70],73:[2,70],77:[2,70],79:[2,70],80:[2,70],85:[2,70],101:[2,70],102:[2,70],111:[2,70],118:[2,70]},{76:[1,225]},{57:[2,116],60:[2,116],62:[2,116],64:[2,116],74:[2,116],76:[2,116],78:[2,116],90:[2,116],91:[2,116],93:[2,116],94:[2,116],95:[2,116],104:[2,116],107:[2,116]},{57:[2,117],60:[2,117],62:[2,117],64:[2,117],74:[2,117],76:[2,117],78:[2,117],90:[2,117],91:[2,117],93:[2,117],94:[2,117],95:[2,117],104:[1,226],107:[2,117]},{55:[1,227],57:[2,118],60:[2,118],62:[2,118],64:[2,118],74:[2,118],76:[2,118],78:[2,118],90:[2,118],91:[2,118],93:[2,118],94:[2,118],95:[2,118],104:[2,118],106:[1,138],107:[2,118]},{57:[2,128],60:[2,128],62:[2,128],64:[2,128],74:[2,128],76:[2,128],78:[2,128],90:[2,128],91:[2,128],93:[2,128],94:[2,128],95:[2,128],104:[2,128],107:[2,128]},{64:[1,229],107:[1,228]},{64:[1,231],104:[1,137],107:[1,230]},{99:[1,232]},{107:[1,233]},{76:[1,234]},{76:[1,235],104:[1,137]},{5:[2,138],10:[2,138],25:[2,138],27:[2,138],33:[2,138],35:[2,138],36:[2,138],44:[2,138],57:[2,138],60:[2,138],62:[2,138],66:[2,138],69:[2,138],70:[2,138],73:[2,138],74:[2,138],76:[2,138],77:[2,138],78:[2,138],79:[2,138],80:[2,138],85:[2,138],90:[2,138],91:[2,138],93:[2,138],94:[2,138],95:[2,138],101:[2,138],102:[2,138],111:[2,138],118:[2,138],119:[2,138],121:[2,138],124:[2,138]},{22:150,50:149,58:[1,155],72:147,75:[1,154],96:[1,153],99:[1,148],100:[1,152],103:77,111:[1,32],113:236,114:151,119:[1,69],120:70,121:[1,71],124:[1,72]},{22:240,50:239,58:[1,155],72:237,75:[1,78],96:[1,243],99:[1,238],100:[1,242],103:77,111:[1,32],114:241,119:[1,69],120:70,121:[1,71],124:[1,72]},{60:[1,244],62:[1,245]},{60:[2,158],62:[2,158]},{64:[1,246]},{5:[2,106],10:[2,106],25:[2,106],27:[2,106],35:[2,106],36:[2,106],44:[2,106],66:[2,106],73:[2,106],77:[2,106],79:[2,106],80:[2,106],85:[2,106],101:[2,106],102:[2,106],111:[2,106],118:[2,106]},{7:247,8:[1,19]},{5:[2,90],10:[2,90],25:[2,90],27:[2,90],35:[2,90],36:[2,90],44:[2,90],66:[2,90],73:[2,90],77:[2,90],79:[2,90],80:[2,90],85:[2,90],88:[2,90],98:[2,90],101:[2,90],102:[2,90],111:[2,90],118:[2,90]},{76:[2,95],90:[2,95],91:[2,95]},{76:[2,96],90:[2,96],91:[2,96]},{76:[2,99],90:[2,99],91:[2,99]},{76:[2,100],90:[2,100],91:[2,100]},{96:[1,248]},{22:103,50:99,72:102,75:[1,78],92:249,99:[1,100],100:[1,101],103:77,111:[1,32],119:[1,69],120:70,121:[1,71],124:[1,72]},{76:[2,102],90:[2,102],91:[2,102]},{76:[2,105],90:[2,105],91:[2,105]},{52:[2,58],54:[2,58],57:[2,58],62:[1,250]},{52:[2,60],54:[2,60],57:[2,60],62:[1,251]},{52:[2,64],54:[2,64],60:[2,64],62:[1,252]},{52:[2,66],54:[2,66],60:[2,66],62:[1,253]},{5:[2,33],10:[2,33],25:[2,33],27:[2,33],35:[2,33],36:[2,33],44:[2,33],66:[2,33],73:[2,33],77:[2,33],79:[2,33],80:[2,33],85:[2,33],101:[2,33],102:[2,33],111:[2,33],118:[2,33]},{5:[2,112],10:[2,112],25:[2,112],27:[2,112],35:[2,112],36:[2,112],44:[2,112],66:[2,112],73:[2,112],77:[2,112],79:[2,112],80:[2,112],85:[2,112],101:[2,112],102:[2,112],111:[2,112],118:[2,112]},{75:[1,255],108:254},{50:261,57:[1,256],72:259,75:[1,78],99:[1,260],103:77,109:257,110:258,119:[1,69],120:70,121:[1,71],124:[1,72]},{57:[2,119],60:[2,119],62:[2,119],64:[2,119],74:[2,119],76:[2,119],78:[2,119],90:[2,119],91:[2,119],93:[2,119],94:[2,119],95:[2,119],104:[2,119],107:[2,119]},{72:263,75:[1,78],99:[1,262],103:77,107:[1,264]},{57:[2,122],60:[2,122],62:[2,122],64:[2,122],74:[2,122],76:[2,122],78:[2,122],90:[2,122],91:[2,122],93:[2,122],94:[2,122],95:[2,122],104:[2,122],107:[2,122]},{72:266,75:[1,78],99:[1,265],103:77},{107:[1,267]},{57:[2,127],60:[2,127],62:[2,127],64:[2,127],74:[2,127],76:[2,127],78:[2,127],90:[2,127],91:[2,127],93:[2,127],94:[2,127],95:[2,127],104:[2,127],107:[2,127]},{7:268,8:[1,19]},{7:269,8:[1,19]},{57:[2,139],62:[2,139]},{57:[2,148],62:[2,148],104:[1,137]},{57:[2,149],62:[2,149]},{57:[2,150],62:[2,150]},{57:[2,151],62:[2,151]},{57:[2,152],62:[2,152]},{57:[2,153],62:[2,153]},{57:[2,154],62:[2,154]},{57:[2,155],60:[2,155],62:[2,155]},{60:[1,270],75:[1,208],116:271},{22:276,50:275,58:[1,155],72:278,75:[1,78],99:[1,273],100:[1,274],103:77,111:[1,32],114:277,117:272,119:[1,69],120:70,121:[1,71],124:[1,72]},{5:[2,93],10:[2,93],25:[2,93],27:[2,93],35:[2,93],36:[2,93],44:[2,93],66:[2,93],73:[2,93],77:[2,93],79:[2,93],80:[2,93],85:[2,93],88:[2,93],98:[2,93],101:[2,93],102:[2,93],111:[2,93],118:[2,93]},{76:[2,101],90:[2,101],91:[2,101]},{76:[2,103],90:[2,103],91:[2,103]},{52:[2,59],54:[2,59],57:[2,59]},{52:[2,61],54:[2,61],57:[2,61]},{52:[2,65],54:[2,65],60:[2,65]},{52:[2,67],54:[2,67],60:[2,67]},{57:[2,129],60:[2,129],62:[2,129],64:[2,129],74:[2,129],76:[2,129],78:[2,129],90:[2,129],91:[2,129],93:[2,129],94:[2,129],95:[2,129],104:[2,129],107:[2,129]},{55:[1,227]},{57:[2,130],60:[2,130],62:[2,130],64:[2,130],74:[2,130],76:[2,130],78:[2,130],90:[2,130],91:[2,130],93:[2,130],94:[2,130],95:[2,130],104:[2,130],107:[2,130]},{57:[1,279],62:[1,280]},{57:[2,133],62:[2,133]},{57:[2,134],62:[2,134],104:[1,137]},{57:[2,135],62:[2,135]},{57:[2,136],62:[2,136]},{107:[1,281]},{104:[1,137],107:[1,282]},{57:[2,126],60:[2,126],62:[2,126],64:[2,126],74:[2,126],76:[2,126],78:[2,126],90:[2,126],91:[2,126],93:[2,126],94:[2,126],95:[2,126],104:[2,126],107:[2,126]},{107:[1,283]},{104:[1,137],107:[1,284]},{57:[2,125],60:[2,125],62:[2,125],64:[2,125],74:[2,125],76:[2,125],78:[2,125],90:[2,125],91:[2,125],93:[2,125],94:[2,125],95:[2,125],104:[2,125],107:[2,125]},{5:[2,81],10:[2,81],25:[2,81],27:[2,81],35:[2,81],36:[2,81],44:[2,81],66:[2,81],73:[2,81],77:[2,81],79:[2,81],80:[2,81],85:[2,81],101:[2,81],102:[2,81],111:[2,81],118:[2,81]},{5:[2,82],10:[2,82],25:[2,82],27:[2,82],35:[2,82],36:[2,82],44:[2,82],66:[2,82],73:[2,82],77:[2,82],79:[2,82],80:[2,82],85:[2,82],101:[2,82],102:[2,82],111:[2,82],118:[2,82]},{57:[2,156],60:[2,156],62:[2,156]},{60:[2,157],62:[2,157]},{60:[2,159],62:[2,159]},{60:[2,160],62:[2,160]},{60:[2,161],62:[2,161]},{60:[2,162],62:[2,162]},{60:[2,163],62:[2,163]},{60:[2,164],62:[2,164]},{60:[2,165],62:[2,165],104:[1,137]},{57:[2,131],60:[2,131],62:[2,131],64:[2,131],74:[2,131],76:[2,131],78:[2,131],90:[2,131],91:[2,131],93:[2,131],94:[2,131],95:[2,131],104:[2,131],107:[2,131]},{50:261,72:259,75:[1,78],99:[1,260],103:77,110:285,119:[1,69],120:70,121:[1,71],124:[1,72]},{57:[2,120],60:[2,120],62:[2,120],64:[2,120],74:[2,120],76:[2,120],78:[2,120],90:[2,120],91:[2,120],93:[2,120],94:[2,120],95:[2,120],104:[2,120],107:[2,120]},{57:[2,121],60:[2,121],62:[2,121],64:[2,121],74:[2,121],76:[2,121],78:[2,121],90:[2,121],91:[2,121],93:[2,121],94:[2,121],95:[2,121],104:[2,121],107:[2,121]},{57:[2,123],60:[2,123],62:[2,123],64:[2,123],74:[2,123],76:[2,123],78:[2,123],90:[2,123],91:[2,123],93:[2,123],94:[2,123],95:[2,123],104:[2,123],107:[2,123]},{57:[2,124],60:[2,124],62:[2,124],64:[2,124],74:[2,124],76:[2,124],78:[2,124],90:[2,124],91:[2,124],93:[2,124],94:[2,124],95:[2,124],104:[2,124],107:[2,124]},{57:[2,132],62:[2,132]}],
defaultActions: {40:[2,1],76:[2,80]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* tracing/debugging functions */

function Loc(start, end) {
  this.start = { line: start.first_line, column: start.first_column };
  this.end = { line: end.last_line, column: end.last_column };
}

/* Manana data types */

function MananaHash(data, loc) {
  var hash = {}, i = 0;

  while (data[i]) {
    hash[data[i][0]] = data[i][1];
    i++;
  }

  return hash;
}

/* AST nodes */

function VoidTagNode(tag, attrs, loc) {
  this.type = "VoidTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
}

function CodeTagNode(tag, attrs, code, loc) {
  this.type = "CodeTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = code;
}

function TagNode(tag, attrs, text, block, loc) {
  this.type = "Tag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = text ? [text] : block;
}

function TextNode(words, loc) {
  this.type = "Text";
  this.loc = loc;

  var w = words, t = [], s = [], i = 0; 

  while (typeof w[i] !== "undefined") {
    if (typeof w[i] === "string") {
      s.push(w[i]);
    } else {
      if (s.length) {
        t.push(s.join(' '));
        s = [];
      }
      t.push(w[i]);
    }
    i++;
  }
  if (s.length) {
    t.push(s.join(' '));
  }

  this.body = t;
}

function NameNode(path, loc) {
  this.type = "Name";
  this.loc = loc;
  this.body = path;
}

function WithNode(path, id, body, loc) {
  this.type = "With";
  this.loc = loc;
  this.path = path;
  this.id = id;
  this.body = body;
}

function IdNode(id, start, end, loc) {
  this.type = "Id";
  this.loc = loc;
  this.id = id;
  this.start = start;
  this.end = end;
}

function PathNode(path_node, component, methods, loc) {
  var k, c;

  if (path_node === null) {
    this.type = "Path";
    this.loc = loc;
    this.methods = null;
    this.components = [];
  } else {
    for (k in path_node) {
      if (path_node.hasOwnProperty(k)) {
        this[k] = path_node[k];
      }
    }

    if (loc && path_node.loc) {
      if (loc.end.line > path_node.loc.end.line || loc.end.column > path_node.loc.end.column) {
        this.loc.end = loc.end;
      }
    }
  }

  if (component) {
    c = [component.id];
    if (component.start !== null) {
      c.push(component.start);
    }
    if (component.end !== null) {
      c.push(component.end);
    }
    this.components.push(c);
  }

  if (methods !== null) {
    this.methods = methods;
  }
}

function MethodNode(name, args, loc) {
  this.type = "Method";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function MethodChainNode(method, loc) {
  this.type = "MethodChain";
  this.loc = loc;
  this.chain = [method];
}

function FunctionNode(name, args, loc) {
  this.type = "Function";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function ForNode(id, path, body, loc) {
  this.type = "For";
  this.loc = loc;
  this.id = id;
  this.path = path;
  this.body = body;
}

function IfNode(conditions) {
  this.type = "If";
  this.body = conditions;
}

/*
function IfNode(cond, v1, v2, body, else_body, loc) {
  this.type = "If";
  this.loc = loc;
  this.condition = cond;
  this.value_1 = v1;
  this.value_2 = v2;
  this.body = body;
  this.else_body = else_body;
}
*/

function AliasNode(path, id, loc) {
  this.type = "Alias";
  this.loc = loc;
  this.path = path;
  this.id = id;
}

function IncludeNode(path, loc) {
  this.type = "Include";
  this.loc = loc;
  this.path = path;
}

function FilterNode(filter, body, loc) {
  this.type = "Filter";
  this.loc = loc;
  this.body = [body];
}

function MananaStringNode(body, loc) {
  this.type = "MananaString";
  this.loc = loc;
  if (typeof body === "string") {
    this.body = [body];
  } else {
    this.body = body;
  }
}

function BreakNode(loc) {
  this.type = "Break";
  this.loc = loc;
}

function ContinueNode(loc) {
  this.type = "Continue";
  this.loc = loc;
}

/* expose AST constructors to parser */

parser.ast = {};
parser.ast.Loc = Loc;
parser.ast.MananaStringNode = MananaStringNode;
parser.ast.VoidTagNode = VoidTagNode;
parser.ast.CodeTagNode = CodeTagNode;
parser.ast.TagNode = TagNode;
parser.ast.TextNode = TextNode;
parser.ast.NameNode = NameNode;
parser.ast.WithNode = WithNode;
parser.ast.IdNode = IdNode;
parser.ast.PathNode = PathNode;
parser.ast.MethodNode = MethodNode;
parser.ast.MethodChainNode = MethodChainNode;
parser.ast.FunctionNode = FunctionNode;
parser.ast.ForNode = ForNode;
parser.ast.IfNode = IfNode;
parser.ast.AliasNode = AliasNode;
parser.ast.IncludeNode = IncludeNode;
parser.ast.FilterNode = FilterNode;
parser.ast.BreakNode = BreakNode;
parser.ast.ContinueNode = ContinueNode;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

  function strip(start, end) {
    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comments */
break;
case 1:this.pushState("expr"); return "FOR";
break;
case 2:this.pushState("expr"); return "IF";
break;
case 3:this.pushState("expr"); return "ELIF";
break;
case 4:this.pushState("expr"); return "ELSE";
break;
case 5:this.pushState("expr"); return "ALIAS";
break;
case 6:this.pushState("expr"); return "WITH";
break;
case 7:this.pushState("expr"); return "INCLUDE";
break;
case 8:return "BREAK";
break;
case 9:return "CONTINUE";
break;
case 10:return "BOOL";
break;
case 11:return "BOOL";
break;
case 12:this.popState(); return "END_EXPR";
break;
case 13:return "AND";
break;
case 14:return "OR";
break;
case 15:return "IN";
break;
case 16:return "IS";
break;
case 17:return "AS";
break;
case 18:return "NOT";
break;
case 19:return "TYPE";
break;
case 20:return "TYPE";
break;
case 21:return "TYPE";
break;
case 22:return "TYPE";
break;
case 23:return "TYPE";
break;
case 24:return "TYPE";
break;
case 25:return "COND";
break;
case 26:return "COND";
break;
case 27:return "COND";
break;
case 28:return "COND";
break;
case 29:return "COND";
break;
case 30:return "COND";
break;
case 31:return "COND";
break;
case 32:return "COND";
break;
case 33:return "EXISTS";
break;
case 34:this.pushState("tag");      return "VOID_TAG";
break;
case 35:this.pushState("code_tag"); return "CODE_TAG";
break;
case 36:this.pushState("tag");      return "TAG";
break;
case 37:this.popState();            return "END_TAG";
break;
case 38:yy_.yytext = yy_.yytext.slice(1);   return "TAG_ID";
break;
case 39:yy_.yytext = yy_.yytext.slice(1);   return "TAG_CLASS";
break;
case 40:this.popState(); this.pushState("code"); return "END_CODE_TAG";
break;
case 41:
                                            yy_.yytext = yy_.yytext.replace("->", '');
                                            yy_.yytext = yy_.yytext.replace(/\s*/, '')
                                            yy_.yytext = yy_.yytext.slice(1, -1)
                                            return "TAG_SRC";
                                         
break;
case 42:this.pushState("i_string_d"); return ["TAG_SRC_I_STRING", "I_STRING_D"];
break;
case 43:this.pushState("i_string_d"); return "I_STRING_D";
break;
case 44:this.pushState("i_string_d"); return "I_STRING_D";                                      
break;
case 45:this.pushState("name");       return "START_NAME";
break;
case 46:this.popState();              return "END_I_STRING_D";
break;
case 47:return "I_STRING_TEXT";
break;
case 48:this.pushState("i_string_s"); return ["TAG_SRC_I_STRING", "I_STRING_S"];
break;
case 49:this.pushState("i_string_s"); return "I_STRING_S";
break;
case 50:this.pushState("i_string_s"); return "I_STRING_S";                                      
break;
case 51:this.pushState("name");       return "START_NAME";
break;
case 52:this.popState();              return "END_I_STRING_S"; // "
break;
case 53:return "I_STRING_TEXT";
break;
case 54:this.pushState("i_html"); return "I_HTML_START";
break;
case 55:this.pushState("name");   return "START_NAME";
break;
case 56:this.popState();          return "I_HTML_END";
break;
case 57:return "I_HTML_TEXT";
break;
case 58:return "HTML";
break;
case 59:this.pushState("tagargs"); return "LPAREN";
break;
case 60:this.popState();           return "RPAREN";
break;
case 61:this.pushState("tagargs"); return "LBRACE";
break;
case 62:this.popState();           return "RBRACE";
break;
case 63:return "COLON";
break;
case 64:return "EQ";
break;
case 65:return "COMMA";
break;
case 66:return "TAG_ATTR";
break;
case 67:yy_.yytext = "data-" + yy_.yytext.slice(1); return "TAG_DATA_ATTR";
break;
case 68:/* ignore */
break;
case 69:/* ignore */
break;
case 70:this.pushState("filter"); yy_.yytext = yy_.yytext.slice(1); return "FILTER";
break;
case 71:this.pushState("name"); return "START_NAME";
break;
case 72:this.popState(); return "RBRACE"
break;
case 73:this.pushState("fn"); yy_.yytext = yy_.yytext.slice(1); return "FN";
break;
case 74:this.popState(); return "RPAREN";
break;
case 75:/* ignore */
break;
case 76:/* ignore */
break;
case 77:return "LBRACE";
break;
case 78:return "RBRACE";
break;
case 79:return "COMMA";
break;
case 80:return "EQ";
break;
case 81:return "ID";
break;
case 82:return "DOT";
break;
case 83:return "LPAREN";
break;
case 84:return "RPAREN";
break;
case 85:return "LBRACK";
break;
case 86:return "RBRACK";
break;
case 87:return "COLON"; 
break;
case 88:return "COMMA";
break;
case 89:return "INT";
break;
case 90:yy_.yytext = strip(1,2).replace(/\\"/g, '"'); return "STRING";
break;
case 91:return "STRING"; // Do not strip quotes
break;
case 92:return "WORD";
break;
case 93:
  var tokens = [];
  while (0 < indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  if (tokens.length) {
    tokens.push("EOF");
    return tokens;
  } else {
    return "EOF";
  }

break;
case 94:/* eat blank lines */
break;
case 95:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (indentation > indent_stack[0]) {
    indent_stack.unshift(indentation);
    return "INDENT";
  }

  var tokens = [];
  while (indentation < indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  if (tokens.length) {
    return tokens;
  }

break;
case 96:
  this.popState();

  var tokens = [];
  while (code_indent_level >= indent_stack[0]) {
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  code_indent_level = 0;

  tokens.shift();
  tokens.push("EOF");

  return tokens;

break;
case 97:yy_.yytext = ''; return "BLANK_LINE";
break;
case 98:
  var indent_level = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (code_indent_level === 0) {
    code_indent_level = indent_level;
    indent_stack.unshift(indent_level);
    yy_.yytext = yy_.yytext.slice(code_indent_level + 1);
    return "INDENT";

  } else if (indent_level < code_indent_level) {
    code_indent_level = 0;

    var tokens = [];
    while (indent_level < indent_stack[0]) {
      tokens.unshift("DEDENT");
      indent_stack.shift();
    }

    this.popState();
    return tokens;

  } else if (code_indent_level > 0) {
    yy_.yytext = yy_.yytext.slice(code_indent_level + 1);
    return "INDENT";
  }

break;
case 99:return "LINE";
break;
case 100:
  this.popState();

  var tokens = [];
  while (filter_indent_level >= indent_stack[0]) {
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  filter_indent_level = 0;

  tokens.shift();
  tokens.push("EOF");

  return tokens;

break;
case 101:
  var indent_level, tokens;
    
  indent_level = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (filter_indent_level === 0) {
    filter_indent_level = indent_level;
    indent_stack.unshift(indent_level);
    return "INDENT";

  } else if (indent_level < filter_indent_level) {
    this.popState();
    filter_indent_level = 0;
    
    tokens = [];
    while (indent_stack[0] > indent_level) {
      tokens.push("DEDENT");
      indent_stack.shift();
    }

    return tokens;
  }

break;
case 102:/* ignore all other whitespace */
break;
}
},
rules: [/^(?:[\n\r]*([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*"""(.|\n)*?""")/,/^(?:for\b)/,/^(?:if\b)/,/^(?:elif\b)/,/^(?:else\b)/,/^(?:alias\b)/,/^(?:with\b)/,/^(?:include\b)/,/^(?:!break\b)/,/^(?:!continue\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:(?=\n))/,/^(?:and\b)/,/^(?:or\b)/,/^(?:in\b)/,/^(?:is\b)/,/^(?:as\b)/,/^(?:not\b)/,/^(?:Hash\b)/,/^(?:List\b)/,/^(?:String\b)/,/^(?:Integer\b)/,/^(?:Number\b)/,/^(?:Boolean\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?:>)/,/^(?:<)/,/^(?:%)/,/^(?:exists\b)/,/^(?:((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)))/,/^(?:pre|code\b)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:(?=\n))/,/^(?:(#[a-zA-Z][a-zA-Z0-9\-\:_]*))/,/^(?:(\.-?[_a-zA-Z]+[_a-zA-Z0-9\-]*(?=["."\s\n])))/,/^(?:(?=\n))/,/^(?:->\s*(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:->\s*(i"(?=.*?@\{)))/,/^(?:(i"(?=.*?@\{)))/,/^(?:(i"(?=.*?@\{)))/,/^(?:@\{)/,/^(?:")/,/^(?:[^"@"'"']*)/,/^(?:->\s*(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:@\{)/,/^(?:')/,/^(?:[^"@""'"]*)/,/^(?:(<(?=.*?@\{)))/,/^(?:@\{)/,/^(?:>(?=\s*\n))/,/^(?:.)/,/^(?:<.*(?=\n))/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z][a-zA-Z0-9\-_]*(?=\s*["="":"])))/,/^(?:(\*[a-zA-Z][a-zA-Z0-9\-]*(?=["="":"])))/,/^(?:\s)/,/^(?:\n)/,/^(?::(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:@\{)/,/^(?:\})/,/^(?:@(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254})\s?(?=\())/,/^(?:\)(?!\)))/,/^(?:\s)/,/^(?:\n)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:=)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:(\+|-)?(0|[1-9][0-9]*))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:([^\s\n"@"][^\s\n]*))/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:.*)/,/^(?:\s*$)/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"tag":{"rules":[37,38,39,41,42,44,48,50,59,61,71,73,91,92,94,102],"inclusive":true},"tagargs":{"rules":[43,49,60,62,63,64,65,66,67,68,69,90,94,102],"inclusive":true},"filter":{"rules":[44,50,71,91,92,94,100,101,102],"inclusive":true},"expr":{"rules":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,43,49,73,81,82,83,84,85,86,87,88,89,90,102],"inclusive":true},"name":{"rules":[43,49,72,81,82,83,84,85,86,87,88,89,90,102],"inclusive":true},"fn":{"rules":[10,11,43,49,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,94,102],"inclusive":true},"i_string_d":{"rules":[45,46,47,102],"inclusive":true},"i_string_s":{"rules":[51,52,53,102],"inclusive":true},"i_html":{"rules":[55,56,57,94,102],"inclusive":true},"code_tag":{"rules":[38,39,40,102],"inclusive":true},"code":{"rules":[96,97,98,99,102],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,34,35,36,44,50,54,58,70,71,73,91,92,93,94,95,102],"inclusive":true}}
};
indent_stack = [0];
filter_indent_level = 0;
code_indent_level = 0;;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = manana_parser;
exports.Parser = manana_parser.Parser;
exports.parse = function () { return manana_parser.parse.apply(manana_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}/* ******************************************************
 * Author: Chad Angelelli <chad@angelel.li>
 * Contributors/Special Thanks:
 *    Ray Harris <ray@harris.net>
 *    Mason Armour <mason@myshorttrack.com>
 *    Chris Hacker <chris@myshorttrack.com>
 *    Brigette LeVert <brigette.levert@gmail.com>
 * ******************************************************/

(function(exports) {
  var _manana_is_server_side, _manana_is_client_side;

  // _____________________________________________ Validation shorthand 
  function is(v, t)  { return typeof v === t; }
  function isNull(v) { return v === null; }
  function isStr(v)  { return is(v, "string"); }
  function isNum(v)  { return is(v, "number"); }
  function isInt(v)  { return is(v, "number") && parseFloat(v) == parseInt(v, 10) && ! isNaN(v); }
  function isArr(v)  { return Object.prototype.toString.call(v) === '[object Array]'; }
  function isObj(v)  { return Object.prototype.toString.call(v) === '[object Object]'; }

  _manana_is_server_side =  typeof require        !== 'undefined' && 
                            typeof module         !== 'undefined' && 
                            typeof module.exports !== 'undefined' ;

  _manana_is_client_side = ! _manana_is_server_side;
 
  // _____________________________________________ Extensions 
  String.prototype.intpol = function(o) {
    return this.replace(/{([^{}]*)}/g, function (a, b) { 
      var r = o[b]; 
      return isStr(r) || isNum(r) ? r : a; 
    });
  };

  String.prototype.repeat = function(n) {
    return new Array(n + 1).join(this);
  };

  Object.size = function(obj) {
    var size = 0, key;
    for (key in obj) {
      if (obj.hasOwnProperty(key)) {
        size++;
      }
    }
    return size;
  };

  function jd(label, x) {
    console.log("\n\n" + label + "\n==========================================>\n>>>");
    console.log(JSON.stringify(x, null, 4));
    console.log("\n\n<<< END " + label + "\n\n");
  }

  // _____________________________________________ Mañana
  function MananaNamespace(name, data, $parent) {
    this.type    = 'MananaNamespace';
    this.name    = name;
    this.data    = data;
    this.$parent = $parent;
  } // end MananaNamespace()

  function MananaView(args) {
    this.name     = args.name;
    this.template = args.template;
    this.context  = args.context;
    this.$level   = args.$level; 
    this.$parent  = args.$parent;
  } // end MananaView()

  function MananaError(message, loc) {
    this.name = "MananaError";
    this.message = message;
    this.loc = loc;
  } // end Error()

  function Manana(view_dir) {
    var self = this;

    // ........................................... 
    this.name           = '';
    this.template       = '';
    this.ir             = '';
    this.result         = '';
    this.context        = {};
    this.aliases        = [];
    this.namespace      = {};
    this.view           = {}; // the current view object
    this.views          = {}; // a cache of all known views
    this.view_level     = 0;
    this.ancestry       = [];
    this.fns            = {};
    this.is_server_side = _manana_is_server_side;
    this.is_client_side = ! _manana_is_server_side;
    this.in_loop        = false;
    this.break_loop     = false;
    this.continue_loop  = false;

    // ........................................... 
    if (this.is_server_side) {
      if (typeof manana_parser !== 'undefined') {
        this.parser = manana_parser;
        this.Parser = manana_parser.Parser;
      } else {
        this.Parser = require('./manana_parser');
        this.parser = this.Parser.parser;
      }

      this.file_system = require('fs');

      this.__dirname = require('path').dirname(require.main.filename);

      if (is(view_dir, "undefined")) {
        this.view_dir = this.__dirname; 
      } else { 
        this.view_dir = view_dir;
      }

      if (this.view_dir[this.view_dir.length - 1] == '/') {
        this.view_dir = this.view_dir.slice(0, -1);
      }
    } else {
      this.parser = manana_parser;
      this.Parser = manana_parser.Parser;
    }

    // ...........................................  
    this.getTemplate = function(name) {
      var template, abs_name, scripts, i, l, s, s_name;

      if (self.is_server_side) {
        try {
          if (name[0] == '.') {
            abs_name = self.__dirname + '/' + name.slice(2);
          } else if (name[0] == '/') {
            abs_name = name;
          } else {
            abs_name = self.view_dir + '/' + name; 
          }

          if ( ! /\.manana$/.test(abs_name)) {
            abs_name += ".manana";
          }

          template = self.file_system.readFileSync(abs_name, 'utf-8');

        } catch (e) {
          throw new MananaError("Invalid name '{p}' provided to getTemplate function".intpol({p:name}));
        }
      } else { // self.is_client_side
        scripts = document.getElementsByTagName("script"); 
        for (i = 0, l = scripts.length; i < l; i++) {
          s = scripts[i];
          s_name = s.getAttribute("data-view-name");
          if (s_name == name) {
            template = s.innerHTML;
          }
        }
      }

      if ( ! template.length) {
        throw new MananaError("Template '{n}' has no content.".intpol({n:name}));
      }

      return template;
    }; // end Manana.getTemplate()

    // ...........................................  
    this.evalForm = function(form, context) {
      var res = '', i;

      if (form && (form.type == 'Path' || form.type == 'Function')) {
        return self[form.type](form, context);

      } else if (isObj(form) && ! is(form.type, "undefined")) {
        res += self[form.type](form, context);

      } else if (isArr(form)) {
        i = 0;
        while ( ! is(form[i], "undefined")) {
          res += self.evalForm(form[i], context);
          i++;
        }
      } else {
        res = form;
      }

      return res;
    }; // end Manana.evalForm()

    // ...........................................  
    this.render = function(name, context, options) {
      var i, form, r;

      self.name = name;
      self.template = self.getTemplate(self.name);
      self.ir = self.parser.parse(self.template);

      self.namespace.root = new MananaNamespace('root', context || {}, null);
      self.context = self.namespace.root;
      self.aliases = [];

      self.views[name] = new MananaView({
        name: name,
        template: self.template,
        context: self.context,
        $level: 0,
        $parent: null
      });

      self.view = self.views[name];
      self.ancestry = [self.view];

      self['$window'];
      if (typeof window !== "undefined") {
        self['$window'] = window;
      }

      self.result = '';

      i = 0;
      while (form = self.ir[i]) {
        r = self.evalForm(form, self.context);
        self.result += isObj(r) ? JSON.stringify(r) : r;
        i++;
      }

      if (is(options, "undefined")) {
        options = {};
      }

      options.return_single_line = options.return_single_line || false;
      options.encode = options.encode || false;

      if ( ! options.return_single_line) {
        self.result = self.format(self.result, "  ", 0);
      }

      if (options.encode) {
        self.result = self.encode(self.result);
      }

      i = 0;
      while (self.aliases[i]) {
        i++;
        delete self.namespace[self.aliases[i]];
      }

      return self.result;
    }; // end Manana.render()

    // ...........................................  
    this.Include = function(form, context) {
      var name, template, ir, $parent, i, form, res;

      name = self.evalForm(form.path, context);
      template = self.getTemplate(name);
      ir = self.parser.parse(template);

      self.view_level++;

      self.views[name] = new MananaView({
        name: name,
        template: template,
        context: context,
        $level: self.view_level,
        $parent: $parent 
      });

      $parent = self.ancestry[self.view_level - 1]; 
      self.view = self.views[name];

      if (self.view_level < self.ancestry.length) {
        self.ancestry = self.ancestry.slice(0, self.view_level);
      }

      self.ancestry.push(self.views[name]);

      i = 0;
      res = '';
      while (form = ir[i]) {
        res += self.evalForm(form, context);
        i++;
      }

      self.view = $parent;
      self.view_level--;

      return res;
    }; // end Manana.Include()

    // ...........................................  
    this.isNamespace = function(node) {
      var is_ns = false;

      is_ns = node instanceof MananaNamespace;

      if ( ! is_ns) {
        if (node
            && node.type 
            && node.type == 'MananaNamespace'
            && node.name
            && ! is(node.$parent, 'undefined')
            && ! is(node.data, 'undefined'))
        {
          is_ns = true;
        }
      }

      return is_ns;
    }; // end Manana.isNamespace()

    // ...........................................  
    this.Path = function(form, context) {
      var node, components, target, i, index, slice, traceback, meth;

      node = context;
      components = JSON.parse(JSON.stringify(form.components));
      traceback = [];

      if (components[0][0] == '$manana') {
        node = self;
        traceback.push(components[0][0]);
        components.shift();

      } else if (components[0][0] == '$window') {
        if (typeof window !== 'undefined') {
          node = window;
          traceback.push(components[0][0]);
          components.shift();
        } else {
          throw new MananaError("Invalid path: $window is not defined");
        }
      }

      i = 0;
      while ( ! is(components[i], "undefined")) {
        target = self.evalForm(components[i][0], context);
        index  = self.evalForm(components[i][1], context);
        slice  = self.evalForm(components[i][2], context);

        traceback.push(target);

        //................ 
        if (self.isNamespace(node)) {
          if (target[0] == '$' && ! is(node[target], 'undefined')) {
            node = node[target];

          } else if ( ! isNull(node.data) && ! is(node.data[target], 'undefined')) {
            node = node.data[target];

          } else if (node.name == target) {
            node = node.data;

          } else if ( ! is(self.namespace[target], 'undefined')) {
            node = self.namespace[target];

          } else if (node.$parent && ! is(node.$parent.data[target], 'undefined')) {
            node = node.$parent.data[target];

          } else {
            throw new MananaError('Invalid path in namespace: "' + traceback.join('.') + '"', form.loc);
          }

        } else if ( ! is(node, 'undefined')) { 
          if ( ! is(node[target], "undefined")) {
            node = node[target];
          } else {
            console.log('Path Error: Path: ', traceback);
            console.log('Path Error: node: ', node);
            throw new MananaError('Invalid path: "' + traceback.join('.') + '"', form.loc);
          }

        } else {
          console.log('Path Error: Undefined Path (node): ', node);
          throw new MananaError("Undefined path: " + traceback.join('.'), form.loc);
        }

        //................ 
        if ( ! is(slice, 'undefined')) {
          if ( ! isArr(node)) {
            throw new MananaError('slicing attempted on non-list: ' + traceback.join('.'), form.loc);
          }

          index = parseInt(index);

          if (slice == '*') {
            slice = node.length;
          } else {
            slice = parseInt(slice);
          }

          node  = node.slice(index, slice);

        } else if ( ! is(index, 'undefined')) {
          if (isObj(node) && ! is(node[index], 'undefined')) {
            node = node[index];
          } else {
            index = parseInt(index);
            if (index < 0) {
              index = node.length + index;
            }
            node = node[index];
          }
        }

        i++;
      } // end while

      //................ 
      if (form.methods) {
        i = 0;
        while (meth = form.methods.chain[i]) {
          if (is(node[meth.name], 'undefined')) {
            throw new MananaError("Undefined method '{name}' called: ".intpol(meth) + traceback.join('.'), meth.loc);
          }

          if ( ! is(node[meth.name], 'function')) {
            throw new MananaError("Requested method '{name}' is not a function.".intpol(meth) + traceback.join('.'), meth.loc);
          }

          try {
            if (isArr(meth.args) && meth.args.length) {
              node = node[meth.name].apply(self, meth.args);
            } else {
              node = node[meth.name]();
            }
          } catch (e) {
            throw new MananaError(e, meth.loc);
          }
          i++;
        }
      }

      //................ 
      if (is(node, 'undefined')) {
        throw new MananaError("Can't find path: " + traceback.join('.'), form.loc);
      }

      //................ 
      return node;
    }; // end Interprteter.Path()

    // ........................................... 
    this.With = function(form, context) {
      var name, data, $parent, res;

      name = form.id;
      data = self.evalForm(form.path, context);

      $parent = self.context;
      self.namespace[name] = new MananaNamespace(name, data, $parent);
      self.context = self.namespace[name];

      res = '';
      for (i in form.body) {
        res += self.evalForm(form.body[i], self.context);
      }

      delete self.namespace[name];

      self.context = $parent;

      return res;
    }; // end Manana.With()

    // ...........................................  
    this.Alias = function(form, context) {
      var name, data;

      if ( ! self.isNamespace(context)) {
        throw new MananaError("Invalid context passed to Alias method. Must be a valid namespace.");
      }

      if ( ! is(context[name], "undefined")) {
        throw new MananaError("Can't alias '{id}'. Name already taken in current context.".intpol(form));
      }

      name = form.id;
      data = self.evalForm(form.path, context);

      self.namespace[name] = data;
      self.aliases.push(name);

      return '';
    }; // end Manana.Alias()

    // ...........................................  
    this.If = function(form, context) {
      var cases, else_case, i, j, c, cond, compound, operator, value, previous_outcome, outcome, res;

      cases = JSON.parse(JSON.stringify(form.body));

      if (cases[cases.length-1]['case'] == 'else') {
        else_case = cases.pop();
      }

      i = 0;
      while (c = cases[i]) {
        outcome = false;

        j = 0;
        while (cond = c.conditions[j]) {
          compound = cond[0];
          operator = cond[1][0];
          value = cond[1].slice(1);

          previous_outcome = outcome;

          if (operator == 'true' || operator == 'not_true') {
            value[0] = self.evalForm(value[0], context);

            if (value[0]) {
              outcome = true;
            } else {
              outcome = false;
            }

            if (operator == 'not_true') {
              outcome = ! outcome;
            }

          } else if (operator == 'exists' || operator == 'not_exists') {
            try {
              value[0] = self.evalForm(value[0], context);
              outcome = true;
            } catch (e) {
              outcome = false;
            }

            if (operator == 'not_exists') {
              outcome = ! outcome;
            }

          } else if (operator == 'in' || operator == 'not_in') {
            value[0] = self.evalForm(value[0], context);
            value[1] = self.evalForm(value[1], context);

            if (isArr(value[1]) || isStr(value[1])) {
              outcome = value[1].indexOf(value[0]) > -1;
            } else if (isObj(value[1])) {
              outcome = value[0] in value[1];
            }

            if (operator == 'not_in') {
              outcome = ! outcome;
            }

          } else if (operator == 'is' || operator == 'not_is') {
            value[0] = self.evalForm(value[0], context);

            if      (value[1] == 'Hash'   ) outcome = isObj(value[0]);
            else if (value[1] == 'List'   ) outcome = isArr(value[0]);
            else if (value[1] == 'String' ) outcome = isStr(value[0]);
            else if (value[1] == 'Number' ) outcome = isNum(value[0]);
            else if (value[1] == 'Integer') outcome = isInt(value[0]);

            if (operator == 'not_is') {
              outcome = ! outcome;
            } 

          } else {
            value[0] = self.evalForm(value[0], context);
            value[1] = self.evalForm(value[1], context);

            switch (operator) {
              case '==': outcome = value[0] == value[1]; break;
              case '!=': outcome = value[0] != value[1]; break;
              case '>' : outcome = value[0] >  value[1]; break;
              case '<' : outcome = value[0] <  value[1]; break;
              case '>=': outcome = value[0] >= value[1]; break;
              case '<=': outcome = value[0] <= value[1]; break;
              default  : outcome = false;
            }
          }

          if (compound == 'and') {
            outcome = outcome && previous_outcome;
          } else if (compound == 'or') {
            outcome = outcome || previous_outcome;
          }

          j++;
        } // end while(conditions)

        if (outcome) {
          res = self.evalForm(c.body, context);
          break;
        }

        i++;
      } // end while(if/elif)

      if ( ! outcome && else_case) {
        res = self.evalForm(else_case.body, context);
      }

      if (is(res, 'undefined')) {
        res = '';
      }

      return res;
    }; // end Manana.If()

    // ...........................................  
    this.For = function(form, context) {
      var name, loop_name, $parent, scope, local_scope, key, i, count, total, _is_obj, res;

      $parent = self.context;
      scope = self.evalForm(form.path, context);

      if (isObj(scope)) {
        _is_obj = true;
      } else if (isArr(scope) || isStr(scope)) {
        _is_obj = false;
      } else {
        throw new MananaError('Invalid context provided to loop. Must be Hash, List, or String.');
      }

      name = form.id;
      loop_name = '__loop__' + name;
      total = _is_obj ? Object.size(scope) : scope.length;
      count = 0;

      if ( ! self.isNamespace(scope))
        scope = new MananaNamespace(loop_name, scope, $parent);
      scope = self.namespace[loop_name] = scope;

      self.in_loop = true;

      function cleanUp() {
        delete self.namespace[loop_name];
        delete self.namespace[name];
        self.in_loop = false;
        self.break_loop = false;
        self.continue_loop = false;
      }

      res = '';
      for (key in scope.data) {
        ++count;

        self.namespace[name] = new MananaNamespace(name, scope.data[key], $parent);
        local_scope = self.namespace[name];

        local_scope.$key      = key;
        local_scope.$index    = key;
        local_scope.$count    = count;
        local_scope.$total    = total;
        local_scope.$is_first = count == 1;
        local_scope.$is_last  = count == total;
        local_scope.$previous = scope[count-2] || null;
        local_scope.$next     = scope[count] || null;

        for (i in form.body) {
          if (self.break_loop) {
            cleanUp();
            break;
          }

          if (self.continue_loop)
            continue;

          res += self.evalForm(form.body[i], local_scope); 
        }
      }

      cleanUp();

      return res;
    }; // end Manana.For()

    // ...........................................  
    this.Break = function(form, context) {
      if ( ! self.in_loop) {
        throw new MananaError('Break statement can only exist inside loop!', form.loc);
      }
      self.break_loop = true;
      return '';
    }; // end Manana.Break()

    // ...........................................  
    this.Continue = function(form, context) {
      if ( ! self.in_loop) {
        throw new MananaError('Continue statement can only exist inside loop!', form.loc);
      }
      self.continue_loop = true;
      return '';
    }; // end Manana.Continue()
    
    // ...........................................  
    this.MananaString = function(form, context) {
      var i = 0, res = '';

      while (form.body[i]) {
        res += self.evalForm(form.body[i], context);
        i++;
      }

      return res;
    } // end Manana.MananaString()

    // ...........................................  
    this.Tag = function(form, context) {
      var html, attr_tpl, content, i, kv;

      html = '<{tag}{attrs}>{body}</{tag}>'; 
      attr_tpl = ' {key}="{val}"'; 
      content = { tag: form.tag, attrs: '', body: '' };

      if (isArr(form.attrs)) {
        i = 0;
        while (form.attrs[i]) {
          kv = {};
          if (form.attrs[i][0] == "src" && form.tag == "a") {
            kv.key = "href";
          } else {
            kv.key = self.evalForm(form.attrs[i][0], context);
          } 
          kv.val = self.evalForm(form.attrs[i][1], context); 
          content.attrs += attr_tpl.intpol(kv); 
          i++; 
        }
      }

      if (isArr(form.body)) {
        i = 0;
        while (form.body[i]) {
          content.body += self.evalForm(form.body[i], context);
          i++;
        }
      }

      return html.intpol(content);
    }; // end Manana.Tag()

    // ...........................................  
    this.CodeTag = function(form, context) {
      var html, attr_tpl, content, i, kv;

      html = '<{tag}{attrs}>{body}</{tag}>'; 
      attr_tpl = ' {key}="{val}"'; 
      content = { tag: form.tag, attrs: '', body: '' };

      if (isArr(form.attrs)) {
        i = 0;
        while (form.attrs[i]) {
          kv = {};
          if (form.attrs[i][0] == "src" && form.tag == "a") {
            kv.key = "href";
          } else {
            kv.key = self.evalForm(form.attrs[i][0], context);
          } 
          kv.val = self.evalForm(form.attrs[i][1], context); 
          content.attrs += attr_tpl.intpol(kv); 
          i++; 
        }
      }

      content.body = "\n" + form.body.join("\n");

      return html.intpol(content);
    }; // end Manana.PreTag()

    // ...........................................  
    this.VoidTag = function(form, context) {
      var html, attr_tpl, content, i;

      html = '<{tag}{attrs}>';
      attr_tpl = ' {key}="{val}"';
      content = { tag: form.tag, attrs: '' };

      if (isArr(form.attrs)) {
        i = 0;
        while (form.attrs[i]) {
          content.attrs += attr_tpl.intpol({ 
                             key: self.evalForm(form.attrs[i][0], context), 
                             val: self.evalForm(form.attrs[i][1], context)
                           })
          i++; 
        }
      }

      return html.intpol(content);
    }; // end Manana.VoidTag()

    // ...........................................  
    this.Text = function(form, context) {
      var i = 0, res = [];
      while ( ! is(form.body[i], "undefined")) {
        res.push(self.evalForm(form.body[i], context));
        i++;
      }
      return res.join(' ');
    }; // end Manana.Text()

    // ...........................................  
    this.Filter = function(form, context) {
      var i = 0, res = [];
      while ( ! is(form.body[i], "undefined")) {
        res.push(self.evalForm(form.body[i], context));
        i++;
      }
      return res.join(' ');
    }; // end Manana.Filter()

    // ...........................................  
    this.format = function(html, indent, indent_level, loc) {
      var orig_indent_level, tokens, extract_close_tag, open_tags, void_tags, padding, tag, i, t, r;

      if (is(html, "undefined")) {
        throw new MananaError("format() functions requires render() to be run first");
      }

      if (is(indent, "undefined")) {
        throw new MananaError("format() requires and indentation string for its 2nd arg.");
      }

      if (is(indent_level, "undefined")) {
        indent_level = 0;
      }

      function line(token, indent_plus_one) {
        if ( ! is(indent_plus_one, "undefined")) {
          padding = indent.repeat(indent_level + 1);
        } else {
          padding = indent.repeat(indent_level);
        }
        return '{p}{t}'.intpol({p:padding, t:token})
      }

      function is_main_block(tag) {
        return ['html', 'head', 'body'].indexOf(tag) > -1;
      }

      void_tags = [
        "area", "base", "br", "col", "embed", "hr", "img", "input", "keygen",
        "link", "menuitem", "meta", "param", "source", "track", "wbr"
      ];

      orig_indent_level = indent_level;
      tokens = self.result.split(/(<[^>]+>)/);
      open_tags = [];
     
      r = [];
      for (i in tokens) {
        t = tokens[i];

        if (t.length) {
          if ('<!' == t.slice(0, 2)) {
            r.push(line(t));
          } else if ('</' == t.slice(0, 2)) {
            r.push(line(t));
            tag = t.replace(/[<>\/ ]/g, '');
            if (tag == open_tags[open_tags.length-1]) {
              open_tags.pop();
              indent_level--;
            }
          } else if ('<' == t[0]) {
            tag = t.split(' ')[0].slice(1).replace('>', '');
            if (void_tags.indexOf(tag) == -1) {
              open_tags.push(tag);
              indent_level++;
            }
            if (is_main_block(tag)) {
              indent_level = orig_indent_level;
            }
            r.push(line(t))
          } else {
            r.push(line(t, indent_level))
          }
        }
      }
    
      return r.join("\n");
    }; // end Manana.format()

    // ...........................................  
    this.encode = function(html) {
      return String(html)
               .replace( /&/g, '&amp;'  )
               .replace( /"/g, '&quot;' )
               .replace( /'/g, '&#39;'  )
               .replace( /</g, '&lt;'   )
               .replace( />/g, '&gt;'   );
    }; // end Manana.encode()

    // ...........................................  
    this.decode = function(encoded) {
      return String(encoded)
               .replace( /&amp;/g  , '&' )
               .replace( /&quot;/g , '"' )
               .replace( /&\#39;/g , "'" )
               .replace( /&lt;/g   , '<' )
               .replace( /&gt;/g   , '>' );
    }; // end Manana.decode()

    // ...........................................  
    this.bottle = function(code, context) {
      var i, lines, line, indent_pat, indent, brew;

      if (is(context, "undefined")) {
        context = {};
      }

      try {
        self.parser.parse(code);
      } catch (e) {
        throw new MananaError("Invalid Mañana code sent to Bottle method.");
      }

      try {
        JSON.parse(JSON.stringify(context));
      } catch (e) {
        throw new MananaError("Invalid context sent to Bottle method.");
      }

      lines = code.split(/\n/g);
      indent_pat = /^([\t\s][\t\s]*)/;

      brew = '#ñ(role="template")';
      for (i in lines) {
        line = lines[i];

        indent = line.match(indent_pat);
        if (indent === null) {
          indent = 0;
        } else {
          indent = indent[1].length;
        }

        line = line.replace(indent_pat, '');
        brew += '#ñ{' + indent + '}' + line;
      }

      brew += '#ñ(role="context")' + JSON.stringify(context);

      return brew;
    }; // end Manana.bottle()

    // ...........................................  
    this.pour = function(brew, indent_char) {
      var parts, tpl, ctx, i, lines, line, indent;

      if ( ! /^\#ñ\(role="template"\)(?=\#ñ\{)/.test(brew)) {
        throw new MananaError("Invalid brew provided to Unbottle method.");
      }

      brew = brew.replace('#ñ(role="template")', '');
      parts = brew.split('#ñ(role="context")');
      tpl = parts[0];
      ctx = parts[1];

      try {
        ctx = JSON.parse(ctx);
      } catch (e) {
        throw new MananaError("Invalid context provided to Unbottle method.");
      }

      if ( ! indent_char) {
        indent_char = ' ';
      }

      lines = tpl.split(/(\#ñ\{[0-9][0-9]*\})/g);
      if (lines[0] === '') {
        lines = lines.slice(1);
      }

      tpl = '';
      for (i=0, l=lines.length; i < l; i += 2) {
        indent = lines[i]
                   .replace( '#ñ{' , '')
                   .replace( '}'   , '');
        indent = indent_char.repeat(parseInt(indent));

        line = lines[i + 1];

        tpl += indent + line + "\n";
      }

      try {
        self.parser.parse(tpl);
      } catch (e) {
        throw new MananaError("Invalid Mañana code pourd..");
      }

      return { "template": tpl, "context": ctx }
    }; // end Manana.pour()

    // ...........................................  
    this.Function = function(form, context) {
      var fn_name, i, args, res;

      fn_name = form.name;

      if (is(self.fns[fn_name], "undefined")) {
        throw new MananaError(
                    "Function '{name}' is not defined. Call 'Manana.add_fn(name, fn)' to add it"
                    .intpol(form)
                  );
      }

      if ( ! is(self.fns[fn_name], "function")) {
        throw new MananaError("'{name}' is not a function".intpol(form));
      }

      args = [];
      if (form.args) {
        i = 0;
        while ( ! is(form.args[i], "undefined")) {
          args.push(self.evalForm(form.args[i], context));
          i++;
        }
      }
      args.push(form);

      try {
        res = self.fns[fn_name].apply(self, args);
      } catch (e) {
        throw new MananaError(e, form.loc);
      }

      return res;
    }; // end Manana.Function()

    // ...........................................  
    self.fns.debug = function(form) {
      console.log('view: ', self.view);
      console.log('context: ', self.context);
      console.log('Manana: ', self);
      return '';
    }; // end Manana.debug()

    // ...........................................  
    self.fns.print = function(form) {
      var res = '', i = 0;
      while ( ! is(arguments[i], "undefined")) {
        res += JSON.stringify(arguments[i], null, 4);
        i++;
      }
      return res;
    }; // end Manana.print()

    // ...........................................  
    self.fns.context = function(form) {
      return JSON.stringify(self.context);
    }; // end Manana.context()

    // ...........................................  
    self.fns.view = function(form) {
      var out = JSON.stringify(self.view, null, 4).split("\n")
      out.unshift("<pre>");
      out.push("</pre>");
      return out.join("\n    ");
    }; // end Manana.view()

    // ...........................................  
    self.fns.whatis = function(x, form) {
      var description;

      try {
        description = '@whatis({target}) ==> '.intpol({ target: form.args[0].components.join('.') });
      } catch (e) {
        description = '@whatis() ==> ';
      }

      console.log(description, x);

      return '<h2>' + description + '<pre>' + JSON.stringify(x, null, 4) + '</pre>';
    };

    // ...........................................  
    this.addFunction = function(name, fn) {
      if ( ! isStr(name)) {
        throw new MananaError("1st arg to Manana.add_fn() must be a string");
      }

      if ( ! is(fn, "function")) {
        throw new MananaError("2nd arg to Manana.add_fn() must be a function");
      }

      self.fns[name] = fn;
    }; // end Manana.add_fn()

    this.add_fn = this.addFunction; // switching to camelcase, leaving for backward compatability

  } // end Manana() 


  // _____________________________________________ Make available in both node.js & browser 
  if (_manana_is_server_side) {
    exports['Manana'] = Manana;
    exports['MananaNamespace'] = MananaNamespace;
    exports['MananaView'] = MananaView;
    exports['MananaError'] = MananaError;
  }

  if (typeof window === 'undefined') {
    window = {};
  }
  window['Manana'] = Manana;
  window['MananaNamespace'] = MananaNamespace;
  window['MananaView'] = MananaView;
  window['MananaError'] = MananaError;

})(typeof exports === "undefined" ? {} : exports);
