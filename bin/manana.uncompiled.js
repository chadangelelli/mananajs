/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var manana_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"prog_list":4,"EOF":5,"stmt":6,"block":7,"INDENT":8,"stmt_list":9,"DEDENT":10,"html_stmt":11,"void_tag_stmt":12,"code_tag_stmt":13,"tag_stmt":14,"filter_stmt":15,"alias_stmt":16,"include_stmt":17,"with_stmt":18,"if_stmt":19,"for_stmt":20,"name":21,"fn":22,"HTML":23,"i_html":24,"I_HTML_START":25,"i_html_text":26,"I_HTML_END":27,"i_html_text_el":28,"I_HTML_TEXT":29,"void_tag":30,"END_TAG":31,"tag_attrs":32,"VOID_TAG":33,"CODE_TAG":34,"END_CODE_TAG":35,"code":36,"line":37,"LINE":38,"BLANK_LINE":39,"tag":40,"text":41,"TAG":42,"tag_attr":43,"tag_attr_args":44,"TAG_ID":45,"TAG_SRC":46,"TAG_SRC_I_STRING":47,"string":48,"tag_classes":49,"TAG_ATTR":50,"EQ":51,"TAG_DATA_ATTR":52,"LPAREN":53,"tag_attr_arg_list":54,"RPAREN":55,"LBRACE":56,"tag_attr_arg_list_alt":57,"RBRACE":58,"tag_attr_arg":59,"COMMA":60,"tag_attr_arg_alt":61,"COLON":62,"TAG_CLASS":63,"FILTER":64,"word_list":65,"word":66,"WORD":67,"SPACE":68,"path_or_fn":69,"path":70,"WITH":71,"AS":72,"ID":73,"END_EXPR":74,"FOR":75,"IN":76,"ifs":77,"if":78,"else":79,"elifs":80,"IF":81,"conds":82,"elif":83,"ELIF":84,"cond":85,"AND":86,"OR":87,"ev":88,"NOT":89,"COND":90,"IS":91,"TYPE":92,"EXISTS":93,"ELSE":94,"INT":95,"BOOL":96,"ALIAS":97,"INCLUDE":98,"id":99,"DOT":100,"meths":101,"LBRACK":102,"RBRACK":103,"meth":104,"meth_args":105,"meth_arg":106,"FN":107,"fn_args":108,"fn_arg":109,"hash":110,"hash_data":111,"hash_pair":112,"hash_val":113,"START_NAME":114,"STRING":115,"i_string":116,"I_STRING_D":117,"i_string_text":118,"END_I_STRING_D":119,"I_STRING_S":120,"END_I_STRING_S":121,"i_string_text_el":122,"I_STRING_TEXT":123,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",10:"DEDENT",23:"HTML",25:"I_HTML_START",27:"I_HTML_END",29:"I_HTML_TEXT",31:"END_TAG",33:"VOID_TAG",34:"CODE_TAG",35:"END_CODE_TAG",38:"LINE",39:"BLANK_LINE",42:"TAG",45:"TAG_ID",46:"TAG_SRC",47:"TAG_SRC_I_STRING",50:"TAG_ATTR",51:"EQ",52:"TAG_DATA_ATTR",53:"LPAREN",55:"RPAREN",56:"LBRACE",58:"RBRACE",60:"COMMA",62:"COLON",63:"TAG_CLASS",64:"FILTER",67:"WORD",68:"SPACE",71:"WITH",72:"AS",73:"ID",74:"END_EXPR",75:"FOR",76:"IN",81:"IF",84:"ELIF",86:"AND",87:"OR",89:"NOT",90:"COND",91:"IS",92:"TYPE",93:"EXISTS",94:"ELSE",95:"INT",96:"BOOL",97:"ALIAS",98:"INCLUDE",100:"DOT",102:"LBRACK",103:"RBRACK",107:"FN",114:"START_NAME",115:"STRING",117:"I_STRING_D",119:"END_I_STRING_D",120:"I_STRING_S",121:"END_I_STRING_S",123:"I_STRING_TEXT"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,3],[9,2],[9,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,1],[11,1],[24,3],[26,2],[26,1],[28,1],[28,1],[12,2],[12,3],[30,1],[13,4],[13,5],[36,2],[36,1],[37,2],[37,1],[14,2],[14,3],[14,3],[14,3],[14,4],[14,4],[40,1],[32,2],[32,1],[32,1],[43,1],[43,1],[43,2],[43,1],[43,3],[43,3],[44,3],[44,3],[54,2],[54,1],[59,3],[59,4],[59,3],[59,4],[57,2],[57,1],[61,3],[61,4],[61,3],[61,4],[49,2],[49,1],[15,4],[41,1],[65,1],[65,2],[66,1],[66,1],[66,1],[66,1],[66,1],[69,1],[69,1],[18,6],[20,6],[19,1],[77,1],[77,2],[77,2],[77,3],[78,4],[80,2],[80,1],[83,4],[82,1],[82,3],[82,3],[85,1],[85,2],[85,3],[85,3],[85,4],[85,3],[85,4],[85,2],[85,3],[79,3],[88,1],[88,1],[88,1],[88,1],[88,1],[16,5],[17,3],[17,3],[70,1],[70,3],[70,3],[99,1],[99,4],[99,6],[99,6],[99,4],[99,6],[99,6],[99,5],[99,5],[99,4],[101,1],[101,3],[104,3],[104,4],[105,3],[105,1],[106,1],[106,1],[106,1],[22,3],[22,4],[108,3],[108,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,3],[109,3],[109,3],[109,3],[109,3],[110,3],[110,4],[111,3],[111,1],[112,3],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[21,3],[48,1],[48,1],[116,3],[116,3],[118,2],[118,1],[122,1],[122,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0-1]; 
break;
case 6: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = [$$[$0]]; 
break;
case 20: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 22: 
      var body = [$$[$0-2]];
      body.push.apply(body, $$[$0-1]);
      body.push($$[$0]);
      this.$ = new MananaStringNode(body, new Loc(_$[$0-2], _$[$0])); 
    
break;
case 23: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 24: this.$ = [$$[$0]]; 
break;
case 27: this.$ = new VoidTagNode($$[$0-1], null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 28: this.$ = new VoidTagNode($$[$0-2], $$[$0-1],   new Loc(_$[$0-2], _$[$0-1])); 
break;
case 29: this.$ = $$[$0]; 
break;
case 30: this.$ = new CodeTagNode($$[$0-3], null, $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 31: this.$ = new CodeTagNode($$[$0-4], $$[$0-3],   $$[$0-1], new Loc(_$[$0-4], _$[$0-1])); 
break;
case 32: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 33: this.$ = [$$[$0]]; 
break;
case 34: this.$ = $$[$0-1] + $$[$0] 
break;
case 35: this.$ = ''; 
break;
case 36: this.$ = new TagNode($$[$0-1], null, null, null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 37: this.$ = new TagNode($$[$0-2], null, $$[$0-1],   null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 38: this.$ = new TagNode($$[$0-2], null, null, $$[$0],   new Loc(_$[$0-2], _$[$0])); 
break;
case 39: this.$ = new TagNode($$[$0-2], $$[$0-1],   null, null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 40: this.$ = new TagNode($$[$0-3], $$[$0-2],   $$[$0-1],   null, new Loc(_$[$0-3], _$[$0-1])); 
break;
case 41: this.$ = new TagNode($$[$0-3], $$[$0-2],   null, $$[$0],   new Loc(_$[$0-3], _$[$0])); 
break;
case 42: this.$ = $$[$0]; 
break;
case 43: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 44: this.$ = [$$[$0]]; 
break;
case 45: this.$ = $$[$0]; 
break;
case 46: this.$ = ['id', $$[$0]]; 
break;
case 47: this.$ = ['src', new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])) ]; 
break;
case 48: this.$ = ['src', $$[$0]]; 
break;
case 49: this.$ = ['class', $$[$0].join(" ")]; 
break;
case 50: this.$ = ['attr', $$[$0-2], $$[$0]]; 
break;
case 51: this.$ = ['data', $$[$0-2], $$[$0]]; 
break;
case 52: this.$ = $$[$0-1]; 
break;
case 53: this.$ = $$[$0-1]; 
break;
case 54: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 55: this.$ = [$$[$0]]; 
break;
case 56: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 57: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 58: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 59: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 60: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 61: this.$ = [$$[$0]]; 
break;
case 62: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 63: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 64: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 65: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 66: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 67: this.$ = [$$[$0]]; 
break;
case 68: this.$ = new FilterNode($$[$0-3], $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 69: this.$ = new TextNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 70: this.$ = [$$[$0]]; 
break;
case 71: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 79: this.$ = new WithNode($$[$0-4], $$[$0-2], $$[$0], new Loc(_$[$0-5], _$[$0])); 
break;
case 80: this.$ = new ForNode($$[$0-4], $$[$0-2], $$[$0] , new Loc(_$[$0-5], _$[$0])) ; 
break;
case 81: this.$ = new IfNode($$[$0]); 
break;
case 82: this.$ = [$$[$0]]; 
break;
case 83: this.$ = [$$[$0-1], $$[$0]]; 
break;
case 84: this.$ = [$$[$0-1]]; this.$.push.apply(this.$, $$[$0]); 
break;
case 85: this.$ = [$$[$0-2]]; this.$.push.apply(this.$, $$[$0-1]); this.$.push($$[$0]); 
break;
case 86: this.$ = { case: $$[$0-3], conditions: $$[$0-2], body: $$[$0] }; 
break;
case 87: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 88: this.$ = [$$[$0]]; 
break;
case 89: this.$ = { case: $$[$0-3], conditions: $$[$0-2], body: $$[$0] }; 
break;
case 90: this.$ = [[null,  $$[$0]]]; 
break;
case 91: this.$ = $$[$0-2]; this.$.push([$$[$0-1], $$[$0]]); 
break;
case 92: this.$ = $$[$0-2]; this.$.push([$$[$0-1], $$[$0]]); 
break;
case 93: this.$ = ["true", $$[$0]]; 
break;
case 94: this.$ = ["not_true", $$[$0-1]]; 
break;
case 95: this.$ = [$$[$0-1], $$[$0-2], $$[$0]]; 
break;
case 96: this.$ = [$$[$0-1], $$[$0-2], $$[$0]]; 
break;
case 97: this.$ = ["not_is", $$[$0-3], $$[$0]]; 
break;
case 98: this.$ = [$$[$0-1], $$[$0-2], $$[$0]]; 
break;
case 99: this.$ = ["not_in", $$[$0-3], $$[$0]]; 
break;
case 100: this.$ = [$$[$0-1], $$[$0]]; 
break;
case 101: this.$ = ["not_exists", $$[$0-1]]; 
break;
case 102: this.$ = { case: $$[$0-2], body: $$[$0] }; 
break;
case 108: this.$ = new AliasNode($$[$0-3], $$[$0-1], new Loc(_$[$0-4], _$[$0])); 
break;
case 109: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 110: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 111: this.$ = new PathNode(null, $$[$0]  , null, new Loc(_$[$0], _$[$0])); 
break;
case 112: this.$ = new PathNode($$[$0-2]  , $$[$0]  , null, new Loc(_$[$0-2], _$[$0])); 
break;
case 113: this.$ = new PathNode($$[$0-2]  , null, $$[$0]  , new Loc(_$[$0-2], _$[$0])); 
break;
case 114: this.$ = new IdNode($$[$0], null, null, new Loc(_$[$0], _$[$0])); 
break;
case 115: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 116: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 117: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 118: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 119: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 120: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 121: this.$ = new IdNode($$[$0-4], 0   , $$[$0-1]  , new Loc(_$[$0-4], _$[$0])); 
break;
case 122: this.$ = new IdNode($$[$0-4], $$[$0-2]  , '*' , new Loc(_$[$0-4], _$[$0])); 
break;
case 123: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 124: this.$ = new MethodChainNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 125: this.$ = $$[$0-2]; this.$.chain.push($$[$0])                        ; 
break;
case 126: this.$ = new MethodNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 127: this.$ = new MethodNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 128: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 129: this.$ = [$$[$0]]; 
break;
case 133: this.$ = new FunctionNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 134: this.$ = new FunctionNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 135: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 136: this.$ = [$$[$0]]; 
break;
case 144: this.$ = $$[$0]; 
break;
case 145: this.$ = $$[$0]; 
break;
case 146: this.$ = $$[$0]; 
break;
case 147: this.$ = $$[$0]; 
break;
case 148: this.$ = $$[$0]; 
break;
case 149: this.$ = new MananaHash($$[$0-1]); 
break;
case 150: this.$ = new MananaHash($$[$0-2]); 
break;
case 151: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 152: this.$ = [$$[$0]]; 
break;
case 153: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 160: this.$ = $$[$0-1]; 
break;
case 161: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 163: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 164: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 165: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 166: this.$ = [$$[$0]]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,17],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:[1,18],24:19,25:[1,31],30:20,33:[1,32],34:[1,21],40:22,42:[1,33],64:[1,23],71:[1,26],75:[1,28],77:27,78:34,81:[1,35],97:[1,24],98:[1,25],107:[1,30],114:[1,29]},{1:[3]},{5:[1,36],6:37,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:[1,18],24:19,25:[1,31],30:20,33:[1,32],34:[1,21],40:22,42:[1,33],64:[1,23],71:[1,26],75:[1,28],77:27,78:34,81:[1,35],97:[1,24],98:[1,25],107:[1,30],114:[1,29]},{5:[2,3],23:[2,3],25:[2,3],33:[2,3],34:[2,3],42:[2,3],64:[2,3],71:[2,3],75:[2,3],81:[2,3],97:[2,3],98:[2,3],107:[2,3],114:[2,3]},{5:[2,4],23:[2,4],25:[2,4],33:[2,4],34:[2,4],42:[2,4],64:[2,4],71:[2,4],75:[2,4],81:[2,4],97:[2,4],98:[2,4],107:[2,4],114:[2,4]},{5:[2,8],10:[2,8],23:[2,8],25:[2,8],33:[2,8],34:[2,8],42:[2,8],64:[2,8],71:[2,8],75:[2,8],81:[2,8],97:[2,8],98:[2,8],107:[2,8],114:[2,8]},{5:[2,9],10:[2,9],23:[2,9],25:[2,9],33:[2,9],34:[2,9],42:[2,9],64:[2,9],71:[2,9],75:[2,9],81:[2,9],97:[2,9],98:[2,9],107:[2,9],114:[2,9]},{5:[2,10],10:[2,10],23:[2,10],25:[2,10],33:[2,10],34:[2,10],42:[2,10],64:[2,10],71:[2,10],75:[2,10],81:[2,10],97:[2,10],98:[2,10],107:[2,10],114:[2,10]},{5:[2,11],10:[2,11],23:[2,11],25:[2,11],33:[2,11],34:[2,11],42:[2,11],64:[2,11],71:[2,11],75:[2,11],81:[2,11],97:[2,11],98:[2,11],107:[2,11],114:[2,11]},{5:[2,12],10:[2,12],23:[2,12],25:[2,12],33:[2,12],34:[2,12],42:[2,12],64:[2,12],71:[2,12],75:[2,12],81:[2,12],97:[2,12],98:[2,12],107:[2,12],114:[2,12]},{5:[2,13],10:[2,13],23:[2,13],25:[2,13],33:[2,13],34:[2,13],42:[2,13],64:[2,13],71:[2,13],75:[2,13],81:[2,13],97:[2,13],98:[2,13],107:[2,13],114:[2,13]},{5:[2,14],10:[2,14],23:[2,14],25:[2,14],33:[2,14],34:[2,14],42:[2,14],64:[2,14],71:[2,14],75:[2,14],81:[2,14],97:[2,14],98:[2,14],107:[2,14],114:[2,14]},{5:[2,15],10:[2,15],23:[2,15],25:[2,15],33:[2,15],34:[2,15],42:[2,15],64:[2,15],71:[2,15],75:[2,15],81:[2,15],97:[2,15],98:[2,15],107:[2,15],114:[2,15]},{5:[2,16],10:[2,16],23:[2,16],25:[2,16],33:[2,16],34:[2,16],42:[2,16],64:[2,16],71:[2,16],75:[2,16],81:[2,16],97:[2,16],98:[2,16],107:[2,16],114:[2,16]},{5:[2,17],10:[2,17],23:[2,17],25:[2,17],33:[2,17],34:[2,17],42:[2,17],64:[2,17],71:[2,17],75:[2,17],81:[2,17],97:[2,17],98:[2,17],107:[2,17],114:[2,17]},{5:[2,18],10:[2,18],23:[2,18],25:[2,18],33:[2,18],34:[2,18],42:[2,18],64:[2,18],71:[2,18],75:[2,18],81:[2,18],97:[2,18],98:[2,18],107:[2,18],114:[2,18]},{5:[2,19],10:[2,19],23:[2,19],25:[2,19],33:[2,19],34:[2,19],42:[2,19],64:[2,19],71:[2,19],75:[2,19],81:[2,19],97:[2,19],98:[2,19],107:[2,19],114:[2,19]},{6:39,9:38,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:[1,18],24:19,25:[1,31],30:20,33:[1,32],34:[1,21],40:22,42:[1,33],64:[1,23],71:[1,26],75:[1,28],77:27,78:34,81:[1,35],97:[1,24],98:[1,25],107:[1,30],114:[1,29]},{5:[2,20],10:[2,20],23:[2,20],25:[2,20],33:[2,20],34:[2,20],42:[2,20],64:[2,20],71:[2,20],75:[2,20],81:[2,20],97:[2,20],98:[2,20],107:[2,20],114:[2,20]},{5:[2,21],10:[2,21],23:[2,21],25:[2,21],33:[2,21],34:[2,21],42:[2,21],64:[2,21],71:[2,21],75:[2,21],81:[2,21],97:[2,21],98:[2,21],107:[2,21],114:[2,21]},{31:[1,40],32:41,43:42,44:43,45:[1,44],46:[1,45],47:[1,46],49:47,50:[1,48],52:[1,49],53:[1,50],56:[1,51],63:[1,52]},{32:54,35:[1,53],43:42,44:43,45:[1,44],46:[1,45],47:[1,46],49:47,50:[1,48],52:[1,49],53:[1,50],56:[1,51],63:[1,52]},{21:61,22:62,31:[1,55],32:57,41:56,43:42,44:43,45:[1,44],46:[1,45],47:[1,46],48:63,49:47,50:[1,48],52:[1,49],53:[1,50],56:[1,51],63:[1,52],65:58,66:59,67:[1,60],68:[1,64],107:[1,30],114:[1,29],115:[1,65],116:66,117:[1,67],120:[1,68]},{8:[1,69]},{22:72,69:70,70:71,73:[1,74],99:73,107:[1,30]},{48:75,70:76,73:[1,74],99:73,115:[1,65],116:66,117:[1,67],120:[1,68]},{22:72,69:77,70:71,73:[1,74],99:73,107:[1,30]},{5:[2,81],10:[2,81],23:[2,81],25:[2,81],33:[2,81],34:[2,81],42:[2,81],64:[2,81],71:[2,81],75:[2,81],81:[2,81],97:[2,81],98:[2,81],107:[2,81],114:[2,81]},{73:[1,78]},{70:79,73:[1,74],99:73},{53:[1,80]},{21:84,26:81,28:82,29:[1,83],114:[1,29]},{31:[2,29],45:[2,29],46:[2,29],47:[2,29],50:[2,29],52:[2,29],53:[2,29],56:[2,29],63:[2,29]},{31:[2,42],45:[2,42],46:[2,42],47:[2,42],50:[2,42],52:[2,42],53:[2,42],56:[2,42],63:[2,42],67:[2,42],68:[2,42],107:[2,42],114:[2,42],115:[2,42],117:[2,42],120:[2,42]},{5:[2,82],10:[2,82],23:[2,82],25:[2,82],33:[2,82],34:[2,82],42:[2,82],64:[2,82],71:[2,82],75:[2,82],79:85,80:86,81:[2,82],83:88,84:[1,89],94:[1,87],97:[2,82],98:[2,82],107:[2,82],114:[2,82]},{22:99,48:95,70:98,73:[1,74],82:90,85:91,88:92,89:[1,93],93:[1,94],95:[1,96],96:[1,97],99:73,107:[1,30],115:[1,65],116:66,117:[1,67],120:[1,68]},{1:[2,1]},{5:[2,2],23:[2,2],25:[2,2],33:[2,2],34:[2,2],42:[2,2],64:[2,2],71:[2,2],75:[2,2],81:[2,2],97:[2,2],98:[2,2],107:[2,2],114:[2,2]},{6:101,10:[1,100],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:[1,18],24:19,25:[1,31],30:20,33:[1,32],34:[1,21],40:22,42:[1,33],64:[1,23],71:[1,26],75:[1,28],77:27,78:34,81:[1,35],97:[1,24],98:[1,25],107:[1,30],114:[1,29]},{10:[2,7],23:[2,7],25:[2,7],33:[2,7],34:[2,7],42:[2,7],64:[2,7],71:[2,7],75:[2,7],81:[2,7],97:[2,7],98:[2,7],107:[2,7],114:[2,7]},{5:[2,27],10:[2,27],23:[2,27],25:[2,27],33:[2,27],34:[2,27],42:[2,27],64:[2,27],71:[2,27],75:[2,27],81:[2,27],97:[2,27],98:[2,27],107:[2,27],114:[2,27]},{31:[1,102],43:103,45:[1,44],46:[1,45],47:[1,46],49:47,50:[1,48],52:[1,49],63:[1,52]},{31:[2,44],35:[2,44],45:[2,44],46:[2,44],47:[2,44],50:[2,44],52:[2,44],63:[2,44],67:[2,44],68:[2,44],107:[2,44],114:[2,44],115:[2,44],117:[2,44],120:[2,44]},{31:[2,45],35:[2,45],45:[2,45],46:[2,45],47:[2,45],50:[2,45],52:[2,45],63:[2,45],67:[2,45],68:[2,45],107:[2,45],114:[2,45],115:[2,45],117:[2,45],120:[2,45]},{31:[2,46],35:[2,46],45:[2,46],46:[2,46],47:[2,46],50:[2,46],52:[2,46],63:[2,46],67:[2,46],68:[2,46],107:[2,46],114:[2,46],115:[2,46],117:[2,46],120:[2,46]},{31:[2,47],35:[2,47],45:[2,47],46:[2,47],47:[2,47],50:[2,47],52:[2,47],63:[2,47],67:[2,47],68:[2,47],107:[2,47],114:[2,47],115:[2,47],117:[2,47],120:[2,47]},{48:104,115:[1,65],116:66,117:[1,67],120:[1,68]},{31:[2,49],35:[2,49],45:[2,49],46:[2,49],47:[2,49],50:[2,49],52:[2,49],63:[1,105],67:[2,49],68:[2,49],107:[2,49],114:[2,49],115:[2,49],117:[2,49],120:[2,49]},{51:[1,106]},{51:[1,107]},{50:[1,110],52:[1,111],54:108,59:109},{50:[1,114],52:[1,115],57:112,61:113},{31:[2,67],35:[2,67],45:[2,67],46:[2,67],47:[2,67],50:[2,67],52:[2,67],63:[2,67],67:[2,67],68:[2,67],107:[2,67],114:[2,67],115:[2,67],117:[2,67],120:[2,67]},{8:[1,118],36:116,37:117,39:[1,119]},{35:[1,120],43:103,45:[1,44],46:[1,45],47:[1,46],49:47,50:[1,48],52:[1,49],63:[1,52]},{5:[2,36],7:121,8:[1,17],10:[2,36],23:[2,36],25:[2,36],33:[2,36],34:[2,36],42:[2,36],64:[2,36],71:[2,36],75:[2,36],81:[2,36],97:[2,36],98:[2,36],107:[2,36],114:[2,36]},{31:[1,122]},{21:61,22:62,31:[1,123],41:124,43:103,45:[1,44],46:[1,45],47:[1,46],48:63,49:47,50:[1,48],52:[1,49],63:[1,52],65:58,66:59,67:[1,60],68:[1,64],107:[1,30],114:[1,29],115:[1,65],116:66,117:[1,67],120:[1,68]},{10:[2,69],21:61,22:62,31:[2,69],48:63,66:125,67:[1,60],68:[1,64],107:[1,30],114:[1,29],115:[1,65],116:66,117:[1,67],120:[1,68]},{10:[2,70],31:[2,70],67:[2,70],68:[2,70],107:[2,70],114:[2,70],115:[2,70],117:[2,70],120:[2,70]},{10:[2,72],31:[2,72],67:[2,72],68:[2,72],107:[2,72],114:[2,72],115:[2,72],117:[2,72],120:[2,72]},{10:[2,73],31:[2,73],67:[2,73],68:[2,73],107:[2,73],114:[2,73],115:[2,73],117:[2,73],120:[2,73]},{10:[2,74],31:[2,74],67:[2,74],68:[2,74],107:[2,74],114:[2,74],115:[2,74],117:[2,74],120:[2,74]},{10:[2,75],31:[2,75],67:[2,75],68:[2,75],107:[2,75],114:[2,75],115:[2,75],117:[2,75],120:[2,75]},{10:[2,76],31:[2,76],67:[2,76],68:[2,76],107:[2,76],114:[2,76],115:[2,76],117:[2,76],120:[2,76]},{10:[2,161],31:[2,161],35:[2,161],45:[2,161],46:[2,161],47:[2,161],50:[2,161],52:[2,161],55:[2,161],58:[2,161],60:[2,161],63:[2,161],67:[2,161],68:[2,161],74:[2,161],76:[2,161],86:[2,161],87:[2,161],89:[2,161],90:[2,161],91:[2,161],103:[2,161],107:[2,161],114:[2,161],115:[2,161],117:[2,161],120:[2,161]},{10:[2,162],31:[2,162],35:[2,162],45:[2,162],46:[2,162],47:[2,162],50:[2,162],52:[2,162],55:[2,162],58:[2,162],60:[2,162],63:[2,162],67:[2,162],68:[2,162],74:[2,162],76:[2,162],86:[2,162],87:[2,162],89:[2,162],90:[2,162],91:[2,162],103:[2,162],107:[2,162],114:[2,162],115:[2,162],117:[2,162],120:[2,162]},{21:128,114:[1,29],118:126,122:127,123:[1,129]},{21:128,114:[1,29],118:130,122:127,123:[1,129]},{21:61,22:62,41:131,48:63,65:58,66:59,67:[1,60],68:[1,64],107:[1,30],114:[1,29],115:[1,65],116:66,117:[1,67],120:[1,68]},{72:[1,132]},{72:[2,77],100:[1,133]},{72:[2,78]},{55:[2,111],58:[2,111],60:[2,111],62:[2,111],72:[2,111],74:[2,111],76:[2,111],86:[2,111],87:[2,111],89:[2,111],90:[2,111],91:[2,111],100:[2,111],103:[2,111]},{55:[2,114],58:[2,114],60:[2,114],62:[2,114],72:[2,114],74:[2,114],76:[2,114],86:[2,114],87:[2,114],89:[2,114],90:[2,114],91:[2,114],100:[2,114],102:[1,134],103:[2,114]},{74:[1,135]},{74:[1,136],100:[1,133]},{72:[1,137]},{76:[1,138]},{58:[1,139],100:[1,133]},{22:146,48:145,55:[1,140],56:[1,151],70:143,73:[1,150],92:[1,149],95:[1,144],96:[1,148],99:73,107:[1,30],108:141,109:142,110:147,115:[1,65],116:66,117:[1,67],120:[1,68]},{21:84,27:[1,152],28:153,29:[1,83],114:[1,29]},{27:[2,24],29:[2,24],114:[2,24]},{27:[2,25],29:[2,25],114:[2,25]},{27:[2,26],29:[2,26],114:[2,26]},{5:[2,83],10:[2,83],23:[2,83],25:[2,83],33:[2,83],34:[2,83],42:[2,83],64:[2,83],71:[2,83],75:[2,83],81:[2,83],97:[2,83],98:[2,83],107:[2,83],114:[2,83]},{5:[2,84],10:[2,84],23:[2,84],25:[2,84],33:[2,84],34:[2,84],42:[2,84],64:[2,84],71:[2,84],75:[2,84],79:154,81:[2,84],83:155,84:[1,89],94:[1,87],97:[2,84],98:[2,84],107:[2,84],114:[2,84]},{74:[1,156]},{5:[2,88],10:[2,88],23:[2,88],25:[2,88],33:[2,88],34:[2,88],42:[2,88],64:[2,88],71:[2,88],75:[2,88],81:[2,88],84:[2,88],94:[2,88],97:[2,88],98:[2,88],107:[2,88],114:[2,88]},{22:99,48:95,70:98,73:[1,74],82:157,85:91,88:92,89:[1,93],93:[1,94],95:[1,96],96:[1,97],99:73,107:[1,30],115:[1,65],116:66,117:[1,67],120:[1,68]},{74:[1,158],86:[1,159],87:[1,160]},{74:[2,90],86:[2,90],87:[2,90]},{74:[2,93],76:[1,164],86:[2,93],87:[2,93],89:[1,163],90:[1,161],91:[1,162]},{22:99,48:95,70:98,73:[1,74],88:165,93:[1,166],95:[1,96],96:[1,97],99:73,107:[1,30],115:[1,65],116:66,117:[1,67],120:[1,68]},{22:99,48:95,70:98,73:[1,74],88:167,95:[1,96],96:[1,97],99:73,107:[1,30],115:[1,65],116:66,117:[1,67],120:[1,68]},{74:[2,103],76:[2,103],86:[2,103],87:[2,103],89:[2,103],90:[2,103],91:[2,103]},{74:[2,104],76:[2,104],86:[2,104],87:[2,104],89:[2,104],90:[2,104],91:[2,104]},{74:[2,105],76:[2,105],86:[2,105],87:[2,105],89:[2,105],90:[2,105],91:[2,105]},{74:[2,106],76:[2,106],86:[2,106],87:[2,106],89:[2,106],90:[2,106],91:[2,106],100:[1,133]},{74:[2,107],76:[2,107],86:[2,107],87:[2,107],89:[2,107],90:[2,107],91:[2,107]},{5:[2,5],10:[2,5],23:[2,5],25:[2,5],33:[2,5],34:[2,5],42:[2,5],64:[2,5],71:[2,5],75:[2,5],81:[2,5],84:[2,5],94:[2,5],97:[2,5],98:[2,5],107:[2,5],114:[2,5]},{10:[2,6],23:[2,6],25:[2,6],33:[2,6],34:[2,6],42:[2,6],64:[2,6],71:[2,6],75:[2,6],81:[2,6],97:[2,6],98:[2,6],107:[2,6],114:[2,6]},{5:[2,28],10:[2,28],23:[2,28],25:[2,28],33:[2,28],34:[2,28],42:[2,28],64:[2,28],71:[2,28],75:[2,28],81:[2,28],97:[2,28],98:[2,28],107:[2,28],114:[2,28]},{31:[2,43],35:[2,43],45:[2,43],46:[2,43],47:[2,43],50:[2,43],52:[2,43],63:[2,43],67:[2,43],68:[2,43],107:[2,43],114:[2,43],115:[2,43],117:[2,43],120:[2,43]},{31:[2,48],35:[2,48],45:[2,48],46:[2,48],47:[2,48],50:[2,48],52:[2,48],63:[2,48],67:[2,48],68:[2,48],107:[2,48],114:[2,48],115:[2,48],117:[2,48],120:[2,48]},{31:[2,66],35:[2,66],45:[2,66],46:[2,66],47:[2,66],50:[2,66],52:[2,66],63:[2,66],67:[2,66],68:[2,66],107:[2,66],114:[2,66],115:[2,66],117:[2,66],120:[2,66]},{48:168,115:[1,65],116:66,117:[1,67],120:[1,68]},{48:169,115:[1,65],116:66,117:[1,67],120:[1,68]},{50:[1,110],52:[1,111],55:[1,170],59:171},{50:[2,55],52:[2,55],55:[2,55]},{51:[1,172]},{51:[1,173]},{50:[1,114],52:[1,115],58:[1,174],61:175},{50:[2,61],52:[2,61],58:[2,61]},{62:[1,176]},{62:[1,177]},{8:[1,118],10:[1,178],37:179,39:[1,119]},{8:[2,33],10:[2,33],39:[2,33]},{38:[1,180]},{8:[2,35],10:[2,35],39:[2,35]},{8:[1,118],36:181,37:117,39:[1,119]},{5:[2,38],10:[2,38],23:[2,38],25:[2,38],33:[2,38],34:[2,38],42:[2,38],64:[2,38],71:[2,38],75:[2,38],81:[2,38],97:[2,38],98:[2,38],107:[2,38],114:[2,38]},{5:[2,37],10:[2,37],23:[2,37],25:[2,37],33:[2,37],34:[2,37],42:[2,37],64:[2,37],71:[2,37],75:[2,37],81:[2,37],97:[2,37],98:[2,37],107:[2,37],114:[2,37]},{5:[2,39],7:182,8:[1,17],10:[2,39],23:[2,39],25:[2,39],33:[2,39],34:[2,39],42:[2,39],64:[2,39],71:[2,39],75:[2,39],81:[2,39],97:[2,39],98:[2,39],107:[2,39],114:[2,39]},{31:[1,183]},{10:[2,71],31:[2,71],67:[2,71],68:[2,71],107:[2,71],114:[2,71],115:[2,71],117:[2,71],120:[2,71]},{21:128,114:[1,29],119:[1,184],122:185,123:[1,129]},{114:[2,166],119:[2,166],121:[2,166],123:[2,166]},{114:[2,167],119:[2,167],121:[2,167],123:[2,167]},{114:[2,168],119:[2,168],121:[2,168],123:[2,168]},{21:128,114:[1,29],121:[1,186],122:185,123:[1,129]},{10:[1,187]},{73:[1,188]},{73:[1,191],99:189,101:190,104:192},{48:196,62:[1,195],70:194,73:[1,74],95:[1,193],99:73,115:[1,65],116:66,117:[1,67],120:[1,68]},{5:[2,109],10:[2,109],23:[2,109],25:[2,109],33:[2,109],34:[2,109],42:[2,109],64:[2,109],71:[2,109],75:[2,109],81:[2,109],97:[2,109],98:[2,109],107:[2,109],114:[2,109]},{5:[2,110],10:[2,110],23:[2,110],25:[2,110],33:[2,110],34:[2,110],42:[2,110],64:[2,110],71:[2,110],75:[2,110],81:[2,110],97:[2,110],98:[2,110],107:[2,110],114:[2,110]},{73:[1,197]},{70:198,73:[1,74],99:73},{5:[2,160],10:[2,160],23:[2,160],25:[2,160],27:[2,160],29:[2,160],31:[2,160],33:[2,160],34:[2,160],42:[2,160],64:[2,160],67:[2,160],68:[2,160],71:[2,160],75:[2,160],81:[2,160],97:[2,160],98:[2,160],107:[2,160],114:[2,160],115:[2,160],117:[2,160],119:[2,160],120:[2,160],121:[2,160],123:[2,160]},{5:[2,133],10:[2,133],23:[2,133],25:[2,133],31:[2,133],33:[2,133],34:[2,133],42:[2,133],55:[2,133],58:[2,133],60:[2,133],64:[2,133],67:[2,133],68:[2,133],71:[2,133],72:[2,133],74:[2,133],75:[2,133],76:[2,133],81:[2,133],86:[2,133],87:[2,133],89:[2,133],90:[2,133],91:[2,133],97:[2,133],98:[2,133],107:[2,133],114:[2,133],115:[2,133],117:[2,133],120:[2,133]},{55:[1,199],60:[1,200]},{55:[2,136],60:[2,136]},{55:[2,137],60:[2,137],100:[1,133]},{55:[2,138],60:[2,138]},{55:[2,139],60:[2,139]},{55:[2,140],60:[2,140]},{55:[2,141],60:[2,141]},{55:[2,142],60:[2,142]},{55:[2,143],60:[2,143]},{51:[1,201],55:[2,114],60:[2,114],100:[2,114],102:[1,134]},{73:[1,204],111:202,112:203},{5:[2,22],10:[2,22],23:[2,22],25:[2,22],33:[2,22],34:[2,22],42:[2,22],64:[2,22],71:[2,22],75:[2,22],81:[2,22],97:[2,22],98:[2,22],107:[2,22],114:[2,22]},{27:[2,23],29:[2,23],114:[2,23]},{5:[2,85],10:[2,85],23:[2,85],25:[2,85],33:[2,85],34:[2,85],42:[2,85],64:[2,85],71:[2,85],75:[2,85],81:[2,85],97:[2,85],98:[2,85],107:[2,85],114:[2,85]},{5:[2,87],10:[2,87],23:[2,87],25:[2,87],33:[2,87],34:[2,87],42:[2,87],64:[2,87],71:[2,87],75:[2,87],81:[2,87],84:[2,87],94:[2,87],97:[2,87],98:[2,87],107:[2,87],114:[2,87]},{7:205,8:[1,17]},{74:[1,206],86:[1,159],87:[1,160]},{7:207,8:[1,17]},{22:99,48:95,70:98,73:[1,74],85:208,88:92,89:[1,93],93:[1,94],95:[1,96],96:[1,97],99:73,107:[1,30],115:[1,65],116:66,117:[1,67],120:[1,68]},{22:99,48:95,70:98,73:[1,74],85:209,88:92,89:[1,93],93:[1,94],95:[1,96],96:[1,97],99:73,107:[1,30],115:[1,65],116:66,117:[1,67],120:[1,68]},{22:99,48:95,70:98,73:[1,74],88:210,95:[1,96],96:[1,97],99:73,107:[1,30],115:[1,65],116:66,117:[1,67],120:[1,68]},{92:[1,211]},{76:[1,213],91:[1,212]},{22:99,48:95,70:98,73:[1,74],88:214,95:[1,96],96:[1,97],99:73,107:[1,30],115:[1,65],116:66,117:[1,67],120:[1,68]},{74:[2,94],86:[2,94],87:[2,94]},{22:99,48:95,70:98,73:[1,74],88:215,95:[1,96],96:[1,97],99:73,107:[1,30],115:[1,65],116:66,117:[1,67],120:[1,68]},{74:[2,100],86:[2,100],87:[2,100]},{31:[2,50],35:[2,50],45:[2,50],46:[2,50],47:[2,50],50:[2,50],52:[2,50],63:[2,50],67:[2,50],68:[2,50],107:[2,50],114:[2,50],115:[2,50],117:[2,50],120:[2,50]},{31:[2,51],35:[2,51],45:[2,51],46:[2,51],47:[2,51],50:[2,51],52:[2,51],63:[2,51],67:[2,51],68:[2,51],107:[2,51],114:[2,51],115:[2,51],117:[2,51],120:[2,51]},{31:[2,52],35:[2,52],45:[2,52],46:[2,52],47:[2,52],50:[2,52],52:[2,52],63:[2,52],67:[2,52],68:[2,52],107:[2,52],114:[2,52],115:[2,52],117:[2,52],120:[2,52]},{50:[2,54],52:[2,54],55:[2,54]},{48:216,115:[1,65],116:66,117:[1,67],120:[1,68]},{48:217,115:[1,65],116:66,117:[1,67],120:[1,68]},{31:[2,53],35:[2,53],45:[2,53],46:[2,53],47:[2,53],50:[2,53],52:[2,53],63:[2,53],67:[2,53],68:[2,53],107:[2,53],114:[2,53],115:[2,53],117:[2,53],120:[2,53]},{50:[2,60],52:[2,60],58:[2,60]},{48:218,115:[1,65],116:66,117:[1,67],120:[1,68]},{48:219,115:[1,65],116:66,117:[1,67],120:[1,68]},{5:[2,30],10:[2,30],23:[2,30],25:[2,30],33:[2,30],34:[2,30],42:[2,30],64:[2,30],71:[2,30],75:[2,30],81:[2,30],97:[2,30],98:[2,30],107:[2,30],114:[2,30]},{8:[2,32],10:[2,32],39:[2,32]},{8:[2,34],10:[2,34],39:[2,34]},{8:[1,118],10:[1,220],37:179,39:[1,119]},{5:[2,41],10:[2,41],23:[2,41],25:[2,41],33:[2,41],34:[2,41],42:[2,41],64:[2,41],71:[2,41],75:[2,41],81:[2,41],97:[2,41],98:[2,41],107:[2,41],114:[2,41]},{5:[2,40],10:[2,40],23:[2,40],25:[2,40],33:[2,40],34:[2,40],42:[2,40],64:[2,40],71:[2,40],75:[2,40],81:[2,40],97:[2,40],98:[2,40],107:[2,40],114:[2,40]},{10:[2,163],31:[2,163],35:[2,163],45:[2,163],46:[2,163],47:[2,163],50:[2,163],52:[2,163],55:[2,163],58:[2,163],60:[2,163],63:[2,163],67:[2,163],68:[2,163],74:[2,163],76:[2,163],86:[2,163],87:[2,163],89:[2,163],90:[2,163],91:[2,163],103:[2,163],107:[2,163],114:[2,163],115:[2,163],117:[2,163],120:[2,163]},{114:[2,165],119:[2,165],121:[2,165],123:[2,165]},{10:[2,164],31:[2,164],35:[2,164],45:[2,164],46:[2,164],47:[2,164],50:[2,164],52:[2,164],55:[2,164],58:[2,164],60:[2,164],63:[2,164],67:[2,164],68:[2,164],74:[2,164],76:[2,164],86:[2,164],87:[2,164],89:[2,164],90:[2,164],91:[2,164],103:[2,164],107:[2,164],114:[2,164],115:[2,164],117:[2,164],120:[2,164]},{5:[2,68],10:[2,68],23:[2,68],25:[2,68],33:[2,68],34:[2,68],42:[2,68],64:[2,68],71:[2,68],75:[2,68],81:[2,68],97:[2,68],98:[2,68],107:[2,68],114:[2,68]},{74:[1,221]},{55:[2,112],58:[2,112],60:[2,112],62:[2,112],72:[2,112],74:[2,112],76:[2,112],86:[2,112],87:[2,112],89:[2,112],90:[2,112],91:[2,112],100:[2,112],103:[2,112]},{55:[2,113],58:[2,113],60:[2,113],62:[2,113],72:[2,113],74:[2,113],76:[2,113],86:[2,113],87:[2,113],89:[2,113],90:[2,113],91:[2,113],100:[1,222],103:[2,113]},{53:[1,223],55:[2,114],58:[2,114],60:[2,114],62:[2,114],72:[2,114],74:[2,114],76:[2,114],86:[2,114],87:[2,114],89:[2,114],90:[2,114],91:[2,114],100:[2,114],102:[1,134],103:[2,114]},{55:[2,124],58:[2,124],60:[2,124],62:[2,124],72:[2,124],74:[2,124],76:[2,124],86:[2,124],87:[2,124],89:[2,124],90:[2,124],91:[2,124],100:[2,124],103:[2,124]},{62:[1,225],103:[1,224]},{62:[1,227],100:[1,133],103:[1,226]},{95:[1,228]},{103:[1,229]},{74:[1,230]},{74:[1,231],100:[1,133]},{5:[2,134],10:[2,134],23:[2,134],25:[2,134],31:[2,134],33:[2,134],34:[2,134],42:[2,134],55:[2,134],58:[2,134],60:[2,134],64:[2,134],67:[2,134],68:[2,134],71:[2,134],72:[2,134],74:[2,134],75:[2,134],76:[2,134],81:[2,134],86:[2,134],87:[2,134],89:[2,134],90:[2,134],91:[2,134],97:[2,134],98:[2,134],107:[2,134],114:[2,134],115:[2,134],117:[2,134],120:[2,134]},{22:146,48:145,56:[1,151],70:143,73:[1,150],92:[1,149],95:[1,144],96:[1,148],99:73,107:[1,30],109:232,110:147,115:[1,65],116:66,117:[1,67],120:[1,68]},{22:236,48:235,56:[1,151],70:233,73:[1,74],95:[1,234],99:73,107:[1,30],110:237,115:[1,65],116:66,117:[1,67],120:[1,68]},{58:[1,238],60:[1,239]},{58:[2,152],60:[2,152]},{62:[1,240]},{5:[2,102],10:[2,102],23:[2,102],25:[2,102],33:[2,102],34:[2,102],42:[2,102],64:[2,102],71:[2,102],75:[2,102],81:[2,102],97:[2,102],98:[2,102],107:[2,102],114:[2,102]},{7:241,8:[1,17]},{5:[2,86],10:[2,86],23:[2,86],25:[2,86],33:[2,86],34:[2,86],42:[2,86],64:[2,86],71:[2,86],75:[2,86],81:[2,86],84:[2,86],94:[2,86],97:[2,86],98:[2,86],107:[2,86],114:[2,86]},{74:[2,91],86:[2,91],87:[2,91]},{74:[2,92],86:[2,92],87:[2,92]},{74:[2,95],86:[2,95],87:[2,95]},{74:[2,96],86:[2,96],87:[2,96]},{92:[1,242]},{22:99,48:95,70:98,73:[1,74],88:243,95:[1,96],96:[1,97],99:73,107:[1,30],115:[1,65],116:66,117:[1,67],120:[1,68]},{74:[2,98],86:[2,98],87:[2,98]},{74:[2,101],86:[2,101],87:[2,101]},{50:[2,56],52:[2,56],55:[2,56],60:[1,244]},{50:[2,58],52:[2,58],55:[2,58],60:[1,245]},{50:[2,62],52:[2,62],58:[2,62],60:[1,246]},{50:[2,64],52:[2,64],58:[2,64],60:[1,247]},{5:[2,31],10:[2,31],23:[2,31],25:[2,31],33:[2,31],34:[2,31],42:[2,31],64:[2,31],71:[2,31],75:[2,31],81:[2,31],97:[2,31],98:[2,31],107:[2,31],114:[2,31]},{5:[2,108],10:[2,108],23:[2,108],25:[2,108],33:[2,108],34:[2,108],42:[2,108],64:[2,108],71:[2,108],75:[2,108],81:[2,108],97:[2,108],98:[2,108],107:[2,108],114:[2,108]},{73:[1,249],104:248},{48:255,55:[1,250],70:253,73:[1,74],95:[1,254],99:73,105:251,106:252,115:[1,65],116:66,117:[1,67],120:[1,68]},{55:[2,115],58:[2,115],60:[2,115],62:[2,115],72:[2,115],74:[2,115],76:[2,115],86:[2,115],87:[2,115],89:[2,115],90:[2,115],91:[2,115],100:[2,115],103:[2,115]},{70:257,73:[1,74],95:[1,256],99:73,103:[1,258]},{55:[2,118],58:[2,118],60:[2,118],62:[2,118],72:[2,118],74:[2,118],76:[2,118],86:[2,118],87:[2,118],89:[2,118],90:[2,118],91:[2,118],100:[2,118],103:[2,118]},{70:260,73:[1,74],95:[1,259],99:73},{103:[1,261]},{55:[2,123],58:[2,123],60:[2,123],62:[2,123],72:[2,123],74:[2,123],76:[2,123],86:[2,123],87:[2,123],89:[2,123],90:[2,123],91:[2,123],100:[2,123],103:[2,123]},{7:262,8:[1,17]},{7:263,8:[1,17]},{55:[2,135],60:[2,135]},{55:[2,144],60:[2,144],100:[1,133]},{55:[2,145],60:[2,145]},{55:[2,146],60:[2,146]},{55:[2,147],60:[2,147]},{55:[2,148],60:[2,148]},{55:[2,149],58:[2,149],60:[2,149]},{58:[1,264],73:[1,204],112:265},{22:270,48:269,56:[1,151],70:272,73:[1,74],95:[1,267],96:[1,268],99:73,107:[1,30],110:271,113:266,115:[1,65],116:66,117:[1,67],120:[1,68]},{5:[2,89],10:[2,89],23:[2,89],25:[2,89],33:[2,89],34:[2,89],42:[2,89],64:[2,89],71:[2,89],75:[2,89],81:[2,89],84:[2,89],94:[2,89],97:[2,89],98:[2,89],107:[2,89],114:[2,89]},{74:[2,97],86:[2,97],87:[2,97]},{74:[2,99],86:[2,99],87:[2,99]},{50:[2,57],52:[2,57],55:[2,57]},{50:[2,59],52:[2,59],55:[2,59]},{50:[2,63],52:[2,63],58:[2,63]},{50:[2,65],52:[2,65],58:[2,65]},{55:[2,125],58:[2,125],60:[2,125],62:[2,125],72:[2,125],74:[2,125],76:[2,125],86:[2,125],87:[2,125],89:[2,125],90:[2,125],91:[2,125],100:[2,125],103:[2,125]},{53:[1,223]},{55:[2,126],58:[2,126],60:[2,126],62:[2,126],72:[2,126],74:[2,126],76:[2,126],86:[2,126],87:[2,126],89:[2,126],90:[2,126],91:[2,126],100:[2,126],103:[2,126]},{55:[1,273],60:[1,274]},{55:[2,129],60:[2,129]},{55:[2,130],60:[2,130],100:[1,133]},{55:[2,131],60:[2,131]},{55:[2,132],60:[2,132]},{103:[1,275]},{100:[1,133],103:[1,276]},{55:[2,122],58:[2,122],60:[2,122],62:[2,122],72:[2,122],74:[2,122],76:[2,122],86:[2,122],87:[2,122],89:[2,122],90:[2,122],91:[2,122],100:[2,122],103:[2,122]},{103:[1,277]},{100:[1,133],103:[1,278]},{55:[2,121],58:[2,121],60:[2,121],62:[2,121],72:[2,121],74:[2,121],76:[2,121],86:[2,121],87:[2,121],89:[2,121],90:[2,121],91:[2,121],100:[2,121],103:[2,121]},{5:[2,79],10:[2,79],23:[2,79],25:[2,79],33:[2,79],34:[2,79],42:[2,79],64:[2,79],71:[2,79],75:[2,79],81:[2,79],97:[2,79],98:[2,79],107:[2,79],114:[2,79]},{5:[2,80],10:[2,80],23:[2,80],25:[2,80],33:[2,80],34:[2,80],42:[2,80],64:[2,80],71:[2,80],75:[2,80],81:[2,80],97:[2,80],98:[2,80],107:[2,80],114:[2,80]},{55:[2,150],58:[2,150],60:[2,150]},{58:[2,151],60:[2,151]},{58:[2,153],60:[2,153]},{58:[2,154],60:[2,154]},{58:[2,155],60:[2,155]},{58:[2,156],60:[2,156]},{58:[2,157],60:[2,157]},{58:[2,158],60:[2,158]},{58:[2,159],60:[2,159],100:[1,133]},{55:[2,127],58:[2,127],60:[2,127],62:[2,127],72:[2,127],74:[2,127],76:[2,127],86:[2,127],87:[2,127],89:[2,127],90:[2,127],91:[2,127],100:[2,127],103:[2,127]},{48:255,70:253,73:[1,74],95:[1,254],99:73,106:279,115:[1,65],116:66,117:[1,67],120:[1,68]},{55:[2,116],58:[2,116],60:[2,116],62:[2,116],72:[2,116],74:[2,116],76:[2,116],86:[2,116],87:[2,116],89:[2,116],90:[2,116],91:[2,116],100:[2,116],103:[2,116]},{55:[2,117],58:[2,117],60:[2,117],62:[2,117],72:[2,117],74:[2,117],76:[2,117],86:[2,117],87:[2,117],89:[2,117],90:[2,117],91:[2,117],100:[2,117],103:[2,117]},{55:[2,119],58:[2,119],60:[2,119],62:[2,119],72:[2,119],74:[2,119],76:[2,119],86:[2,119],87:[2,119],89:[2,119],90:[2,119],91:[2,119],100:[2,119],103:[2,119]},{55:[2,120],58:[2,120],60:[2,120],62:[2,120],72:[2,120],74:[2,120],76:[2,120],86:[2,120],87:[2,120],89:[2,120],90:[2,120],91:[2,120],100:[2,120],103:[2,120]},{55:[2,128],60:[2,128]}],
defaultActions: {36:[2,1],72:[2,78]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* tracing/debugging functions */

function Loc(start, end) {
  this.start = { line: start.first_line, column: start.first_column };
  this.end = { line: end.last_line, column: end.last_column };
}

/* Manana data types */

function MananaHash(data, loc) {
  var hash = {}, i = 0;

  while (data[i]) {
    hash[data[i][0]] = data[i][1];
    i++;
  }

  return hash;
}

/* AST nodes */

function VoidTagNode(tag, attrs, loc) {
  this.type = "VoidTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
}

function CodeTagNode(tag, attrs, code, loc) {
  this.type = "CodeTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = code;
}

function TagNode(tag, attrs, text, block, loc) {
  this.type = "Tag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = text ? [text] : block;
}

function TextNode(words, loc) {
  this.type = "Text";
  this.loc = loc;

  var w = words, t = [], s = [], i = 0; 

  while (typeof w[i] !== "undefined") {
    if (typeof w[i] === "string") {
      s.push(w[i]);
    } else {
      if (s.length) {
        t.push(s.join(' '));
        s = [];
      }
      t.push(w[i]);
    }
    i++;
  }
  if (s.length) {
    t.push(s.join(' '));
  }

  this.body = t;
}

function NameNode(path, loc) {
  this.type = "Name";
  this.loc = loc;
  this.body = path;
}

function WithNode(path, id, body, loc) {
  this.type = "With";
  this.loc = loc;
  this.path = path;
  this.id = id;
  this.body = body;
}

function IdNode(id, start, end, loc) {
  this.type = "Id";
  this.loc = loc;
  this.id = id;
  this.start = start;
  this.end = end;
}

function PathNode(path_node, component, methods, loc) {
  var k, c;

  if (path_node === null) {
    this.type = "Path";
    this.loc = loc;
    this.methods = null;
    this.components = [];
  } else {
    for (k in path_node) {
      if (path_node.hasOwnProperty(k)) {
        this[k] = path_node[k];
      }
    }

    if (loc && path_node.loc) {
      if (loc.end.line > path_node.loc.end.line || loc.end.column > path_node.loc.end.column) {
        this.loc.end = loc.end;
      }
    }
  }

  if (component) {
    c = [component.id];
    if (component.start !== null) {
      c.push(component.start);
    }
    if (component.end !== null) {
      c.push(component.end);
    }
    this.components.push(c);
  }

  if (methods !== null) {
    this.methods = methods;
  }
}

function MethodNode(name, args, loc) {
  this.type = "Method";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function MethodChainNode(method, loc) {
  this.type = "MethodChain";
  this.loc = loc;
  this.chain = [method];
}

function FunctionNode(name, args, loc) {
  this.type = "Function";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function ForNode(id, path, body, loc) {
  this.type = "For";
  this.loc = loc;
  this.id = id;
  this.path = path;
  this.body = body;
}

function IfNode(conditions) {
  this.type = "If";
  this.body = conditions;
}

/*
function IfNode(cond, v1, v2, body, else_body, loc) {
  this.type = "If";
  this.loc = loc;
  this.condition = cond;
  this.value_1 = v1;
  this.value_2 = v2;
  this.body = body;
  this.else_body = else_body;
}
*/

function AliasNode(path, id, loc) {
  this.type = "Alias";
  this.loc = loc;
  this.path = path;
  this.id = id;
}

function IncludeNode(path, loc) {
  this.type = "Include";
  this.loc = loc;
  this.path = path;
}

function FilterNode(filter, body, loc) {
  this.type = "Filter";
  this.loc = loc;
  this.body = [body];
}

function MananaStringNode(body, loc) {
  this.type = "MananaString";
  this.loc = loc;
  if (typeof body === "string") {
    this.body = [body];
  } else {
    this.body = body;
  }
}

/* expose AST constructors to parser */

parser.ast = {};
parser.ast.Loc = Loc;
parser.ast.MananaStringNode = MananaStringNode;
parser.ast.VoidTagNode = VoidTagNode;
parser.ast.CodeTagNode = CodeTagNode;
parser.ast.TagNode = TagNode;
parser.ast.TextNode = TextNode;
parser.ast.NameNode = NameNode;
parser.ast.WithNode = WithNode;
parser.ast.IdNode = IdNode;
parser.ast.PathNode = PathNode;
parser.ast.MethodNode = MethodNode;
parser.ast.MethodChainNode = MethodChainNode;
parser.ast.FunctionNode = FunctionNode;
parser.ast.ForNode = ForNode;
parser.ast.IfNode = IfNode;
parser.ast.AliasNode = AliasNode;
parser.ast.IncludeNode = IncludeNode;
parser.ast.FilterNode = FilterNode;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

  function strip(start, end) {
    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comments */
break;
case 1:this.pushState("expr"); return "FOR";
break;
case 2:this.pushState("expr"); return "IF";
break;
case 3:this.pushState("expr"); return "ELIF";
break;
case 4:this.pushState("expr"); return "ELSE";
break;
case 5:this.pushState("expr"); return "ALIAS";
break;
case 6:this.pushState("expr"); return "WITH";
break;
case 7:this.pushState("expr"); return "INCLUDE";
break;
case 8:return "BOOL";
break;
case 9:return "BOOL";
break;
case 10:this.popState(); return "END_EXPR";
break;
case 11:return "AND";
break;
case 12:return "OR";
break;
case 13:return "IN";
break;
case 14:return "IS";
break;
case 15:return "AS";
break;
case 16:return "NOT";
break;
case 17:return "TYPE";
break;
case 18:return "TYPE";
break;
case 19:return "TYPE";
break;
case 20:return "TYPE";
break;
case 21:return "TYPE";
break;
case 22:return "TYPE";
break;
case 23:return "COND";
break;
case 24:return "COND";
break;
case 25:return "COND";
break;
case 26:return "COND";
break;
case 27:return "COND";
break;
case 28:return "COND";
break;
case 29:return "COND";
break;
case 30:return "COND";
break;
case 31:return "EXISTS";
break;
case 32:this.pushState("tag");      return "VOID_TAG";
break;
case 33:this.pushState("code_tag"); return "CODE_TAG";
break;
case 34:this.pushState("tag");      return "TAG";
break;
case 35:this.popState();            return "END_TAG";
break;
case 36:yy_.yytext = yy_.yytext.slice(1);   return "TAG_ID";
break;
case 37:yy_.yytext = yy_.yytext.slice(1);   return "TAG_CLASS";
break;
case 38:this.popState(); this.pushState("code"); return "END_CODE_TAG";
break;
case 39:
                                            yy_.yytext = yy_.yytext.replace("->", '');
                                            yy_.yytext = yy_.yytext.replace(/\s*/, '')
                                            yy_.yytext = yy_.yytext.slice(1, -1)
                                            return "TAG_SRC";
                                         
break;
case 40:this.pushState("i_string_d"); return ["TAG_SRC_I_STRING", "I_STRING_D"];
break;
case 41:this.pushState("i_string_d"); return "I_STRING_D";
break;
case 42:this.pushState("i_string_d"); return "I_STRING_D";                                      
break;
case 43:this.pushState("name");       return "START_NAME";
break;
case 44:this.popState();              return "END_I_STRING_D";
break;
case 45:return "I_STRING_TEXT";
break;
case 46:this.pushState("i_string_s"); return ["TAG_SRC_I_STRING", "I_STRING_S"];
break;
case 47:this.pushState("i_string_s"); return "I_STRING_S";
break;
case 48:this.pushState("i_string_s"); return "I_STRING_S";                                      
break;
case 49:this.pushState("name");       return "START_NAME";
break;
case 50:this.popState();              return "END_I_STRING_S"; // "
break;
case 51:return "I_STRING_TEXT";
break;
case 52:this.pushState("i_html"); return "I_HTML_START";
break;
case 53:this.pushState("name");   return "START_NAME";
break;
case 54:this.popState();          return "I_HTML_END";
break;
case 55:return "I_HTML_TEXT";
break;
case 56:return "HTML";
break;
case 57:this.pushState("tagargs"); return "LPAREN";
break;
case 58:this.popState();           return "RPAREN";
break;
case 59:this.pushState("tagargs"); return "LBRACE";
break;
case 60:this.popState();           return "RBRACE";
break;
case 61:return "COLON";
break;
case 62:return "EQ";
break;
case 63:return "COMMA";
break;
case 64:return "TAG_ATTR";
break;
case 65:yy_.yytext = "data-" + yy_.yytext.slice(1); return "TAG_DATA_ATTR";
break;
case 66:/* ignore */
break;
case 67:/* ignore */
break;
case 68:this.pushState("filter"); yy_.yytext = yy_.yytext.slice(1); return "FILTER";
break;
case 69:this.pushState("name"); return "START_NAME";
break;
case 70:this.popState(); return "RBRACE"
break;
case 71:this.pushState("fn"); yy_.yytext = yy_.yytext.slice(1); return "FN";
break;
case 72:this.popState(); return "RPAREN";
break;
case 73:/* ignore */
break;
case 74:/* ignore */
break;
case 75:return "LBRACE";
break;
case 76:return "RBRACE";
break;
case 77:return "COMMA";
break;
case 78:return "EQ";
break;
case 79:return "ID";
break;
case 80:return "DOT";
break;
case 81:return "LPAREN";
break;
case 82:return "RPAREN";
break;
case 83:return "LBRACK";
break;
case 84:return "RBRACK";
break;
case 85:return "COLON"; 
break;
case 86:return "COMMA";
break;
case 87:return "INT";
break;
case 88:yy_.yytext = strip(1,2).replace(/\\"/g, '"'); return "STRING";
break;
case 89:return "STRING"; // Do not strip quotes
break;
case 90:return "WORD";
break;
case 91:
  var tokens = [];
  while (0 < indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  if (tokens.length) {
    tokens.push("EOF");
    return tokens;
  } else {
    return "EOF";
  }

break;
case 92:/* eat blank lines */
break;
case 93:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (indentation > indent_stack[0]) {
    indent_stack.unshift(indentation);
    return "INDENT";
  }

  var tokens = [];
  while (indentation < indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  if (tokens.length) {
    return tokens;
  }

break;
case 94:
  this.popState();

  var tokens = [];
  while (code_indent_level >= indent_stack[0]) {
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  code_indent_level = 0;

  tokens.shift();
  tokens.push("EOF");

  return tokens;

break;
case 95:yy_.yytext = ''; return "BLANK_LINE";
break;
case 96:
  var indent_level = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (code_indent_level === 0) {
    code_indent_level = indent_level;
    indent_stack.unshift(indent_level);
    yy_.yytext = yy_.yytext.slice(code_indent_level + 1);
    return "INDENT";

  } else if (indent_level < code_indent_level) {
    code_indent_level = 0;

    var tokens = [];
    while (indent_level < indent_stack[0]) {
      tokens.unshift("DEDENT");
      indent_stack.shift();
    }

    this.popState();
    return tokens;

  } else if (code_indent_level > 0) {
    yy_.yytext = yy_.yytext.slice(code_indent_level + 1);
    return "INDENT";
  }

break;
case 97:return "LINE";
break;
case 98:
  this.popState();

  var tokens = [];
  while (filter_indent_level >= indent_stack[0]) {
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  filter_indent_level = 0;

  tokens.shift();
  tokens.push("EOF");

  return tokens;

break;
case 99:
  var indent_level, tokens;
    
  indent_level = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (filter_indent_level === 0) {
    filter_indent_level = indent_level;
    indent_stack.unshift(indent_level);
    return "INDENT";

  } else if (indent_level < filter_indent_level) {
    this.popState();
    filter_indent_level = 0;
    
    tokens = [];
    while (indent_stack[0] > indent_level) {
      tokens.push("DEDENT");
      indent_stack.shift();
    }

    return tokens;
  }

break;
case 100:/* ignore all other whitespace */
break;
}
},
rules: [/^(?:[\n\r]*([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*"""(.|\n)*?""")/,/^(?:for\b)/,/^(?:if\b)/,/^(?:elif\b)/,/^(?:else\b)/,/^(?:alias\b)/,/^(?:with\b)/,/^(?:include\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:(?=\n))/,/^(?:and\b)/,/^(?:or\b)/,/^(?:in\b)/,/^(?:is\b)/,/^(?:as\b)/,/^(?:not\b)/,/^(?:Hash\b)/,/^(?:List\b)/,/^(?:String\b)/,/^(?:Integer\b)/,/^(?:Number\b)/,/^(?:Boolean\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?:>)/,/^(?:<)/,/^(?:%)/,/^(?:exists\b)/,/^(?:((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)))/,/^(?:pre|code\b)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:(?=\n))/,/^(?:(#[a-zA-Z][a-zA-Z0-9\-\:_]*))/,/^(?:(\.-?[_a-zA-Z]+[_a-zA-Z0-9\-]*(?=["."\s\n])))/,/^(?:(?=\n))/,/^(?:->\s*(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:->\s*(i"(?=.*?@\{)))/,/^(?:(i"(?=.*?@\{)))/,/^(?:(i"(?=.*?@\{)))/,/^(?:@\{)/,/^(?:")/,/^(?:[^"@"'"']*)/,/^(?:->\s*(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:@\{)/,/^(?:')/,/^(?:[^"@""'"]*)/,/^(?:(<(?=.*?@\{)))/,/^(?:@\{)/,/^(?:>(?=\s*\n))/,/^(?:.)/,/^(?:<.*(?=\n))/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z][a-zA-Z0-9\-_]*(?=\s*["="":"])))/,/^(?:(\*[a-zA-Z][a-zA-Z0-9\-]*(?=["="":"])))/,/^(?:\s)/,/^(?:\n)/,/^(?::(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:@\{)/,/^(?:\})/,/^(?:@(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254})\s?(?=\())/,/^(?:\)(?!\)))/,/^(?:\s)/,/^(?:\n)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:=)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:(\+|-)?(0|[1-9][0-9]*))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:([^\s\n"@"][^\s\n]*))/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:.*)/,/^(?:\s*$)/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"tag":{"rules":[35,36,37,39,40,42,46,48,57,59,69,71,89,90,92,100],"inclusive":true},"tagargs":{"rules":[41,47,58,60,61,62,63,64,65,66,67,88,92,100],"inclusive":true},"filter":{"rules":[42,48,69,89,90,92,98,99,100],"inclusive":true},"expr":{"rules":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,41,47,71,79,80,81,82,83,84,85,86,87,88,100],"inclusive":true},"name":{"rules":[41,47,70,79,80,81,82,83,84,85,86,87,88,100],"inclusive":true},"fn":{"rules":[8,9,41,47,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,100],"inclusive":true},"i_string_d":{"rules":[43,44,45,100],"inclusive":true},"i_string_s":{"rules":[49,50,51,100],"inclusive":true},"i_html":{"rules":[53,54,55,92,100],"inclusive":true},"code_tag":{"rules":[36,37,38,100],"inclusive":true},"code":{"rules":[94,95,96,97,100],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,32,33,34,42,48,52,56,68,69,71,89,90,91,92,93,100],"inclusive":true}}
};
indent_stack = [0];
filter_indent_level = 0;
code_indent_level = 0;;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = manana_parser;
exports.Parser = manana_parser.Parser;
exports.parse = function () { return manana_parser.parse.apply(manana_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}/* ******************************************************
 * Author: Chad Angelelli <chad@angelel.li>
 * Contributors/Special Thanks:
 *    Ray Harris <ray@harris.net>
 *    Mason Armour <mason@myshorttrack.com>
 *    Chris Hacker <chris@myshorttrack.com>
 *    Brigette LeVert <brigette.levert@gmail.com>
 * ******************************************************/

(function(exports) {
  var _manana_is_server_side, _manana_is_client_side;

  // _____________________________________________ Validation shorthand 
  function is(v, t)  { return typeof v === t; }
  function isNull(v) { return v === null; }
  function isStr(v)  { return is(v, "string"); }
  function isNum(v)  { return is(v, "number"); }
  function isInt(v)  { return is(v, "number") && parseFloat(v) == parseInt(v, 10) && ! isNaN(v); }
  function isArr(v)  { return Object.prototype.toString.call(v) === '[object Array]'; }
  function isObj(v)  { return Object.prototype.toString.call(v) === '[object Object]'; }

  _manana_is_server_side =  typeof require        !== 'undefined' && 
                            typeof module         !== 'undefined' && 
                            typeof module.exports !== 'undefined' ;

  _manana_is_client_side = ! _manana_is_server_side;
 
  // _____________________________________________ Extensions 
  String.prototype.intpol = function(o) {
    return this.replace(/{([^{}]*)}/g, function (a, b) { 
      var r = o[b]; 
      return isStr(r) || isNum(r) ? r : a; 
    });
  };

  String.prototype.repeat = function(n) {
    return new Array(n + 1).join(this);
  };

  Object.size = function(obj) {
    var size = 0, key;
    for (key in obj) {
      if (obj.hasOwnProperty(key)) {
        size++;
      }
    }
    return size;
  };

  function jd(label, x) {
    console.log("\n\n" + label + "\n==========================================>\n>>>");
    console.log(JSON.stringify(x, null, 4));
    console.log("\n\n<<< END " + label + "\n\n");
  }

  // _____________________________________________ Mañana
  function MananaNamespace(name, data, $parent) {
    this.type    = 'MananaNamespace';
    this.name    = name;
    this.data    = data;
    this.$parent = $parent;
  } // end MananaNamespace()

  function MananaView(args) {
    this.name     = args.name;
    this.template = args.template;
    this.context  = args.context;
    this.$level   = args.$level; 
    this.$parent  = args.$parent;
  } // end MananaView()

  function MananaError(message, loc) {
    this.name = "MananaError";
    this.message = message;
    this.loc = loc;
  } // end Error()

  function Manana(view_dir) {
    var self = this;

    // ........................................... 
    this.name           = '';
    this.template       = '';
    this.ir             = '';
    this.result         = '';
    this.context        = {};
    this.namespace      = {};
    this.view           = {}; // the current view object
    this.views          = {}; // a cache of all known views
    this.view_level     = 0;
    this.ancestry       = [];
    this.fns            = {};
    this.is_server_side = _manana_is_server_side;
    this.is_client_side = ! _manana_is_server_side;

    // ........................................... 
    if (this.is_server_side) {
      if (typeof manana_parser !== 'undefined') {
        this.parser = manana_parser;
        this.Parser = manana_parser.Parser;
      } else {
        this.Parser = require('./manana_parser');
        this.parser = this.Parser.parser;
      }

      this.file_system = require('fs');

      this.__dirname = require('path').dirname(require.main.filename);

      if (is(view_dir, "undefined")) {
        this.view_dir = this.__dirname; 
      } else { 
        this.view_dir = view_dir;
      }

      if (this.view_dir[this.view_dir.length - 1] == '/') {
        this.view_dir = this.view_dir.slice(0, -1);
      }
    } else {
      this.parser = manana_parser;
      this.Parser = manana_parser.Parser;
    }

    // ...........................................  
    this.getTemplate = function(name) {
      var template, abs_name, scripts, i, l, s, s_name;

      if (self.is_server_side) {
        try {
          if (name[0] == '.') {
            abs_name = self.__dirname + '/' + name.slice(2);
          } else if (name[0] == '/') {
            abs_name = name;
          } else {
            abs_name = self.view_dir + '/' + name; 
          }

          if ( ! /\.manana$/.test(abs_name)) {
            abs_name += ".manana";
          }

          template = self.file_system.readFileSync(abs_name, 'utf-8');

        } catch (e) {
          throw new MananaError("Invalid name '{p}' provided to getTemplate function".intpol({p:name}));
        }
      } else { // self.is_client_side
        scripts = document.getElementsByTagName("script"); 
        for (i = 0, l = scripts.length; i < l; i++) {
          s = scripts[i];
          s_name = s.getAttribute("data-view-name");
          if (s_name == name) {
            template = s.innerHTML;
          }
        }
      }

      if ( ! template.length) {
        throw new MananaError("Template '{n}' has no content.".intpol({n:name}));
      }

      return template;
    }; // end Manana.getTemplate()

    // ...........................................  
    this.evalForm = function(form, context) {
      var res = '', i;

      if (form && (form.type == 'Path' || form.type == 'Function')) {
        return self[form.type](form, context);

      } else if (isObj(form) && ! is(form.type, "undefined")) {
        res += self[form.type](form, context);

      } else if (isArr(form)) {
        i = 0;
        while ( ! is(form[i], "undefined")) {
          res += self.evalForm(form[i], context);
          i++;
        }
      } else {
        res = form;
      }

      return res;
    }; // end Manana.evalForm()

    // ...........................................  
    this.render = function(name, context, options) {
      var i, form, r;

      self.name = name;
      self.template = self.getTemplate(self.name);
      self.ir = self.parser.parse(self.template);

      self.namespace.root = new MananaNamespace('root', context || {}, null);
      self.context = self.namespace.root;

      self.views[name] = new MananaView({
        name: name,
        template: self.template,
        context: self.context,
        $level: 0,
        $parent: null
      });

      self.view = self.views[name];
      self.ancestry = [self.view];

      self['$window'];
      if (typeof window !== "undefined") {
        self['$window'] = window;
      }

      self.result = '';

      i = 0;
      while (form = self.ir[i]) {
        r = self.evalForm(form, self.context);
        self.result += isObj(r) ? JSON.stringify(r) : r;
        i++;
      }

      if (is(options, "undefined")) {
        options = {};
      }

      options.return_single_line = options.return_single_line || false;
      options.encode = options.encode || false;

      if ( ! options.return_single_line) {
        self.result = self.format(self.result, "  ", 0);
      }

      if (options.encode) {
        self.result = self.encode(self.result);
      }

      return self.result;
    }; // end Manana.render()

    // ...........................................  
    this.Include = function(form, context) {
      var name, template, ir, $parent, i, form, res;

      name = self.evalForm(form.path, context);
      template = self.getTemplate(name);
      ir = self.parser.parse(template);

      self.view_level++;

      self.views[name] = new MananaView({
        name: name,
        template: template,
        context: context,
        $level: self.view_level,
        $parent: $parent 
      });

      $parent = self.ancestry[self.view_level - 1]; 
      self.view = self.views[name];

      if (self.view_level < self.ancestry.length) {
        self.ancestry = self.ancestry.slice(0, self.view_level);
      }

      self.ancestry.push(self.views[name]);

      i = 0;
      res = '';
      while (form = ir[i]) {
        res += self.evalForm(form, context);
        i++;
      }

      self.view = $parent;
      self.view_level--;

      return res;
    }; // end Manana.Include()

    // ...........................................  
    this.isNamespace = function(node) {
      var is_ns = false;

      is_ns = node instanceof MananaNamespace;

      if ( ! is_ns) {
        if (node
            && node.type 
            && node.type == 'MananaNamespace'
            && node.name
            && ! is(node.$parent, 'undefined')
            && ! is(node.data, 'undefined'))
        {
          is_ns = true;
        }
      }

      return is_ns;
    }; // end Manana.isNamespace()

    // ...........................................  
    this.Path = function(form, context) {
      var node, components, target, i, index, slice, traceback, meth;

      node = context;
      components = JSON.parse(JSON.stringify(form.components));
      traceback = [];

      if (components[0][0] == '$manana') {
        node = self;
        traceback.push(components[0][0]);
        components.shift();

      } else if (components[0][0] == '$window') {
        if (typeof window !== 'undefined') {
          node = window;
          traceback.push(components[0][0]);
          components.shift();
        } else {
          throw new MananaError("Invalid path: window is not defined");
        }
      }

      i = 0;
      while ( ! is(components[i], "undefined")) {
        target = self.evalForm(components[i][0], context);
        index  = self.evalForm(components[i][1], context);
        slice  = self.evalForm(components[i][2], context);

        traceback.push(target);

        //................ 
        if (self.isNamespace(node)) {
          if (target[0] == '$' && ! is(node[target], 'undefined')) {
            node = node[target];

          } else if ( ! isNull(node.data) && ! is(node.data[target], 'undefined')) {
            node = node.data[target];

          } else if (node.name == target) {
            node = node.data;

          } else if (node.$parent && ! is(node.$parent.data[target], 'undefined')) {
            node = node.$parent.data[target];

          } else if ( ! is(self.namespace[target], 'undefined')) {
            node = self.namespace[target].data;

          } else {
            throw new MananaError('Invalid path in namespace: "' + traceback.join('.') + '"', form.loc);
          }

        } else if ( ! is(node, 'undefined')) { 
          if ( ! is(node[target], "undefined")) {
            node = node[target];
          } else {
            throw new MananaError('Invalid path: "' + traceback.join('.') + '"', form.loc);
          }

        } else {
          throw new MananaError("Undefined path: " + traceback.join('.'), form.loc);
        }

        //................ 
        if ( ! is(slice, 'undefined')) {
          if ( ! isArr(node)) {
            throw new MananaError('slicing attempted on non-list: ' + traceback.join('.'), form.loc);
          }

          index = parseInt(index);

          if (slice == '*') {
            slice = node.length;
          } else {
            slice = parseInt(slice);
          }

          node  = node.slice(index, slice);

        } else if ( ! is(index, 'undefined')) {
          if (isObj(node) && ! is(node[index], 'undefined')) {
            node = node[index];
          } else {
            index = parseInt(index);
            if (index < 0) {
              index = node.length + index;
            }
            node = node[index];
          }
        }

        i++;
      } // end while

      //................ 
      if (form.methods) {
        i = 0;
        while (meth = form.methods.chain[i]) {
          if (is(node[meth.name], 'undefined')) {
            throw new MananaError("Undefined method '{name}' called: ".intpol(meth) + traceback.join('.'), meth.loc);
          }

          if ( ! is(node[meth.name], 'function')) {
            throw new MananaError("Requested method '{name}' is not a function.".intpol(meth) + traceback.join('.'), meth.loc);
          }

          try {
            if (isArr(meth.args) && meth.args.length) {
              node = node[meth.name].apply(self, meth.args);
            } else {
              node = node[meth.name]();
            }
          } catch (e) {
            throw new MananaError(e, meth.loc);
          }
          i++;
        }
      }

      //................ 
      if (is(node, 'undefined')) {
        throw new MananaError("Can't find path: " + traceback.join('.'), form.loc);
      }

      //................ 
      return node;
    }; // end Interprteter.Path()

    // ........................................... 
    this.With = function(form, context) {
      var name, data, $parent, res;

      name = form.id;
      data = self.evalForm(form.path, context);

      $parent = self.context;
      self.namespace[name] = new MananaNamespace(name, data, $parent);
      self.context = self.namespace[name];

      res = '';
      for (i in form.body) {
        res += self.evalForm(form.body[i], self.context);
      }

      delete self.namespace[name];

      self.context = $parent;

      return res;
    }; // end Manana.With()

    // ...........................................  
    this.Alias = function(form, context) {
      var name, data;

      if ( ! self.isNamespace(context)) {
        throw new MananaError("Invalid context passed to Alias method. Must be a valid namespace.");
      }

      if ( ! is(context[name], "undefined")) {
        throw new MananaError("Can't alias '{id}'. Name already taken in current context.".intpol(form));
      }

      name = form.id;
      data = self.evalForm(form.path, context);

      self.namespace[name] = data;

      return '';
    }; // end Manana.Alias()

    // ...........................................  
    this.If = function(form, context) {
      var cases, else_case, i, j, c, cond, compound, operator, value, previous_outcome, outcome, res;

      cases = JSON.parse(JSON.stringify(form.body));

      if (cases[cases.length-1]['case'] == 'else') {
        else_case = cases.pop();
      }

      i = 0;
      while (c = cases[i]) {
        outcome = false;

        j = 0;
        while (cond = c.conditions[j]) {
          compound = cond[0];
          operator = cond[1][0];
          value = cond[1].slice(1);

          previous_outcome = outcome;

          if (operator == 'true' || operator == 'not_true') {
            value[0] = self.evalForm(value[0], context);

            if (value[0]) {
              outcome = true;
            } else {
              outcome = false;
            }

            if (operator == 'not_true') {
              outcome = ! outcome;
            }

          } else if (operator == 'exists' || operator == 'not_exists') {
            try {
              value[0] = self.evalForm(value[0], context);
              outcome = true;
            } catch (e) {
              outcome = false;
            }

            if (operator == 'not_exists') {
              outcome = ! outcome;
            }

          } else if (operator == 'in' || operator == 'not_in') {
            value[0] = self.evalForm(value[0], context);
            value[1] = self.evalForm(value[1], context);

            if (isArr(value[1]) || isStr(value[1])) {
              outcome = value[1].indexOf(value[0]) > -1;
            } else if (isObj(value[1])) {
              outcome = value[0] in value[1];
            }

            if (operator == 'not_in') {
              outcome = ! outcome;
            }

          } else if (operator == 'is' || operator == 'not_is') {
            value[0] = self.evalForm(value[0], context);

            if      (value[1] == 'Hash'   ) outcome = isObj(value[0]);
            else if (value[1] == 'List'   ) outcome = isArr(value[0]);
            else if (value[1] == 'String' ) outcome = isStr(value[0]);
            else if (value[1] == 'Number' ) outcome = isNum(value[0]);
            else if (value[1] == 'Integer') outcome = isInt(value[0]);

            if (operator == 'not_is') {
              outcome = ! outcome;
            } 

          } else {
            value[0] = self.evalForm(value[0], context);
            value[1] = self.evalForm(value[1], context);

            switch (operator) {
              case '==': outcome = value[0] == value[1]; break;
              case '!=': outcome = value[0] != value[1]; break;
              case '>' : outcome = value[0] >  value[1]; break;
              case '<' : outcome = value[0] <  value[1]; break;
              case '>=': outcome = value[0] >= value[1]; break;
              case '<=': outcome = value[0] <= value[1]; break;
              default  : outcome = false;
            }
          }

          if (compound == 'and') {
            outcome = outcome && previous_outcome;
          } else if (compound == 'or') {
            outcome = outcome || previous_outcome;
          }

          j++;
        } // end while(conditions)

        if (outcome) {
          res = self.evalForm(c.body, context);
          break;
        }

        i++;
      } // end while(if/elif)

      if ( ! outcome && else_case) {
        res = self.evalForm(else_case.body, context);
      }

      if (is(res, 'undefined')) {
        res = '';
      }

      return res;
    }; // end Manana.If()

    // ...........................................  
    this.For = function(form, context) {
      var name, loop_name, $parent, scope, key, i, count, total, _is_obj, res;

      $parent = self.context;
      scope = self.evalForm(form.path, context);

      if (isObj(scope)) {
        _is_obj = true;
      } else if (isArr(scope) || isStr(scope)) {
        _is_obj = false;
      } else {
        throw new MananaError('Invalid context provided to loop. Must be Hash, List, or String.');
      }

      name = form.id;
      total = _is_obj ? Object.size(scope) : scope.length;
      count = 0;

      if ( ! self.isNamespace(scope))
        scope = new MananaNamespace(name, scope, $parent);
      scope = self.namespace[name] = scope;

      jd('namespace: ', self.namespace);
      jd('scope: ', scope);

      res = '';
      for (key in scope.data) {
        ++count;

        scope.$key      = key;
        scope.$index    = key;
        scope.$count    = count;
        scope.$total    = total;
        scope.$is_first = count == 1;
        scope.$is_last  = count == total;
        scope.$previous = scope[count-2] || null;
        scope.$next     = scope[count] || null;

        for (i in form.body) {
          res += self.evalForm(form.body[i], scope);
        }
      }

      delete self.namespace[name];
      
      return res;
    }; // end Manana.For()

    // ...........................................  
    this.MananaString = function(form, context) {
      var i = 0, res = '';

      while (form.body[i]) {
        res += self.evalForm(form.body[i], context);
        i++;
      }

      return res;
    } // end Manana.MananaString()

    // ...........................................  
    this.Tag = function(form, context) {
      var html, attr_tpl, content, i, kv;

      html = '<{tag}{attrs}>{body}</{tag}>'; 
      attr_tpl = ' {key}="{val}"'; 
      content = { tag: form.tag, attrs: '', body: '' };

      if (isArr(form.attrs)) {
        i = 0;
        while (form.attrs[i]) {
          kv = {};
          if (form.attrs[i][0] == "src" && form.tag == "a") {
            kv.key = "href";
          } else {
            kv.key = self.evalForm(form.attrs[i][0], context);
          } 
          kv.val = self.evalForm(form.attrs[i][1], context); 
          content.attrs += attr_tpl.intpol(kv); 
          i++; 
        }
      }

      if (isArr(form.body)) {
        i = 0;
        while (form.body[i]) {
          content.body += self.evalForm(form.body[i], context);
          i++;
        }
      }

      return html.intpol(content);
    }; // end Manana.Tag()

    // ...........................................  
    this.CodeTag = function(form, context) {
      var html, attr_tpl, content, i, kv;

      html = '<{tag}{attrs}>{body}</{tag}>'; 
      attr_tpl = ' {key}="{val}"'; 
      content = { tag: form.tag, attrs: '', body: '' };

      if (isArr(form.attrs)) {
        i = 0;
        while (form.attrs[i]) {
          kv = {};
          if (form.attrs[i][0] == "src" && form.tag == "a") {
            kv.key = "href";
          } else {
            kv.key = self.evalForm(form.attrs[i][0], context);
          } 
          kv.val = self.evalForm(form.attrs[i][1], context); 
          content.attrs += attr_tpl.intpol(kv); 
          i++; 
        }
      }

      content.body = "\n" + form.body.join("\n");

      return html.intpol(content);
    }; // end Manana.PreTag()

    // ...........................................  
    this.VoidTag = function(form, context) {
      var html, attr_tpl, content, i;

      html = '<{tag}{attrs}>';
      attr_tpl = ' {key}="{val}"';
      content = { tag: form.tag, attrs: '' };

      if (isArr(form.attrs)) {
        i = 0;
        while (form.attrs[i]) {
          content.attrs += attr_tpl.intpol({ 
                             key: self.evalForm(form.attrs[i][0], context), 
                             val: self.evalForm(form.attrs[i][1], context)
                           })
          i++; 
        }
      }

      return html.intpol(content);
    }; // end Manana.VoidTag()

    // ...........................................  
    this.Text = function(form, context) {
      var i = 0, res = [];
      while ( ! is(form.body[i], "undefined")) {
        res.push(self.evalForm(form.body[i], context));
        i++;
      }
      return res.join(' ');
    }; // end Manana.Text()

    // ...........................................  
    this.Filter = function(form, context) {
      var i = 0, res = [];
      while ( ! is(form.body[i], "undefined")) {
        res.push(self.evalForm(form.body[i], context));
        i++;
      }
      return res.join(' ');
    }; // end Manana.Filter()

    // ...........................................  
    this.format = function(html, indent, indent_level, loc) {
      var orig_indent_level, tokens, extract_close_tag, open_tags, void_tags, padding, tag, i, t, r;

      if (is(html, "undefined")) {
        throw new MananaError("format() functions requires render() to be run first");
      }

      if (is(indent, "undefined")) {
        throw new MananaError("format() requires and indentation string for its 2nd arg.");
      }

      if (is(indent_level, "undefined")) {
        indent_level = 0;
      }

      function line(token, indent_plus_one) {
        if ( ! is(indent_plus_one, "undefined")) {
          padding = indent.repeat(indent_level + 1);
        } else {
          padding = indent.repeat(indent_level);
        }
        return '{p}{t}'.intpol({p:padding, t:token})
      }

      function is_main_block(tag) {
        return ['html', 'head', 'body'].indexOf(tag) > -1;
      }

      void_tags = [
        "area", "base", "br", "col", "embed", "hr", "img", "input", "keygen",
        "link", "menuitem", "meta", "param", "source", "track", "wbr"
      ];

      orig_indent_level = indent_level;
      tokens = self.result.split(/(<[^>]+>)/);
      open_tags = [];
     
      r = [];
      for (i in tokens) {
        t = tokens[i];

        if (t.length) {
          if ('<!' == t.slice(0, 2)) {
            r.push(line(t));
          } else if ('</' == t.slice(0, 2)) {
            r.push(line(t));
            tag = t.replace(/[<>\/ ]/g, '');
            if (tag == open_tags[open_tags.length-1]) {
              open_tags.pop();
              indent_level--;
            }
          } else if ('<' == t[0]) {
            tag = t.split(' ')[0].slice(1).replace('>', '');
            if (void_tags.indexOf(tag) == -1) {
              open_tags.push(tag);
              indent_level++;
            }
            if (is_main_block(tag)) {
              indent_level = orig_indent_level;
            }
            r.push(line(t))
          } else {
            r.push(line(t, indent_level))
          }
        }
      }
    
      return r.join("\n");
    }; // end Manana.format()

    // ...........................................  
    this.encode = function(html) {
      return String(html)
               .replace( /&/g, '&amp;'  )
               .replace( /"/g, '&quot;' )
               .replace( /'/g, '&#39;'  )
               .replace( /</g, '&lt;'   )
               .replace( />/g, '&gt;'   );
    }; // end Manana.encode()

    // ...........................................  
    this.decode = function(encoded) {
      return String(encoded)
               .replace( /&amp;/g  , '&' )
               .replace( /&quot;/g , '"' )
               .replace( /&\#39;/g , "'" )
               .replace( /&lt;/g   , '<' )
               .replace( /&gt;/g   , '>' );
    }; // end Manana.decode()

    // ...........................................  
    this.bottle = function(code, context) {
      var i, lines, line, indent_pat, indent, brew;

      if (is(context, "undefined")) {
        context = {};
      }

      try {
        self.parser.parse(code);
      } catch (e) {
        throw new MananaError("Invalid Mañana code sent to Bottle method.");
      }

      try {
        JSON.parse(JSON.stringify(context));
      } catch (e) {
        throw new MananaError("Invalid context sent to Bottle method.");
      }

      lines = code.split(/\n/g);
      indent_pat = /^([\t\s][\t\s]*)/;

      brew = '#ñ(role="template")';
      for (i in lines) {
        line = lines[i];

        indent = line.match(indent_pat);
        if (indent === null) {
          indent = 0;
        } else {
          indent = indent[1].length;
        }

        line = line.replace(indent_pat, '');
        brew += '#ñ{' + indent + '}' + line;
      }

      brew += '#ñ(role="context")' + JSON.stringify(context);

      return brew;
    }; // end Manana.bottle()

    // ...........................................  
    this.pour = function(brew, indent_char) {
      var parts, tpl, ctx, i, lines, line, indent;

      if ( ! /^\#ñ\(role="template"\)(?=\#ñ\{)/.test(brew)) {
        throw new MananaError("Invalid brew provided to Unbottle method.");
      }

      brew = brew.replace('#ñ(role="template")', '');
      parts = brew.split('#ñ(role="context")');
      tpl = parts[0];
      ctx = parts[1];

      try {
        ctx = JSON.parse(ctx);
      } catch (e) {
        throw new MananaError("Invalid context provided to Unbottle method.");
      }

      if ( ! indent_char) {
        indent_char = ' ';
      }

      lines = tpl.split(/(\#ñ\{[0-9][0-9]*\})/g);
      if (lines[0] === '') {
        lines = lines.slice(1);
      }

      tpl = '';
      for (i=0, l=lines.length; i < l; i += 2) {
        indent = lines[i]
                   .replace( '#ñ{' , '')
                   .replace( '}'   , '');
        indent = indent_char.repeat(parseInt(indent));

        line = lines[i + 1];

        tpl += indent + line + "\n";
      }

      try {
        self.parser.parse(tpl);
      } catch (e) {
        throw new MananaError("Invalid Mañana code pourd..");
      }

      return { "template": tpl, "context": ctx }
    }; // end Manana.pour()

    // ...........................................  
    this.Function = function(form, context) {
      var fn_name, i, args, res;

      fn_name = form.name;

      if (is(self.fns[fn_name], "undefined")) {
        throw new MananaError(
                    "Function '{name}' is not defined. Call 'Manana.add_fn(name, fn)' to add it"
                    .intpol(form)
                  );
      }

      if ( ! is(self.fns[fn_name], "function")) {
        throw new MananaError("'{name}' is not a function".intpol(form));
      }

      args = [];
      if (form.args) {
        i = 0;
        while ( ! is(form.args[i], "undefined")) {
          args.push(self.evalForm(form.args[i], context));
          i++;
        }
      }
      args.push(form);

      try {
        res = self.fns[fn_name].apply(self, args);
      } catch (e) {
        throw new MananaError(e, form.loc);
      }

      return res;
    }; // end Manana.Function()

    // ...........................................  
    self.fns.debug = function(form) {
      console.log('view: ', self.view);
      console.log('context: ', self.context);
      console.log('Manana: ', self);
      return '';
    }; // end Manana.debug()

    // ...........................................  
    self.fns.print = function(form) {
      var res = '', i = 0;
      while ( ! is(arguments[i], "undefined")) {
        res += JSON.stringify(arguments[i], null, 4);
        i++;
      }
      return res;
    }; // end Manana.print()

    // ...........................................  
    self.fns.context = function(form) {
      return JSON.stringify(self.context);
    }; // end Manana.context()

    // ...........................................  
    self.fns.view = function(form) {
      var out = JSON.stringify(self.view, null, 4).split("\n")
      out.unshift("<pre>");
      out.push("</pre>");
      return out.join("\n    ");
    }; // end Manana.view()

    // ...........................................  
    self.fns.whatis = function(x, form) {
      var description;

      try {
        description = '@whatis({target}) ==> '.intpol({ target: form.args[0].components.join('.') });
      } catch (e) {
        description = '@whatis() ==> ';
      }

      console.log(description, x);

      return '<h2>' + description + '<pre>' + JSON.stringify(x, null, 4) + '</pre>';
    };

    // ...........................................  
    this.addFunction = function(name, fn) {
      if ( ! isStr(name)) {
        throw new MananaError("1st arg to Manana.add_fn() must be a string");
      }

      if ( ! is(fn, "function")) {
        throw new MananaError("2nd arg to Manana.add_fn() must be a function");
      }

      self.fns[name] = fn;
    }; // end Manana.add_fn()

    this.add_fn = this.addFunction; // switching to camelcase, leaving for backward compatability

  } // end Manana() 


  // _____________________________________________ Make available in both node.js & browser 
  if (_manana_is_server_side) {
    exports['Manana'] = Manana;
    exports['MananaNamespace'] = MananaNamespace;
    exports['MananaView'] = MananaView;
    exports['MananaError'] = MananaError;
  }

  if (typeof window === 'undefined') {
    window = {};
  }
  window['Manana'] = Manana;
  window['MananaNamespace'] = MananaNamespace;
  window['MananaView'] = MananaView;
  window['MananaError'] = MananaError;

})(typeof exports === "undefined" ? {} : exports);
