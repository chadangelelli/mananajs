/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var manana_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"manana":3,"ast":4,"EOF":5,"stmt":6,"block":7,"INDENT":8,"stmts":9,"DEDENT":10,"tag":11,"void":12,"RAW":13,"text":14,"condition":15,"for":16,"alias":17,"unalias":18,"include":19,"switch":20,"with":21,"code":22,"FILTER":23,"BREAK":24,"CONTINUE":25,"TAG":26,"shorthandattrs":27,"attrlist":28,"VOIDTAG":29,"shorthandattr":30,"TAGID":31,"TAGCLASS":32,"TAGSRC":33,"ATTR":34,"=":35,"string":36,"DATAATTR":37,"(":38,")":39,"void_tag_stmt":40,"attrs":41,"CODETAG":42,"src":43,"srcline":44,"LINE":45,"BLANKLINE":46,"branches":47,"if":48,"else":49,"elifs":50,"IF":51,"exprs":52,"elif":53,"ELIF":54,"ELSE":55,"expr":56,"AND":57,"OR":58,"EXISTS":59,"ev":60,"NOT":61,"OP":62,"IN":63,"IS":64,"TYPE":65,"path":66,"fn":67,"INT":68,"bool":69,"ALIAS":70,"AS":71,"ID":72,"UNALIAS":73,"INCLUDE":74,"FOR":75,"CASE":76,"cases":77,"case":78,"WHEN":79,"WITH":80,"TEXT":81,"name":82,"STR":83,"ISTR":84,"NSTART":85,"NSTOP":86,"COMMA":87,"default":88,"id":89,".":90,"[":91,"]":92,":":93,"FN":94,"RPAREN":95,"fnargs":96,"fnarg":97,"hash":98,"EQ":99,"BOOL":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",10:"DEDENT",12:"void",13:"RAW",23:"FILTER",24:"BREAK",25:"CONTINUE",26:"TAG",29:"VOIDTAG",31:"TAGID",32:"TAGCLASS",33:"TAGSRC",34:"ATTR",35:"=",37:"DATAATTR",38:"(",39:")",41:"attrs",42:"CODETAG",45:"LINE",46:"BLANKLINE",51:"IF",54:"ELIF",55:"ELSE",57:"AND",58:"OR",59:"EXISTS",61:"NOT",62:"OP",63:"IN",64:"IS",65:"TYPE",68:"INT",70:"ALIAS",71:"AS",72:"ID",73:"UNALIAS",74:"INCLUDE",75:"FOR",76:"CASE",79:"WHEN",80:"WITH",81:"TEXT",83:"STR",84:"ISTR",85:"NSTART",86:"NSTOP",87:"COMMA",90:".",91:"[",92:"]",93:":",94:"FN",95:"RPAREN",98:"hash",99:"EQ",100:"BOOL"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,3],[9,2],[9,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,4],[6,1],[6,1],[11,3],[11,3],[11,2],[11,3],[11,3],[11,2],[11,2],[11,2],[11,1],[11,1],[11,2],[11,2],[27,2],[27,1],[30,1],[30,1],[30,1],[28,3],[28,3],[28,4],[28,4],[28,3],[40,1],[40,2],[22,3],[22,4],[43,2],[43,1],[44,2],[44,1],[15,1],[47,1],[47,2],[47,2],[47,3],[48,3],[50,1],[50,2],[53,3],[49,2],[52,1],[52,3],[52,3],[56,2],[56,3],[56,3],[56,1],[56,2],[56,3],[56,4],[56,3],[56,4],[60,1],[60,1],[60,1],[60,1],[60,1],[17,4],[17,4],[18,2],[19,2],[19,2],[16,5],[16,5],[20,5],[20,6],[77,1],[77,2],[78,3],[21,3],[21,5],[14,2],[14,2],[14,2],[14,1],[14,1],[14,1],[36,1],[36,1],[82,3],[82,5],[88,1],[88,1],[88,1],[88,1],[88,1],[66,1],[66,3],[89,1],[89,4],[89,6],[89,6],[89,4],[89,6],[89,6],[89,5],[89,5],[89,4],[67,2],[67,3],[96,3],[96,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,3],[97,3],[97,3],[97,3],[97,3],[97,3],[97,3],[69,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return $$[$0-1];
break;
case 2:this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3:this.$ = [$$[$0]];
break;
case 4:this.$ = $$[$0];
break;
case 5:this.$ = $$[$0-1];
break;
case 6:$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 7:this.$ = [$$[$0]];
break;
case 10:this.$ = $$[$0];
break;
case 19:this.$ = new FilterNode($$[$0-3], $$[$0-1], new Loc(_$[$0-3], _$[$0-1]));
break;
case 20:this.$ = new BreakNode(new Loc(_$[$0], _$[$0]));
break;
case 21:this.$ = new ContinueNode(new Loc(_$[$0], _$[$0]));
break;
case 22:this.$ = new TagNode($$[$0-2], $$[$0-1]  , $$[$0]  , new Loc(_$[$0-2], _$[$0]));
break;
case 23:this.$ = new TagNode($$[$0-2], $$[$0-1]  , [$$[$0]], new Loc(_$[$0-2], _$[$0]));
break;
case 24:this.$ = new TagNode($$[$0-1], $$[$0]  , []  , new Loc(_$[$0-1], _$[$0]));
break;
case 25:this.$ = new TagNode($$[$0-2], $$[$0-1]  , $$[$0]  , new Loc(_$[$0-2], _$[$0]));
break;
case 26:this.$ = new TagNode($$[$0-2], $$[$0-1]  , [$$[$0]], new Loc(_$[$0-2], _$[$0]));
break;
case 27:this.$ = new TagNode($$[$0-1], $$[$0]  , []  , new Loc(_$[$0-1], _$[$0]));
break;
case 28:this.$ = new TagNode($$[$0-1], null, $$[$0]  , new Loc(_$[$0-1], _$[$0]));
break;
case 29:this.$ = new TagNode($$[$0-1], null, [$$[$0]], new Loc(_$[$0-1], _$[$0]));
break;
case 30:this.$ = new TagNode($$[$0], null, []  , new Loc(_$[$0], _$[$0]));
break;
case 31:this.$ = new VoidTagNode($$[$0], null, new Loc(_$[$0], _$[$0]));
break;
case 32:this.$ = new VoidTagNode($$[$0-1], $$[$0]  , new Loc(_$[$0-1], _$[$0]));
break;
case 33:this.$ = new VoidTagNode($$[$0-1], $$[$0]  , new Loc(_$[$0-1], _$[$0]));
break;
case 34:
      var key = $$[$0][0];
      var val = $$[$0][1];

      this.$ = $$[$0-1];
      if (key === "class" && "class" in this.$) { 
        this.$['class'] += ' ' + val;
      } else {
        this.$[key] = val;
      }
    
break;
case 35:this.$ = {}; this.$[$$[$0][0]] = $$[$0][1];
break;
case 36:this.$ = ["id", $$[$0]];
break;
case 37:this.$ = ["class", $$[$0]];
break;
case 38:this.$ = ["src", new StringNode($$[$0], new Loc(_$[$0], _$[$0]))];
break;
case 39:this.$ = {}; this.$[$$[$0-2]] = $$[$0];
break;
case 40:this.$ = {}; this.$["data-"+$$[$0-2].slice(1)] = $$[$0];
break;
case 41:this.$ = $$[$0-3]; this.$[$$[$0-2]] = $$[$0];
break;
case 42:this.$ = $$[$0-3]; this.$["data-"+$$[$0-2].slice(1)] = $$[$0];
break;
case 43:this.$ = $$[$0-1];
break;
case 44:this.$ = new VoidTagNode($$[$0], null, new Loc(_$[$0], _$[$0]));
break;
case 45:this.$ = new VoidTagNode($$[$0-1], $$[$0],   new Loc(_$[$0-1], _$[$0]));
break;
case 46:this.$ = new CodeTagNode($$[$0-2], null, $$[$0-1], new Loc(_$[$0-2], _$[$0-1]));
break;
case 47:this.$ = new CodeTagNode($$[$0-3], $$[$0-2],   $$[$0-1], new Loc(_$[$0-3], _$[$0-1]));
break;
case 48:this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 49:this.$ = [$$[$0]];
break;
case 50:this.$ = $$[$0-1] + $$[$0] 
break;
case 51:this.$ = '';
break;
case 52:this.$ = new IfNode($$[$0], new Loc(_$[$0], _$[$0]));
break;
case 53:this.$ = [$$[$0]];
break;
case 54:this.$ = [$$[$0-1]]; this.$.push($$[$0]);
break;
case 55:this.$ = [$$[$0-1]]; this.$.push.apply(this.$, $$[$0]);
break;
case 56:this.$ = [$$[$0-2]]; this.$.push.apply(this.$, $$[$0-1]); this.$.push($$[$0]);
break;
case 57:this.$ = new ConditionBranchNode($$[$0-2], $$[$0-1], $$[$0], new Loc(_$[$0-2], _$[$0]));
break;
case 58:this.$ = [$$[$0]];
break;
case 59:this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 60:this.$ = new ConditionBranchNode($$[$0-2], $$[$0-1], $$[$0], new Loc(_$[$0-2], _$[$0]));
break;
case 61:this.$ = new ConditionBranchNode($$[$0-1], [], $$[$0], new Loc(_$[$0-1], _$[$0]));
break;
case 62:this.$ = [$$[$0]];
break;
case 63:this.$ = $$[$0-2]; $$[$0].relation = $$[$0-1]; this.$.push($$[$0]);
break;
case 64:this.$ = $$[$0-2]; $$[$0].relation = $$[$0-1]; this.$.push($$[$0]);
break;
case 65:this.$ = new ExpressionNode($$[$0-1]  , $$[$0], null, false  , new Loc(_$[$0-1], _$[$0]));
break;
case 66:this.$ = new ExpressionNode($$[$0-1]  , $$[$0], null, true   , new Loc(_$[$0-2], _$[$0]));
break;
case 67:this.$ = new ExpressionNode($$[$0-1]  , $$[$0-2], $$[$0]  , false  , new Loc(_$[$0-2], _$[$0]));
break;
case 68:this.$ = new ExpressionNode(true, $$[$0], null, false  , new Loc(_$[$0], _$[$0]));
break;
case 69:this.$ = new ExpressionNode(true, $$[$0], null, true   , new Loc(_$[$0-1], _$[$0]));
break;
case 70:this.$ = new ExpressionNode($$[$0-1]  , $$[$0-2], $$[$0]  , false  , new Loc(_$[$0-2], _$[$0]));
break;
case 71:this.$ = new ExpressionNode($$[$0-1]  , $$[$0-3], $$[$0]  , true   , new Loc(_$[$0-3], _$[$0]));
break;
case 72:this.$ = new ExpressionNode($$[$0-1]  , $$[$0-2], $$[$0]  , false  , new Loc(_$[$0-2], _$[$0]));
break;
case 73:this.$ = new ExpressionNode($$[$0-1]  , $$[$0-3], $$[$0]  , true   , new Loc(_$[$0-3], _$[$0]));
break;
case 79:this.$ = new AliasNode($$[$0-2], $$[$0], new Loc(_$[$0-3], _$[$0]));
break;
case 80:this.$ = new AliasNode($$[$0-2], $$[$0], new Loc(_$[$0-3], _$[$0]));
break;
case 81:this.$ = new UnaliasNode($$[$0], new Loc(_$[$0-1], _$[$0]));
break;
case 82:this.$ = new IncludeNode($$[$0], new Loc(_$[$0-1], _$[$0]));
break;
case 83:this.$ = new IncludeNode($$[$0], new Loc(_$[$0-1], _$[$0]));
break;
case 84:this.$ = new ForNode($$[$0-3], $$[$0-1], $$[$0], new Loc(_$[$0-4], _$[$0]));
break;
case 85:this.$ = new ForNode($$[$0-3], $$[$0-1], $$[$0], new Loc(_$[$0-4], _$[$0]));
break;
case 86:this.$ = new SwitchNode($$[$0-3], $$[$0-1], null   , new Loc(_$[$0-4], _$[$0]));
break;
case 87:this.$ = new SwitchNode($$[$0-4], $$[$0-2], $$[$0-1].body, new Loc(_$[$0-5], _$[$0]));
break;
case 88:this.$ = [$$[$0]];
break;
case 89:this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 90:this.$ = { value: $$[$0-1], block: $$[$0] };
break;
case 91:this.$ = new WithNode($$[$0-1], null, $$[$0], new Loc(_$[$0-2], _$[$0]));
break;
case 92:this.$ = new WithNode($$[$0-3], $$[$0-1]  , $$[$0], new Loc(_$[$0-4], _$[$0]));
break;
case 93:$$[$0-1].body.push($$[$0]); this.$ = $$[$0-1];
break;
case 94:$$[$0-1].body.push($$[$0]); this.$ = $$[$0-1];
break;
case 95:$$[$0-1].body.push($$[$0]); this.$ = $$[$0-1];
break;
case 96:this.$ = new TextNode($$[$0].replace(/^\s+/,""), false, new Loc(_$[$0], _$[$0]));
break;
case 97:this.$ = new TextNode($$[$0]                   , true , new Loc(_$[$0], _$[$0]));
break;
case 98:this.$ = new TextNode($$[$0]                   , true , new Loc(_$[$0], _$[$0]));
break;
case 99:this.$ = new StringNode($$[$0], new Loc(_$[$0], _$[$0]));
break;
case 100:
      this.$ = new StringNode($$[$0].slice(1), new Loc(_$[$0], _$[$0])); 
      console.log("Mañana WARNING: Interpolated strings are deprecated.");
      console.log("\tUse new-style strings (\"abc@{d}e\") without the \"i\"");
      console.log("\tIn VIM run: %s/=i\"/=\"/g");
      console.log("\tAt Command Line run: cd /dir/path && find . -type f -exec sed -i '' 's/=i\"/=\"/' {} \\;");
    
break;
case 101:this.$ = new NameNode($$[$0-1], null, new Loc(_$[$0-2], _$[$0-2]));
break;
case 102:this.$ = new NameNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-4], _$[$0]));
break;
case 108:this.$ = new PathNode(null, $$[$0], new Loc(_$[$0], _$[$0]));
break;
case 109:this.$ = new PathNode($$[$0-2]  , $$[$0], new Loc(_$[$0-2], _$[$0]));
break;
case 110:this.$ = new IdNode($$[$0], null, null, new Loc(_$[$0], _$[$0]));
break;
case 111:this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0]));
break;
case 112:this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0]));
break;
case 113:this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0]));
break;
case 114:this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0]));
break;
case 115:this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0]));
break;
case 116:this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0]));
break;
case 117:this.$ = new IdNode($$[$0-4], '*' , $$[$0-1]  , new Loc(_$[$0-4], _$[$0]));
break;
case 118:this.$ = new IdNode($$[$0-4], $$[$0-2]  , '*' , new Loc(_$[$0-4], _$[$0]));
break;
case 119:this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0]));
break;
case 120:this.$ = new FunctionNode($$[$0-1], null, new Loc(_$[$0-1], _$[$0]));
break;
case 121:this.$ = new FunctionNode($$[$0-2], $$[$0-1]  , new Loc(_$[$0-2], _$[$0]));
break;
case 122:this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 123:this.$ = [$$[$0]];
break;
case 131:this.$ = $$[$0];
break;
case 132:this.$ = $$[$0];
break;
case 133:this.$ = $$[$0];
break;
case 134:this.$ = $$[$0];
break;
case 135:this.$ = $$[$0];
break;
case 136:this.$ = $$[$0];
break;
case 137:this.$ = $$[$0];
break;
case 138:this.$ = $$[$0] === "true";
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,19],11:5,12:[1,6],13:[1,7],15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:[1,16],24:[1,17],25:[1,18],26:[1,20],29:[1,21],42:[1,29],47:22,48:30,51:[1,31],70:[1,24],73:[1,25],74:[1,26],75:[1,23],76:[1,27],80:[1,28]},{1:[3]},{5:[1,32],6:33,11:5,12:[1,6],13:[1,7],15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:[1,16],24:[1,17],25:[1,18],26:[1,20],29:[1,21],42:[1,29],47:22,48:30,51:[1,31],70:[1,24],73:[1,25],74:[1,26],75:[1,23],76:[1,27],80:[1,28]},{5:[2,3],12:[2,3],13:[2,3],23:[2,3],24:[2,3],25:[2,3],26:[2,3],29:[2,3],42:[2,3],51:[2,3],70:[2,3],73:[2,3],74:[2,3],75:[2,3],76:[2,3],80:[2,3]},{5:[2,4],12:[2,4],13:[2,4],23:[2,4],24:[2,4],25:[2,4],26:[2,4],29:[2,4],42:[2,4],51:[2,4],70:[2,4],73:[2,4],74:[2,4],75:[2,4],76:[2,4],80:[2,4]},{5:[2,8],10:[2,8],12:[2,8],13:[2,8],23:[2,8],24:[2,8],25:[2,8],26:[2,8],29:[2,8],42:[2,8],51:[2,8],70:[2,8],73:[2,8],74:[2,8],75:[2,8],76:[2,8],80:[2,8]},{5:[2,9],10:[2,9],12:[2,9],13:[2,9],23:[2,9],24:[2,9],25:[2,9],26:[2,9],29:[2,9],42:[2,9],51:[2,9],70:[2,9],73:[2,9],74:[2,9],75:[2,9],76:[2,9],80:[2,9]},{14:34,67:37,81:[1,35],82:36,85:[1,38],94:[1,39]},{5:[2,11],10:[2,11],12:[2,11],13:[2,11],23:[2,11],24:[2,11],25:[2,11],26:[2,11],29:[2,11],42:[2,11],51:[2,11],70:[2,11],73:[2,11],74:[2,11],75:[2,11],76:[2,11],80:[2,11]},{5:[2,12],10:[2,12],12:[2,12],13:[2,12],23:[2,12],24:[2,12],25:[2,12],26:[2,12],29:[2,12],42:[2,12],51:[2,12],70:[2,12],73:[2,12],74:[2,12],75:[2,12],76:[2,12],80:[2,12]},{5:[2,13],10:[2,13],12:[2,13],13:[2,13],23:[2,13],24:[2,13],25:[2,13],26:[2,13],29:[2,13],42:[2,13],51:[2,13],70:[2,13],73:[2,13],74:[2,13],75:[2,13],76:[2,13],80:[2,13]},{5:[2,14],10:[2,14],12:[2,14],13:[2,14],23:[2,14],24:[2,14],25:[2,14],26:[2,14],29:[2,14],42:[2,14],51:[2,14],70:[2,14],73:[2,14],74:[2,14],75:[2,14],76:[2,14],80:[2,14]},{5:[2,15],10:[2,15],12:[2,15],13:[2,15],23:[2,15],24:[2,15],25:[2,15],26:[2,15],29:[2,15],42:[2,15],51:[2,15],70:[2,15],73:[2,15],74:[2,15],75:[2,15],76:[2,15],80:[2,15]},{5:[2,16],10:[2,16],12:[2,16],13:[2,16],23:[2,16],24:[2,16],25:[2,16],26:[2,16],29:[2,16],42:[2,16],51:[2,16],70:[2,16],73:[2,16],74:[2,16],75:[2,16],76:[2,16],80:[2,16]},{5:[2,17],10:[2,17],12:[2,17],13:[2,17],23:[2,17],24:[2,17],25:[2,17],26:[2,17],29:[2,17],42:[2,17],51:[2,17],70:[2,17],73:[2,17],74:[2,17],75:[2,17],76:[2,17],80:[2,17]},{5:[2,18],10:[2,18],12:[2,18],13:[2,18],23:[2,18],24:[2,18],25:[2,18],26:[2,18],29:[2,18],42:[2,18],51:[2,18],70:[2,18],73:[2,18],74:[2,18],75:[2,18],76:[2,18],80:[2,18]},{8:[1,40]},{5:[2,20],10:[2,20],12:[2,20],13:[2,20],23:[2,20],24:[2,20],25:[2,20],26:[2,20],29:[2,20],42:[2,20],51:[2,20],70:[2,20],73:[2,20],74:[2,20],75:[2,20],76:[2,20],80:[2,20]},{5:[2,21],10:[2,21],12:[2,21],13:[2,21],23:[2,21],24:[2,21],25:[2,21],26:[2,21],29:[2,21],42:[2,21],51:[2,21],70:[2,21],73:[2,21],74:[2,21],75:[2,21],76:[2,21],80:[2,21]},{6:42,9:41,11:5,12:[1,6],13:[1,7],15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:[1,16],24:[1,17],25:[1,18],26:[1,20],29:[1,21],42:[1,29],47:22,48:30,51:[1,31],70:[1,24],73:[1,25],74:[1,26],75:[1,23],76:[1,27],80:[1,28]},{5:[2,30],7:45,8:[1,19],10:[2,30],12:[2,30],13:[2,30],14:46,23:[2,30],24:[2,30],25:[2,30],26:[2,30],27:43,28:44,29:[2,30],30:47,31:[1,51],32:[1,52],33:[1,53],34:[1,48],37:[1,49],38:[1,50],42:[2,30],51:[2,30],67:37,70:[2,30],73:[2,30],74:[2,30],75:[2,30],76:[2,30],80:[2,30],81:[1,35],82:36,85:[1,38],94:[1,39]},{5:[2,31],10:[2,31],12:[2,31],13:[2,31],23:[2,31],24:[2,31],25:[2,31],26:[2,31],27:54,28:55,29:[2,31],30:47,31:[1,51],32:[1,52],33:[1,53],34:[1,48],37:[1,49],38:[1,50],42:[2,31],51:[2,31],70:[2,31],73:[2,31],74:[2,31],75:[2,31],76:[2,31],80:[2,31]},{5:[2,52],10:[2,52],12:[2,52],13:[2,52],23:[2,52],24:[2,52],25:[2,52],26:[2,52],29:[2,52],42:[2,52],51:[2,52],70:[2,52],73:[2,52],74:[2,52],75:[2,52],76:[2,52],80:[2,52]},{72:[1,56]},{66:57,67:58,72:[1,60],89:59,94:[1,39]},{72:[1,61]},{36:62,66:63,72:[1,60],83:[1,64],84:[1,65],89:59},{36:69,60:66,66:67,67:68,68:[1,70],69:71,72:[1,60],83:[1,64],84:[1,65],89:59,94:[1,39],100:[1,72]},{66:73,72:[1,60],89:59},{8:[1,77],41:[1,75],43:74,44:76,46:[1,78]},{5:[2,53],10:[2,53],12:[2,53],13:[2,53],23:[2,53],24:[2,53],25:[2,53],26:[2,53],29:[2,53],42:[2,53],49:79,50:80,51:[2,53],53:82,54:[1,83],55:[1,81],70:[2,53],73:[2,53],74:[2,53],75:[2,53],76:[2,53],80:[2,53]},{36:69,52:84,56:85,59:[1,86],60:88,61:[1,87],66:67,67:68,68:[1,70],69:71,72:[1,60],83:[1,64],84:[1,65],89:59,94:[1,39],100:[1,72]},{1:[2,1]},{5:[2,2],12:[2,2],13:[2,2],23:[2,2],24:[2,2],25:[2,2],26:[2,2],29:[2,2],42:[2,2],51:[2,2],70:[2,2],73:[2,2],74:[2,2],75:[2,2],76:[2,2],80:[2,2]},{5:[2,10],10:[2,10],12:[2,10],13:[2,10],23:[2,10],24:[2,10],25:[2,10],26:[2,10],29:[2,10],42:[2,10],51:[2,10],67:91,70:[2,10],73:[2,10],74:[2,10],75:[2,10],76:[2,10],80:[2,10],81:[1,89],82:90,85:[1,38],94:[1,39]},{5:[2,96],10:[2,96],12:[2,96],13:[2,96],23:[2,96],24:[2,96],25:[2,96],26:[2,96],29:[2,96],42:[2,96],51:[2,96],70:[2,96],73:[2,96],74:[2,96],75:[2,96],76:[2,96],80:[2,96],81:[2,96],85:[2,96],94:[2,96]},{5:[2,97],10:[2,97],12:[2,97],13:[2,97],23:[2,97],24:[2,97],25:[2,97],26:[2,97],29:[2,97],42:[2,97],51:[2,97],70:[2,97],73:[2,97],74:[2,97],75:[2,97],76:[2,97],80:[2,97],81:[2,97],85:[2,97],94:[2,97]},{5:[2,98],10:[2,98],12:[2,98],13:[2,98],23:[2,98],24:[2,98],25:[2,98],26:[2,98],29:[2,98],42:[2,98],51:[2,98],70:[2,98],73:[2,98],74:[2,98],75:[2,98],76:[2,98],80:[2,98],81:[2,98],85:[2,98],94:[2,98]},{66:92,72:[1,60],89:59},{36:98,65:[1,102],66:96,67:99,68:[1,97],69:101,72:[1,103],83:[1,64],84:[1,65],89:59,94:[1,39],95:[1,93],96:94,97:95,98:[1,100],100:[1,72]},{14:104,67:37,81:[1,35],82:36,85:[1,38],94:[1,39]},{6:106,10:[1,105],11:5,12:[1,6],13:[1,7],15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:[1,16],24:[1,17],25:[1,18],26:[1,20],29:[1,21],42:[1,29],47:22,48:30,51:[1,31],70:[1,24],73:[1,25],74:[1,26],75:[1,23],76:[1,27],80:[1,28]},{10:[2,7],12:[2,7],13:[2,7],23:[2,7],24:[2,7],25:[2,7],26:[2,7],29:[2,7],42:[2,7],51:[2,7],70:[2,7],73:[2,7],74:[2,7],75:[2,7],76:[2,7],80:[2,7]},{5:[2,24],7:107,8:[1,19],10:[2,24],12:[2,24],13:[2,24],14:108,23:[2,24],24:[2,24],25:[2,24],26:[2,24],29:[2,24],30:109,31:[1,51],32:[1,52],33:[1,53],42:[2,24],51:[2,24],67:37,70:[2,24],73:[2,24],74:[2,24],75:[2,24],76:[2,24],80:[2,24],81:[1,35],82:36,85:[1,38],94:[1,39]},{5:[2,27],7:110,8:[1,19],10:[2,27],12:[2,27],13:[2,27],14:111,23:[2,27],24:[2,27],25:[2,27],26:[2,27],29:[2,27],34:[1,112],37:[1,113],42:[2,27],51:[2,27],67:37,70:[2,27],73:[2,27],74:[2,27],75:[2,27],76:[2,27],80:[2,27],81:[1,35],82:36,85:[1,38],94:[1,39]},{5:[2,28],10:[2,28],12:[2,28],13:[2,28],23:[2,28],24:[2,28],25:[2,28],26:[2,28],29:[2,28],42:[2,28],51:[2,28],70:[2,28],73:[2,28],74:[2,28],75:[2,28],76:[2,28],80:[2,28]},{5:[2,29],10:[2,29],12:[2,29],13:[2,29],23:[2,29],24:[2,29],25:[2,29],26:[2,29],29:[2,29],42:[2,29],51:[2,29],67:91,70:[2,29],73:[2,29],74:[2,29],75:[2,29],76:[2,29],80:[2,29],81:[1,89],82:90,85:[1,38],94:[1,39]},{5:[2,35],8:[2,35],10:[2,35],12:[2,35],13:[2,35],23:[2,35],24:[2,35],25:[2,35],26:[2,35],29:[2,35],31:[2,35],32:[2,35],33:[2,35],42:[2,35],51:[2,35],70:[2,35],73:[2,35],74:[2,35],75:[2,35],76:[2,35],80:[2,35],81:[2,35],85:[2,35],94:[2,35]},{35:[1,114]},{35:[1,115]},{28:116,34:[1,48],37:[1,49],38:[1,50]},{5:[2,36],8:[2,36],10:[2,36],12:[2,36],13:[2,36],23:[2,36],24:[2,36],25:[2,36],26:[2,36],29:[2,36],31:[2,36],32:[2,36],33:[2,36],42:[2,36],51:[2,36],70:[2,36],73:[2,36],74:[2,36],75:[2,36],76:[2,36],80:[2,36],81:[2,36],85:[2,36],94:[2,36]},{5:[2,37],8:[2,37],10:[2,37],12:[2,37],13:[2,37],23:[2,37],24:[2,37],25:[2,37],26:[2,37],29:[2,37],31:[2,37],32:[2,37],33:[2,37],42:[2,37],51:[2,37],70:[2,37],73:[2,37],74:[2,37],75:[2,37],76:[2,37],80:[2,37],81:[2,37],85:[2,37],94:[2,37]},{5:[2,38],8:[2,38],10:[2,38],12:[2,38],13:[2,38],23:[2,38],24:[2,38],25:[2,38],26:[2,38],29:[2,38],31:[2,38],32:[2,38],33:[2,38],42:[2,38],51:[2,38],70:[2,38],73:[2,38],74:[2,38],75:[2,38],76:[2,38],80:[2,38],81:[2,38],85:[2,38],94:[2,38]},{5:[2,32],10:[2,32],12:[2,32],13:[2,32],23:[2,32],24:[2,32],25:[2,32],26:[2,32],29:[2,32],30:109,31:[1,51],32:[1,52],33:[1,53],42:[2,32],51:[2,32],70:[2,32],73:[2,32],74:[2,32],75:[2,32],76:[2,32],80:[2,32]},{5:[2,33],10:[2,33],12:[2,33],13:[2,33],23:[2,33],24:[2,33],25:[2,33],26:[2,33],29:[2,33],34:[1,112],37:[1,113],42:[2,33],51:[2,33],70:[2,33],73:[2,33],74:[2,33],75:[2,33],76:[2,33],80:[2,33]},{63:[1,117]},{71:[1,118],90:[1,119]},{71:[1,120]},{5:[2,108],8:[2,108],10:[2,108],12:[2,108],13:[2,108],23:[2,108],24:[2,108],25:[2,108],26:[2,108],29:[2,108],42:[2,108],51:[2,108],57:[2,108],58:[2,108],61:[2,108],62:[2,108],63:[2,108],64:[2,108],70:[2,108],71:[2,108],73:[2,108],74:[2,108],75:[2,108],76:[2,108],80:[2,108],86:[2,108],87:[2,108],90:[2,108],92:[2,108],93:[2,108],95:[2,108]},{5:[2,110],8:[2,110],10:[2,110],12:[2,110],13:[2,110],23:[2,110],24:[2,110],25:[2,110],26:[2,110],29:[2,110],42:[2,110],51:[2,110],57:[2,110],58:[2,110],61:[2,110],62:[2,110],63:[2,110],64:[2,110],70:[2,110],71:[2,110],73:[2,110],74:[2,110],75:[2,110],76:[2,110],80:[2,110],86:[2,110],87:[2,110],90:[2,110],91:[1,121],92:[2,110],93:[2,110],95:[2,110]},{5:[2,81],10:[2,81],12:[2,81],13:[2,81],23:[2,81],24:[2,81],25:[2,81],26:[2,81],29:[2,81],42:[2,81],51:[2,81],70:[2,81],73:[2,81],74:[2,81],75:[2,81],76:[2,81],80:[2,81]},{5:[2,82],10:[2,82],12:[2,82],13:[2,82],23:[2,82],24:[2,82],25:[2,82],26:[2,82],29:[2,82],42:[2,82],51:[2,82],70:[2,82],73:[2,82],74:[2,82],75:[2,82],76:[2,82],80:[2,82]},{5:[2,83],10:[2,83],12:[2,83],13:[2,83],23:[2,83],24:[2,83],25:[2,83],26:[2,83],29:[2,83],42:[2,83],51:[2,83],70:[2,83],73:[2,83],74:[2,83],75:[2,83],76:[2,83],80:[2,83],90:[1,119]},{5:[2,99],8:[2,99],10:[2,99],12:[2,99],13:[2,99],23:[2,99],24:[2,99],25:[2,99],26:[2,99],29:[2,99],34:[2,99],37:[2,99],39:[2,99],42:[2,99],51:[2,99],57:[2,99],58:[2,99],61:[2,99],62:[2,99],63:[2,99],64:[2,99],70:[2,99],73:[2,99],74:[2,99],75:[2,99],76:[2,99],80:[2,99],81:[2,99],85:[2,99],86:[2,99],87:[2,99],92:[2,99],94:[2,99],95:[2,99]},{5:[2,100],8:[2,100],10:[2,100],12:[2,100],13:[2,100],23:[2,100],24:[2,100],25:[2,100],26:[2,100],29:[2,100],34:[2,100],37:[2,100],39:[2,100],42:[2,100],51:[2,100],57:[2,100],58:[2,100],61:[2,100],62:[2,100],63:[2,100],64:[2,100],70:[2,100],73:[2,100],74:[2,100],75:[2,100],76:[2,100],80:[2,100],81:[2,100],85:[2,100],86:[2,100],87:[2,100],92:[2,100],94:[2,100],95:[2,100]},{8:[1,122]},{8:[2,74],57:[2,74],58:[2,74],61:[2,74],62:[2,74],63:[2,74],64:[2,74],90:[1,119]},{8:[2,75],57:[2,75],58:[2,75],61:[2,75],62:[2,75],63:[2,75],64:[2,75]},{8:[2,76],57:[2,76],58:[2,76],61:[2,76],62:[2,76],63:[2,76],64:[2,76]},{8:[2,77],57:[2,77],58:[2,77],61:[2,77],62:[2,77],63:[2,77],64:[2,77]},{8:[2,78],57:[2,78],58:[2,78],61:[2,78],62:[2,78],63:[2,78],64:[2,78]},{8:[2,138],57:[2,138],58:[2,138],61:[2,138],62:[2,138],63:[2,138],64:[2,138],86:[2,138],87:[2,138],95:[2,138]},{7:123,8:[1,19],71:[1,124],90:[1,119]},{8:[1,77],10:[1,125],44:126,46:[1,78]},{8:[1,77],43:127,44:76,46:[1,78]},{8:[2,49],10:[2,49],46:[2,49]},{45:[1,128]},{8:[2,51],10:[2,51],46:[2,51]},{5:[2,54],10:[2,54],12:[2,54],13:[2,54],23:[2,54],24:[2,54],25:[2,54],26:[2,54],29:[2,54],42:[2,54],51:[2,54],70:[2,54],73:[2,54],74:[2,54],75:[2,54],76:[2,54],80:[2,54]},{5:[2,55],10:[2,55],12:[2,55],13:[2,55],23:[2,55],24:[2,55],25:[2,55],26:[2,55],29:[2,55],42:[2,55],49:129,51:[2,55],53:130,54:[1,83],55:[1,81],70:[2,55],73:[2,55],74:[2,55],75:[2,55],76:[2,55],80:[2,55]},{7:131,8:[1,19]},{5:[2,58],10:[2,58],12:[2,58],13:[2,58],23:[2,58],24:[2,58],25:[2,58],26:[2,58],29:[2,58],42:[2,58],51:[2,58],54:[2,58],55:[2,58],70:[2,58],73:[2,58],74:[2,58],75:[2,58],76:[2,58],80:[2,58]},{36:69,52:132,56:85,59:[1,86],60:88,61:[1,87],66:67,67:68,68:[1,70],69:71,72:[1,60],83:[1,64],84:[1,65],89:59,94:[1,39],100:[1,72]},{7:133,8:[1,19],57:[1,134],58:[1,135]},{8:[2,62],57:[2,62],58:[2,62]},{36:69,60:136,66:67,67:68,68:[1,70],69:71,72:[1,60],83:[1,64],84:[1,65],89:59,94:[1,39],100:[1,72]},{36:69,59:[1,137],60:138,66:67,67:68,68:[1,70],69:71,72:[1,60],83:[1,64],84:[1,65],89:59,94:[1,39],100:[1,72]},{8:[2,68],57:[2,68],58:[2,68],61:[1,141],62:[1,139],63:[1,140],64:[1,142]},{5:[2,93],10:[2,93],12:[2,93],13:[2,93],23:[2,93],24:[2,93],25:[2,93],26:[2,93],29:[2,93],42:[2,93],51:[2,93],70:[2,93],73:[2,93],74:[2,93],75:[2,93],76:[2,93],80:[2,93],81:[2,93],85:[2,93],94:[2,93]},{5:[2,94],10:[2,94],12:[2,94],13:[2,94],23:[2,94],24:[2,94],25:[2,94],26:[2,94],29:[2,94],42:[2,94],51:[2,94],70:[2,94],73:[2,94],74:[2,94],75:[2,94],76:[2,94],80:[2,94],81:[2,94],85:[2,94],94:[2,94]},{5:[2,95],10:[2,95],12:[2,95],13:[2,95],23:[2,95],24:[2,95],25:[2,95],26:[2,95],29:[2,95],42:[2,95],51:[2,95],70:[2,95],73:[2,95],74:[2,95],75:[2,95],76:[2,95],80:[2,95],81:[2,95],85:[2,95],94:[2,95]},{86:[1,143],87:[1,144],90:[1,119]},{5:[2,120],8:[2,120],10:[2,120],12:[2,120],13:[2,120],23:[2,120],24:[2,120],25:[2,120],26:[2,120],29:[2,120],42:[2,120],51:[2,120],57:[2,120],58:[2,120],61:[2,120],62:[2,120],63:[2,120],64:[2,120],70:[2,120],71:[2,120],73:[2,120],74:[2,120],75:[2,120],76:[2,120],80:[2,120],81:[2,120],85:[2,120],86:[2,120],87:[2,120],94:[2,120],95:[2,120]},{87:[1,146],95:[1,145]},{87:[2,123],95:[2,123]},{87:[2,124],90:[1,119],95:[2,124]},{87:[2,125],95:[2,125]},{87:[2,126],95:[2,126]},{87:[2,127],95:[2,127]},{87:[2,128],95:[2,128]},{87:[2,129],95:[2,129]},{87:[2,130],95:[2,130]},{87:[2,110],90:[2,110],91:[1,121],95:[2,110],99:[1,147]},{10:[1,148],67:91,81:[1,89],82:90,85:[1,38],94:[1,39]},{5:[2,5],10:[2,5],12:[2,5],13:[2,5],23:[2,5],24:[2,5],25:[2,5],26:[2,5],29:[2,5],42:[2,5],51:[2,5],54:[2,5],55:[2,5],70:[2,5],73:[2,5],74:[2,5],75:[2,5],76:[2,5],79:[2,5],80:[2,5]},{10:[2,6],12:[2,6],13:[2,6],23:[2,6],24:[2,6],25:[2,6],26:[2,6],29:[2,6],42:[2,6],51:[2,6],70:[2,6],73:[2,6],74:[2,6],75:[2,6],76:[2,6],80:[2,6]},{5:[2,22],10:[2,22],12:[2,22],13:[2,22],23:[2,22],24:[2,22],25:[2,22],26:[2,22],29:[2,22],42:[2,22],51:[2,22],70:[2,22],73:[2,22],74:[2,22],75:[2,22],76:[2,22],80:[2,22]},{5:[2,23],10:[2,23],12:[2,23],13:[2,23],23:[2,23],24:[2,23],25:[2,23],26:[2,23],29:[2,23],42:[2,23],51:[2,23],67:91,70:[2,23],73:[2,23],74:[2,23],75:[2,23],76:[2,23],80:[2,23],81:[1,89],82:90,85:[1,38],94:[1,39]},{5:[2,34],8:[2,34],10:[2,34],12:[2,34],13:[2,34],23:[2,34],24:[2,34],25:[2,34],26:[2,34],29:[2,34],31:[2,34],32:[2,34],33:[2,34],42:[2,34],51:[2,34],70:[2,34],73:[2,34],74:[2,34],75:[2,34],76:[2,34],80:[2,34],81:[2,34],85:[2,34],94:[2,34]},{5:[2,25],10:[2,25],12:[2,25],13:[2,25],23:[2,25],24:[2,25],25:[2,25],26:[2,25],29:[2,25],42:[2,25],51:[2,25],70:[2,25],73:[2,25],74:[2,25],75:[2,25],76:[2,25],80:[2,25]},{5:[2,26],10:[2,26],12:[2,26],13:[2,26],23:[2,26],24:[2,26],25:[2,26],26:[2,26],29:[2,26],42:[2,26],51:[2,26],67:91,70:[2,26],73:[2,26],74:[2,26],75:[2,26],76:[2,26],80:[2,26],81:[1,89],82:90,85:[1,38],94:[1,39]},{35:[1,149]},{35:[1,150]},{36:151,83:[1,64],84:[1,65]},{36:152,83:[1,64],84:[1,65]},{34:[1,112],37:[1,113],39:[1,153]},{36:155,66:154,72:[1,60],83:[1,64],84:[1,65],89:59},{72:[1,156]},{72:[1,60],89:157},{72:[1,158]},{36:162,66:160,68:[1,159],72:[1,60],83:[1,64],84:[1,65],89:59,93:[1,161]},{77:163,78:164,79:[1,165]},{5:[2,91],10:[2,91],12:[2,91],13:[2,91],23:[2,91],24:[2,91],25:[2,91],26:[2,91],29:[2,91],42:[2,91],51:[2,91],70:[2,91],73:[2,91],74:[2,91],75:[2,91],76:[2,91],80:[2,91]},{72:[1,166]},{5:[2,46],10:[2,46],12:[2,46],13:[2,46],23:[2,46],24:[2,46],25:[2,46],26:[2,46],29:[2,46],42:[2,46],51:[2,46],70:[2,46],73:[2,46],74:[2,46],75:[2,46],76:[2,46],80:[2,46]},{8:[2,48],10:[2,48],46:[2,48]},{8:[1,77],10:[1,167],44:126,46:[1,78]},{8:[2,50],10:[2,50],46:[2,50]},{5:[2,56],10:[2,56],12:[2,56],13:[2,56],23:[2,56],24:[2,56],25:[2,56],26:[2,56],29:[2,56],42:[2,56],51:[2,56],70:[2,56],73:[2,56],74:[2,56],75:[2,56],76:[2,56],80:[2,56]},{5:[2,59],10:[2,59],12:[2,59],13:[2,59],23:[2,59],24:[2,59],25:[2,59],26:[2,59],29:[2,59],42:[2,59],51:[2,59],54:[2,59],55:[2,59],70:[2,59],73:[2,59],74:[2,59],75:[2,59],76:[2,59],80:[2,59]},{5:[2,61],10:[2,61],12:[2,61],13:[2,61],23:[2,61],24:[2,61],25:[2,61],26:[2,61],29:[2,61],42:[2,61],51:[2,61],70:[2,61],73:[2,61],74:[2,61],75:[2,61],76:[2,61],80:[2,61]},{7:168,8:[1,19],57:[1,134],58:[1,135]},{5:[2,57],10:[2,57],12:[2,57],13:[2,57],23:[2,57],24:[2,57],25:[2,57],26:[2,57],29:[2,57],42:[2,57],51:[2,57],54:[2,57],55:[2,57],70:[2,57],73:[2,57],74:[2,57],75:[2,57],76:[2,57],80:[2,57]},{36:69,56:169,59:[1,86],60:88,61:[1,87],66:67,67:68,68:[1,70],69:71,72:[1,60],83:[1,64],84:[1,65],89:59,94:[1,39],100:[1,72]},{36:69,56:170,59:[1,86],60:88,61:[1,87],66:67,67:68,68:[1,70],69:71,72:[1,60],83:[1,64],84:[1,65],89:59,94:[1,39],100:[1,72]},{8:[2,65],57:[2,65],58:[2,65]},{36:69,60:171,66:67,67:68,68:[1,70],69:71,72:[1,60],83:[1,64],84:[1,65],89:59,94:[1,39],100:[1,72]},{8:[2,69],57:[2,69],58:[2,69]},{36:69,60:172,66:67,67:68,68:[1,70],69:71,72:[1,60],83:[1,64],84:[1,65],89:59,94:[1,39],100:[1,72]},{36:69,60:173,66:67,67:68,68:[1,70],69:71,72:[1,60],83:[1,64],84:[1,65],89:59,94:[1,39],100:[1,72]},{63:[1,174],64:[1,175]},{65:[1,176]},{5:[2,101],10:[2,101],12:[2,101],13:[2,101],23:[2,101],24:[2,101],25:[2,101],26:[2,101],29:[2,101],42:[2,101],51:[2,101],70:[2,101],73:[2,101],74:[2,101],75:[2,101],76:[2,101],80:[2,101],81:[2,101],85:[2,101],94:[2,101]},{36:178,66:181,67:182,68:[1,179],69:180,72:[1,60],83:[1,64],84:[1,65],88:177,89:59,94:[1,39],100:[1,72]},{5:[2,121],8:[2,121],10:[2,121],12:[2,121],13:[2,121],23:[2,121],24:[2,121],25:[2,121],26:[2,121],29:[2,121],42:[2,121],51:[2,121],57:[2,121],58:[2,121],61:[2,121],62:[2,121],63:[2,121],64:[2,121],70:[2,121],71:[2,121],73:[2,121],74:[2,121],75:[2,121],76:[2,121],80:[2,121],81:[2,121],85:[2,121],86:[2,121],87:[2,121],94:[2,121],95:[2,121]},{36:98,65:[1,102],66:96,67:99,68:[1,97],69:101,72:[1,103],83:[1,64],84:[1,65],89:59,94:[1,39],97:183,98:[1,100],100:[1,72]},{36:186,65:[1,190],66:184,67:187,68:[1,185],69:189,72:[1,60],83:[1,64],84:[1,65],89:59,94:[1,39],98:[1,188],100:[1,72]},{5:[2,19],10:[2,19],12:[2,19],13:[2,19],23:[2,19],24:[2,19],25:[2,19],26:[2,19],29:[2,19],42:[2,19],51:[2,19],70:[2,19],73:[2,19],74:[2,19],75:[2,19],76:[2,19],80:[2,19]},{36:191,83:[1,64],84:[1,65]},{36:192,83:[1,64],84:[1,65]},{5:[2,39],8:[2,39],10:[2,39],12:[2,39],13:[2,39],23:[2,39],24:[2,39],25:[2,39],26:[2,39],29:[2,39],34:[2,39],37:[2,39],39:[2,39],42:[2,39],51:[2,39],70:[2,39],73:[2,39],74:[2,39],75:[2,39],76:[2,39],80:[2,39],81:[2,39],85:[2,39],94:[2,39]},{5:[2,40],8:[2,40],10:[2,40],12:[2,40],13:[2,40],23:[2,40],24:[2,40],25:[2,40],26:[2,40],29:[2,40],34:[2,40],37:[2,40],39:[2,40],42:[2,40],51:[2,40],70:[2,40],73:[2,40],74:[2,40],75:[2,40],76:[2,40],80:[2,40],81:[2,40],85:[2,40],94:[2,40]},{5:[2,43],8:[2,43],10:[2,43],12:[2,43],13:[2,43],23:[2,43],24:[2,43],25:[2,43],26:[2,43],29:[2,43],34:[2,43],37:[2,43],39:[2,43],42:[2,43],51:[2,43],70:[2,43],73:[2,43],74:[2,43],75:[2,43],76:[2,43],80:[2,43],81:[2,43],85:[2,43],94:[2,43]},{7:193,8:[1,19],90:[1,119]},{7:194,8:[1,19]},{5:[2,79],10:[2,79],12:[2,79],13:[2,79],23:[2,79],24:[2,79],25:[2,79],26:[2,79],29:[2,79],42:[2,79],51:[2,79],70:[2,79],73:[2,79],74:[2,79],75:[2,79],76:[2,79],80:[2,79]},{5:[2,109],8:[2,109],10:[2,109],12:[2,109],13:[2,109],23:[2,109],24:[2,109],25:[2,109],26:[2,109],29:[2,109],42:[2,109],51:[2,109],57:[2,109],58:[2,109],61:[2,109],62:[2,109],63:[2,109],64:[2,109],70:[2,109],71:[2,109],73:[2,109],74:[2,109],75:[2,109],76:[2,109],80:[2,109],86:[2,109],87:[2,109],90:[2,109],92:[2,109],93:[2,109],95:[2,109]},{5:[2,80],10:[2,80],12:[2,80],13:[2,80],23:[2,80],24:[2,80],25:[2,80],26:[2,80],29:[2,80],42:[2,80],51:[2,80],70:[2,80],73:[2,80],74:[2,80],75:[2,80],76:[2,80],80:[2,80]},{92:[1,195],93:[1,196]},{90:[1,119],92:[1,197],93:[1,198]},{68:[1,199]},{92:[1,200]},{10:[1,201],49:202,55:[1,81],78:203,79:[1,165]},{10:[2,88],55:[2,88],79:[2,88]},{36:69,60:204,66:67,67:68,68:[1,70],69:71,72:[1,60],83:[1,64],84:[1,65],89:59,94:[1,39],100:[1,72]},{7:205,8:[1,19]},{5:[2,47],10:[2,47],12:[2,47],13:[2,47],23:[2,47],24:[2,47],25:[2,47],26:[2,47],29:[2,47],42:[2,47],51:[2,47],70:[2,47],73:[2,47],74:[2,47],75:[2,47],76:[2,47],80:[2,47]},{5:[2,60],10:[2,60],12:[2,60],13:[2,60],23:[2,60],24:[2,60],25:[2,60],26:[2,60],29:[2,60],42:[2,60],51:[2,60],54:[2,60],55:[2,60],70:[2,60],73:[2,60],74:[2,60],75:[2,60],76:[2,60],80:[2,60]},{8:[2,63],57:[2,63],58:[2,63]},{8:[2,64],57:[2,64],58:[2,64]},{8:[2,66],57:[2,66],58:[2,66]},{8:[2,67],57:[2,67],58:[2,67]},{8:[2,70],57:[2,70],58:[2,70]},{36:69,60:206,66:67,67:68,68:[1,70],69:71,72:[1,60],83:[1,64],84:[1,65],89:59,94:[1,39],100:[1,72]},{65:[1,207]},{8:[2,72],57:[2,72],58:[2,72]},{86:[1,208]},{86:[2,103]},{86:[2,104]},{86:[2,105]},{86:[2,106],90:[1,119]},{86:[2,107]},{87:[2,122],95:[2,122]},{87:[2,131],90:[1,119],95:[2,131]},{87:[2,132],95:[2,132]},{87:[2,133],95:[2,133]},{87:[2,134],95:[2,134]},{87:[2,135],95:[2,135]},{87:[2,136],95:[2,136]},{87:[2,137],95:[2,137]},{5:[2,41],8:[2,41],10:[2,41],12:[2,41],13:[2,41],23:[2,41],24:[2,41],25:[2,41],26:[2,41],29:[2,41],34:[2,41],37:[2,41],39:[2,41],42:[2,41],51:[2,41],70:[2,41],73:[2,41],74:[2,41],75:[2,41],76:[2,41],80:[2,41],81:[2,41],85:[2,41],94:[2,41]},{5:[2,42],8:[2,42],10:[2,42],12:[2,42],13:[2,42],23:[2,42],24:[2,42],25:[2,42],26:[2,42],29:[2,42],34:[2,42],37:[2,42],39:[2,42],42:[2,42],51:[2,42],70:[2,42],73:[2,42],74:[2,42],75:[2,42],76:[2,42],80:[2,42],81:[2,42],85:[2,42],94:[2,42]},{5:[2,84],10:[2,84],12:[2,84],13:[2,84],23:[2,84],24:[2,84],25:[2,84],26:[2,84],29:[2,84],42:[2,84],51:[2,84],70:[2,84],73:[2,84],74:[2,84],75:[2,84],76:[2,84],80:[2,84]},{5:[2,85],10:[2,85],12:[2,85],13:[2,85],23:[2,85],24:[2,85],25:[2,85],26:[2,85],29:[2,85],42:[2,85],51:[2,85],70:[2,85],73:[2,85],74:[2,85],75:[2,85],76:[2,85],80:[2,85]},{5:[2,111],8:[2,111],10:[2,111],12:[2,111],13:[2,111],23:[2,111],24:[2,111],25:[2,111],26:[2,111],29:[2,111],42:[2,111],51:[2,111],57:[2,111],58:[2,111],61:[2,111],62:[2,111],63:[2,111],64:[2,111],70:[2,111],71:[2,111],73:[2,111],74:[2,111],75:[2,111],76:[2,111],80:[2,111],86:[2,111],87:[2,111],90:[2,111],92:[2,111],93:[2,111],95:[2,111]},{66:210,68:[1,209],72:[1,60],89:59,92:[1,211]},{5:[2,114],8:[2,114],10:[2,114],12:[2,114],13:[2,114],23:[2,114],24:[2,114],25:[2,114],26:[2,114],29:[2,114],42:[2,114],51:[2,114],57:[2,114],58:[2,114],61:[2,114],62:[2,114],63:[2,114],64:[2,114],70:[2,114],71:[2,114],73:[2,114],74:[2,114],75:[2,114],76:[2,114],80:[2,114],86:[2,114],87:[2,114],90:[2,114],92:[2,114],93:[2,114],95:[2,114]},{66:213,68:[1,212],72:[1,60],89:59},{92:[1,214]},{5:[2,119],8:[2,119],10:[2,119],12:[2,119],13:[2,119],23:[2,119],24:[2,119],25:[2,119],26:[2,119],29:[2,119],42:[2,119],51:[2,119],57:[2,119],58:[2,119],61:[2,119],62:[2,119],63:[2,119],64:[2,119],70:[2,119],71:[2,119],73:[2,119],74:[2,119],75:[2,119],76:[2,119],80:[2,119],86:[2,119],87:[2,119],90:[2,119],92:[2,119],93:[2,119],95:[2,119]},{5:[2,86],10:[2,86],12:[2,86],13:[2,86],23:[2,86],24:[2,86],25:[2,86],26:[2,86],29:[2,86],42:[2,86],51:[2,86],70:[2,86],73:[2,86],74:[2,86],75:[2,86],76:[2,86],80:[2,86]},{10:[1,215]},{10:[2,89],55:[2,89],79:[2,89]},{7:216,8:[1,19]},{5:[2,92],10:[2,92],12:[2,92],13:[2,92],23:[2,92],24:[2,92],25:[2,92],26:[2,92],29:[2,92],42:[2,92],51:[2,92],70:[2,92],73:[2,92],74:[2,92],75:[2,92],76:[2,92],80:[2,92]},{8:[2,71],57:[2,71],58:[2,71]},{8:[2,73],57:[2,73],58:[2,73]},{5:[2,102],10:[2,102],12:[2,102],13:[2,102],23:[2,102],24:[2,102],25:[2,102],26:[2,102],29:[2,102],42:[2,102],51:[2,102],70:[2,102],73:[2,102],74:[2,102],75:[2,102],76:[2,102],80:[2,102],81:[2,102],85:[2,102],94:[2,102]},{92:[1,217]},{90:[1,119],92:[1,218]},{5:[2,118],8:[2,118],10:[2,118],12:[2,118],13:[2,118],23:[2,118],24:[2,118],25:[2,118],26:[2,118],29:[2,118],42:[2,118],51:[2,118],57:[2,118],58:[2,118],61:[2,118],62:[2,118],63:[2,118],64:[2,118],70:[2,118],71:[2,118],73:[2,118],74:[2,118],75:[2,118],76:[2,118],80:[2,118],86:[2,118],87:[2,118],90:[2,118],92:[2,118],93:[2,118],95:[2,118]},{92:[1,219]},{90:[1,119],92:[1,220]},{5:[2,117],8:[2,117],10:[2,117],12:[2,117],13:[2,117],23:[2,117],24:[2,117],25:[2,117],26:[2,117],29:[2,117],42:[2,117],51:[2,117],57:[2,117],58:[2,117],61:[2,117],62:[2,117],63:[2,117],64:[2,117],70:[2,117],71:[2,117],73:[2,117],74:[2,117],75:[2,117],76:[2,117],80:[2,117],86:[2,117],87:[2,117],90:[2,117],92:[2,117],93:[2,117],95:[2,117]},{5:[2,87],10:[2,87],12:[2,87],13:[2,87],23:[2,87],24:[2,87],25:[2,87],26:[2,87],29:[2,87],42:[2,87],51:[2,87],70:[2,87],73:[2,87],74:[2,87],75:[2,87],76:[2,87],80:[2,87]},{10:[2,90],55:[2,90],79:[2,90]},{5:[2,112],8:[2,112],10:[2,112],12:[2,112],13:[2,112],23:[2,112],24:[2,112],25:[2,112],26:[2,112],29:[2,112],42:[2,112],51:[2,112],57:[2,112],58:[2,112],61:[2,112],62:[2,112],63:[2,112],64:[2,112],70:[2,112],71:[2,112],73:[2,112],74:[2,112],75:[2,112],76:[2,112],80:[2,112],86:[2,112],87:[2,112],90:[2,112],92:[2,112],93:[2,112],95:[2,112]},{5:[2,113],8:[2,113],10:[2,113],12:[2,113],13:[2,113],23:[2,113],24:[2,113],25:[2,113],26:[2,113],29:[2,113],42:[2,113],51:[2,113],57:[2,113],58:[2,113],61:[2,113],62:[2,113],63:[2,113],64:[2,113],70:[2,113],71:[2,113],73:[2,113],74:[2,113],75:[2,113],76:[2,113],80:[2,113],86:[2,113],87:[2,113],90:[2,113],92:[2,113],93:[2,113],95:[2,113]},{5:[2,115],8:[2,115],10:[2,115],12:[2,115],13:[2,115],23:[2,115],24:[2,115],25:[2,115],26:[2,115],29:[2,115],42:[2,115],51:[2,115],57:[2,115],58:[2,115],61:[2,115],62:[2,115],63:[2,115],64:[2,115],70:[2,115],71:[2,115],73:[2,115],74:[2,115],75:[2,115],76:[2,115],80:[2,115],86:[2,115],87:[2,115],90:[2,115],92:[2,115],93:[2,115],95:[2,115]},{5:[2,116],8:[2,116],10:[2,116],12:[2,116],13:[2,116],23:[2,116],24:[2,116],25:[2,116],26:[2,116],29:[2,116],42:[2,116],51:[2,116],57:[2,116],58:[2,116],61:[2,116],62:[2,116],63:[2,116],64:[2,116],70:[2,116],71:[2,116],73:[2,116],74:[2,116],75:[2,116],76:[2,116],80:[2,116],86:[2,116],87:[2,116],90:[2,116],92:[2,116],93:[2,116],95:[2,116]}],
defaultActions: {32:[2,1],178:[2,103],179:[2,104],180:[2,105],182:[2,107]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


//_____________________________________________________ Location
function Loc(start, end) {
  this.start = { line: start.first_line, column: start.first_column };
  this.end = { line: end.last_line, column: end.last_column };
}

//_____________________________________________________ Errors
/*
parser.MananaParseError = function(message) {
  this.name = 'parser.MananaParseError';
  this.message = message || 'Parse Error';
  this.stack = (new Error()).stack || "Not available";
};
parser.MananaParseError.prototype = Object.create(Error.prototype);
parser.MananaParseError.prototype.constructor = parser.MananaParseError;
*/

parser.parseError = function(str, hash) {
  if (hash.recoverable) {
    this.trace(str);
  } else {
    //console.log("\n\n");
    //console.log("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
    //console.log("Mañana Parse Error:");
    //console.log("\tstates: ", parser.lexer.conditionStack);
    //console.log("\tline: ", parser.lexer.yylineno + 1);
    //console.log("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
    //console.log("\n\n");

    throw new Error(str);
  }
};

//_____________________________________________________ AST
function VoidTagNode(tag, attrs, loc) {
  this.type = "VoidTag";
  this.tag = tag;
  this.attrs = attrs;
  this.loc = loc;
}

function TagNode(tag, attrs, body, loc) {
  this.type = "Tag";
  this.tag = tag;
  this.attrs = attrs;
  this.body = body;
  this.loc = loc;
}

function CodeTagNode(tag, attrs, code, loc) {
  this.type = "CodeTag";
  this.tag = tag;
  this.attrs = attrs;
  this.body = code;
  this.loc = loc;
}

function TextNode(el, _is_name, loc) {
  this.type = "Text";
  this.loc = loc;

  if (_is_name && (el[0] === ' ' || el[0] === '\t')) {
    el = el.replace(/^\s+/,"");
  }

  this.body = [el]; 
}

function NameNode(path, default_value, loc) {
  this.type = "Name";
  this.path = path;
  this.default_value = default_value;
  this.loc = loc;
}

function IdNode(id, start, end, loc) {
  this.type = "Id";
  this.id = id;
  this.start = start;
  this.end = end;
  this.loc = loc;
}

function PathNode(path_node, component, loc) {
  var k, c;

  if (path_node === null) {
    this.type = "Path";
    this.loc = loc;
    this.components = [];
  } else {
    for (k in path_node) {
      if (path_node.hasOwnProperty(k)) {
        this[k] = path_node[k];
      }
    }

    if (loc && path_node.loc) {
      if (loc.end.line > path_node.loc.end.line || loc.end.column > path_node.loc.end.column) {
        this.loc.end = loc.end;
      }
    }
  }

  if (component) {
    c = [component.id];
    if (component.start !== null) {
      c.push(component.start);
    }
    if (component.end !== null) {
      c.push(component.end);
    }
    this.components.push(c);
  }
}

function FilterNode(filter, body, loc) {
  this.type = "Filter";
  this.body = [body];
  this.loc = loc;
}

function StringNode(str, loc) {
  this.type = "String";
  this.body = str;
  this.loc = loc;
}

function IfNode(body, loc) {
  this.type = "If";
  this.body = body;
  this.loc = loc;
}

function ConditionBranchNode(branch, exprs, body, loc) {
  this.type = "ConditionBranchNode";
  this.branch = branch;
  this.expressions = exprs;
  this.body = body;
  this.loc = loc;
}

function ExpressionNode(op, v1, v2, _negate, loc) {
  this.type = "Expression";
  this.operator = op;
  this.value1 = v1;
  this.value2 = v2;
  this.negate = _negate;
  this.relation = null; // relation gets set in "exprs" production
  this.loc = loc;
}

function FunctionNode(name, args, loc) {
  this.type = "Function";
  this.name = name;
  this.args = args;
  this.loc = loc;
}

function AliasNode(path, id, loc) {
  this.type = "Alias";
  this.path = path;
  this.id = id;
  this.loc = loc;
}

function UnaliasNode(id, loc) {
  this.type = "Unalias";
  this.id = id;
  this.loc = loc;
}

function IncludeNode(path, loc) {
  this.type = "Include";
  this.path = path;
  this.loc = loc;
}

function ForNode(id, path, body, loc) {
  this.type = "For";
  this.id = id;
  this.path = path;
  this.body = body;
  this.loc = loc;
}

function SwitchNode(control, cases, else_case, loc) {
  this.type = "Switch";
  this.control = control;
  this.cases = cases;
  this.else_case = else_case;
  this.loc = loc;
}

function WithNode(path, name, body, loc) {
  this.type = "With";
  this.path = path;
  this.name = name;
  this.body = body;
  this.loc = loc;
}

function BreakNode(loc) {
  this.type = "Break";
  this.loc = loc;
}

function ContinueNode(loc) {
  this.type = "Continue";
  this.loc = loc;
}

parser.ast = {};
parser.ast.Loc = Loc;
parser.ast.VoidTagNode = VoidTagNode;
parser.ast.CodeTagNode = CodeTagNode;
parser.ast.TagNode = TagNode;
parser.ast.TextNode = TextNode;
parser.ast.NameNode = NameNode;
parser.ast.IdNode = IdNode;
parser.ast.PathNode = PathNode;
parser.ast.FilterNode = FilterNode;
parser.ast.StringNode = StringNode;
parser.ast.IfNode = IfNode;
parser.ast.ConditionBranchNode = ConditionBranchNode;
parser.ast.ExpressionNode = ExpressionNode;
parser.ast.FunctionNode = FunctionNode;
parser.ast.AliasNode = AliasNode;
parser.ast.ForNode = ForNode;
parser.ast.SwitchNode = SwitchNode;
parser.ast.WithNode = WithNode;
parser.ast.BreakNode = BreakNode;
parser.ast.ContinueNode = ContinueNode;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// ignore comments
break;
case 1:// ignore comments
break;
case 2:
  var tokens;

  this.popState();

  tokens = [];
  while (0 < indent_stack[0]) {
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  if (tokens.length) {
    tokens.push("EOF");
    return tokens;
  } else {
    return "EOF";
  }

break;
case 3:this.popState();
break;
case 4:
  this.popState();
  // ignore blank lines

break;
case 5:
  // Set level to length of string minus newline character.
  var level = yy_.yytext.length - 1;

  this.popState();

  if (level > indent_stack[0]) {
    indent_stack.unshift(level);
    return "INDENT";
  }

  if (level < indent_stack[0]) {
    var tokens = [];
    while (level < indent_stack[0]) {
      tokens.unshift("DEDENT");
      indent_stack.shift();
    }
 
    if (tokens.length) {
      return tokens;
    }
  }

break;
case 6:
  var level = yy_.yytext.length;

  if (level > indent_stack[0]) {
    indent_stack.unshift(level);
    return "INDENT";
  }

break;
case 7:return "STR";
break;
case 8:return "ISTR";
break;
case 9:this.pushState("expr"); return yy_.yytext.toUpperCase();
break;
case 10:return yy_.yytext.toUpperCase();
break;
case 11:return "OP";
break;
case 12:return "BOOL";
break;
case 13:return "TYPE";
break;
case 14:this.popState();
break;
case 15:this.pushState("code"); return "CODETAG";
break;
case 16:this.pushState("tag"); return "VOIDTAG";
break;
case 17:this.pushState("tag"); return "TAG";
break;
case 18:yy_.yytext = yy_.yytext.slice(1); return "TAGID";
break;
case 19:yy_.yytext = yy_.yytext.slice(1); return "TAGCLASS";
break;
case 20:yy_.yytext = yy_.yytext.slice(2).trimLeft(); return "TAGSRC";
break;
case 21:// ignore whitespace
break;
case 22:this.pushState("attrs"); return yy_.yytext;
break;
case 23:this.popState(); return yy_.yytext;
break;
case 24:return "ATTR";
break;
case 25:return "DATAATTR";
break;
case 26:return yy_.yytext;
break;
case 27:// ignore
break;
case 28:// ignore
break;
case 29:this.popState(); return "TEXT";
break;
case 30:
  this.popState();

  var tokens = [];
  while (code_level >= indent_stack[0]) {
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  code_level = 0;

  tokens.shift();
  tokens.push("EOF");

  return tokens;

break;
case 31:yy_.yytext = ''; return "BLANKLINE";
break;
case 32:
  // Set level to length of string minus newline character.
  var indent_level = yy_.yytext.length - 1; 

  if (code_level === 0) {
    code_level = indent_level;
    indent_stack.unshift(indent_level);
    yy_.yytext = yy_.yytext.slice(code_level + 1);
    return "INDENT";

  } else if (indent_level < code_level) {
    code_level = 0;

    var tokens = [];
    while (indent_level < indent_stack[0]) {
      tokens.unshift("DEDENT");
      indent_stack.shift();
    }

    this.popState();
    return tokens;

  } else if (code_level > 0) {
    yy_.yytext = yy_.yytext.slice(code_level + 1);
    return "INDENT";
  }

break;
case 33:return "LINE";
break;
case 34:this.pushState("name"); return "NSTART";
break;
case 35:return "ID";
break;
case 36:return yy_.yytext;
break;
case 37:return "INT";
break;
case 38:return "COMMA";
break;
case 39:
  // Pop "name" off conditions stack.
  this.popState(); 

  var cur_state = this.conditionStack[this.conditionStack.length-1];

  if (cur_state !== "raw" && cur_state !== "filter") {
    this.pushState("raw");
  }

  return "NSTOP";

break;
case 40:
  this.pushState("fn"); 
  yy_.yytext = yy_.yytext.slice(1, -1); 
  return "FN";

break;
case 41:return "COMMA";
break;
case 42:return "EQ";
break;
case 43:/* ignore */
break;
case 44:/* ignore */
break;
case 45:
  // Pop "fn" off conditions stack.
  this.popState(); 

  var cur_state = this.conditionStack[this.conditionStack.length-1];

  if ( cur_state !== "name" && 
       cur_state !== "raw" && 
       cur_state !== "expr" &&
       cur_state !== "filter" )
  {
    this.pushState("raw");
  }

  return "RPAREN";

break;
case 46:
  this.pushState("filter"); 
  yy_.yytext = yy_.yytext.slice(1); 
  return "FILTER";

break;
case 47:
  this.popState();

  var tokens = [];
  while (filter_level >= indent_stack[0]) {
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  filter_level = 0;

  tokens.shift();
  tokens.push("EOF");

  return tokens;

break;
case 48:
  var level, tokens;

  level = yy_.yytext.length - 1;

  /* Set lexer into Filter Mode. */
  if (filter_level === 0) {
    filter_level = level;
    indent_stack.unshift(level);
    return "INDENT";

  } 
  /* Set lexer back into Standard Mode. */
  else if (level < filter_level) {
    this.popState();
    filter_level = 0;

    tokens = [];
    while (indent_stack[0] > level) {
      tokens.push("DEDENT");
      indent_stack.shift();
    }

    return tokens;
  }
  /* Convert new line to a space for output. */
  else {
    yy_.yytext = ' ';
    return "TEXT";
  }

break;
case 49:return "BREAK";
break;
case 50:return "CONTINUE";
break;
case 51:// ignore all other whitespace
break;
case 52:this.pushState("raw"); return "RAW";
break;
case 53:return "TEXT";
break;
}
},
rules: [/^(?:[\n\r]*([ \t])*"""(.|\n)*?""")/,/^(?:[\n\r]*([ \t])*\/\/[^\n]*)/,/^(?:([ \t])*$)/,/^(?:(?=\n))/,/^(?:[\n\r]+([ \t])*(?![^\n\r]))/,/^(?:[\n\r]([ \t])*)/,/^(?:([ \t])+)/,/^(?:(("(\\"|[^'"']|')*")|('(\\'|[^"'"]|")*')))/,/^(?:i(("(\\"|[^'"']|')*")|('(\\'|[^"'"]|")*')))/,/^(?:(for|if|elif|else|alias|unalias|with|include|case|when\b)(?=([ \t])|\n))/,/^(?:(exists|not|and|or|in|is|as\b)(?=([ \t])))/,/^(?:(==|!=|>=|<=|>|<|%))/,/^(?:true|false\b)/,/^(?:(List|Hash|String|Boolean|Integer|Number\b))/,/^(?:(?=\n))/,/^(?:pre|code\b)/,/^(?:(area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr\b))/,/^(?:([a-zA-Z][a-zA-Z0-9]*))/,/^(?:(#[a-zA-Z][a-zA-Z0-9\-\:_]*))/,/^(?:(\.-?[_a-zA-Z]+[_a-zA-Z0-9\-]*))/,/^(?:->([ \t])*((("(\\"|[^'"']|')*")|('(\\'|[^"'"]|")*'))|i(("(\\"|[^'"']|')*")|('(\\'|[^"'"]|")*'))))/,/^(?:([ \t])+)/,/^(?:\()/,/^(?:\))/,/^(?:[a-zA-Z][a-zA-Z0-9\-_]*)/,/^(?:\*[a-zA-Z][a-zA-Z0-9\-]*)/,/^(?:=)/,/^(?:\n)/,/^(?:,)/,/^(?:([^'@'].*?(?=\n|@\{|(@\$?[a-zA-Z_][a-zA-Z0-9_]*\())))/,/^(?:\s*$)/,/^(?:[\n\r]+([ \t])*(?![^\n\r]))/,/^(?:[\n\r]([ \t])*)/,/^(?:.*)/,/^(?:@\{)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\.|\[|\]|:)/,/^(?:(\+|-)?(0|[1-9][0-9]*))/,/^(?:,)/,/^(?:\})/,/^(?:@(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254})\()/,/^(?:,)/,/^(?:=)/,/^(?:\s)/,/^(?:\n)/,/^(?:\))/,/^(?::(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\s*$)/,/^(?:[\n\r]([ \t])*)/,/^(?:!break\b)/,/^(?:!continue\b)/,/^(?:([ \t])+)/,/^(?:~)/,/^(?:([^'@'].*?(?=\n|@\{|(@\$?[a-zA-Z_][a-zA-Z0-9_]*\())))/],
conditions: {"tag":{"rules":[2,3,18,19,20,21,22,29,34,40,51],"inclusive":true},"attrs":{"rules":[7,8,23,24,25,26,27,28,34,40,51],"inclusive":true},"name":{"rules":[7,8,12,34,35,36,37,38,39,40,51],"inclusive":true},"filter":{"rules":[4,34,40,47,48,51,53],"inclusive":true},"raw":{"rules":[3,4,5,34,40,53],"inclusive":true},"expr":{"rules":[7,8,10,11,12,13,14,34,35,36,37,40,51],"inclusive":true},"fn":{"rules":[7,8,12,34,35,36,37,40,41,42,43,44,45,51],"inclusive":true},"code":{"rules":[30,31,32,33,34,40,51],"inclusive":true},"INITIAL":{"rules":[0,1,2,4,5,6,9,15,16,17,34,40,46,49,50,52,53],"inclusive":true}}
};
indent_stack = [0];
filter_level = 0;
code_level = 0;;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = manana_parser;
exports.Parser = manana_parser.Parser;
exports.parse = function () { return manana_parser.parse.apply(manana_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}/* ******************************************************
 * Author: Chad Angelelli <chad@angelel.li>
 * Contributors/Special Thanks:
 *    Ray Harris <ray@harris.net>
 *    Mason Armour <mason@myshorttrack.com>
 *    Chris Hacker <chris@myshorttrack.com>
 *    Brigette LeVert <brigette.levert@gmail.com>
 * ******************************************************/

/**
 * The Mañana Templating Language
 * @version 1.0alpha7
 * @exports Manana
 */
(function(exports) {
  var _is_server_side, _is_client_side;

  // _____________________________________________________ Client/Server Config. 
  _is_server_side = !!(typeof module !== 'undefined' && module.exports);
  _is_client_side = !_is_server_side; 
 
  // _____________________________________________________ Mañana
  /**
   * Manana
   * @class Manana
   */
  function Manana(config) {
    var self, view_dir;

    self = this;

    // ........................................... 
    /**
     * @memberof Manana
     * @property {String}      name                           - View name
     * @property {String}      template                       - Raw Mañana template
     * @property {Array}       ir                             - Mañana intermediate representation
     * @property {String}      [result='']                    - Final result from evaluating all nodes
     * @property {Mixed}       [context={}]                   - Context passed to interpreter methods
     * @property {MananaView}  view                           - Current MananaView object
     * @property {Array}       views                          - Array of MananaView objects
     * @property {Number}      [view_level=0]                 - View level, increments when "include" is called .
     * @property {MananaError} err                            - Last error thrown from interpreter
     * @property {Boolean}     _is_server_side                - Flag
     * @property {Boolean}     _is_client_side                - Flag
     * @property {Boolean}     [_in_loop=false]               - Flag to tell interpreter if in Loop State
     * @property {Boolean}     [_break_loop=false]            - Flag to tell interpreter to break loop
     * @property {Boolean}     [_continue_loop=false]         - Flag to tell interpreter to continue loop
     * @property {Boolean}     [_silence_error_logging=false] - Flag to tell interpreter to log errors or not
     */ 

    // . .. ... .. . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
    this.name       = '';
    this.template   = '';
    this.ir         = '';
    this.result     = '';
    this.context    = {};
    this.view       = {};
    this.view_level = 0;
    this.err        = null;

    // . .. ... .. . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
    this._is_server_side        = _is_server_side;
    this._is_client_side        = !_is_server_side;
    this._in_loop               = false;
    this._break_loop            = false;
    this._continue_loop         = false;
    this._silence_error_logging = false;

    // . .. ... .. . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
    this.options = {
      format: {
        on: false,
        max_line_length: 72,
        indent: 4,
        indent_char: " ",
        indent_str: "    "
      },
      history: {
        on: false,
        limit: 3,
        max_families: 1
      }
    };

    if (isObj(config)) {
      view_dir = config.path || setUndefined();

      if ('format' in config) {
        if ('on' in config.format) {
          this.options.format.on = !!config.format.on;
        }
        if ('max_line_length' in config.format) { 
          this.options.format.max_line_length = config.format.max_line_length;
        }
        if ('indent' in config.format) {
          this.options.format.indent = config.format.indent;
        }
        if ('indent_char' in config.format) {
          this.options.format.indent_char = config.format.indent_char;
        }
        if ('indent_str' in config.format) {
          this.options.format.indent_str = config.format.indent_str;
        }
      }

      if ('history' in config) {
        if ('on' in config.history) {
          this.options.history.on = config.history.on;
        }
        if ('limit' in config.history) {
          this.options.history.limit = config.history.limit;
        }
        if ('max_families' in config.history) {
          this.options.history.max_families = config.history.max_families;
        }
      }
    }


    // . .. ... .. . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
    /**
     * Low-level methods for converting AST nodes to output
     * @memberof Manana
     * @type {object}
     * @namespace Manana.interpreter
     */
    this.interpreter = {}; 

    /**
     * Mañana's Namespaces
     * @memberof Manana
     * @type {object}
     * @namespace Manana.namespace
     */
    this.namespace = {}; 

    /**
     * A cache of all known views
     * @memberof Manana
     * @type {object}
     * @namespace Manana.views
     */
    this.views = {}; 

    /**
     * Text Manipulation Methods
     * @memberof Manana
     * @type {object}
     * @namespace Manana.text
     */
    this.text = {}; 

    /**
     * Marshaling methods for transporting views/contexts
     * @memberof Manana
     * @type {object}
     * @namespace Manana.marshal
     */
    this.marshal = {}; 

    /**
     * Mañana Functions. Built-in or user-defined.
     * @memberof Manana
     * @type {object}
     * @namespace Manana.fns 
     */
    this.fns = {}; 

    /**
     * Mañana Raw Functions. Built-in or user-defined.
     * @memberof Manana
     * @type {object}
     * @namespace Manana.raw_fns 
     */
    this.raw_fns = {}; // Raw functions. Built-in or user-defined.

    /**
     * Validation methods
     * @memberof Manana
     * @type {object}
     * @namespace Manana.validate
     */
    this.validate = {}; // Validation methods.

    /**
     * View history and methods for lookups.
     * @memberof Manana
     * @type {object}
     * @namespace Manana.history
     */
    this.history = {};

    // ........................................... 
    /**
     * A Mañana Namespace
     * @class MananaNamespace
     * @param {string} name - The name of the Namespace
     * @param {*} data - The data that is available to the view
     * @param {MananaNamespace|null} $parent - The parent Namespace
     */
    function MananaNamespace(name, data, $parent) {
      this.type = 'MananaNamespace';
      this.name = name;
      this.data = data;
      this.$parent = $parent;
    } // end MananaNamespace()
 
    // ........................................... 
    /**
     * A Mañana View Object
     * @class MananaView
     * @param {Object} args - The paramaters to set up a MananaView
     * @param {string} args.name - The name of the view
     * @param {string} args.template - The source code for the template
     * @param {Mixed} args.context - The context for the MananaView
     * @param {MananaView} args.$parent - The ancestral parent MananaView
     */
    function MananaView(args) {
      this.name     = args.name;
      this.template = args.template;
      this.context  = args.context;
      this.$level   = args.$level; 
      this.$parent  = args.$parent;
    } // end MananaView()
 
    // ........................................... 
    /**
     * A Mañana Error
     * @class MananaError
     * @param {string} message - The error message
     * @param {Object} [loc] - A Manana.ast.Loc node
     */
    function MananaError(message, loc) {
      this.name = "MananaError";
      this.message = message;
      this.loc = loc;

      if (!self._silence_error_logging) {
        console.log('MananaError');
        console.log('\ttemplate: ', self.view.name);
        console.log('\tmessage: ', message);

        if (is(loc, 'undefined')) {
          console.log('\t-- no line/column information provided');
        } else {
          console.log('\tline: ', loc.start.line);
          console.log('\tcolumn: ', loc.start.column, '-', loc.end.column);
        }

        console.log('\tview object: ', self.view);
      }
    } // end MananaError()
 
    // ...........................................  Validation shorthand and helpers
    function is(v, t)  { return typeof v === t; }
    function isNull(v) { return v === null; }
    function isBool(v) { return is(v, "boolean"); }
    function isStr(v)  { return is(v, "string"); }
    function isNum(v)  { return is(v, "number"); }
    function isInt(v)  { return is(v, "number") && parseFloat(v) == parseInt(v, 10) && !isNaN(v); }
    function isArr(v)  { return Object.prototype.toString.call(v) === '[object Array]'; }
    function isObj(v)  { return Object.prototype.toString.call(v) === '[object Object]'; }

    function silence() {
      self._silence_error_logging = true;
    }
 
    function unsilence() {
      self._silence_error_logging = false;
    }

    function setUndefined() {
      return;
    }
 
    function strFmt(s, o) {
      return s.replace(/{([^{}]*)}/g, function(a, b) { 
        var r = o[b]; 
        return isStr(r) || isNum(r) ? r : a; 
      });
    };
 
    function repeatStr(s, n) {
      return new Array(n + 1).join(s);
    };
 
    function objSize(obj) {
      var size = 0, key;
      for (key in obj) {
        if (obj.hasOwnProperty(key)) {
          size++;
        }
      }
      return size;
    };

    function jd(label, x) {
      console.log("\n\n" + label + "\n==========================================>\n>>>");
      console.log(JSON.stringify(x, null, 4));
      console.log("\n\n<<< END " + label + "\n\n");
    }

    // ........................................... 
    if (this._is_server_side) {
      if (typeof manana_parser !== 'undefined') {
        this.parser = manana_parser;
        this.Parser = manana_parser.Parser;
      } else {
        this.Parser = require('./manana_parser');
        this.parser = this.Parser.parser;
      }

      this.file_system = require('fs');
      this.__dirname = require('path').dirname(require.main.filename);

      if (is(view_dir, "undefined")) {
        this.view_dir = this.__dirname; 
      } else { 
        this.view_dir = view_dir;
      }

      if (this.view_dir[this.view_dir.length - 1] == '/') {
        this.view_dir = this.view_dir.slice(0, -1);
      }
    } else {
      this.parser = manana_parser;
      this.Parser = manana_parser.Parser;
    }

    // ...........................................  
    /**
     * Read a template from disk, or script from DOM
     * @memberof Manana
     * @method getTemplate
     * @param {string} name - The name of the template
     */
    this.getTemplate = function(name) {
      var template, abs_name, scripts, i, l, s, s_name;

      if (self._is_server_side) {
        try {
          if (name[0] == '.') {
            abs_name = self.__dirname + '/' + name.slice(2);
          } else if (name[0] == '/') {
            abs_name = name;
          } else {
            abs_name = self.view_dir + '/' + name; 
          }

          if (!/\.manana$/.test(abs_name)) {
            abs_name += ".manana";
          }

          template = self.file_system.readFileSync(abs_name, 'utf-8');

        } catch (e) {
          self.err = new MananaError(strFmt("Invalid name '{p}' provided to getTemplate function", {p:name}));
          throw self.err;
        }
      } else { // self._is_client_side
        scripts = document.getElementsByTagName("script"); 
        for (i = 0, l = scripts.length; i < l; i++) {
          s = scripts[i];
          s_name = s.getAttribute("data-view-name");
          if (s_name == name) {
            template = s.innerHTML;
          }
        }
      }

      if (!template.length) {
        self.err = new MananaError(strFmt("Template '{n}' has no content.", {n:name}));
        throw self.err
      }

      return template;
    }; // end Manana.getTemplate()

    // ...........................................  
    /**
     * Render a template
     * @memberof Manana
     * @method render
     * @param {Object} [options=null]       - A single object containing paramaters
     * @param {String} options.view         - The name of the view 
     * @param {String} options.template     - Mañana source template. 
     * @param {*}      [options.context={}] - The context 
     * @param {string} [name=null]          - The name of the template
     * @param {*}      [context={}]         - A non-falsy value to be passed into the template
     * @param {Object} [options={}]         - Optional options for rendering
     */
    this.render = function() {
      var err_data, args, name, context, options, form, i, r, level;

      // Configure error data.
      err_data = {"arguments": arguments};

      // Render method can accept a single object as its only argument,
      // or (name [, context]) as positional arguments.
      if (isObj(arguments[0])) {
        if (arguments.length > 1) {
          self.err = new MananaError("Too many arguments in Render function", err_data);
          throw self.err;
        }

        args = arguments[0];
        name = args.view;
        context = args.context || {};

        if ('template' in args) {
          self.name = '';
          self.template = args.template;
        }
      }
      else if (isStr(arguments[0])) {
        name = arguments[0];
        context = arguments[1] || {};

        self.name = name;
        self.template = self.getTemplate(self.name);
      }

      // Parse template.
      try {
        self.ir = self.parser.parse(self.template);
      } catch (e) {
        self.err = new MananaError(e.message);
        throw self.err;
      }

      // Setup default namespace "root"
      self.namespace.root = new MananaNamespace('root', context, null);
      self.context = self.namespace.root;

      // Setup View
      self.views[name] = new MananaView({
        name: name,
        template: self.template,
        context: self.context,
        $level: 0,
        $parent: null
      });

      self.view = self.views[name];

      // Set family and ancestry.
      self.history.family = [self.view];
      if (self.options.history.on) {
        self.history.add(self.view);
      }

      // Setup window
      self['$window'] = typeof window !== "undefined" ? window : setUndefined();

      // Get result.
      self.result = '';

      i = level = 0;
      while (form = self.ir[i]) {
        r = self.interpreter.evalForm(form, self.context, level);
        self.result += isObj(r) ? JSON.stringify(r) : r;
        i++;
      }

      if (self.options.encode) {
        self.result = self.text.encode(self.result);
      }

      return self.result;
    }; // end Manana.render()

    // _____________________________________________________ Interpreter
    
    // ...........................................  
    /**
     * Low-level method to evaluate a Mañana AST Node
     * @memberof Manana.interpreter
     * @method evalForm
     * @param {Object} form - A Mañana AST node 
     * @param {*} context - A value to be passed as the context for a view
     */
    this.interpreter.evalForm = function(form, context, level) {
      var res, i, _is_node, _is_special;

      if (isObj(form) && 'type' in form) {
        _is_node = true;

        switch (form.type) {
          case 'Path':
          case 'Function':
            _is_special = true; 
            break;
          default:
            _is_special = false;
        }
      }
      else {
        _is_node = false;
      }

      if (_is_special) {
        res = self.interpreter[form.type](form, context, level);
      }
      else if (_is_node) {
        res = '' + self.interpreter[form.type](form, context, level);
      }
      else if (isArr(form)) {
        res = '';
        i = 0;
        while (!is(form[i], "undefined")) {
          res += self.interpreter.evalForm(form[i], context, level);
          i++;
        }
      } 
      else {
        res = form;
      }

      return res;
    }; // end Manana.interpreter.evalForm()

    // ...........................................  
    /**
     * Include a sub-template into current, using same context
     * @memberof Manana.interpreter
     * @method Include
     * @param {Object} form - A Mañana.ast.IncludeNode 
     * @param {*} context - A value to be passed as the context for a view
     * @param {Number} level - The current level used for output formatting
     */
    this.interpreter.Include = function(form, context, level) {
      var name, template, ir, $parent, i, form, res;

      name = self.interpreter.evalForm(form.path, context, level);
      template = self.getTemplate(name);

      try {
        ir = self.parser.parse(template);
      } catch (e) {
        self.err = new MananaError(e.message);
        console.log('--- Manana Parse Error: ', name);
        console.log('--- Template (Include)');
        console.log(template);
        throw self.err;
      }

      $parent = self.view;
      self.view_level++;

      self.views[name] = new MananaView({
        name: name,
        template: template,
        context: context,
        $level: self.view_level,
        $parent: $parent 
      });

      self.view = self.views[name];

      // Set immediate family.
      if (self.view_level < 2) {
        self.history.family.push(self.view);
      }

      // Set ancestry.
      if (self.options.history.on) {
        self.history.add(self.view);
      }

      i = 0;
      res = '';
      while (form = ir[i]) {
        res += self.interpreter.evalForm(form, context, level);
        i++;
      }

      self.view = $parent;
      self.view_level--;

      return res;
    }; // end Manana.interpreter.Include()

    // ...........................................  
    /**
     * Resolve a path for an expression, argument, or name
     * @memberof Manana.interpreter
     * @method Path
     * @param {Object} form - A Mañana.ast.PathNode 
     * @param {*} context - A value to be passed as the context for a view
     * @param {Number} level - The current level used for output formatting
     */
    this.interpreter.Path = function(form, context, level) {
      var node, components, target, i, index, slice, traceback, meth, tmp_node, _node_set;
      var traceback_str, index_str, slice_str;

      node = context;
      components = JSON.parse(JSON.stringify(form.components));
      traceback = [];

      if (components[0][0] == '$manana') {
        node = self;
        traceback.push(components[0][0]);
        components.shift();

      } else if (components[0][0] == '$window') {
        if (typeof window !== 'undefined') {
          node = window;
          traceback.push(components[0][0]);
          components.shift();
        } else {
          self.err = new MananaError("Invalid path: $window is not defined", form.loc);
          throw self.err;
        }
      }

      i = 0;
      while (!is(components[i], "undefined")) {
        target = self.interpreter.evalForm(components[i][0], context, level);
        index  = self.interpreter.evalForm(components[i][1], context, level);
        slice  = self.interpreter.evalForm(components[i][2], context, level);

        index_str = (index === '*' ? '' : index);
        slice_str = (slice === '*' ? '' : slice);

        if (!is(index, 'undefined')) {
          if (!is(slice, 'undefined')) {
            traceback_str = target + '[' + index_str + ':' + slice_str + ']';
          } else {
            traceback_str = target + '[' + index_str + ']';
          }
        } else if (!is(slice, 'undefined')) {
          traceback_str = target + '[:' + slice_str + ']';
        } else {
          traceback_str = target;
        }

        traceback.push(traceback_str);

        //................ 
        if (self.validate.isNamespace(node)) {
          if (target[0] == '$' && !is(node[target], 'undefined')) {
            node = node[target];

          } else if (!isNull(node.data) && !is(node.data[target], 'undefined')) {
            node = node.data[target];

          } else if (node.name == target) {
            node = node.data;

          } else if (!is(self.namespace[target], 'undefined')) {
            node = self.namespace[target];

          } else if (node.$parent) {
            tmp_node = node;
            while (tmp_node.$parent) {
              tmp_node = tmp_node.$parent;
              if (!is(tmp_node.data[target], 'undefined')) {
                node = tmp_node.data[target];
                _node_set = true;
                break;
              }
            }

            if (!_node_set) {
              self.err = new MananaError('Could not find path in: "' + traceback.join('.') + '"', form.loc);
              throw self.err;
            }

          } else {
            self.err = new MananaError('Invalid path in namespace: "' + traceback.join('.') + '"', form.loc);
            throw self.err;
          }

        } else if (!is(node, 'undefined')) { 
          if (!is(node[target], "undefined")) {
            node = node[target];
          } else {
            self.err = new MananaError('Invalid path: "' + traceback.join('.') + '"', form.loc);
            throw self.err;
          }

        } else {
          self.err = new MananaError("Undefined path: " + traceback.join('.'), form.loc);
          throw self.err;
        }

        //................ 
        if (!is(slice, 'undefined')) {
          if (isStr(node)) {
            node = node.split('');
          } else if (!isArr(node)) {
            self.err = new MananaError('slicing attempted on non-list: ' + traceback.join('.'), form.loc);
            throw self.err;
          }

          index = index === '*' ? 0 : parseInt(index);
          slice = slice === '*' ? node.length : parseInt(slice);
          node = node.slice(index, slice);

        } else if (!is(index, 'undefined')) {
          if (isObj(node) && !is(node[index], 'undefined')) {
            node = node[index];
          } else {
            index = index === '*' ? 0 : parseInt(index);
            if (index < 0) {
              index = node.length + index;
            }
            node = node[index];
          }
        }

        i++;
      } // end while

      //................ 
      if (is(node, 'undefined')) {
        self.err = new MananaError("Can't find path: " + traceback.join('.'), form.loc);
        throw self.err;
      }

      //................ 
      return node;
    }; // end Manana.interprteter.Path()

    // ...........................................  
    /**
     * Resolve a path for an expression, argument, or name
     * @memberof Manana.interpreter
     * @method Name
     * @param {Object} form - A Mañana.ast.NameNode 
     * @param {*} context - A value to be passed as the context for a view
     * @param {Number} level - The current level used for output formatting
     */
    this.interpreter.Name = function(form, context, level) {
      var res;

      if ('default_value' in form && !isNull(form.default_value)) {
        try {
          silence();
          res = self.interpreter.evalForm(form.path, context, level);
          unsilence();
        } catch (e) {
          unsilence();
          res = self.interpreter.evalForm(form.default_value, context, level);
        }
      } else {
        res = self.interpreter.evalForm(form.path, context, level);
      }

      return res;
    }; // end Manana.interpreter.Name()

    // ........................................... 
    /**
     * Create a temporary MananaNamespace to use for the duration of a block
     * @memberof Manana.interpreter
     * @method With
     * @param {Object} form - A Mañana.ast.WithNode 
     * @param {*} context - A value to be passed as the context for a view
     * @param {Number} level - The current level used for output formatting
     */
    this.interpreter.With = function(form, context, level) {
      var name, data, $parent, i, res;

      name = form.name !== null
        ? form.name
        : ('__with__' + Math.floor(Math.random() * (9999999 - 1000000) + 1000000));

      data = self.interpreter.evalForm(form.path, context, level);

      $parent = self.context;
      self.namespace[name] = new MananaNamespace(name, data, $parent);
      self.context = self.namespace[name];

      if (!isNull(form.body)) {
        i = 0; 
        res = '';
        while (!is(form.body[i], "undefined")) {
          res += self.interpreter.evalForm(form.body[i], self.context, level);
          i++;
        }
      }

      delete self.namespace[name];

      self.context = $parent;

      return res;
    }; // end Manana.interpreter.With()

    // ...........................................  
    /**
     * Create a MananaNamespace that persists
     * @memberof Manana.interpreter
     * @method Alias
     * @param {Object} form - A Mañana.ast.AliasNode 
     * @param {*} context - A value to be passed as the context for a view
     * @param {Number} level - The current level used for output formatting
     */
    this.interpreter.Alias = function(form, context, level) {
      var name, data;

      if (!self.validate.isNamespace(context)) {
        self.err = new MananaError("Invalid context passed to Alias method. Must be a valid namespace.", form.loc);
        throw self.err;
      }

      if (!is(context[name], "undefined")) {
        self.err = new MananaError(strFmt("Can't alias '{id}'. Name already taken in current context.", form.loc));
        throw self.err;
      }

      name = form.id;
      data = self.interpreter.evalForm(form.path, context, level);

      self.namespace[name] = data;

      return '';
    }; // end Manana.interpreter.Alias()

    // ...........................................  
    /**
     * Remove a MananaNamespace created by Alias
     * @memberof Manana.interpreter
     * @method Unalias
     * @param {Object} form - A Mañana.ast.UnaliasNode 
     * @param {*} context - A value to be passed as the context for a view
     * @param {Number} level - The current level used for output formatting
     */
    this.interpreter.Unalias = function(form, context, level) {
      var id;

      id = self.interpreter.evalForm(form.id, context, level);

      if (is(self.namespace[id], 'undefined')) {
        self.err = new MananaError(strFmt('Unknown alias "{id}". Can not unalias.', form.loc));
        throw self.err;
      }

      delete self.namespace[id];

      return '';
    }; // end Manana.interpreter.Unalias()

    // ...........................................  
    /**
     * Conditional operator used to evaluate true or false
     * @memberof Manana.interpreter
     * @method If
     * @param {Object} form - A Mañana.ast.IfNode 
     * @param {*} context - A value to be passed as the context for a view
     * @param {Number} level - The current level used for output formatting
     */
    this.interpreter.If = function(form, context, level) {
      var body,         // form.body
          num_branches, // number of branches (if, elif, else)
          branch,       // an inidivual branch
          last_branch,  // the last branch in the node tree - used to check for else
          branch_stop,  // index for when the top level while-loop should stop
          num_exprs,    // number of expressions to eval
          exprs,        // local reference to the expressions list 
          expr,         // an individual expression
          next_expr,    // the next expression in the list
          i,            // current index for branches
          j,            // current index for expressions
          op,           // operator for expression
          rel,          // relation for expression (null, and, or)
          v1,           // 1st value in expression
          v2,           // 2nd value in expression (optional)
          res,          // boolean result of expression evaluation
          out_body,     // forms to evaluate for output
          out,          // output string
          prev,         // boolean result of previous expression evaluation
          ctx,          // shorthand for ctx
          el,           // reference to each body element to evaluate
          _eval,        // local reference to self.interpreter.evalForm
          _has_else,    // flag: does an else-clause exist?
          _negate;      // flag: are we negating the boolean result?

      _eval        = self.interpreter.evalForm;
      ctx          = context;
      body         = form.body;
      num_branches = body.length;
      last_branch  = body[num_branches-1];
      _has_else    = last_branch.branch === 'else';
      branch_stop  = _has_else ? (num_branches - 1) : num_branches;

      i = 0;
      while (i < branch_stop) {
        res       = setUndefined();
        branch    = body[i];
        op        = branch.op;
        exprs     = branch.expressions;
        expr_stop = exprs.length;

        j = 0;
        while (j < expr_stop) {
          prev      = res;
          res       = setUndefined();
          expr      = exprs[j];
          next_expr = exprs[j+1] || false;
          op        = expr.operator;
          rel       = expr.relation;
          v1        = expr.value1;
          v2        = expr.value2;
          _negate   = expr.negate;

          switch (op) {
            //. .. ... ..  . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
            case 'exists':
              silence();
              try {
                _eval(v1, ctx, level);
                res = true;
              } 
              catch (e) {
                res = false;
              } 
              finally {
                unsilence();
              }
              break;
           
            //. .. ... ..  . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
            case 'in':
              v1 = _eval(v1, ctx, level);
              v2 = _eval(v2, ctx, level);
              if (isArr(v2) || isStr(v2))
                res = v2.indexOf(v1) > -1;
              else if (isObj(v2))
                res = (v1 in v2);
              break;
           
            //. .. ... ..  . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
            case 'is':
              v1 = _eval(v1, ctx, level);
              v2 = _eval(v2, ctx, level);
              switch (v2) {
                case 'Hash'   : res = isObj(v1) ; break;
                case 'List'   : res = isArr(v1) ; break;
                case 'String' : res = isStr(v1) ; break;
                case 'Number' : res = isNum(v1) ; break;
                case 'Integer': res = isInt(v1) ; break;
                case 'Boolean': res = isBool(v1); break;
                default       : res = false;
              }
              break
           
            //. .. ... ..  . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
            case '==': res = _eval(v1, ctx, level) == _eval(v2, ctx, level); break;
            case '!=': res = _eval(v1, ctx, level) != _eval(v2, ctx, level); break;
            case '>' : res = _eval(v1, ctx, level) >  _eval(v2, ctx, level); break;
            case '<' : res = _eval(v1, ctx, level) <  _eval(v2, ctx, level); break;
            case '>=': res = _eval(v1, ctx, level) >= _eval(v2, ctx, level); break;
            case '<=': res = _eval(v1, ctx, level) <= _eval(v2, ctx, level); break;
            case '%' : res = _eval(v1, ctx, level) %  _eval(v2, ctx, level); break;
           
            //. .. ... ..  . .. ... .. . .. ... .. . .. ... .. . .. ... .. .
            case true: // Loose checking for truthy|falsey
              v1 = _eval(v1, ctx, level);
              res = !!v1;
              break;
          } // end switch(op)

          // Negate result if flag set true.
          res = _negate ? !res : res;

          // Check next expression's relation.
          // If AND and result is false, break.
          // If OR and result is true, break.
          if (next_expr) {
            if (next_expr.relation === 'and' && !res) {
              break;
            }
            if (next_expr.relation === 'or' && res) {
              break;
            }
          }

          // Check current expression's relation.
          // If not null, combine with previous result.
          if (rel !== null) {
            switch (rel) {
              case 'and': res = (res && prev); break;
              case 'or' : res = (res || prev); break;
            }
          }

          j++;
        } // end while(j < expr_stop)

        // If result has been set stop evaluation
        if (res) {
          break;
        }

        i++;
      } // end while(i < branch_stop)

      if (res)
        out_body = branch.body;
      else if (_has_else)
        out_body = last_branch.body;

      out = '';
      if (out_body && out_body.length > 0) {
        for (i = 0, l = out_body.length; i < l; i++) {
          el = out_body[i];
          out += _eval(el, ctx, level);
        }
      }

      return out;
    }; // end Manana.interpreter.If()

    // ...........................................  
    /**
     * Mañana switch-statement
     * @memberof Manana.interpreter
     * @method Switch
     * @param {Object} form - A Mañana.ast.SwitchNode 
     * @param {*} context - A value to be passed as the context for a view
     * @param {Number} level - The current level used for output formatting
     */
    this.interpreter.Switch = function(form, context, level) {
      var control, i, c, j, len, value, res;

      control = self.interpreter.evalForm(form.control, context, level);

      res = '';

      i = 0; 
      while (c = form.cases[i]) {
        ++i;

        value = self.interpreter.evalForm(c.value, context, level);

        if (value == control) {
          len = c.block.length;
          for (j = 0; j < len; j++) {
            res += self.interpreter.evalForm(c.block[j], context, level);
          }
        }
      }

      if (!res.length && form.else_case) {
        i = 0;
        while (c = form.else_case[i]) { 
          ++i;
          res += self.interpreter.evalForm(c, context, level);
        }
      }

      return res;
    }; // end Manana.interpreter.Switch()

    // ...........................................  
    /**
     * Mañana loop-construct
     * @memberof Manana.interpreter
     * @method For
     * @param {Object} form - A Mañana.ast.ForNode 
     * @param {*} context - A value to be passed as the context for a view
     * @param {Number} level - The current level used for output formatting
     */
    this.interpreter.For = function(form, context, level) {
      var name, loop_name, $parent, scope, local_scope, key, count, total, _is_obj, res;

      function iterate() {
        var i;

        ++count;

        self.namespace[name] = new MananaNamespace(name, scope.data[key], $parent);
        local_scope = self.namespace[name];

        local_scope.$count    = count;
        local_scope.$total    = total;
        local_scope.$is_first = count == 1;
        local_scope.$is_last  = count == total;

        if (_is_obj) {
          local_scope.$key = key;
        } else {
          local_scope.$index    = key;
          local_scope.$previous = scope[key-1] || null;
          local_scope.$next     = scope[key+1] || null;
        }

        self.context = local_scope;  

        if (!isNull(form.body)) {
          i = 0;
          while (!is(form.body[i], "undefined")) {
            if (self._break_loop) {
              cleanUpLoop();
              break;
            }
         
            if (self._continue_loop)
              continue;
         
            res += self.interpreter.evalForm(form.body[i], local_scope, level); 
         
            i++;
          }
        }
      }

      function cleanUpLoop() {
        delete self.namespace[loop_name];
        delete self.namespace[name];
        self._in_loop = false;
        self._break_loop = false;
        self._continue_loop = false;
      }

      $parent = self.context;

      scope = self.interpreter.evalForm(form.path, context, level);
      if (isObj(scope)) {
        _is_obj = true;
      } else if (isArr(scope)) {
        _is_obj = false;
      } else if (isStr(scope)) {
        _is_obj = false;
        scope = scope.split('');
      } else {
        self.err = new MananaError('Invalid context provided to loop. Must be Hash, List, or String.', form.loc);
        throw self.err;
      }

      name = form.id;
      loop_name = '__loop__' + name;

      if (!self.validate.isNamespace(scope))
        scope = new MananaNamespace(loop_name, scope, $parent);
      scope = self.namespace[loop_name] = scope;

      total = _is_obj ? objSize(scope.data) : scope.data.length;
      count = 0;
      self._in_loop = true;

      res = '';
      if (_is_obj) {
        for (key in scope.data) {
          iterate();
        }
      } else {
        for (key = 0; key < total; key++) {
          iterate();
        }
      }

      cleanUpLoop();

      self.context = $parent;

      return res;
    }; // end Manana.interpreter.For()

    // ...........................................  
    /**
     * Break a loop
     * @memberof Manana.interpreter
     * @method Break
     * @param {Object} form - A Mañana.ast.BreakNode 
     * @param {*} context - A value to be passed as the context for a view
     * @param {Number} level - The current level used for output formatting
     */
    this.interpreter.Break = function(form, context, level) {
      if (!self._in_loop) {
        self.err = new MananaError('Break statement can only exist inside loop!', form.loc);
        throw self.err;
      }
      self._break_loop = true;
      return '';
    }; // end Manana.interpreter.Break()

    // ...........................................  
    /**
     * Continue a loop
     * @memberof Manana.interpreter
     * @method Continue
     * @param {Object} form - A Mañana.ast.ContinueNode 
     * @param {*} context - A value to be passed as the context for a view
     * @param {Number} level - The current level used for output formatting
     */
    this.interpreter.Continue = function(form, context, level) {
      if (!self._in_loop) {
        self.err = new MananaError('Continue statement can only exist inside loop!', form.loc);
        throw self.err;
      }
      self._continue_loop = true;
      return '';
    }; // end Manana.interpreter.Continue()
    
    // ...........................................  
    /**
     * A Mañana string, possibly containing interpolated paths
     * @memberof Manana.interpreter
     * @method String
     * @param {Object} form - A Mañana.ast.StringNode 
     * @param {*} context - A value to be passed as the context for a view
     * @param {Number} level - The current level used for output formatting
     */
    this.interpreter.String = function(form, context, level) {
      var str, ir, res;

      // Remove quotes.
      str = form.body.slice(1, -1);

      // If interpolated, re-parse string as Raw Text. 
      if (str.indexOf('@{') > -1) {
        str = '~' + str + '\n';
        ir  = self.parser.parse(str);
        res = self.interpreter.evalForm(ir[0], context, level);
      }
      // Set res to initial raw string.
      else {
        res = self.interpreter.evalForm(str, context, level);
      }

      return res;
    } // end Manana.interpreter.String()

    // ...........................................  
    /**
     * An HTML tag
     * @memberof Manana.interpreter
     * @method Tag
     * @param {Object} form - A Mañana.ast.TagNode 
     * @param {*} context - A value to be passed as the context for a view
     * @param {Number} level - The current level used for output formatting
     */
    this.interpreter.Tag = function(form, context, level) {
      var html, content, i, key, attr_tpl, attr, next_level, res, node, _indent_next;

      // Create content{} to interpolate in final micro-template later.
      content = {tag: form.tag, attrs: '', body: '', indent: ''};
 
      // Resolve attributes.
      if (form.attrs !== null) {
        attr_tpl = ' {key}="{val}"'; 
        attr = {};

        for (key in form.attrs) {
          attr.key = (key === 'src' && form.tag === 'a') ? "href" : key;
          attr.val = self.interpreter.evalForm(form.attrs[key], context, level);
          content.attrs += strFmt(attr_tpl, attr); 
        }
      }

      // Evaluate nested AST nodes.
      if (isNull(form.body)) {
        _indent_next = false;
      }
      else {
        next_level = level + 1;

        node = form.body;
        _indent_next = (self.options.format.on && 
                       isArr(node) && 
                       node.length > 0 && 
                       /^Tag|VoidTag|CodeTag$/.test(node[0].type));

        i = 0;
        while (!is(form.body[i], "undefined")) {
          node = form.body[i];
          content.body += self.interpreter.evalForm(node, context, next_level);
          i++;
        }
      }

      // Render final micro-template
      if (_indent_next) {
        html = '{indent}<{tag}{attrs}>\n{body}\n{indent}</{tag}>\n';
        content.indent = repeatStr(self.options.format.indent_str, level);
      }
      else if (self.options.format.on) {
        html = '{indent}<{tag}{attrs}>{body}</{tag}>\n';
        content.indent = repeatStr(self.options.format.indent_str, level);
      }
      else {
        html = '<{tag}{attrs}>{body}</{tag}>';
      }

      res = strFmt(html, content);

      return res;
    }; // end Manana.interpreter.Tag()

    // ...........................................  
    /**
     * An HTML pre or code tag
     * @memberof Manana.interpreter
     * @method CodeTag
     * @param {Object} form - A Mañana.ast.CodeTagNode 
     * @param {*} context - A value to be passed as the context for a view
     * @param {Number} level - The current level used for output formatting
     */
    this.interpreter.CodeTag = function(form, context, level) {
      var html, attr_tpl, attr, content, i, res;

      content = {tag: form.tag, attrs: '', body: ''};

      // Resolve attributes.
      if (form.attrs !== null) {
        attr_tpl = ' {key}="{val}"'; 
        attr = {};

        for (key in form.attrs) {
          attr.key = (key === 'src' && form.tag === 'a') ? "href" : key;
          attr.val = self.interpreter.evalForm(form.attrs[key], context, level);
          content.attrs += strFmt(attr_tpl, attr); 
        }
      }

      content.body = "\n" + form.body.join("\n");

      html = '<{tag}{attrs}>{body}</{tag}>';
      res = strFmt(html, content);

      return res;
    }; // end Manana.interpreter.CodeTag()

    // ...........................................  
    /**
     * An HTML void tag
     * @memberof Manana.interpreter
     * @method VoidTag
     * @param {Object} form - A Mañana.ast.VoidTagNode 
     * @param {*} context - A value to be passed as the context for a view
     * @param {Number} level - The current level used for output formatting
     */
    this.interpreter.VoidTag = function(form, context, level) {
      var html, attr_tpl, attr, content, i, res;

      content = {tag: form.tag, attrs: ''};

      // Resolve attributes.
      if (form.attrs !== null) {
        attr_tpl = ' {key}="{val}"'; 
        attr = {};

        for (key in form.attrs) {
          attr.key = (key === 'src' && form.tag === 'a') ? "href" : key;
          attr.val = self.interpreter.evalForm(form.attrs[key], context, level);
          content.attrs += strFmt(attr_tpl, attr); 
        }
      }

      if (self.options.format.on) {
        content.indent = repeatStr(self.options.format.indent_str, level);
        html = '{indent}<{tag}{attrs}>\n';
      } else {
        html = '<{tag}{attrs}>';
      }

      res = strFmt(html, content);

      return res;
    }; // end Manana.interpreter.VoidTag()

    // ...........................................  
    /**
     * Text, possibly containing interpolated paths
     * @memberof Manana.interpreter
     * @method Text
     * @param {Object} form - A Mañana.ast.TextNode 
     * @param {*} context - A value to be passed as the context for a view
     * @param {Number} level - The current level used for output formatting
     */
    this.interpreter.Text = function(form, context, level) {
      var i, res, _eval;

      if (!isNull(form.body)) {
        _eval = self.interpreter.evalForm;

        i = 0; 
        res = '';
        while (!is(form.body[i], "undefined")) {
          res += _eval(form.body[i], context, level);
          i++;
        }
      }

      return res;
    }; // end Manana.interpreter.Text()

    // ...........................................  
    /**
     * Switches parser into "filter mode", allowing block text (by default) or another language injected
     * @memberof Manana.interpreter
     * @method Filter
     * @param {Object} form - A Mañana.ast.FilterNode 
     * @param {*} context - A value to be passed as the context for a view
     * @param {Number} level - The current level used for output formatting
     */
    this.interpreter.Filter = function(form, context, level) {
      var i, res, _eval;

      if (!isNull(form.body)) {
        _eval = self.interpreter.evalForm;

        i = 0; 
        res = '';
        while (!is(form.body[i], "undefined")) {
          res += _eval(form.body[i], context, level);
          i++;
        }
      }

      return res;
    }; // end Manana.interpreter.Filter()

    // _____________________________________________________ Validation
    /**
     * Declare if a node is of type MananaNamespace
     * @memberof Manana.validate
     * @method isNamespace
     * @param {*} node - A value to check
     */
    // ...........................................  
    this.validate.isNamespace = function(node) {
      var is_ns = false;

      is_ns = node instanceof MananaNamespace;

      if (!is_ns) {
        if (node
            && node.type 
            && node.type == 'MananaNamespace'
            && node.name
            && !is(node.$parent, 'undefined')
            && !is(node.data, 'undefined'))
        {
          is_ns = true;
        }
      }

      return is_ns;
    }; // end Manana.validate.isNamespace()



    // _____________________________________________________ History
    
    // ...........................................  
    /**
     * Immediate family for a top-level view and its children.
     * @memberof Manana
     * @type {Array}
     * @namespace Manana.history
     */
    this.history.family = [];
    
    // ...........................................  
    /**
     * In-depth records for previous views.
     * @memberof Manana
     * @type {Array}
     * @namespace Manana.history
     */
    this.history.ancestry = [];
    
    // ...........................................  
    /**
     * Current number of families in ancestry.
     * @memberof Manana
     * @type {number}
     * @namespace Manana.history
     */
    this.history.num_families = 0;
    
    // ...........................................  
    /**
     * Turn history tracking on.
     * @memberof Manana.history
     * @method on
     * @param {number} limit - Max recods to track.
     */
    this.history.on = function(limit) {
      self.options.history.on = true;
    }; // end Manana.history.on()

    // ...........................................  
    /**
     * Turn history tracking off.
     * @memberof Manana.history
     * @method off
     */
    this.history.off = function() {
      self.options.history.on = false;
    }; // end Manana.history.off()

    // ...........................................  
    /**
     * @memberof Manana.history
     * @method add
     * @param {MananaView} view - The View to be recorded in History.
     */
    this.history.add = function(view) {
      var limit, ancestry, record, num_records, num_fams, max_fams, i;

      if (!self.options.history.on) {
        self.err = new MananaError('Cannot call History Add if history option turned off', view);
        throw self.err;
      }

      if (!(view instanceof MananaView)) {
        self.err = new MananaError('Invalid argument to History Add. Must be MananaView instance.', view);
        throw self.err;
      }

      limit    = self.options.history.limit;
      ancestry = self.history.ancestry;
      record   = new MananaAncestryRecord(view);

      // Push single record and get total count.
      num_records = ancestry.push(record);

      // Set number of families tracked.
      if (record.is_head) {
        self.history.num_families++;
        num_fams = self.history.num_families;
        max_fams = self.options.history.max_families;
      }

      // Check max family, and limit values.
      if (num_fams > max_fams || num_records > limit) {
        // Skip first record which should be head and find next head.
        i = 1;
        while (true) {
          if (ancestry[i].is_head) 
            break;
          i++;
        }

        // Remove first family from ancestry.
        self.history.ancestry = ancestry.slice(i);
        self.history.num_families--;
      }
    }; // end Manana.history.add()

    // ...........................................  
    /**
     * Clear history.
     * @memberof Manana.history
     * @method clear
     */
    this.history.clear = function() {
      self.history.ancestry = [];
      self.history.num_families = 0;
    }; // end Manana.history.clear()
    
    // ...........................................  
    /**
     * Get a view's past relative.
     * @memberof Manana.history
     * @method getAncestor
     * @param {string} record_name - Name of the view to check against.
     * @param {string} relative_name - Name of the relative to look for. 
     */
    this.history.getAncestor = function(record_name, relative_name) {
      var ancestry, record_index, record, relative_index, relative, i;

      if (!self.options.history.on) {
        self.err = new MananaError('Cannot call Get Ancestor when history is turned off', arguments);
        throw self.err;
      }

      if (!isStr(record_name) || !isStr(relative_name)) {
        self.err = new MananaError('Get Ancestor requires two strings as arugments', arguments);
        throw self.err;
      }

      ancestry = self.history.ancestry;
      record_name = (record_name === '$self') ? self.view.name : record_name;
      relative_name = (relative_name === '$self') ? self.view.name : relative_name;

      // Get record.
      record_index = self.history.getIndex(record_name);
      if (record_index > -1) {
        record = ancestry[record_index];
        // Only sub views can have ancestors.
        if (record.is_head) {
          return;
        }
      }

      // Get relative.
      relative_index = self.history.getIndex(relative_name);
      if (relative_index > -1) {
        // Relative must be older than Record.
        if (relative_index >= record_index) {
          return;
        }
        relative = ancestry[relative_index];
      }

      // Check direct lineage.
      i = record_index;
      while (i > relative_index) {
        if (ancestry[i].is_head) {
          return;
        }
        i--;
      }

      return relative;
    }; // end Manana.history.getAncestor()
    
    // ...........................................  
    /**
     * Get a view's descendant.
     * @memberof Manana.history
     * @method getDescendant
     * @param {string} record_name - Name of the view to check against.
     * @param {string} relative_name - Name of the relative to look for. 
     */
    this.history.getDescendant = function(record_name, relative_name) {
      var ancestry, record_index, record, relative_index, relative, i;

      if (!self.options.history.on) {
        self.err = new MananaError('Cannot call Get Descendant when history is turned off', arguments);
        throw self.err;
      }

      if (!isStr(record_name) || !isStr(relative_name)) {
        self.err = new MananaError('Get Descendant requires two strings as arugments', arguments);
        throw self.err;
      }

      ancestry = self.history.ancestry;
      record_name = (record_name === '$self') ? self.view.name : record_name;
      relative_name = (relative_name === '$self') ? self.view.name : relative_name;

      // Get record.
      record_index = self.history.getIndex(record_name);
      if (record_index === -1) {
        return;
      }
      record = ancestry[record_index];

      // Get relative.
      relative_index = self.history.getIndex(relative_name);
      if (relative_index > -1) {
        relative = ancestry[relative_index];

        // Relative must be younger than Record.
        if (relative_index <= record_index) {
          return;
        }
      }

      // Check direct lineage.
      i = record_index + 1;
      while (i <= relative_index) {
        if (ancestry[i].is_head) {
          return;
        }
        i++;
      }

      return relative;
    }; // end Manana.history.getDescendant()
    
    // ...........................................  
    /**
     * Get a record's index in ancestry.
     * @memberof Manana.history
     * @method getIndex
     * @param {string} name - Name of the view.
     */
    this.history.getIndex = function(name) {
      var a, i;

      if (!isStr(name)) {
        self.err = new MananaError('Get Index requires a single string argument', arguments);
        throw self.err;
      }

      a = self.history.ancestry;
      for (i = a.length-1; i >= 0; i--) {
        if (a[i].name === name) {
          return i;
        }
      }
      return -1;
    }; // end Manana.history.getIndex()

    // ........................................... 
    /**
     * Mañana Ancestry Record
     * @class MananaAncestryRecord
     * @param {MananaView} view - The Mañana view to be recorded.
     */
    function MananaAncestryRecord(view) {
      if (!(view instanceof MananaView)) {
        self.err = new MananaError('You must pass an instance of MananaView to Manana Ancestry Record', view);
        throw self.err;
      }

      this.name = view.name;
      this.level = view.$level;
      this.is_head = view.$level === 0;
      this.snapshot = JSON.parse(JSON.stringify(view));
    } // end MananaAncestryRecord()
 


    // _____________________________________________________ Text Manipulation

    // ...........................................  
    /**
     * Format HTML output from Manana.Render
     * @memberof Manana.text
     * @method encode
     * @param {string} html - The HTML to be formatted
     */
    this.text.encode = function(html) {
      return String(html)
               .replace( /&/g, '&amp;'  )
               .replace( /"/g, '&quot;' )
               .replace( /'/g, '&#39;'  )
               .replace( /</g, '&lt;'   )
               .replace( />/g, '&gt;'   );
    }; // end Manana.text.encode()

    // ...........................................  
    /**
     * Format HTML output from Manana.encode
     * @memberof Manana.text
     * @method decode
     * @param {string} html - The HTML to be formatted
     */
    this.text.decode = function(encoded) {
      return String(encoded)
               .replace( /&amp;/g  , '&' )
               .replace( /&quot;/g , '"' )
               .replace( /&\#39;/g , "'" )
               .replace( /&lt;/g   , '<' )
               .replace( /&gt;/g   , '>' );
    }; // end Manana.text.decode()

    // _____________________________________________________ Marshaling

    // ...........................................  
    /**
     * Marshal a View and Context for transportation
     * @memberof Manana.marshal
     * @method bottle
     * @param {string} code - The code to be bottled
     * @param {*} context - A value to be passed as the context for a view
     */
    this.marshal.bottle = function(code, context) {
      var i, lines, line, indent_pat, indent, brew;

      if (is(context, "undefined")) {
        context = {};
      }

      try {
        self.parser.parse(code);
      } catch (e) {
        self.err = new MananaError("Invalid Mañana code sent to Bottle method.");
        throw self.err;
      }

      try {
        JSON.parse(JSON.stringify(context));
      } catch (e) {
        self.err = new MananaError("Invalid context sent to Bottle method.");
        throw self.err;
      }

      lines = code.split(/\n/g);
      indent_pat = /^([\t\s][\t\s]*)/;

      brew = '#ñ(role="template")';
      for (i in lines) {
        line = lines[i];

        indent = line.match(indent_pat);
        if (indent === null) {
          indent = 0;
        } else {
          indent = indent[1].length;
        }

        line = line.replace(indent_pat, '');
        brew += '#ñ{' + indent + '}' + line;
      }

      brew += '#ñ(role="context")' + JSON.stringify(context);

      return brew;
    }; // end Manana.bottle()

    // ...........................................  
    /**
     * UnMarshal a View and Context bottled by Manana.bottle
     * @memberof Manana.marshal
     * @method pour
     * @param {string} brew - The bottle produced by Manana.bottle
     * @param {string} indent_char - The indent string to be used to reformat the source code
     */
    this.marshal.pour = function(brew, indent_char) {
      var parts, tpl, ctx, i, lines, line, indent;

      if (!/^\#ñ\(role="template"\)(?=\#ñ\{)/.test(brew)) {
        self.err = new MananaError("Invalid brew provided to Unbottle method.");
        throw self.err;
      }

      brew = brew.replace('#ñ(role="template")', '');
      parts = brew.split('#ñ(role="context")');
      tpl = parts[0];
      ctx = parts[1];

      try {
        ctx = JSON.parse(ctx);
      } catch (e) {
        self.err = new MananaError("Invalid context provided to Unbottle method.");
        throw self.err;
      }

      if (!indent_char) {
        indent_char = ' ';
      }

      lines = tpl.split(/(\#ñ\{[0-9][0-9]*\})/g);
      if (lines[0] === '') {
        lines = lines.slice(1);
      }

      tpl = '';
      for (i=0, l=lines.length; i < l; i += 2) {
        indent = lines[i]
                   .replace( '#ñ{' , '')
                   .replace( '}'   , '');
        indent = repeatStr(indent_char, parseInt(indent));

        line = lines[i + 1];

        tpl += indent + line + "\n";
      }

      try {
        self.parser.parse(tpl);
      } catch (e) {
        self.err = new MananaError("Invalid Mañana code pourd..");
        throw self.err;
      }

      return { "template": tpl, "context": ctx }
    }; // end Manana.pour()

    // ...........................................  
    /**
     * Call a function inside a view
     * @memberof Manana.interpreter
     * @method Function
     * @param {Object} form - A Mañana.ast.FunctionNode 
     * @param {*} context - A value to be passed as the context for a view
     * @param {Number} level - The current level used for output formatting
     */
    this.interpreter.Function = function(form, context, level) {
      var name, fn, i, args, res, _in_fns, _in_raw_fns;

      name = form.name;

      _in_fns = name in self.fns;
      _in_raw_fns = !_in_fns && name in self.raw_fns;

      if (!_in_fns && !_in_raw_fns) {
        self.err = new MananaError(strFmt('Function "{name}" is not defined.', form.loc));
        throw self.err;
      }

      fn = self.fns[name] || self.raw_fns[name];

      if (!is(fn, "function")) {
        self.err = new MananaError(strFmt('"{name}" is not a function', form.loc));
        throw self.err;
      }

      if (_in_raw_fns) {
        args = form.args;
      } else {
        args = [];
        if (form.args) {
          i = 0;
          while (!is(form.args[i], "undefined")) {
            args.push(self.interpreter.evalForm(form.args[i], context, level));
            i++;
          }
        }
      }

      try {
        res = fn.apply(self, args);
      } catch (e) {
        self.err = new MananaError(e.message, form.loc);
        throw self.err;
      }

      return res;
    }; // end Manana.interpreter.Function()

    // ...........................................  
    this.addFunction = function(name, fn) {
      if (!isStr(name)) {
        self.err = new MananaError("1st arg to Manana.add_fn() must be a string");
        throw self.err
      }

      if (name in self.raw_fns) {
        self.err = new MananaError('Function "' + name + '" already exists!');
        throw self.err
      }

      if (!is(fn, "function")) {
        self.err = new MananaError("2nd arg to Manana.add_fn() must be a function");
        throw self.err
      }

      self.fns[name] = fn;
    }; // end Manana.addFunction()

    // ...........................................  
    this.addRawFunction = function(name, fn) {
      if (!isStr(name)) {
        self.err = new MananaError("1st arg to Manana.add_raw_fn() must be a string");
        throw self.err
      }

      if (name in self.fns) {
        self.err = new MananaError('Function "' + name + '" already exists!');
        throw self.err
      }

      if (!is(fn, "function")) {
        self.err = new MananaError("2nd arg to Manana.add_raw_fn() must be a function");
        throw self.err
      }

      self.raw_fns[name] = fn;
    }; // end Manana.addRawFunction()

    // ...........................................  
    // switching to camelcase, leaving for backward compatability
    this.add_fn = this.addFunction; 
    this.add_raw_fn = this.addRawFunction; 



    // _____________________________________________________ Built-in functions

    // ...........................................  
    /**
     * Get the length (size) of a Hash, List, String, or Number
     * @memberof Manana.fns
     * @method len
     * @param {Hash|List|String|Number} value - A value that has a lenght/size
     */
    self.fns.len = function(value) {
      if (isObj(value)) {
        return objSize(value);
      } else if (isArr(value) || isStr(value)) {
        return value.length;
      } else if (isNum(value)) {
        return value.toString().length;
      }

      self.err = new MananaError('Invalid value in Len function. Must be Hash, List, String, or Number');
      throw self.err;
    }; // end Manana.len()

    // ...........................................  
    /**
     * Log current View, Context, and the Manana interpreter to console
     * @memberof Manana.fns
     * @method debug
     * @param {Object} form - A Mañana AST node 
     */
    self.fns.debug = function(form) {
      console.log('view: ', self.view);
      console.log('context: ', self.context);
      console.log('Manana: ', self);
      return '';
    }; // end Manana.debug()

    // ...........................................  
    /**
     * Print one or more values in the current view
     * @memberof Manana.fns
     * @method print
     * @param {*} arguments... - One or more arguments to print
     */
    self.fns.print = function() {
      var res = '', i = 0;
      while (!is(arguments[i], "undefined")) {
        res += JSON.stringify(arguments[i], null, 4);
        i++;
      }
      return res;
    }; // end Manana.print()

    // ...........................................  
    /**
     * Log a value to the console
     * @memberof Manana.fns
     * @method log
     * @param {*} value - Any value
     */
    self.fns.log = function(value) {
      console.log(value);
      return '';
    }; // end Manana.log()

    // ...........................................  
    /**
     * Print the current context to the view
     * @memberof Manana.fns
     * @method context
     */
    self.fns.context = function(_pretty) {
      return '<pre>\n' + JSON.stringify(self.context, null, 4) + '</pre>';
    }; // end Manana.context()

    // ...........................................  
    /**
     * Print the current view inside the view 
     * @memberof Manana.fns
     * @method view
     */
    self.fns.view = function(form) {
      var out = JSON.stringify(self.view, null, 4).split("\n")
      out.unshift("<pre>");
      out.push("</pre>");
      return out.join("\n    ");
    }; // end Manana.view()

    // ...........................................  
    /**
     * Print value to view and log it to console
     * @memberof Manana.fns
     * @method whatis
     * @param {*} value - Any value that should be printed and logged.
     */
    self.fns.whatis = function(value) {
      console.log('@whatis: ', value);
      return '<pre>' + JSON.stringify(value, null, 4) + '</pre>';
    };

    // _____________________________________________________ Built-in raw functions
    
    // ........................................... 
    /**
     * Determine the first argument that does not throw an error
     * @memberof Manana.fns
     * @method first_valid
     * @param {*} arguments... - n-number of arguments to evaluate
     */
    self.raw_fns.first_valid = function() {
      var i, arg, res; 

      silence();

      i = 0;
      while (!is(arg = arguments[i], 'undefined')) {
        ++i;
        try {
          res = self.interpreter.evalForm(arg, self.context);
          break;
        } 
        catch (e) {
          continue;
        } 
        finally {
          unsilence();
        }
      }

      if (!is(res, 'undefined'))
        return res;
      
      self.err = new MananaError("No valid argument in First Valid function.");
      throw self.err
    }; // end Manana.first_valid()

    // _____________________________________________________ Exports
    exports['MananaNamespace'] = MananaNamespace;
    exports['MananaView'] = MananaView;
    exports['MananaError'] = MananaError;
  } // end Manana() 



  // _____________________________________________________ Make available in both node.js & browser 
  if (_is_server_side) {
    exports['Manana'] = Manana;
  }

  if (typeof window === 'undefined') {
    window = {};
  }
  window['Manana'] = Manana;
  window['MananaNamespace'] = exports['MananaNamespace'];
  window['MananaView'] = exports['MananaView'];
  window['MananaError'] = exports['MananaError'];

})(typeof exports === "undefined" ? {} : exports);
