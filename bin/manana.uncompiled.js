/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var manana_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"prog_list":4,"EOF":5,"stmt":6,"block":7,"INDENT":8,"stmt_list":9,"DEDENT":10,"html_stmt":11,"void_tag_stmt":12,"code_tag_stmt":13,"tag_stmt":14,"filter_stmt":15,"alias_stmt":16,"unalias_stmt":17,"include_stmt":18,"with_stmt":19,"if_stmt":20,"switch_stmt":21,"for_stmt":22,"name":23,"fn":24,"break":25,"continue":26,"HTML":27,"i_html":28,"I_HTML_START":29,"i_html_text":30,"I_HTML_END":31,"i_html_text_el":32,"I_HTML_TEXT":33,"void_tag":34,"END_TAG":35,"tag_attrs":36,"VOID_TAG":37,"CODE_TAG":38,"END_CODE_TAG":39,"code":40,"line":41,"LINE":42,"BLANK_LINE":43,"tag":44,"text":45,"TAG":46,"tag_attr":47,"tag_attr_args":48,"TAG_ID":49,"TAG_SRC":50,"TAG_SRC_I_STRING":51,"string":52,"tag_classes":53,"TAG_ATTR":54,"EQ":55,"TAG_DATA_ATTR":56,"LPAREN":57,"tag_attr_arg_list":58,"RPAREN":59,"LBRACE":60,"tag_attr_arg_list_alt":61,"RBRACE":62,"tag_attr_arg":63,"COMMA":64,"tag_attr_arg_alt":65,"COLON":66,"TAG_CLASS":67,"FILTER":68,"INLINE_TEXT":69,"END_INLINE_TEXT":70,"word_list":71,"word":72,"WORD":73,"SPACE":74,"path_or_fn":75,"path":76,"WITH":77,"END_EXPR":78,"FOR":79,"ID":80,"IN":81,"BREAK":82,"CONTINUE":83,"ifs":84,"if":85,"else":86,"elifs":87,"IF":88,"conds":89,"elif":90,"ELIF":91,"cond":92,"AND":93,"OR":94,"ev":95,"NOT":96,"COND":97,"IS":98,"TYPE":99,"EXISTS":100,"ELSE":101,"INT":102,"BOOL":103,"CASE":104,"cases":105,"case":106,"WHEN":107,"ALIAS":108,"AS":109,"UNALIAS":110,"INCLUDE":111,"id":112,"DOT":113,"meths":114,"LBRACK":115,"RBRACK":116,"meth":117,"meth_args":118,"meth_arg":119,"FN":120,"fn_args":121,"fn_arg":122,"hash":123,"hash_data":124,"hash_pair":125,"hash_val":126,"START_NAME":127,"name_default":128,"STRING":129,"i_string":130,"I_STRING_D":131,"i_string_text":132,"END_I_STRING_D":133,"I_STRING_S":134,"END_I_STRING_S":135,"i_string_text_el":136,"I_STRING_TEXT":137,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",10:"DEDENT",27:"HTML",29:"I_HTML_START",31:"I_HTML_END",33:"I_HTML_TEXT",35:"END_TAG",37:"VOID_TAG",38:"CODE_TAG",39:"END_CODE_TAG",42:"LINE",43:"BLANK_LINE",46:"TAG",49:"TAG_ID",50:"TAG_SRC",51:"TAG_SRC_I_STRING",54:"TAG_ATTR",55:"EQ",56:"TAG_DATA_ATTR",57:"LPAREN",59:"RPAREN",60:"LBRACE",62:"RBRACE",64:"COMMA",66:"COLON",67:"TAG_CLASS",68:"FILTER",69:"INLINE_TEXT",70:"END_INLINE_TEXT",73:"WORD",74:"SPACE",77:"WITH",78:"END_EXPR",79:"FOR",80:"ID",81:"IN",82:"BREAK",83:"CONTINUE",88:"IF",91:"ELIF",93:"AND",94:"OR",96:"NOT",97:"COND",98:"IS",99:"TYPE",100:"EXISTS",101:"ELSE",102:"INT",103:"BOOL",104:"CASE",107:"WHEN",108:"ALIAS",109:"AS",110:"UNALIAS",111:"INCLUDE",113:"DOT",115:"LBRACK",116:"RBRACK",120:"FN",127:"START_NAME",129:"STRING",131:"I_STRING_D",133:"END_I_STRING_D",134:"I_STRING_S",135:"END_I_STRING_S",137:"I_STRING_TEXT"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,3],[9,2],[9,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,1],[11,1],[28,3],[30,2],[30,1],[32,1],[32,1],[12,2],[12,3],[34,1],[13,4],[13,5],[40,2],[40,1],[41,2],[41,1],[14,2],[14,3],[14,3],[14,3],[14,4],[14,4],[44,1],[36,2],[36,1],[36,1],[47,1],[47,1],[47,2],[47,1],[47,3],[47,3],[48,3],[48,3],[58,2],[58,1],[63,3],[63,4],[63,3],[63,4],[61,2],[61,1],[65,3],[65,4],[65,3],[65,4],[53,2],[53,1],[15,4],[15,3],[45,1],[71,1],[71,2],[72,1],[72,1],[72,1],[72,1],[72,1],[75,1],[75,1],[19,4],[22,6],[22,6],[25,1],[26,1],[20,1],[84,1],[84,2],[84,2],[84,3],[85,4],[87,2],[87,1],[90,4],[89,1],[89,3],[89,3],[92,1],[92,2],[92,3],[92,3],[92,4],[92,3],[92,4],[92,2],[92,3],[86,3],[95,1],[95,1],[95,1],[95,1],[95,1],[21,6],[21,7],[105,1],[105,2],[106,4],[16,5],[17,3],[18,3],[18,3],[76,1],[76,3],[76,3],[112,1],[112,4],[112,6],[112,6],[112,4],[112,6],[112,6],[112,5],[112,5],[112,4],[114,1],[114,3],[117,3],[117,4],[118,3],[118,1],[119,1],[119,1],[119,1],[24,3],[24,4],[121,3],[121,1],[122,1],[122,1],[122,1],[122,1],[122,1],[122,1],[122,1],[122,3],[122,3],[122,3],[122,3],[122,3],[122,3],[122,3],[123,3],[123,4],[124,3],[124,1],[125,3],[126,1],[126,1],[126,1],[126,1],[126,1],[126,1],[23,3],[23,5],[128,1],[128,1],[128,1],[128,1],[128,1],[52,1],[52,1],[130,3],[130,3],[132,2],[132,1],[136,1],[136,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0-1]; 
break;
case 6: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = [$$[$0]]; 
break;
case 24: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 26: 
      var body = [$$[$0-2]];
      body.push.apply(body, $$[$0-1]);
      body.push($$[$0]);
      this.$ = new MananaStringNode(body, new Loc(_$[$0-2], _$[$0])); 
    
break;
case 27: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 28: this.$ = [$$[$0]]; 
break;
case 31: this.$ = new VoidTagNode($$[$0-1], null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 32: this.$ = new VoidTagNode($$[$0-2], $$[$0-1],   new Loc(_$[$0-2], _$[$0-1])); 
break;
case 33: this.$ = $$[$0]; 
break;
case 34: this.$ = new CodeTagNode($$[$0-3], null, $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 35: this.$ = new CodeTagNode($$[$0-4], $$[$0-3],   $$[$0-1], new Loc(_$[$0-4], _$[$0-1])); 
break;
case 36: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 37: this.$ = [$$[$0]]; 
break;
case 38: this.$ = $$[$0-1] + $$[$0] 
break;
case 39: this.$ = ''; 
break;
case 40: this.$ = new TagNode($$[$0-1], null, null, null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 41: this.$ = new TagNode($$[$0-2], null, $$[$0-1],   null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 42: this.$ = new TagNode($$[$0-2], null, null, $$[$0],   new Loc(_$[$0-2], _$[$0])); 
break;
case 43: this.$ = new TagNode($$[$0-2], $$[$0-1],   null, null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 44: this.$ = new TagNode($$[$0-3], $$[$0-2],   $$[$0-1],   null, new Loc(_$[$0-3], _$[$0-1])); 
break;
case 45: this.$ = new TagNode($$[$0-3], $$[$0-2],   null, $$[$0],   new Loc(_$[$0-3], _$[$0])); 
break;
case 46: this.$ = $$[$0]; 
break;
case 47: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 48: this.$ = [$$[$0]]; 
break;
case 49: this.$ = $$[$0]; 
break;
case 50: this.$ = ['id', $$[$0]]; 
break;
case 51: this.$ = ['src', new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])) ]; 
break;
case 52: this.$ = ['src', $$[$0]]; 
break;
case 53: this.$ = ['class', $$[$0].join(" ")]; 
break;
case 54: this.$ = ['attr', $$[$0-2], $$[$0]]; 
break;
case 55: this.$ = ['data', $$[$0-2], $$[$0]]; 
break;
case 56: this.$ = $$[$0-1]; 
break;
case 57: this.$ = $$[$0-1]; 
break;
case 58: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 59: this.$ = [$$[$0]]; 
break;
case 60: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 61: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 62: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 63: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 64: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 65: this.$ = [$$[$0]]; 
break;
case 66: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 67: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 68: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 69: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 70: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 71: this.$ = [$$[$0]]; 
break;
case 72: this.$ = new FilterNode($$[$0-3], $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 73: this.$ = new FilterNode($$[$0-2], $$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 74: this.$ = new TextNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 75: this.$ = [$$[$0]]; 
break;
case 76: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 84: this.$ = new WithNode($$[$0-2], $$[$0], new Loc(_$[$0-3], _$[$0])); 
break;
case 85: this.$ = new ForNode($$[$0-4], $$[$0-2], $$[$0], new Loc(_$[$0-5], _$[$0])); 
break;
case 86: this.$ = new ForNode($$[$0-4], $$[$0-2], $$[$0], new Loc(_$[$0-5], _$[$0])); 
break;
case 87: this.$ = new BreakNode(new Loc(_$[$0], _$[$0])); 
break;
case 88: this.$ = new ContinueNode(new Loc(_$[$0], _$[$0])); 
break;
case 89: this.$ = new IfNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 90: this.$ = [$$[$0]]; 
break;
case 91: this.$ = [$$[$0-1], $$[$0]]; 
break;
case 92: this.$ = [$$[$0-1]]; this.$.push.apply(this.$, $$[$0]); 
break;
case 93: this.$ = [$$[$0-2]]; this.$.push.apply(this.$, $$[$0-1]); this.$.push($$[$0]); 
break;
case 94: this.$ = { "case": $$[$0-3], conditions: $$[$0-2], body: $$[$0] }; 
break;
case 95: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 96: this.$ = [$$[$0]]; 
break;
case 97: this.$ = { "case": $$[$0-3], conditions: $$[$0-2], body: $$[$0] }; 
break;
case 98: this.$ = [[null,  $$[$0]]]; 
break;
case 99: this.$ = $$[$0-2]; this.$.push([$$[$0-1], $$[$0]]); 
break;
case 100: this.$ = $$[$0-2]; this.$.push([$$[$0-1], $$[$0]]); 
break;
case 101: this.$ = ["true", $$[$0]]; 
break;
case 102: this.$ = ["not_true", $$[$0-1]]; 
break;
case 103: this.$ = [$$[$0-1], $$[$0-2], $$[$0]]; 
break;
case 104: this.$ = [$$[$0-1], $$[$0-2], $$[$0]]; 
break;
case 105: this.$ = ["not_is", $$[$0-3], $$[$0]]; 
break;
case 106: this.$ = [$$[$0-1], $$[$0-2], $$[$0]]; 
break;
case 107: this.$ = ["not_in", $$[$0-3], $$[$0]]; 
break;
case 108: this.$ = [$$[$0-1], $$[$0]]; 
break;
case 109: this.$ = ["not_exists", $$[$0-1]]; 
break;
case 110: this.$ = { "case": $$[$0-2], "body": $$[$0] }; 
break;
case 116: this.$ = new SwitchNode($$[$0-4], $$[$0-1], null   , new Loc(_$[$0-5], _$[$0])); 
break;
case 117: this.$ = new SwitchNode($$[$0-5], $$[$0-2], $$[$0-1].body, new Loc(_$[$0-6], _$[$0])); 
break;
case 118: this.$ = [$$[$0]]; 
break;
case 119: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 120: this.$ = { value: $$[$0-2], block: $$[$0] }; 
break;
case 121: this.$ = new AliasNode($$[$0-3], $$[$0-1], new Loc(_$[$0-4], _$[$0])); 
break;
case 122: this.$ = new UnaliasNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 123: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 124: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 125: this.$ = new PathNode(null, $$[$0]  , null, new Loc(_$[$0], _$[$0])); 
break;
case 126: this.$ = new PathNode($$[$0-2]  , $$[$0]  , null, new Loc(_$[$0-2], _$[$0])); 
break;
case 127: this.$ = new PathNode($$[$0-2]  , null, $$[$0]  , new Loc(_$[$0-2], _$[$0])); 
break;
case 128: this.$ = new IdNode($$[$0], null, null, new Loc(_$[$0], _$[$0])); 
break;
case 129: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 130: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 131: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 132: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 133: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 134: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 135: this.$ = new IdNode($$[$0-4], 0   , $$[$0-1]  , new Loc(_$[$0-4], _$[$0])); 
break;
case 136: this.$ = new IdNode($$[$0-4], $$[$0-2]  , '*' , new Loc(_$[$0-4], _$[$0])); 
break;
case 137: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 138: this.$ = new MethodChainNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 139: this.$ = $$[$0-2]; this.$.chain.push($$[$0])                        ; 
break;
case 140: this.$ = new MethodNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 141: this.$ = new MethodNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 142: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 143: this.$ = [$$[$0]]; 
break;
case 147: this.$ = new FunctionNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 148: this.$ = new FunctionNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 149: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 150: this.$ = [$$[$0]]; 
break;
case 158: this.$ = $$[$0]; 
break;
case 159: this.$ = $$[$0]; 
break;
case 160: this.$ = $$[$0]; 
break;
case 161: this.$ = $$[$0]; 
break;
case 162: this.$ = $$[$0]; 
break;
case 163: this.$ = $$[$0]; 
break;
case 164: this.$ = $$[$0]; 
break;
case 165: this.$ = new MananaHash($$[$0-1]); 
break;
case 166: this.$ = new MananaHash($$[$0-2]); 
break;
case 167: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 168: this.$ = [$$[$0]]; 
break;
case 169: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 176: this.$ = new NameNode($$[$0-1], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 177: this.$ = new NameNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-4], _$[$0])); 
break;
case 183: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 185: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 186: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 187: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 188: this.$ = [$$[$0]]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,21],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:[1,22],28:23,29:[1,40],34:24,37:[1,41],38:[1,25],44:26,46:[1,42],68:[1,27],69:[1,28],77:[1,32],79:[1,35],82:[1,38],83:[1,39],84:33,85:43,88:[1,44],104:[1,34],108:[1,29],110:[1,30],111:[1,31],120:[1,37],127:[1,36]},{1:[3]},{5:[1,45],6:46,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:[1,22],28:23,29:[1,40],34:24,37:[1,41],38:[1,25],44:26,46:[1,42],68:[1,27],69:[1,28],77:[1,32],79:[1,35],82:[1,38],83:[1,39],84:33,85:43,88:[1,44],104:[1,34],108:[1,29],110:[1,30],111:[1,31],120:[1,37],127:[1,36]},{5:[2,3],27:[2,3],29:[2,3],37:[2,3],38:[2,3],46:[2,3],68:[2,3],69:[2,3],77:[2,3],79:[2,3],82:[2,3],83:[2,3],88:[2,3],104:[2,3],108:[2,3],110:[2,3],111:[2,3],120:[2,3],127:[2,3]},{5:[2,4],27:[2,4],29:[2,4],37:[2,4],38:[2,4],46:[2,4],68:[2,4],69:[2,4],77:[2,4],79:[2,4],82:[2,4],83:[2,4],88:[2,4],104:[2,4],108:[2,4],110:[2,4],111:[2,4],120:[2,4],127:[2,4]},{5:[2,8],10:[2,8],27:[2,8],29:[2,8],37:[2,8],38:[2,8],46:[2,8],68:[2,8],69:[2,8],77:[2,8],79:[2,8],82:[2,8],83:[2,8],88:[2,8],104:[2,8],108:[2,8],110:[2,8],111:[2,8],120:[2,8],127:[2,8]},{5:[2,9],10:[2,9],27:[2,9],29:[2,9],37:[2,9],38:[2,9],46:[2,9],68:[2,9],69:[2,9],77:[2,9],79:[2,9],82:[2,9],83:[2,9],88:[2,9],104:[2,9],108:[2,9],110:[2,9],111:[2,9],120:[2,9],127:[2,9]},{5:[2,10],10:[2,10],27:[2,10],29:[2,10],37:[2,10],38:[2,10],46:[2,10],68:[2,10],69:[2,10],77:[2,10],79:[2,10],82:[2,10],83:[2,10],88:[2,10],104:[2,10],108:[2,10],110:[2,10],111:[2,10],120:[2,10],127:[2,10]},{5:[2,11],10:[2,11],27:[2,11],29:[2,11],37:[2,11],38:[2,11],46:[2,11],68:[2,11],69:[2,11],77:[2,11],79:[2,11],82:[2,11],83:[2,11],88:[2,11],104:[2,11],108:[2,11],110:[2,11],111:[2,11],120:[2,11],127:[2,11]},{5:[2,12],10:[2,12],27:[2,12],29:[2,12],37:[2,12],38:[2,12],46:[2,12],68:[2,12],69:[2,12],77:[2,12],79:[2,12],82:[2,12],83:[2,12],88:[2,12],104:[2,12],108:[2,12],110:[2,12],111:[2,12],120:[2,12],127:[2,12]},{5:[2,13],10:[2,13],27:[2,13],29:[2,13],37:[2,13],38:[2,13],46:[2,13],68:[2,13],69:[2,13],77:[2,13],79:[2,13],82:[2,13],83:[2,13],88:[2,13],104:[2,13],108:[2,13],110:[2,13],111:[2,13],120:[2,13],127:[2,13]},{5:[2,14],10:[2,14],27:[2,14],29:[2,14],37:[2,14],38:[2,14],46:[2,14],68:[2,14],69:[2,14],77:[2,14],79:[2,14],82:[2,14],83:[2,14],88:[2,14],104:[2,14],108:[2,14],110:[2,14],111:[2,14],120:[2,14],127:[2,14]},{5:[2,15],10:[2,15],27:[2,15],29:[2,15],37:[2,15],38:[2,15],46:[2,15],68:[2,15],69:[2,15],77:[2,15],79:[2,15],82:[2,15],83:[2,15],88:[2,15],104:[2,15],108:[2,15],110:[2,15],111:[2,15],120:[2,15],127:[2,15]},{5:[2,16],10:[2,16],27:[2,16],29:[2,16],37:[2,16],38:[2,16],46:[2,16],68:[2,16],69:[2,16],77:[2,16],79:[2,16],82:[2,16],83:[2,16],88:[2,16],104:[2,16],108:[2,16],110:[2,16],111:[2,16],120:[2,16],127:[2,16]},{5:[2,17],10:[2,17],27:[2,17],29:[2,17],37:[2,17],38:[2,17],46:[2,17],68:[2,17],69:[2,17],77:[2,17],79:[2,17],82:[2,17],83:[2,17],88:[2,17],104:[2,17],108:[2,17],110:[2,17],111:[2,17],120:[2,17],127:[2,17]},{5:[2,18],10:[2,18],27:[2,18],29:[2,18],37:[2,18],38:[2,18],46:[2,18],68:[2,18],69:[2,18],77:[2,18],79:[2,18],82:[2,18],83:[2,18],88:[2,18],104:[2,18],108:[2,18],110:[2,18],111:[2,18],120:[2,18],127:[2,18]},{5:[2,19],10:[2,19],27:[2,19],29:[2,19],37:[2,19],38:[2,19],46:[2,19],68:[2,19],69:[2,19],77:[2,19],79:[2,19],82:[2,19],83:[2,19],88:[2,19],104:[2,19],108:[2,19],110:[2,19],111:[2,19],120:[2,19],127:[2,19]},{5:[2,20],10:[2,20],27:[2,20],29:[2,20],37:[2,20],38:[2,20],46:[2,20],68:[2,20],69:[2,20],77:[2,20],79:[2,20],82:[2,20],83:[2,20],88:[2,20],104:[2,20],108:[2,20],110:[2,20],111:[2,20],120:[2,20],127:[2,20]},{5:[2,21],10:[2,21],27:[2,21],29:[2,21],37:[2,21],38:[2,21],46:[2,21],68:[2,21],69:[2,21],77:[2,21],79:[2,21],82:[2,21],83:[2,21],88:[2,21],104:[2,21],108:[2,21],110:[2,21],111:[2,21],120:[2,21],127:[2,21]},{5:[2,22],10:[2,22],27:[2,22],29:[2,22],37:[2,22],38:[2,22],46:[2,22],68:[2,22],69:[2,22],77:[2,22],79:[2,22],82:[2,22],83:[2,22],88:[2,22],104:[2,22],108:[2,22],110:[2,22],111:[2,22],120:[2,22],127:[2,22]},{5:[2,23],10:[2,23],27:[2,23],29:[2,23],37:[2,23],38:[2,23],46:[2,23],68:[2,23],69:[2,23],77:[2,23],79:[2,23],82:[2,23],83:[2,23],88:[2,23],104:[2,23],108:[2,23],110:[2,23],111:[2,23],120:[2,23],127:[2,23]},{6:48,9:47,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:[1,22],28:23,29:[1,40],34:24,37:[1,41],38:[1,25],44:26,46:[1,42],68:[1,27],69:[1,28],77:[1,32],79:[1,35],82:[1,38],83:[1,39],84:33,85:43,88:[1,44],104:[1,34],108:[1,29],110:[1,30],111:[1,31],120:[1,37],127:[1,36]},{5:[2,24],10:[2,24],27:[2,24],29:[2,24],37:[2,24],38:[2,24],46:[2,24],68:[2,24],69:[2,24],77:[2,24],79:[2,24],82:[2,24],83:[2,24],88:[2,24],104:[2,24],108:[2,24],110:[2,24],111:[2,24],120:[2,24],127:[2,24]},{5:[2,25],10:[2,25],27:[2,25],29:[2,25],37:[2,25],38:[2,25],46:[2,25],68:[2,25],69:[2,25],77:[2,25],79:[2,25],82:[2,25],83:[2,25],88:[2,25],104:[2,25],108:[2,25],110:[2,25],111:[2,25],120:[2,25],127:[2,25]},{35:[1,49],36:50,47:51,48:52,49:[1,53],50:[1,54],51:[1,55],53:56,54:[1,57],56:[1,58],57:[1,59],60:[1,60],67:[1,61]},{36:63,39:[1,62],47:51,48:52,49:[1,53],50:[1,54],51:[1,55],53:56,54:[1,57],56:[1,58],57:[1,59],60:[1,60],67:[1,61]},{23:70,24:71,35:[1,64],36:66,45:65,47:51,48:52,49:[1,53],50:[1,54],51:[1,55],52:72,53:56,54:[1,57],56:[1,58],57:[1,59],60:[1,60],67:[1,61],71:67,72:68,73:[1,69],74:[1,73],120:[1,37],127:[1,36],129:[1,74],130:75,131:[1,76],134:[1,77]},{8:[1,78]},{23:70,24:71,45:79,52:72,71:67,72:68,73:[1,69],74:[1,73],120:[1,37],127:[1,36],129:[1,74],130:75,131:[1,76],134:[1,77]},{24:82,75:80,76:81,80:[1,84],112:83,120:[1,37]},{80:[1,85]},{52:86,76:87,80:[1,84],112:83,129:[1,74],130:75,131:[1,76],134:[1,77]},{76:88,80:[1,84],112:83},{5:[2,89],10:[2,89],27:[2,89],29:[2,89],37:[2,89],38:[2,89],46:[2,89],68:[2,89],69:[2,89],77:[2,89],79:[2,89],82:[2,89],83:[2,89],88:[2,89],104:[2,89],108:[2,89],110:[2,89],111:[2,89],120:[2,89],127:[2,89]},{24:94,52:90,76:93,80:[1,84],95:89,102:[1,91],103:[1,92],112:83,120:[1,37],129:[1,74],130:75,131:[1,76],134:[1,77]},{80:[1,95]},{76:96,80:[1,84],112:83},{57:[1,97]},{5:[2,87],10:[2,87],27:[2,87],29:[2,87],37:[2,87],38:[2,87],46:[2,87],68:[2,87],69:[2,87],77:[2,87],79:[2,87],82:[2,87],83:[2,87],88:[2,87],104:[2,87],108:[2,87],110:[2,87],111:[2,87],120:[2,87],127:[2,87]},{5:[2,88],10:[2,88],27:[2,88],29:[2,88],37:[2,88],38:[2,88],46:[2,88],68:[2,88],69:[2,88],77:[2,88],79:[2,88],82:[2,88],83:[2,88],88:[2,88],104:[2,88],108:[2,88],110:[2,88],111:[2,88],120:[2,88],127:[2,88]},{23:101,30:98,32:99,33:[1,100],127:[1,36]},{35:[2,33],49:[2,33],50:[2,33],51:[2,33],54:[2,33],56:[2,33],57:[2,33],60:[2,33],67:[2,33]},{35:[2,46],49:[2,46],50:[2,46],51:[2,46],54:[2,46],56:[2,46],57:[2,46],60:[2,46],67:[2,46],73:[2,46],74:[2,46],120:[2,46],127:[2,46],129:[2,46],131:[2,46],134:[2,46]},{5:[2,90],10:[2,90],27:[2,90],29:[2,90],37:[2,90],38:[2,90],46:[2,90],68:[2,90],69:[2,90],77:[2,90],79:[2,90],82:[2,90],83:[2,90],86:102,87:103,88:[2,90],90:105,91:[1,106],101:[1,104],104:[2,90],108:[2,90],110:[2,90],111:[2,90],120:[2,90],127:[2,90]},{24:94,52:90,76:93,80:[1,84],89:107,92:108,95:109,96:[1,110],100:[1,111],102:[1,91],103:[1,92],112:83,120:[1,37],129:[1,74],130:75,131:[1,76],134:[1,77]},{1:[2,1]},{5:[2,2],27:[2,2],29:[2,2],37:[2,2],38:[2,2],46:[2,2],68:[2,2],69:[2,2],77:[2,2],79:[2,2],82:[2,2],83:[2,2],88:[2,2],104:[2,2],108:[2,2],110:[2,2],111:[2,2],120:[2,2],127:[2,2]},{6:113,10:[1,112],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:[1,22],28:23,29:[1,40],34:24,37:[1,41],38:[1,25],44:26,46:[1,42],68:[1,27],69:[1,28],77:[1,32],79:[1,35],82:[1,38],83:[1,39],84:33,85:43,88:[1,44],104:[1,34],108:[1,29],110:[1,30],111:[1,31],120:[1,37],127:[1,36]},{10:[2,7],27:[2,7],29:[2,7],37:[2,7],38:[2,7],46:[2,7],68:[2,7],69:[2,7],77:[2,7],79:[2,7],82:[2,7],83:[2,7],88:[2,7],104:[2,7],108:[2,7],110:[2,7],111:[2,7],120:[2,7],127:[2,7]},{5:[2,31],10:[2,31],27:[2,31],29:[2,31],37:[2,31],38:[2,31],46:[2,31],68:[2,31],69:[2,31],77:[2,31],79:[2,31],82:[2,31],83:[2,31],88:[2,31],104:[2,31],108:[2,31],110:[2,31],111:[2,31],120:[2,31],127:[2,31]},{35:[1,114],47:115,49:[1,53],50:[1,54],51:[1,55],53:56,54:[1,57],56:[1,58],67:[1,61]},{35:[2,48],39:[2,48],49:[2,48],50:[2,48],51:[2,48],54:[2,48],56:[2,48],67:[2,48],73:[2,48],74:[2,48],120:[2,48],127:[2,48],129:[2,48],131:[2,48],134:[2,48]},{35:[2,49],39:[2,49],49:[2,49],50:[2,49],51:[2,49],54:[2,49],56:[2,49],67:[2,49],73:[2,49],74:[2,49],120:[2,49],127:[2,49],129:[2,49],131:[2,49],134:[2,49]},{35:[2,50],39:[2,50],49:[2,50],50:[2,50],51:[2,50],54:[2,50],56:[2,50],67:[2,50],73:[2,50],74:[2,50],120:[2,50],127:[2,50],129:[2,50],131:[2,50],134:[2,50]},{35:[2,51],39:[2,51],49:[2,51],50:[2,51],51:[2,51],54:[2,51],56:[2,51],67:[2,51],73:[2,51],74:[2,51],120:[2,51],127:[2,51],129:[2,51],131:[2,51],134:[2,51]},{52:116,129:[1,74],130:75,131:[1,76],134:[1,77]},{35:[2,53],39:[2,53],49:[2,53],50:[2,53],51:[2,53],54:[2,53],56:[2,53],67:[1,117],73:[2,53],74:[2,53],120:[2,53],127:[2,53],129:[2,53],131:[2,53],134:[2,53]},{55:[1,118]},{55:[1,119]},{54:[1,122],56:[1,123],58:120,63:121},{54:[1,126],56:[1,127],61:124,65:125},{35:[2,71],39:[2,71],49:[2,71],50:[2,71],51:[2,71],54:[2,71],56:[2,71],67:[2,71],73:[2,71],74:[2,71],120:[2,71],127:[2,71],129:[2,71],131:[2,71],134:[2,71]},{8:[1,130],40:128,41:129,43:[1,131]},{39:[1,132],47:115,49:[1,53],50:[1,54],51:[1,55],53:56,54:[1,57],56:[1,58],67:[1,61]},{5:[2,40],7:133,8:[1,21],10:[2,40],27:[2,40],29:[2,40],37:[2,40],38:[2,40],46:[2,40],68:[2,40],69:[2,40],77:[2,40],79:[2,40],82:[2,40],83:[2,40],88:[2,40],104:[2,40],108:[2,40],110:[2,40],111:[2,40],120:[2,40],127:[2,40]},{35:[1,134]},{23:70,24:71,35:[1,135],45:136,47:115,49:[1,53],50:[1,54],51:[1,55],52:72,53:56,54:[1,57],56:[1,58],67:[1,61],71:67,72:68,73:[1,69],74:[1,73],120:[1,37],127:[1,36],129:[1,74],130:75,131:[1,76],134:[1,77]},{10:[2,74],23:70,24:71,35:[2,74],52:72,70:[2,74],72:137,73:[1,69],74:[1,73],120:[1,37],127:[1,36],129:[1,74],130:75,131:[1,76],134:[1,77]},{10:[2,75],35:[2,75],70:[2,75],73:[2,75],74:[2,75],120:[2,75],127:[2,75],129:[2,75],131:[2,75],134:[2,75]},{10:[2,77],35:[2,77],70:[2,77],73:[2,77],74:[2,77],120:[2,77],127:[2,77],129:[2,77],131:[2,77],134:[2,77]},{10:[2,78],35:[2,78],70:[2,78],73:[2,78],74:[2,78],120:[2,78],127:[2,78],129:[2,78],131:[2,78],134:[2,78]},{10:[2,79],35:[2,79],70:[2,79],73:[2,79],74:[2,79],120:[2,79],127:[2,79],129:[2,79],131:[2,79],134:[2,79]},{10:[2,80],35:[2,80],70:[2,80],73:[2,80],74:[2,80],120:[2,80],127:[2,80],129:[2,80],131:[2,80],134:[2,80]},{10:[2,81],35:[2,81],70:[2,81],73:[2,81],74:[2,81],120:[2,81],127:[2,81],129:[2,81],131:[2,81],134:[2,81]},{10:[2,183],35:[2,183],39:[2,183],49:[2,183],50:[2,183],51:[2,183],54:[2,183],56:[2,183],59:[2,183],62:[2,183],64:[2,183],67:[2,183],70:[2,183],73:[2,183],74:[2,183],78:[2,183],81:[2,183],93:[2,183],94:[2,183],96:[2,183],97:[2,183],98:[2,183],116:[2,183],120:[2,183],127:[2,183],129:[2,183],131:[2,183],134:[2,183]},{10:[2,184],35:[2,184],39:[2,184],49:[2,184],50:[2,184],51:[2,184],54:[2,184],56:[2,184],59:[2,184],62:[2,184],64:[2,184],67:[2,184],70:[2,184],73:[2,184],74:[2,184],78:[2,184],81:[2,184],93:[2,184],94:[2,184],96:[2,184],97:[2,184],98:[2,184],116:[2,184],120:[2,184],127:[2,184],129:[2,184],131:[2,184],134:[2,184]},{23:140,127:[1,36],132:138,136:139,137:[1,141]},{23:140,127:[1,36],132:142,136:139,137:[1,141]},{23:70,24:71,45:143,52:72,71:67,72:68,73:[1,69],74:[1,73],120:[1,37],127:[1,36],129:[1,74],130:75,131:[1,76],134:[1,77]},{70:[1,144]},{109:[1,145]},{109:[2,82],113:[1,146]},{109:[2,83]},{59:[2,125],62:[2,125],64:[2,125],66:[2,125],78:[2,125],81:[2,125],93:[2,125],94:[2,125],96:[2,125],97:[2,125],98:[2,125],109:[2,125],113:[2,125],116:[2,125]},{59:[2,128],62:[2,128],64:[2,128],66:[2,128],78:[2,128],81:[2,128],93:[2,128],94:[2,128],96:[2,128],97:[2,128],98:[2,128],109:[2,128],113:[2,128],115:[1,147],116:[2,128]},{78:[1,148]},{78:[1,149]},{78:[1,150],113:[1,146]},{78:[1,151],113:[1,146]},{78:[1,152]},{78:[2,111],81:[2,111],93:[2,111],94:[2,111],96:[2,111],97:[2,111],98:[2,111]},{78:[2,112],81:[2,112],93:[2,112],94:[2,112],96:[2,112],97:[2,112],98:[2,112]},{78:[2,113],81:[2,113],93:[2,113],94:[2,113],96:[2,113],97:[2,113],98:[2,113]},{78:[2,114],81:[2,114],93:[2,114],94:[2,114],96:[2,114],97:[2,114],98:[2,114],113:[1,146]},{78:[2,115],81:[2,115],93:[2,115],94:[2,115],96:[2,115],97:[2,115],98:[2,115]},{81:[1,153]},{62:[1,154],64:[1,155],113:[1,146]},{24:162,52:161,59:[1,156],60:[1,167],76:159,80:[1,166],99:[1,165],102:[1,160],103:[1,164],112:83,120:[1,37],121:157,122:158,123:163,129:[1,74],130:75,131:[1,76],134:[1,77]},{23:101,31:[1,168],32:169,33:[1,100],127:[1,36]},{31:[2,28],33:[2,28],127:[2,28]},{31:[2,29],33:[2,29],127:[2,29]},{31:[2,30],33:[2,30],127:[2,30]},{5:[2,91],10:[2,91],27:[2,91],29:[2,91],37:[2,91],38:[2,91],46:[2,91],68:[2,91],69:[2,91],77:[2,91],79:[2,91],82:[2,91],83:[2,91],88:[2,91],104:[2,91],108:[2,91],110:[2,91],111:[2,91],120:[2,91],127:[2,91]},{5:[2,92],10:[2,92],27:[2,92],29:[2,92],37:[2,92],38:[2,92],46:[2,92],68:[2,92],69:[2,92],77:[2,92],79:[2,92],82:[2,92],83:[2,92],86:170,88:[2,92],90:171,91:[1,106],101:[1,104],104:[2,92],108:[2,92],110:[2,92],111:[2,92],120:[2,92],127:[2,92]},{78:[1,172]},{5:[2,96],10:[2,96],27:[2,96],29:[2,96],37:[2,96],38:[2,96],46:[2,96],68:[2,96],69:[2,96],77:[2,96],79:[2,96],82:[2,96],83:[2,96],88:[2,96],91:[2,96],101:[2,96],104:[2,96],108:[2,96],110:[2,96],111:[2,96],120:[2,96],127:[2,96]},{24:94,52:90,76:93,80:[1,84],89:173,92:108,95:109,96:[1,110],100:[1,111],102:[1,91],103:[1,92],112:83,120:[1,37],129:[1,74],130:75,131:[1,76],134:[1,77]},{78:[1,174],93:[1,175],94:[1,176]},{78:[2,98],93:[2,98],94:[2,98]},{78:[2,101],81:[1,180],93:[2,101],94:[2,101],96:[1,179],97:[1,177],98:[1,178]},{24:94,52:90,76:93,80:[1,84],95:181,100:[1,182],102:[1,91],103:[1,92],112:83,120:[1,37],129:[1,74],130:75,131:[1,76],134:[1,77]},{24:94,52:90,76:93,80:[1,84],95:183,102:[1,91],103:[1,92],112:83,120:[1,37],129:[1,74],130:75,131:[1,76],134:[1,77]},{5:[2,5],10:[2,5],27:[2,5],29:[2,5],37:[2,5],38:[2,5],46:[2,5],68:[2,5],69:[2,5],77:[2,5],79:[2,5],82:[2,5],83:[2,5],88:[2,5],91:[2,5],101:[2,5],104:[2,5],107:[2,5],108:[2,5],110:[2,5],111:[2,5],120:[2,5],127:[2,5]},{10:[2,6],27:[2,6],29:[2,6],37:[2,6],38:[2,6],46:[2,6],68:[2,6],69:[2,6],77:[2,6],79:[2,6],82:[2,6],83:[2,6],88:[2,6],104:[2,6],108:[2,6],110:[2,6],111:[2,6],120:[2,6],127:[2,6]},{5:[2,32],10:[2,32],27:[2,32],29:[2,32],37:[2,32],38:[2,32],46:[2,32],68:[2,32],69:[2,32],77:[2,32],79:[2,32],82:[2,32],83:[2,32],88:[2,32],104:[2,32],108:[2,32],110:[2,32],111:[2,32],120:[2,32],127:[2,32]},{35:[2,47],39:[2,47],49:[2,47],50:[2,47],51:[2,47],54:[2,47],56:[2,47],67:[2,47],73:[2,47],74:[2,47],120:[2,47],127:[2,47],129:[2,47],131:[2,47],134:[2,47]},{35:[2,52],39:[2,52],49:[2,52],50:[2,52],51:[2,52],54:[2,52],56:[2,52],67:[2,52],73:[2,52],74:[2,52],120:[2,52],127:[2,52],129:[2,52],131:[2,52],134:[2,52]},{35:[2,70],39:[2,70],49:[2,70],50:[2,70],51:[2,70],54:[2,70],56:[2,70],67:[2,70],73:[2,70],74:[2,70],120:[2,70],127:[2,70],129:[2,70],131:[2,70],134:[2,70]},{52:184,129:[1,74],130:75,131:[1,76],134:[1,77]},{52:185,129:[1,74],130:75,131:[1,76],134:[1,77]},{54:[1,122],56:[1,123],59:[1,186],63:187},{54:[2,59],56:[2,59],59:[2,59]},{55:[1,188]},{55:[1,189]},{54:[1,126],56:[1,127],62:[1,190],65:191},{54:[2,65],56:[2,65],62:[2,65]},{66:[1,192]},{66:[1,193]},{8:[1,130],10:[1,194],41:195,43:[1,131]},{8:[2,37],10:[2,37],43:[2,37]},{42:[1,196]},{8:[2,39],10:[2,39],43:[2,39]},{8:[1,130],40:197,41:129,43:[1,131]},{5:[2,42],10:[2,42],27:[2,42],29:[2,42],37:[2,42],38:[2,42],46:[2,42],68:[2,42],69:[2,42],77:[2,42],79:[2,42],82:[2,42],83:[2,42],88:[2,42],104:[2,42],108:[2,42],110:[2,42],111:[2,42],120:[2,42],127:[2,42]},{5:[2,41],10:[2,41],27:[2,41],29:[2,41],37:[2,41],38:[2,41],46:[2,41],68:[2,41],69:[2,41],77:[2,41],79:[2,41],82:[2,41],83:[2,41],88:[2,41],104:[2,41],108:[2,41],110:[2,41],111:[2,41],120:[2,41],127:[2,41]},{5:[2,43],7:198,8:[1,21],10:[2,43],27:[2,43],29:[2,43],37:[2,43],38:[2,43],46:[2,43],68:[2,43],69:[2,43],77:[2,43],79:[2,43],82:[2,43],83:[2,43],88:[2,43],104:[2,43],108:[2,43],110:[2,43],111:[2,43],120:[2,43],127:[2,43]},{35:[1,199]},{10:[2,76],35:[2,76],70:[2,76],73:[2,76],74:[2,76],120:[2,76],127:[2,76],129:[2,76],131:[2,76],134:[2,76]},{23:140,127:[1,36],133:[1,200],136:201,137:[1,141]},{127:[2,188],133:[2,188],135:[2,188],137:[2,188]},{127:[2,189],133:[2,189],135:[2,189],137:[2,189]},{127:[2,190],133:[2,190],135:[2,190],137:[2,190]},{23:140,127:[1,36],135:[1,202],136:201,137:[1,141]},{10:[1,203]},{5:[2,73],10:[2,73],27:[2,73],29:[2,73],37:[2,73],38:[2,73],46:[2,73],68:[2,73],69:[2,73],77:[2,73],79:[2,73],82:[2,73],83:[2,73],88:[2,73],104:[2,73],108:[2,73],110:[2,73],111:[2,73],120:[2,73],127:[2,73]},{80:[1,204]},{80:[1,207],112:205,114:206,117:208},{52:212,66:[1,211],76:210,80:[1,84],102:[1,209],112:83,129:[1,74],130:75,131:[1,76],134:[1,77]},{5:[2,122],10:[2,122],27:[2,122],29:[2,122],37:[2,122],38:[2,122],46:[2,122],68:[2,122],69:[2,122],77:[2,122],79:[2,122],82:[2,122],83:[2,122],88:[2,122],104:[2,122],108:[2,122],110:[2,122],111:[2,122],120:[2,122],127:[2,122]},{5:[2,123],10:[2,123],27:[2,123],29:[2,123],37:[2,123],38:[2,123],46:[2,123],68:[2,123],69:[2,123],77:[2,123],79:[2,123],82:[2,123],83:[2,123],88:[2,123],104:[2,123],108:[2,123],110:[2,123],111:[2,123],120:[2,123],127:[2,123]},{5:[2,124],10:[2,124],27:[2,124],29:[2,124],37:[2,124],38:[2,124],46:[2,124],68:[2,124],69:[2,124],77:[2,124],79:[2,124],82:[2,124],83:[2,124],88:[2,124],104:[2,124],108:[2,124],110:[2,124],111:[2,124],120:[2,124],127:[2,124]},{7:213,8:[1,21]},{8:[1,214]},{52:216,76:215,80:[1,84],112:83,129:[1,74],130:75,131:[1,76],134:[1,77]},{5:[2,176],10:[2,176],27:[2,176],29:[2,176],31:[2,176],33:[2,176],35:[2,176],37:[2,176],38:[2,176],46:[2,176],68:[2,176],69:[2,176],70:[2,176],73:[2,176],74:[2,176],77:[2,176],79:[2,176],82:[2,176],83:[2,176],88:[2,176],104:[2,176],108:[2,176],110:[2,176],111:[2,176],120:[2,176],127:[2,176],129:[2,176],131:[2,176],133:[2,176],134:[2,176],135:[2,176],137:[2,176]},{24:222,52:218,76:221,80:[1,84],102:[1,219],103:[1,220],112:83,120:[1,37],128:217,129:[1,74],130:75,131:[1,76],134:[1,77]},{5:[2,147],10:[2,147],27:[2,147],29:[2,147],35:[2,147],37:[2,147],38:[2,147],46:[2,147],59:[2,147],62:[2,147],64:[2,147],68:[2,147],69:[2,147],70:[2,147],73:[2,147],74:[2,147],77:[2,147],78:[2,147],79:[2,147],81:[2,147],82:[2,147],83:[2,147],88:[2,147],93:[2,147],94:[2,147],96:[2,147],97:[2,147],98:[2,147],104:[2,147],108:[2,147],109:[2,147],110:[2,147],111:[2,147],120:[2,147],127:[2,147],129:[2,147],131:[2,147],134:[2,147]},{59:[1,223],64:[1,224]},{59:[2,150],64:[2,150]},{59:[2,151],64:[2,151],113:[1,146]},{59:[2,152],64:[2,152]},{59:[2,153],64:[2,153]},{59:[2,154],64:[2,154]},{59:[2,155],64:[2,155]},{59:[2,156],64:[2,156]},{59:[2,157],64:[2,157]},{55:[1,225],59:[2,128],64:[2,128],113:[2,128],115:[1,147]},{80:[1,228],124:226,125:227},{5:[2,26],10:[2,26],27:[2,26],29:[2,26],37:[2,26],38:[2,26],46:[2,26],68:[2,26],69:[2,26],77:[2,26],79:[2,26],82:[2,26],83:[2,26],88:[2,26],104:[2,26],108:[2,26],110:[2,26],111:[2,26],120:[2,26],127:[2,26]},{31:[2,27],33:[2,27],127:[2,27]},{5:[2,93],10:[2,93],27:[2,93],29:[2,93],37:[2,93],38:[2,93],46:[2,93],68:[2,93],69:[2,93],77:[2,93],79:[2,93],82:[2,93],83:[2,93],88:[2,93],104:[2,93],108:[2,93],110:[2,93],111:[2,93],120:[2,93],127:[2,93]},{5:[2,95],10:[2,95],27:[2,95],29:[2,95],37:[2,95],38:[2,95],46:[2,95],68:[2,95],69:[2,95],77:[2,95],79:[2,95],82:[2,95],83:[2,95],88:[2,95],91:[2,95],101:[2,95],104:[2,95],108:[2,95],110:[2,95],111:[2,95],120:[2,95],127:[2,95]},{7:229,8:[1,21]},{78:[1,230],93:[1,175],94:[1,176]},{7:231,8:[1,21]},{24:94,52:90,76:93,80:[1,84],92:232,95:109,96:[1,110],100:[1,111],102:[1,91],103:[1,92],112:83,120:[1,37],129:[1,74],130:75,131:[1,76],134:[1,77]},{24:94,52:90,76:93,80:[1,84],92:233,95:109,96:[1,110],100:[1,111],102:[1,91],103:[1,92],112:83,120:[1,37],129:[1,74],130:75,131:[1,76],134:[1,77]},{24:94,52:90,76:93,80:[1,84],95:234,102:[1,91],103:[1,92],112:83,120:[1,37],129:[1,74],130:75,131:[1,76],134:[1,77]},{99:[1,235]},{81:[1,237],98:[1,236]},{24:94,52:90,76:93,80:[1,84],95:238,102:[1,91],103:[1,92],112:83,120:[1,37],129:[1,74],130:75,131:[1,76],134:[1,77]},{78:[2,102],93:[2,102],94:[2,102]},{24:94,52:90,76:93,80:[1,84],95:239,102:[1,91],103:[1,92],112:83,120:[1,37],129:[1,74],130:75,131:[1,76],134:[1,77]},{78:[2,108],93:[2,108],94:[2,108]},{35:[2,54],39:[2,54],49:[2,54],50:[2,54],51:[2,54],54:[2,54],56:[2,54],67:[2,54],73:[2,54],74:[2,54],120:[2,54],127:[2,54],129:[2,54],131:[2,54],134:[2,54]},{35:[2,55],39:[2,55],49:[2,55],50:[2,55],51:[2,55],54:[2,55],56:[2,55],67:[2,55],73:[2,55],74:[2,55],120:[2,55],127:[2,55],129:[2,55],131:[2,55],134:[2,55]},{35:[2,56],39:[2,56],49:[2,56],50:[2,56],51:[2,56],54:[2,56],56:[2,56],67:[2,56],73:[2,56],74:[2,56],120:[2,56],127:[2,56],129:[2,56],131:[2,56],134:[2,56]},{54:[2,58],56:[2,58],59:[2,58]},{52:240,129:[1,74],130:75,131:[1,76],134:[1,77]},{52:241,129:[1,74],130:75,131:[1,76],134:[1,77]},{35:[2,57],39:[2,57],49:[2,57],50:[2,57],51:[2,57],54:[2,57],56:[2,57],67:[2,57],73:[2,57],74:[2,57],120:[2,57],127:[2,57],129:[2,57],131:[2,57],134:[2,57]},{54:[2,64],56:[2,64],62:[2,64]},{52:242,129:[1,74],130:75,131:[1,76],134:[1,77]},{52:243,129:[1,74],130:75,131:[1,76],134:[1,77]},{5:[2,34],10:[2,34],27:[2,34],29:[2,34],37:[2,34],38:[2,34],46:[2,34],68:[2,34],69:[2,34],77:[2,34],79:[2,34],82:[2,34],83:[2,34],88:[2,34],104:[2,34],108:[2,34],110:[2,34],111:[2,34],120:[2,34],127:[2,34]},{8:[2,36],10:[2,36],43:[2,36]},{8:[2,38],10:[2,38],43:[2,38]},{8:[1,130],10:[1,244],41:195,43:[1,131]},{5:[2,45],10:[2,45],27:[2,45],29:[2,45],37:[2,45],38:[2,45],46:[2,45],68:[2,45],69:[2,45],77:[2,45],79:[2,45],82:[2,45],83:[2,45],88:[2,45],104:[2,45],108:[2,45],110:[2,45],111:[2,45],120:[2,45],127:[2,45]},{5:[2,44],10:[2,44],27:[2,44],29:[2,44],37:[2,44],38:[2,44],46:[2,44],68:[2,44],69:[2,44],77:[2,44],79:[2,44],82:[2,44],83:[2,44],88:[2,44],104:[2,44],108:[2,44],110:[2,44],111:[2,44],120:[2,44],127:[2,44]},{10:[2,185],35:[2,185],39:[2,185],49:[2,185],50:[2,185],51:[2,185],54:[2,185],56:[2,185],59:[2,185],62:[2,185],64:[2,185],67:[2,185],70:[2,185],73:[2,185],74:[2,185],78:[2,185],81:[2,185],93:[2,185],94:[2,185],96:[2,185],97:[2,185],98:[2,185],116:[2,185],120:[2,185],127:[2,185],129:[2,185],131:[2,185],134:[2,185]},{127:[2,187],133:[2,187],135:[2,187],137:[2,187]},{10:[2,186],35:[2,186],39:[2,186],49:[2,186],50:[2,186],51:[2,186],54:[2,186],56:[2,186],59:[2,186],62:[2,186],64:[2,186],67:[2,186],70:[2,186],73:[2,186],74:[2,186],78:[2,186],81:[2,186],93:[2,186],94:[2,186],96:[2,186],97:[2,186],98:[2,186],116:[2,186],120:[2,186],127:[2,186],129:[2,186],131:[2,186],134:[2,186]},{5:[2,72],10:[2,72],27:[2,72],29:[2,72],37:[2,72],38:[2,72],46:[2,72],68:[2,72],69:[2,72],77:[2,72],79:[2,72],82:[2,72],83:[2,72],88:[2,72],104:[2,72],108:[2,72],110:[2,72],111:[2,72],120:[2,72],127:[2,72]},{78:[1,245]},{59:[2,126],62:[2,126],64:[2,126],66:[2,126],78:[2,126],81:[2,126],93:[2,126],94:[2,126],96:[2,126],97:[2,126],98:[2,126],109:[2,126],113:[2,126],116:[2,126]},{59:[2,127],62:[2,127],64:[2,127],66:[2,127],78:[2,127],81:[2,127],93:[2,127],94:[2,127],96:[2,127],97:[2,127],98:[2,127],109:[2,127],113:[1,246],116:[2,127]},{57:[1,247],59:[2,128],62:[2,128],64:[2,128],66:[2,128],78:[2,128],81:[2,128],93:[2,128],94:[2,128],96:[2,128],97:[2,128],98:[2,128],109:[2,128],113:[2,128],115:[1,147],116:[2,128]},{59:[2,138],62:[2,138],64:[2,138],66:[2,138],78:[2,138],81:[2,138],93:[2,138],94:[2,138],96:[2,138],97:[2,138],98:[2,138],109:[2,138],113:[2,138],116:[2,138]},{66:[1,249],116:[1,248]},{66:[1,251],113:[1,146],116:[1,250]},{102:[1,252]},{116:[1,253]},{5:[2,84],10:[2,84],27:[2,84],29:[2,84],37:[2,84],38:[2,84],46:[2,84],68:[2,84],69:[2,84],77:[2,84],79:[2,84],82:[2,84],83:[2,84],88:[2,84],104:[2,84],108:[2,84],110:[2,84],111:[2,84],120:[2,84],127:[2,84]},{105:254,106:255,107:[1,256]},{78:[1,257],113:[1,146]},{78:[1,258]},{62:[1,259]},{62:[2,178]},{62:[2,179]},{62:[2,180]},{62:[2,181],113:[1,146]},{62:[2,182]},{5:[2,148],10:[2,148],27:[2,148],29:[2,148],35:[2,148],37:[2,148],38:[2,148],46:[2,148],59:[2,148],62:[2,148],64:[2,148],68:[2,148],69:[2,148],70:[2,148],73:[2,148],74:[2,148],77:[2,148],78:[2,148],79:[2,148],81:[2,148],82:[2,148],83:[2,148],88:[2,148],93:[2,148],94:[2,148],96:[2,148],97:[2,148],98:[2,148],104:[2,148],108:[2,148],109:[2,148],110:[2,148],111:[2,148],120:[2,148],127:[2,148],129:[2,148],131:[2,148],134:[2,148]},{24:162,52:161,60:[1,167],76:159,80:[1,166],99:[1,165],102:[1,160],103:[1,164],112:83,120:[1,37],122:260,123:163,129:[1,74],130:75,131:[1,76],134:[1,77]},{24:264,52:263,60:[1,167],76:261,80:[1,84],99:[1,267],102:[1,262],103:[1,266],112:83,120:[1,37],123:265,129:[1,74],130:75,131:[1,76],134:[1,77]},{62:[1,268],64:[1,269]},{62:[2,168],64:[2,168]},{66:[1,270]},{5:[2,110],10:[2,110],27:[2,110],29:[2,110],37:[2,110],38:[2,110],46:[2,110],68:[2,110],69:[2,110],77:[2,110],79:[2,110],82:[2,110],83:[2,110],88:[2,110],104:[2,110],108:[2,110],110:[2,110],111:[2,110],120:[2,110],127:[2,110]},{7:271,8:[1,21]},{5:[2,94],10:[2,94],27:[2,94],29:[2,94],37:[2,94],38:[2,94],46:[2,94],68:[2,94],69:[2,94],77:[2,94],79:[2,94],82:[2,94],83:[2,94],88:[2,94],91:[2,94],101:[2,94],104:[2,94],108:[2,94],110:[2,94],111:[2,94],120:[2,94],127:[2,94]},{78:[2,99],93:[2,99],94:[2,99]},{78:[2,100],93:[2,100],94:[2,100]},{78:[2,103],93:[2,103],94:[2,103]},{78:[2,104],93:[2,104],94:[2,104]},{99:[1,272]},{24:94,52:90,76:93,80:[1,84],95:273,102:[1,91],103:[1,92],112:83,120:[1,37],129:[1,74],130:75,131:[1,76],134:[1,77]},{78:[2,106],93:[2,106],94:[2,106]},{78:[2,109],93:[2,109],94:[2,109]},{54:[2,60],56:[2,60],59:[2,60],64:[1,274]},{54:[2,62],56:[2,62],59:[2,62],64:[1,275]},{54:[2,66],56:[2,66],62:[2,66],64:[1,276]},{54:[2,68],56:[2,68],62:[2,68],64:[1,277]},{5:[2,35],10:[2,35],27:[2,35],29:[2,35],37:[2,35],38:[2,35],46:[2,35],68:[2,35],69:[2,35],77:[2,35],79:[2,35],82:[2,35],83:[2,35],88:[2,35],104:[2,35],108:[2,35],110:[2,35],111:[2,35],120:[2,35],127:[2,35]},{5:[2,121],10:[2,121],27:[2,121],29:[2,121],37:[2,121],38:[2,121],46:[2,121],68:[2,121],69:[2,121],77:[2,121],79:[2,121],82:[2,121],83:[2,121],88:[2,121],104:[2,121],108:[2,121],110:[2,121],111:[2,121],120:[2,121],127:[2,121]},{80:[1,279],117:278},{52:285,59:[1,280],76:283,80:[1,84],102:[1,284],112:83,118:281,119:282,129:[1,74],130:75,131:[1,76],134:[1,77]},{59:[2,129],62:[2,129],64:[2,129],66:[2,129],78:[2,129],81:[2,129],93:[2,129],94:[2,129],96:[2,129],97:[2,129],98:[2,129],109:[2,129],113:[2,129],116:[2,129]},{76:287,80:[1,84],102:[1,286],112:83,116:[1,288]},{59:[2,132],62:[2,132],64:[2,132],66:[2,132],78:[2,132],81:[2,132],93:[2,132],94:[2,132],96:[2,132],97:[2,132],98:[2,132],109:[2,132],113:[2,132],116:[2,132]},{76:290,80:[1,84],102:[1,289],112:83},{116:[1,291]},{59:[2,137],62:[2,137],64:[2,137],66:[2,137],78:[2,137],81:[2,137],93:[2,137],94:[2,137],96:[2,137],97:[2,137],98:[2,137],109:[2,137],113:[2,137],116:[2,137]},{10:[1,292],86:293,101:[1,104],106:294,107:[1,256]},{10:[2,118],101:[2,118],107:[2,118]},{24:94,52:90,76:93,80:[1,84],95:295,102:[1,91],103:[1,92],112:83,120:[1,37],129:[1,74],130:75,131:[1,76],134:[1,77]},{7:296,8:[1,21]},{7:297,8:[1,21]},{5:[2,177],10:[2,177],27:[2,177],29:[2,177],31:[2,177],33:[2,177],35:[2,177],37:[2,177],38:[2,177],46:[2,177],68:[2,177],69:[2,177],70:[2,177],73:[2,177],74:[2,177],77:[2,177],79:[2,177],82:[2,177],83:[2,177],88:[2,177],104:[2,177],108:[2,177],110:[2,177],111:[2,177],120:[2,177],127:[2,177],129:[2,177],131:[2,177],133:[2,177],134:[2,177],135:[2,177],137:[2,177]},{59:[2,149],64:[2,149]},{59:[2,158],64:[2,158],113:[1,146]},{59:[2,159],64:[2,159]},{59:[2,160],64:[2,160]},{59:[2,161],64:[2,161]},{59:[2,162],64:[2,162]},{59:[2,163],64:[2,163]},{59:[2,164],64:[2,164]},{59:[2,165],62:[2,165],64:[2,165]},{62:[1,298],80:[1,228],125:299},{24:304,52:303,60:[1,167],76:306,80:[1,84],102:[1,301],103:[1,302],112:83,120:[1,37],123:305,126:300,129:[1,74],130:75,131:[1,76],134:[1,77]},{5:[2,97],10:[2,97],27:[2,97],29:[2,97],37:[2,97],38:[2,97],46:[2,97],68:[2,97],69:[2,97],77:[2,97],79:[2,97],82:[2,97],83:[2,97],88:[2,97],91:[2,97],101:[2,97],104:[2,97],108:[2,97],110:[2,97],111:[2,97],120:[2,97],127:[2,97]},{78:[2,105],93:[2,105],94:[2,105]},{78:[2,107],93:[2,107],94:[2,107]},{54:[2,61],56:[2,61],59:[2,61]},{54:[2,63],56:[2,63],59:[2,63]},{54:[2,67],56:[2,67],62:[2,67]},{54:[2,69],56:[2,69],62:[2,69]},{59:[2,139],62:[2,139],64:[2,139],66:[2,139],78:[2,139],81:[2,139],93:[2,139],94:[2,139],96:[2,139],97:[2,139],98:[2,139],109:[2,139],113:[2,139],116:[2,139]},{57:[1,247]},{59:[2,140],62:[2,140],64:[2,140],66:[2,140],78:[2,140],81:[2,140],93:[2,140],94:[2,140],96:[2,140],97:[2,140],98:[2,140],109:[2,140],113:[2,140],116:[2,140]},{59:[1,307],64:[1,308]},{59:[2,143],64:[2,143]},{59:[2,144],64:[2,144],113:[1,146]},{59:[2,145],64:[2,145]},{59:[2,146],64:[2,146]},{116:[1,309]},{113:[1,146],116:[1,310]},{59:[2,136],62:[2,136],64:[2,136],66:[2,136],78:[2,136],81:[2,136],93:[2,136],94:[2,136],96:[2,136],97:[2,136],98:[2,136],109:[2,136],113:[2,136],116:[2,136]},{116:[1,311]},{113:[1,146],116:[1,312]},{59:[2,135],62:[2,135],64:[2,135],66:[2,135],78:[2,135],81:[2,135],93:[2,135],94:[2,135],96:[2,135],97:[2,135],98:[2,135],109:[2,135],113:[2,135],116:[2,135]},{5:[2,116],10:[2,116],27:[2,116],29:[2,116],37:[2,116],38:[2,116],46:[2,116],68:[2,116],69:[2,116],77:[2,116],79:[2,116],82:[2,116],83:[2,116],88:[2,116],104:[2,116],108:[2,116],110:[2,116],111:[2,116],120:[2,116],127:[2,116]},{10:[1,313]},{10:[2,119],101:[2,119],107:[2,119]},{78:[1,314]},{5:[2,85],10:[2,85],27:[2,85],29:[2,85],37:[2,85],38:[2,85],46:[2,85],68:[2,85],69:[2,85],77:[2,85],79:[2,85],82:[2,85],83:[2,85],88:[2,85],104:[2,85],108:[2,85],110:[2,85],111:[2,85],120:[2,85],127:[2,85]},{5:[2,86],10:[2,86],27:[2,86],29:[2,86],37:[2,86],38:[2,86],46:[2,86],68:[2,86],69:[2,86],77:[2,86],79:[2,86],82:[2,86],83:[2,86],88:[2,86],104:[2,86],108:[2,86],110:[2,86],111:[2,86],120:[2,86],127:[2,86]},{59:[2,166],62:[2,166],64:[2,166]},{62:[2,167],64:[2,167]},{62:[2,169],64:[2,169]},{62:[2,170],64:[2,170]},{62:[2,171],64:[2,171]},{62:[2,172],64:[2,172]},{62:[2,173],64:[2,173]},{62:[2,174],64:[2,174]},{62:[2,175],64:[2,175],113:[1,146]},{59:[2,141],62:[2,141],64:[2,141],66:[2,141],78:[2,141],81:[2,141],93:[2,141],94:[2,141],96:[2,141],97:[2,141],98:[2,141],109:[2,141],113:[2,141],116:[2,141]},{52:285,76:283,80:[1,84],102:[1,284],112:83,119:315,129:[1,74],130:75,131:[1,76],134:[1,77]},{59:[2,130],62:[2,130],64:[2,130],66:[2,130],78:[2,130],81:[2,130],93:[2,130],94:[2,130],96:[2,130],97:[2,130],98:[2,130],109:[2,130],113:[2,130],116:[2,130]},{59:[2,131],62:[2,131],64:[2,131],66:[2,131],78:[2,131],81:[2,131],93:[2,131],94:[2,131],96:[2,131],97:[2,131],98:[2,131],109:[2,131],113:[2,131],116:[2,131]},{59:[2,133],62:[2,133],64:[2,133],66:[2,133],78:[2,133],81:[2,133],93:[2,133],94:[2,133],96:[2,133],97:[2,133],98:[2,133],109:[2,133],113:[2,133],116:[2,133]},{59:[2,134],62:[2,134],64:[2,134],66:[2,134],78:[2,134],81:[2,134],93:[2,134],94:[2,134],96:[2,134],97:[2,134],98:[2,134],109:[2,134],113:[2,134],116:[2,134]},{5:[2,117],10:[2,117],27:[2,117],29:[2,117],37:[2,117],38:[2,117],46:[2,117],68:[2,117],69:[2,117],77:[2,117],79:[2,117],82:[2,117],83:[2,117],88:[2,117],104:[2,117],108:[2,117],110:[2,117],111:[2,117],120:[2,117],127:[2,117]},{7:316,8:[1,21]},{59:[2,142],64:[2,142]},{10:[2,120],101:[2,120],107:[2,120]}],
defaultActions: {45:[2,1],82:[2,83],218:[2,178],219:[2,179],220:[2,180],222:[2,182]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* tracing/debugging functions */

function Loc(start, end) {
  this.start = { line: start.first_line, column: start.first_column };
  this.end = { line: end.last_line, column: end.last_column };
}

/* Manana data types */

function MananaHash(data, loc) {
  var hash = {}, i = 0;

  while (data[i]) {
    hash[data[i][0]] = data[i][1];
    i++;
  }

  return hash;
}

/* AST nodes */

function VoidTagNode(tag, attrs, loc) {
  this.type = "VoidTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
}

function CodeTagNode(tag, attrs, code, loc) {
  this.type = "CodeTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = code;
}

function TagNode(tag, attrs, text, block, loc) {
  this.type = "Tag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = text ? [text] : block;
}

function TextNode(words, loc) {
  this.type = "Text";
  this.loc = loc;

  var w = words, t = [], s = [], i = 0; 

  while (typeof w[i] !== "undefined") {
    if (typeof w[i] === "string") {
      s.push(w[i]);
    } else {
      if (s.length) {
        t.push(s.join(' '));
        s = [];
      }
      t.push(w[i]);
    }
    i++;
  }
  if (s.length) {
    t.push(s.join(' '));
  }

  this.body = t;
}

function NameNode(path, default_value, loc) {
  this.type = "Name";
  this.loc = loc;
  this.path = path;
  this.default_value = default_value;
}

function WithNode(path, body, loc) {
  this.type = "With";
  this.loc = loc;
  this.path = path;
  this.body = body;
}

function IdNode(id, start, end, loc) {
  this.type = "Id";
  this.loc = loc;
  this.id = id;
  this.start = start;
  this.end = end;
}

function PathNode(path_node, component, methods, loc) {
  var k, c;

  if (path_node === null) {
    this.type = "Path";
    this.loc = loc;
    this.methods = null;
    this.components = [];
  } else {
    for (k in path_node) {
      if (path_node.hasOwnProperty(k)) {
        this[k] = path_node[k];
      }
    }

    if (loc && path_node.loc) {
      if (loc.end.line > path_node.loc.end.line || loc.end.column > path_node.loc.end.column) {
        this.loc.end = loc.end;
      }
    }
  }

  if (component) {
    c = [component.id];
    if (component.start !== null) {
      c.push(component.start);
    }
    if (component.end !== null) {
      c.push(component.end);
    }
    this.components.push(c);
  }

  if (methods !== null) {
    this.methods = methods;
  }
}

function MethodNode(name, args, loc) {
  this.type = "Method";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function MethodChainNode(method, loc) {
  this.type = "MethodChain";
  this.loc = loc;
  this.chain = [method];
}

function FunctionNode(name, args, loc) {
  this.type = "Function";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function ForNode(id, path, body, loc) {
  this.type = "For";
  this.loc = loc;
  this.id = id;
  this.path = path;
  this.body = body;
}

function IfNode(conditions, loc) {
  this.type = "If";
  this.loc = loc;
  this.body = conditions;
}

function SwitchNode(control, cases, else_case, loc) {
  this.type = "Switch";
  this.loc = loc;
  this.control = control;
  this.cases = cases;
  this.else_case = else_case;
}

function AliasNode(path, id, loc) {
  this.type = "Alias";
  this.loc = loc;
  this.path = path;
  this.id = id;
}

function UnaliasNode(id, loc) {
  this.type = "Unalias";
  this.loc = loc;
  this.id = id;
}

function IncludeNode(path, loc) {
  this.type = "Include";
  this.loc = loc;
  this.path = path;
}

function FilterNode(filter, body, loc) {
  this.type = "Filter";
  this.loc = loc;
  this.body = [body];
}

function MananaStringNode(body, loc) {
  this.type = "MananaString";
  this.loc = loc;
  if (typeof body === "string") {
    this.body = [body];
  } else {
    this.body = body;
  }
}

function BreakNode(loc) {
  this.type = "Break";
  this.loc = loc;
}

function ContinueNode(loc) {
  this.type = "Continue";
  this.loc = loc;
}

/* expose AST constructors to parser */

parser.ast = {};
parser.ast.Loc = Loc;
parser.ast.MananaStringNode = MananaStringNode;
parser.ast.VoidTagNode = VoidTagNode;
parser.ast.CodeTagNode = CodeTagNode;
parser.ast.TagNode = TagNode;
parser.ast.TextNode = TextNode;
parser.ast.NameNode = NameNode;
parser.ast.WithNode = WithNode;
parser.ast.IdNode = IdNode;
parser.ast.PathNode = PathNode;
parser.ast.MethodNode = MethodNode;
parser.ast.MethodChainNode = MethodChainNode;
parser.ast.FunctionNode = FunctionNode;
parser.ast.ForNode = ForNode;
parser.ast.IfNode = IfNode;
parser.ast.SwitchNode = SwitchNode;
parser.ast.AliasNode = AliasNode;
parser.ast.UnaliasNode = UnaliasNode;
parser.ast.IncludeNode = IncludeNode;
parser.ast.FilterNode = FilterNode;
parser.ast.BreakNode = BreakNode;
parser.ast.ContinueNode = ContinueNode;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

  function strip(start, end) {
    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comments */
break;
case 1:this.pushState("expr"); return "FOR";
break;
case 2:this.pushState("expr"); return "IF";
break;
case 3:this.pushState("expr"); return "ELIF";
break;
case 4:this.pushState("expr"); return "ELSE";
break;
case 5:this.pushState("expr"); return "ALIAS";
break;
case 6:this.pushState("expr"); return "UNALIAS";
break;
case 7:this.pushState("expr"); return "WITH";
break;
case 8:this.pushState("expr"); return "INCLUDE";
break;
case 9:this.pushState("expr"); return "CASE";
break;
case 10:this.pushState("expr"); return "WHEN";
break;
case 11:return "BREAK";
break;
case 12:return "CONTINUE";
break;
case 13:return "BOOL";
break;
case 14:this.popState(); return "END_EXPR";
break;
case 15:return "AND";
break;
case 16:return "OR";
break;
case 17:return "IN";
break;
case 18:return "IS";
break;
case 19:return "AS";
break;
case 20:return "NOT";
break;
case 21:return "TYPE";
break;
case 22:return "TYPE";
break;
case 23:return "TYPE";
break;
case 24:return "TYPE";
break;
case 25:return "TYPE";
break;
case 26:return "TYPE";
break;
case 27:return "COND";
break;
case 28:return "COND";
break;
case 29:return "COND";
break;
case 30:return "COND";
break;
case 31:return "COND";
break;
case 32:return "COND";
break;
case 33:return "COND";
break;
case 34:return "COND";
break;
case 35:return "EXISTS";
break;
case 36:this.pushState("tag");      return "VOID_TAG";
break;
case 37:this.pushState("code_tag"); return "CODE_TAG";
break;
case 38:this.pushState("tag");      return "TAG";
break;
case 39:this.popState();            return "END_TAG";
break;
case 40:yy_.yytext = yy_.yytext.slice(1);   return "TAG_ID";
break;
case 41:yy_.yytext = yy_.yytext.slice(1);   return "TAG_CLASS";
break;
case 42:this.popState(); this.pushState("code"); return "END_CODE_TAG";
break;
case 43:
                                                yy_.yytext = yy_.yytext.replace("->", '');
                                                yy_.yytext = yy_.yytext.replace(/\s*/, '')
                                                yy_.yytext = yy_.yytext.slice(1, -1)
                                                return "TAG_SRC";
                                             
break;
case 44:this.pushState("i_string_d"); return ["TAG_SRC_I_STRING", "I_STRING_D"];
break;
case 45:this.pushState("i_string_d"); return "I_STRING_D";
break;
case 46:this.pushState("i_string_d"); return "I_STRING_D";                                      
break;
case 47:this.pushState("name");       return "START_NAME";
break;
case 48:this.popState();              return "END_I_STRING_D";
break;
case 49:return "I_STRING_TEXT";
break;
case 50:this.pushState("i_string_s"); return ["TAG_SRC_I_STRING", "I_STRING_S"];
break;
case 51:this.pushState("i_string_s"); return "I_STRING_S";
break;
case 52:this.pushState("i_string_s"); return "I_STRING_S";                                      
break;
case 53:this.pushState("name");       return "START_NAME";
break;
case 54:this.popState();              return "END_I_STRING_S"; // "
break;
case 55:return "I_STRING_TEXT";
break;
case 56:this.pushState("i_html"); return "I_HTML_START";
break;
case 57:this.pushState("name");   return "START_NAME";
break;
case 58:this.popState();          return "I_HTML_END";
break;
case 59:return "I_HTML_TEXT";
break;
case 60:return "HTML";
break;
case 61:this.pushState("tagargs"); return "LPAREN";
break;
case 62:this.popState();           return "RPAREN";
break;
case 63:this.pushState("tagargs"); return "LBRACE";
break;
case 64:this.popState();           return "RBRACE";
break;
case 65:return "COLON";
break;
case 66:return "EQ";
break;
case 67:return "COMMA";
break;
case 68:return "TAG_ATTR";
break;
case 69:yy_.yytext = "data-" + yy_.yytext.slice(1); return "TAG_DATA_ATTR";
break;
case 70:/* ignore */
break;
case 71:/* ignore */
break;
case 72:this.pushState("filter"); yy_.yytext = yy_.yytext.slice(1); return "FILTER";
break;
case 73:this.pushState("inline_text"); return "INLINE_TEXT";
break;
case 74:this.popState(); return "END_INLINE_TEXT";
break;
case 75:this.pushState("name"); return "START_NAME";
break;
case 76:this.popState(); return "RBRACE"
break;
case 77:this.pushState("fn"); yy_.yytext = yy_.yytext.slice(1); return "FN";
break;
case 78:this.popState(); return "RPAREN";
break;
case 79:/* ignore */
break;
case 80:/* ignore */
break;
case 81:return "LBRACE";
break;
case 82:return "RBRACE";
break;
case 83:return "COMMA";
break;
case 84:return "EQ";
break;
case 85:return "ID";
break;
case 86:return "DOT";
break;
case 87:return "LPAREN";
break;
case 88:return "RPAREN";
break;
case 89:return "LBRACK";
break;
case 90:return "RBRACK";
break;
case 91:return "COLON"; 
break;
case 92:return "COMMA";
break;
case 93:return "INT";
break;
case 94:yy_.yytext = strip(1,2).replace(/\\"/g, '"'); return "STRING";
break;
case 95:return "STRING"; // Do not strip quotes
break;
case 96:return "WORD";
break;
case 97:
  var tokens = [];
  while (0 < indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  if (tokens.length) {
    tokens.push("EOF");
    return tokens;
  } else {
    return "EOF";
  }

break;
case 98:/* eat blank lines */
break;
case 99:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (indentation > indent_stack[0]) {
    indent_stack.unshift(indentation);
    return "INDENT";
  }

  var tokens = [];
  while (indentation < indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  if (tokens.length) {
    return tokens;
  }

break;
case 100:
  this.popState();

  var tokens = [];
  while (code_indent_level >= indent_stack[0]) {
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  code_indent_level = 0;

  tokens.shift();
  tokens.push("EOF");

  return tokens;

break;
case 101:yy_.yytext = ''; return "BLANK_LINE";
break;
case 102:
  var indent_level = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (code_indent_level === 0) {
    code_indent_level = indent_level;
    indent_stack.unshift(indent_level);
    yy_.yytext = yy_.yytext.slice(code_indent_level + 1);
    return "INDENT";

  } else if (indent_level < code_indent_level) {
    code_indent_level = 0;

    var tokens = [];
    while (indent_level < indent_stack[0]) {
      tokens.unshift("DEDENT");
      indent_stack.shift();
    }

    this.popState();
    return tokens;

  } else if (code_indent_level > 0) {
    yy_.yytext = yy_.yytext.slice(code_indent_level + 1);
    return "INDENT";
  }

break;
case 103:return "LINE";
break;
case 104:
  this.popState();

  var tokens = [];
  while (filter_indent_level >= indent_stack[0]) {
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  filter_indent_level = 0;

  tokens.shift();
  tokens.push("EOF");

  return tokens;

break;
case 105:
  var indent_level, tokens;
    
  indent_level = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (filter_indent_level === 0) {
    filter_indent_level = indent_level;
    indent_stack.unshift(indent_level);
    return "INDENT";

  } else if (indent_level < filter_indent_level) {
    this.popState();
    filter_indent_level = 0;
    
    tokens = [];
    while (indent_stack[0] > indent_level) {
      tokens.push("DEDENT");
      indent_stack.shift();
    }

    return tokens;
  }

break;
case 106:/* ignore all other whitespace */
break;
}
},
rules: [/^(?:[\n\r]*([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*"""(.|\n)*?""")/,/^(?:for\b)/,/^(?:if\b)/,/^(?:elif\b)/,/^(?:else\b)/,/^(?:alias\b)/,/^(?:unalias\b)/,/^(?:with\b)/,/^(?:include\b)/,/^(?:case\b)/,/^(?:when\b)/,/^(?:!break\b)/,/^(?:!continue\b)/,/^(?:true|false\b)/,/^(?:(?=\n))/,/^(?:and\b)/,/^(?:or\b)/,/^(?:in\b)/,/^(?:is\b)/,/^(?:as\b)/,/^(?:not\b)/,/^(?:Hash\b)/,/^(?:List\b)/,/^(?:String\b)/,/^(?:Integer\b)/,/^(?:Number\b)/,/^(?:Boolean\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?:>)/,/^(?:<)/,/^(?:%)/,/^(?:exists\b)/,/^(?:((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)))/,/^(?:pre|code\b)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:(?=\n))/,/^(?:(#[a-zA-Z][a-zA-Z0-9\-\:_]*))/,/^(?:(\.-?[_a-zA-Z]+[_a-zA-Z0-9\-]*(?=["."\s\n])))/,/^(?:(?=\n))/,/^(?:->\s*(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:->\s*(i"(?=.*?@\{)))/,/^(?:(i"(?=.*?@\{)))/,/^(?:(i"(?=.*?@\{)))/,/^(?:@\{)/,/^(?:")/,/^(?:[^"@"'"']*)/,/^(?:->\s*(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:@\{)/,/^(?:')/,/^(?:[^"@""'"]*)/,/^(?:(<(?=.*?@\{)))/,/^(?:@\{)/,/^(?:>(?=\s*\n))/,/^(?:.)/,/^(?:<.*(?=\n))/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z][a-zA-Z0-9\-_]*(?=\s*["="":"])))/,/^(?:(\*[a-zA-Z][a-zA-Z0-9\-]*(?=\s*["="":"])))/,/^(?:\s)/,/^(?:\n)/,/^(?::(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:~)/,/^(?:(?=\n))/,/^(?:@\{)/,/^(?:\})/,/^(?:@(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254})\s?(?=\())/,/^(?:\)(?!\)))/,/^(?:\s)/,/^(?:\n)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:=)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:(\+|-)?(0|[1-9][0-9]*))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:([^\s\n"@"][^\s\n]*))/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:.*)/,/^(?:\s*$)/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"tag":{"rules":[39,40,41,43,44,46,50,52,61,63,75,77,95,96,98,106],"inclusive":true},"tagargs":{"rules":[45,51,62,64,65,66,67,68,69,70,71,94,98,106],"inclusive":true},"filter":{"rules":[46,52,75,95,96,98,104,105,106],"inclusive":true},"inline_text":{"rules":[46,52,74,75,95,96,106],"inclusive":true},"expr":{"rules":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,45,51,77,85,86,87,88,89,90,91,92,93,94,106],"inclusive":true},"name":{"rules":[13,45,51,76,77,85,86,87,88,89,90,91,92,93,94,106],"inclusive":true},"fn":{"rules":[13,45,51,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,98,106],"inclusive":true},"i_string_d":{"rules":[47,48,49,106],"inclusive":true},"i_string_s":{"rules":[53,54,55,106],"inclusive":true},"i_html":{"rules":[57,58,59,98,106],"inclusive":true},"code_tag":{"rules":[40,41,42,106],"inclusive":true},"code":{"rules":[100,101,102,103,106],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,36,37,38,46,52,56,60,72,73,75,77,95,96,97,98,99,106],"inclusive":true}}
};
indent_stack = [0];
filter_indent_level = 0;
code_indent_level = 0;;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = manana_parser;
exports.Parser = manana_parser.Parser;
exports.parse = function () { return manana_parser.parse.apply(manana_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}/* ******************************************************
 * Author: Chad Angelelli <chad@angelel.li>
 * Contributors/Special Thanks:
 *    Ray Harris <ray@harris.net>
 *    Mason Armour <mason@myshorttrack.com>
 *    Chris Hacker <chris@myshorttrack.com>
 *    Brigette LeVert <brigette.levert@gmail.com>
 * ******************************************************/

(function(exports) {
  var _manana_is_server_side, _manana_is_client_side;

  // _____________________________________________ Validation shorthand 
  function is(v, t)  { return typeof v === t; }
  function isNull(v) { return v === null; }
  function isStr(v)  { return is(v, "string"); }
  function isNum(v)  { return is(v, "number"); }
  function isInt(v)  { return is(v, "number") && parseFloat(v) == parseInt(v, 10) && ! isNaN(v); }
  function isArr(v)  { return Object.prototype.toString.call(v) === '[object Array]'; }
  function isObj(v)  { return Object.prototype.toString.call(v) === '[object Object]'; }

  _manana_is_server_side =  typeof require        !== 'undefined' && 
                            typeof module         !== 'undefined' && 
                            typeof module.exports !== 'undefined' ;

  _manana_is_client_side = ! _manana_is_server_side;
 
  // _____________________________________________ Extensions 
  String.prototype.strFmt = function(o) {
    return this.replace(/{([^{}]*)}/g, function (a, b) { 
      var r = o[b]; 
      return isStr(r) || isNum(r) ? r : a; 
    });
  };

  String.prototype.repeat = function(n) {
    return new Array(n + 1).join(this);
  };

  Object.size = function(obj) {
    var size = 0, key;
    for (key in obj) {
      if (obj.hasOwnProperty(key)) {
        size++;
      }
    }
    return size;
  };

  function jd(label, x) {
    console.log("\n\n" + label + "\n==========================================>\n>>>");
    console.log(JSON.stringify(x, null, 4));
    console.log("\n\n<<< END " + label + "\n\n");
  }

  // _____________________________________________ Mañana
  function MananaNamespace(name, data, $parent) {
    this.type    = 'MananaNamespace';
    this.name    = name;
    this.data    = data;
    this.$parent = $parent;
  } // end MananaNamespace()

  function MananaView(args) {
    this.name     = args.name;
    this.template = args.template;
    this.context  = args.context;
    this.$level   = args.$level; 
    this.$parent  = args.$parent;
  } // end MananaView()

  function MananaError(message, loc) {
    this.name = "MananaError";
    this.message = message;
    this.loc = loc;
  } // end Error()

  function Manana(view_dir) {
    var self = this;

    // ........................................... 
    this.name           = '';
    this.template       = '';
    this.ir             = '';
    this.result         = '';
    this.context        = {};
    this.aliases        = [];
    this.namespace      = {};
    this.view           = {}; // the current view object
    this.views          = {}; // a cache of all known views
    this.view_level     = 0;
    this.ancestry       = [];
    this.fns            = {};
    this.is_server_side = _manana_is_server_side;
    this.is_client_side = ! _manana_is_server_side;
    this.in_loop        = false;
    this.break_loop     = false;
    this.continue_loop  = false;

    // ........................................... 
    if (this.is_server_side) {
      if (typeof manana_parser !== 'undefined') {
        this.parser = manana_parser;
        this.Parser = manana_parser.Parser;
      } else {
        this.Parser = require('./manana_parser');
        this.parser = this.Parser.parser;
      }

      this.file_system = require('fs');

      this.__dirname = require('path').dirname(require.main.filename);

      if (is(view_dir, "undefined")) {
        this.view_dir = this.__dirname; 
      } else { 
        this.view_dir = view_dir;
      }

      if (this.view_dir[this.view_dir.length - 1] == '/') {
        this.view_dir = this.view_dir.slice(0, -1);
      }
    } else {
      this.parser = manana_parser;
      this.Parser = manana_parser.Parser;
    }

    // ...........................................  
    this.getTemplate = function(name) {
      var template, abs_name, scripts, i, l, s, s_name;

      if (self.is_server_side) {
        try {
          if (name[0] == '.') {
            abs_name = self.__dirname + '/' + name.slice(2);
          } else if (name[0] == '/') {
            abs_name = name;
          } else {
            abs_name = self.view_dir + '/' + name; 
          }

          if ( ! /\.manana$/.test(abs_name)) {
            abs_name += ".manana";
          }

          template = self.file_system.readFileSync(abs_name, 'utf-8');

        } catch (e) {
          throw new MananaError("Invalid name '{p}' provided to getTemplate function".strFmt({p:name}));
        }
      } else { // self.is_client_side
        scripts = document.getElementsByTagName("script"); 
        for (i = 0, l = scripts.length; i < l; i++) {
          s = scripts[i];
          s_name = s.getAttribute("data-view-name");
          if (s_name == name) {
            template = s.innerHTML;
          }
        }
      }

      if ( ! template.length) {
        throw new MananaError("Template '{n}' has no content.".strFmt({n:name}));
      }

      return template;
    }; // end Manana.getTemplate()

    // ...........................................  
    this.evalForm = function(form, context) {
      var res = '', i;

      if (form && (form.type == 'Path' || form.type == 'Function')) {
        return self[form.type](form, context);

      } else if (isObj(form) && ! is(form.type, "undefined")) {
        res += self[form.type](form, context);

      } else if (isArr(form)) {
        i = 0;
        while ( ! is(form[i], "undefined")) {
          res += self.evalForm(form[i], context);
          i++;
        }
      } else {
        res = form;
      }

      return res;
    }; // end Manana.evalForm()

    // ...........................................  
    this.render = function(name, context, options) {
      var i, form, r;

      self.name = name;
      self.template = self.getTemplate(self.name);
      self.ir = self.parser.parse(self.template);

      self.namespace.root = new MananaNamespace('root', context || {}, null);
      self.context = self.namespace.root;
      self.aliases = [];

      self.views[name] = new MananaView({
        name: name,
        template: self.template,
        context: self.context,
        $level: 0,
        $parent: null
      });

      self.view = self.views[name];
      self.ancestry = [self.view];

      self['$window'];
      if (typeof window !== "undefined") {
        self['$window'] = window;
      }

      self.result = '';

      i = 0;
      while (form = self.ir[i]) {
        r = self.evalForm(form, self.context);
        self.result += isObj(r) ? JSON.stringify(r) : r;
        i++;
      }

      if (is(options, "undefined")) {
        options = {};
      }

      options.return_single_line = options.return_single_line || false;
      options.encode = options.encode || false;

      if ( ! options.return_single_line) {
        self.result = self.format(self.result, "  ", 0);
      }

      if (options.encode) {
        self.result = self.encode(self.result);
      }

      i = 0;
      while (self.aliases[i]) {
        i++;
        delete self.namespace[self.aliases[i]];
      }

      return self.result;
    }; // end Manana.render()

    // ...........................................  
    this.Include = function(form, context) {
      var name, template, ir, $parent, i, form, res;

      name = self.evalForm(form.path, context);
      template = self.getTemplate(name);
      ir = self.parser.parse(template);

      self.view_level++;

      self.views[name] = new MananaView({
        name: name,
        template: template,
        context: context,
        $level: self.view_level,
        $parent: $parent 
      });

      $parent = self.ancestry[self.view_level - 1]; 
      self.view = self.views[name];

      if (self.view_level < self.ancestry.length) {
        self.ancestry = self.ancestry.slice(0, self.view_level);
      }

      self.ancestry.push(self.views[name]);

      i = 0;
      res = '';
      while (form = ir[i]) {
        res += self.evalForm(form, context);
        i++;
      }

      self.view = $parent;
      self.view_level--;

      return res;
    }; // end Manana.Include()

    // ...........................................  
    this.isNamespace = function(node) {
      var is_ns = false;

      is_ns = node instanceof MananaNamespace;

      if ( ! is_ns) {
        if (node
            && node.type 
            && node.type == 'MananaNamespace'
            && node.name
            && ! is(node.$parent, 'undefined')
            && ! is(node.data, 'undefined'))
        {
          is_ns = true;
        }
      }

      return is_ns;
    }; // end Manana.isNamespace()

    // ...........................................  
    this.Path = function(form, context) {
      var node, components, target, i, index, slice, traceback, meth;

      node = context;
      components = JSON.parse(JSON.stringify(form.components));
      traceback = [];

      if (components[0][0] == '$manana') {
        node = self;
        traceback.push(components[0][0]);
        components.shift();

      } else if (components[0][0] == '$window') {
        if (typeof window !== 'undefined') {
          node = window;
          traceback.push(components[0][0]);
          components.shift();
        } else {
          throw new MananaError("Invalid path: $window is not defined");
        }
      }

      i = 0;
      while ( ! is(components[i], "undefined")) {
        target = self.evalForm(components[i][0], context);
        index  = self.evalForm(components[i][1], context);
        slice  = self.evalForm(components[i][2], context);

        traceback.push(target);

        //................ 
        if (self.isNamespace(node)) {
          if (target[0] == '$' && ! is(node[target], 'undefined')) {
            node = node[target];

          } else if ( ! isNull(node.data) && ! is(node.data[target], 'undefined')) {
            node = node.data[target];

          } else if (node.name == target) {
            node = node.data;

          } else if ( ! is(self.namespace[target], 'undefined')) {
            node = self.namespace[target];

          } else if (node.$parent && ! is(node.$parent.data[target], 'undefined')) {
            node = node.$parent.data[target];

          } else {
            throw new MananaError('Invalid path in namespace: "' + traceback.join('.') + '"', form.loc);
          }

        } else if ( ! is(node, 'undefined')) { 
          if ( ! is(node[target], "undefined")) {
            node = node[target];
          } else {
            throw new MananaError('Invalid path: "' + traceback.join('.') + '"', form.loc);
          }

        } else {
          throw new MananaError("Undefined path: " + traceback.join('.'), form.loc);
        }

        //................ 
        if ( ! is(slice, 'undefined')) {
          if (isStr(node)) {
            node = node.split('');
          } else if ( ! isArr(node)) {
            throw new MananaError('slicing attempted on non-list: ' + traceback.join('.'), form.loc);
          }

          index = parseInt(index);

          if (slice == '*') {
            slice = node.length;
          } else {
            slice = parseInt(slice);
          }

          node  = node.slice(index, slice);

        } else if ( ! is(index, 'undefined')) {
          if (isObj(node) && ! is(node[index], 'undefined')) {
            node = node[index];
          } else {
            index = parseInt(index);
            if (index < 0) {
              index = node.length + index;
            }
            node = node[index];
          }
        }

        i++;
      } // end while

      //................ 
      if (form.methods) {
        i = 0;
        while (meth = form.methods.chain[i]) {
          if (is(node[meth.name], 'undefined')) {
            throw new MananaError("Undefined method '{name}' called: ".strFmt(meth) + traceback.join('.'), meth.loc);
          }

          if ( ! is(node[meth.name], 'function')) {
            throw new MananaError("Requested method '{name}' is not a function.".strFmt(meth) + traceback.join('.'), meth.loc);
          }

          try {
            if (isArr(meth.args) && meth.args.length) {
              node = node[meth.name].apply(self, meth.args);
            } else {
              node = node[meth.name]();
            }
          } catch (e) {
            throw new MananaError(e, meth.loc);
          }
          i++;
        }
      }

      //................ 
      if (is(node, 'undefined')) {
        throw new MananaError("Can't find path: " + traceback.join('.'), form.loc);
      }

      //................ 
      return node;
    }; // end Interprteter.Path()

    // ...........................................  
    this.Name = function(form, context) {
      var res;

      try {
        res = self.evalForm(form.path, context);
      } catch (e) {
        if ('default_value' in form) {
          res = self.evalForm(form.default_value, context);
        } else {
          throw e;
        }
      }

      return res;
    }; // end Interpreter.Name()

    // ........................................... 
    this.With = function(form, context) {
      var name, data, i, min, max, res;

      min = 1000000;
      max = 9999999;

      name = '__with__' + Math.floor(Math.random() * (max - min) + min);
      data = self.evalForm(form.path, context);

      self.namespace[name] = new MananaNamespace(name, data, context);

      res = '';
      for (i in form.body) {
        res += self.evalForm(form.body[i], self.namespace[name]);
      }

      delete self.namespace[name];

      return res;
    }; // end Manana.With()

    // ...........................................  
    this.Alias = function(form, context) {
      var name, data;

      if ( ! self.isNamespace(context)) {
        throw new MananaError("Invalid context passed to Alias method. Must be a valid namespace.");
      }

      if ( ! is(context[name], "undefined")) {
        throw new MananaError("Can't alias '{id}'. Name already taken in current context.".strFmt(form));
      }

      name = form.id;
      data = self.evalForm(form.path, context);

      self.namespace[name] = data;
      self.aliases.push(name);

      return '';
    }; // end Manana.Alias()

    // ...........................................  
    this.Unalias = function(form, context) {
      var id;

      id = self.evalForm(form.id, context);

      if (is(self.namespace[id], 'undefined'))
        throw new MananaError('Unknown alias "{id}". Can not unalias.'.strFmt(form));

      delete self.namespace[id];

      return '';
    }; // end Manana.Unalias()

    // ...........................................  
    this.If = function(form, context) {
      var cases, else_case, i, j, c, cond, compound, operator, value, previous_outcome, outcome, res;

      cases = JSON.parse(JSON.stringify(form.body));

      if (cases[cases.length-1]['case'] == 'else') {
        else_case = cases.pop();
      }

      i = 0;
      while (c = cases[i]) {
        outcome = false;

        j = 0;
        while (cond = c.conditions[j]) {
          compound = cond[0];
          operator = cond[1][0];
          value = cond[1].slice(1);

          previous_outcome = outcome;

          if (operator == 'true' || operator == 'not_true') {
            value[0] = self.evalForm(value[0], context);

            if (value[0]) {
              outcome = true;
            } else {
              outcome = false;
            }

            if (operator == 'not_true') {
              outcome = ! outcome;
            }

          } else if (operator == 'exists' || operator == 'not_exists') {
            try {
              value[0] = self.evalForm(value[0], context);
              outcome = true;
            } catch (e) {
              outcome = false;
            }

            if (operator == 'not_exists') {
              outcome = ! outcome;
            }

          } else if (operator == 'in' || operator == 'not_in') {
            value[0] = self.evalForm(value[0], context);
            value[1] = self.evalForm(value[1], context);

            if (isArr(value[1]) || isStr(value[1])) {
              outcome = value[1].indexOf(value[0]) > -1;
            } else if (isObj(value[1])) {
              outcome = value[0] in value[1];
            }

            if (operator == 'not_in') {
              outcome = ! outcome;
            }

          } else if (operator == 'is' || operator == 'not_is') {
            value[0] = self.evalForm(value[0], context);

            if      (value[1] == 'Hash'   ) outcome = isObj(value[0]);
            else if (value[1] == 'List'   ) outcome = isArr(value[0]);
            else if (value[1] == 'String' ) outcome = isStr(value[0]);
            else if (value[1] == 'Number' ) outcome = isNum(value[0]);
            else if (value[1] == 'Integer') outcome = isInt(value[0]);

            if (operator == 'not_is') {
              outcome = ! outcome;
            } 

          } else {
            value[0] = self.evalForm(value[0], context);
            value[1] = self.evalForm(value[1], context);

            switch (operator) {
              case '==': outcome = value[0] == value[1]; break;
              case '!=': outcome = value[0] != value[1]; break;
              case '>' : outcome = value[0] >  value[1]; break;
              case '<' : outcome = value[0] <  value[1]; break;
              case '>=': outcome = value[0] >= value[1]; break;
              case '<=': outcome = value[0] <= value[1]; break;
              default  : outcome = false;
            }
          }

          if (compound == 'and') {
            outcome = outcome && previous_outcome;
          } else if (compound == 'or') {
            outcome = outcome || previous_outcome;
          }

          j++;
        } // end while(conditions)

        if (outcome) {
          res = self.evalForm(c.body, context);
          break;
        }

        i++;
      } // end while(if/elif)

      if ( ! outcome && else_case) {
        res = self.evalForm(else_case.body, context);
      }

      if (is(res, 'undefined')) {
        res = '';
      }

      return res;
    }; // end Manana.If()

    // ...........................................  
    this.Switch = function(form, context) {
      var control, i, c, j, len, value, res;

      control = self.evalForm(form.control, context);

      res = '';

      i = 0; 
      while (c = form.cases[i]) {
        ++i;

        value = self.evalForm(c.value, context);

        if (value == control) {
          len = c.block.length;
          for (j = 0; j < len; j++) {
            res += self.evalForm(c.block[j], context);
          }
        }
      }

      if ( ! res.length && form.else_case) {
        i = 0;
        while (c = form.else_case[i]) { 
          ++i;
          res += self.evalForm(c, context);
        }
      }

      return res;
    }; // end Manana.Switch()

    // ...........................................  
    this.For = function(form, context) {
      var name, loop_name, $parent, scope, local_scope, key, i, count, total, _is_obj, res;

      $parent = self.context;
      scope = self.evalForm(form.path, context);

      if (isObj(scope)) {
        _is_obj = true;
      } else if (isArr(scope)) {
        _is_obj = false;
      } else if (isStr(scope)) {
        _is_obj = false;
        scope = scope.split('');
      } else {
        throw new MananaError('Invalid context provided to loop. Must be Hash, List, or String.');
      }

      name = form.id;
      loop_name = '__loop__' + name;
      total = _is_obj ? Object.size(scope) : scope.length;
      count = 0;

      if ( ! self.isNamespace(scope))
        scope = new MananaNamespace(loop_name, scope, $parent);
      scope = self.namespace[loop_name] = scope;

      self.in_loop = true;

      function cleanUp() {
        delete self.namespace[loop_name];
        delete self.namespace[name];
        self.in_loop = false;
        self.break_loop = false;
        self.continue_loop = false;
      }

      res = '';
      for (key in scope.data) {
        ++count;

        self.namespace[name] = new MananaNamespace(name, scope.data[key], $parent);
        local_scope = self.namespace[name];

        local_scope.$count    = count;
        local_scope.$total    = total;
        local_scope.$is_first = count == 1;
        local_scope.$is_last  = count == total;

        if (_is_obj) {
          local_scope.$key = key;
        } else {
          local_scope.$index    = key;
          local_scope.$previous = scope[key-1] || null;
          local_scope.$next     = scope[key+1] || null;
        }

        for (i in form.body) {
          if (self.break_loop) {
            cleanUp();
            break;
          }

          if (self.continue_loop)
            continue;

          res += self.evalForm(form.body[i], local_scope); 
        }
      }

      cleanUp();

      return res;
    }; // end Manana.For()

    // ...........................................  
    this.Break = function(form, context) {
      if ( ! self.in_loop) {
        throw new MananaError('Break statement can only exist inside loop!', form.loc);
      }
      self.break_loop = true;
      return '';
    }; // end Manana.Break()

    // ...........................................  
    this.Continue = function(form, context) {
      if ( ! self.in_loop) {
        throw new MananaError('Continue statement can only exist inside loop!', form.loc);
      }
      self.continue_loop = true;
      return '';
    }; // end Manana.Continue()
    
    // ...........................................  
    this.MananaString = function(form, context) {
      var i = 0, res = '';

      while (form.body[i]) {
        res += self.evalForm(form.body[i], context);
        i++;
      }

      return res;
    } // end Manana.MananaString()

    // ...........................................  
    this.Tag = function(form, context) {
      var html, attr_tpl, content, i, kv;

      html = '<{tag}{attrs}>{body}</{tag}>'; 
      attr_tpl = ' {key}="{val}"'; 
      content = { tag: form.tag, attrs: '', body: '' };

      if (isArr(form.attrs)) {
        i = 0;
        while (form.attrs[i]) {
          kv = {};
          if (form.attrs[i][0] == "src" && form.tag == "a") {
            kv.key = "href";
          } else {
            kv.key = self.evalForm(form.attrs[i][0], context);
          } 
          kv.val = self.evalForm(form.attrs[i][1], context); 
          content.attrs += attr_tpl.strFmt(kv); 
          i++; 
        }
      }

      if (isArr(form.body)) {
        i = 0;
        while (form.body[i]) {
          content.body += self.evalForm(form.body[i], context);
          i++;
        }
      }

      return html.strFmt(content);
    }; // end Manana.Tag()

    // ...........................................  
    this.CodeTag = function(form, context) {
      var html, attr_tpl, content, i, kv;

      html = '<{tag}{attrs}>{body}</{tag}>'; 
      attr_tpl = ' {key}="{val}"'; 
      content = { tag: form.tag, attrs: '', body: '' };

      if (isArr(form.attrs)) {
        i = 0;
        while (form.attrs[i]) {
          kv = {};
          if (form.attrs[i][0] == "src" && form.tag == "a") {
            kv.key = "href";
          } else {
            kv.key = self.evalForm(form.attrs[i][0], context);
          } 
          kv.val = self.evalForm(form.attrs[i][1], context); 
          content.attrs += attr_tpl.strFmt(kv); 
          i++; 
        }
      }

      content.body = "\n" + form.body.join("\n");

      return html.strFmt(content);
    }; // end Manana.PreTag()

    // ...........................................  
    this.VoidTag = function(form, context) {
      var html, attr_tpl, content, i;

      html = '<{tag}{attrs}>';
      attr_tpl = ' {key}="{val}"';
      content = { tag: form.tag, attrs: '' };

      if (isArr(form.attrs)) {
        i = 0;
        while (form.attrs[i]) {
          content.attrs += attr_tpl.strFmt({ 
                             key: self.evalForm(form.attrs[i][0], context), 
                             val: self.evalForm(form.attrs[i][1], context)
                           })
          i++; 
        }
      }

      return html.strFmt(content);
    }; // end Manana.VoidTag()

    // ...........................................  
    this.Text = function(form, context) {
      var i = 0, res = [];
      while ( ! is(form.body[i], "undefined")) {
        res.push(self.evalForm(form.body[i], context));
        i++;
      }
      return res.join(' ');
    }; // end Manana.Text()

    // ...........................................  
    this.Filter = function(form, context) {
      var i = 0, res = [];
      while ( ! is(form.body[i], "undefined")) {
        res.push(self.evalForm(form.body[i], context));
        i++;
      }
      return res.join(' ');
    }; // end Manana.Filter()

    // ...........................................  
    this.format = function(html, indent, indent_level, loc) {
      var orig_indent_level, tokens, extract_close_tag, open_tags, void_tags, padding, tag, i, t, r;

      if (is(html, "undefined")) {
        throw new MananaError("format() functions requires render() to be run first");
      }

      if (is(indent, "undefined")) {
        throw new MananaError("format() requires and indentation string for its 2nd arg.");
      }

      if (is(indent_level, "undefined")) {
        indent_level = 0;
      }

      function line(token, indent_plus_one) {
        if ( ! is(indent_plus_one, "undefined")) {
          padding = indent.repeat(indent_level + 1);
        } else {
          padding = indent.repeat(indent_level);
        }
        return '{p}{t}'.strFmt({p:padding, t:token})
      }

      function is_main_block(tag) {
        return ['html', 'head', 'body'].indexOf(tag) > -1;
      }

      void_tags = [
        "area", "base", "br", "col", "embed", "hr", "img", "input", "keygen",
        "link", "menuitem", "meta", "param", "source", "track", "wbr"
      ];

      orig_indent_level = indent_level;
      tokens = self.result.split(/(<[^>]+>)/);
      open_tags = [];
     
      r = [];
      for (i in tokens) {
        t = tokens[i];

        if (t.length) {
          if ('<!' == t.slice(0, 2)) {
            r.push(line(t));
          } else if ('</' == t.slice(0, 2)) {
            r.push(line(t));
            tag = t.replace(/[<>\/ ]/g, '');
            if (tag == open_tags[open_tags.length-1]) {
              open_tags.pop();
              indent_level--;
            }
          } else if ('<' == t[0]) {
            tag = t.split(' ')[0].slice(1).replace('>', '');
            if (void_tags.indexOf(tag) == -1) {
              open_tags.push(tag);
              indent_level++;
            }
            if (is_main_block(tag)) {
              indent_level = orig_indent_level;
            }
            r.push(line(t))
          } else {
            r.push(line(t, indent_level))
          }
        }
      }
    
      return r.join("\n");
    }; // end Manana.format()

    // ...........................................  
    this.encode = function(html) {
      return String(html)
               .replace( /&/g, '&amp;'  )
               .replace( /"/g, '&quot;' )
               .replace( /'/g, '&#39;'  )
               .replace( /</g, '&lt;'   )
               .replace( />/g, '&gt;'   );
    }; // end Manana.encode()

    // ...........................................  
    this.decode = function(encoded) {
      return String(encoded)
               .replace( /&amp;/g  , '&' )
               .replace( /&quot;/g , '"' )
               .replace( /&\#39;/g , "'" )
               .replace( /&lt;/g   , '<' )
               .replace( /&gt;/g   , '>' );
    }; // end Manana.decode()

    // ...........................................  
    this.bottle = function(code, context) {
      var i, lines, line, indent_pat, indent, brew;

      if (is(context, "undefined")) {
        context = {};
      }

      try {
        self.parser.parse(code);
      } catch (e) {
        throw new MananaError("Invalid Mañana code sent to Bottle method.");
      }

      try {
        JSON.parse(JSON.stringify(context));
      } catch (e) {
        throw new MananaError("Invalid context sent to Bottle method.");
      }

      lines = code.split(/\n/g);
      indent_pat = /^([\t\s][\t\s]*)/;

      brew = '#ñ(role="template")';
      for (i in lines) {
        line = lines[i];

        indent = line.match(indent_pat);
        if (indent === null) {
          indent = 0;
        } else {
          indent = indent[1].length;
        }

        line = line.replace(indent_pat, '');
        brew += '#ñ{' + indent + '}' + line;
      }

      brew += '#ñ(role="context")' + JSON.stringify(context);

      return brew;
    }; // end Manana.bottle()

    // ...........................................  
    this.pour = function(brew, indent_char) {
      var parts, tpl, ctx, i, lines, line, indent;

      if ( ! /^\#ñ\(role="template"\)(?=\#ñ\{)/.test(brew)) {
        throw new MananaError("Invalid brew provided to Unbottle method.");
      }

      brew = brew.replace('#ñ(role="template")', '');
      parts = brew.split('#ñ(role="context")');
      tpl = parts[0];
      ctx = parts[1];

      try {
        ctx = JSON.parse(ctx);
      } catch (e) {
        throw new MananaError("Invalid context provided to Unbottle method.");
      }

      if ( ! indent_char) {
        indent_char = ' ';
      }

      lines = tpl.split(/(\#ñ\{[0-9][0-9]*\})/g);
      if (lines[0] === '') {
        lines = lines.slice(1);
      }

      tpl = '';
      for (i=0, l=lines.length; i < l; i += 2) {
        indent = lines[i]
                   .replace( '#ñ{' , '')
                   .replace( '}'   , '');
        indent = indent_char.repeat(parseInt(indent));

        line = lines[i + 1];

        tpl += indent + line + "\n";
      }

      try {
        self.parser.parse(tpl);
      } catch (e) {
        throw new MananaError("Invalid Mañana code pourd..");
      }

      return { "template": tpl, "context": ctx }
    }; // end Manana.pour()

    // ...........................................  
    this.Function = function(form, context) {
      var fn_name, i, args, res;

      fn_name = form.name;

      if (is(self.fns[fn_name], "undefined")) {
        throw new MananaError(
                    "Function '{name}' is not defined. Call 'Manana.add_fn(name, fn)' to add it"
                    .strFmt(form)
                  );
      }

      if ( ! is(self.fns[fn_name], "function")) {
        throw new MananaError("'{name}' is not a function".strFmt(form));
      }

      args = [];
      if (form.args) {
        i = 0;
        while ( ! is(form.args[i], "undefined")) {
          args.push(self.evalForm(form.args[i], context));
          i++;
        }
      }
      args.push(form);

      try {
        res = self.fns[fn_name].apply(self, args);
      } catch (e) {
        throw new MananaError(e, form.loc);
      }

      return res;
    }; // end Manana.Function()

    // ...........................................  
    self.fns.debug = function(form) {
      console.log('view: ', self.view);
      console.log('context: ', self.context);
      console.log('Manana: ', self);
      return '';
    }; // end Manana.debug()

    // ...........................................  
    self.fns.print = function(form) {
      var res = '', i = 0;
      while ( ! is(arguments[i], "undefined")) {
        res += JSON.stringify(arguments[i], null, 4);
        i++;
      }
      return res;
    }; // end Manana.print()

    // ...........................................  
    self.fns.context = function(form) {
      return JSON.stringify(self.context);
    }; // end Manana.context()

    // ...........................................  
    self.fns.view = function(form) {
      var out = JSON.stringify(self.view, null, 4).split("\n")
      out.unshift("<pre>");
      out.push("</pre>");
      return out.join("\n    ");
    }; // end Manana.view()

    // ...........................................  
    self.fns.whatis = function(x, form) {
      var description;

      try {
        description = '@whatis({target}) ==> '.strFmt({ target: form.args[0].components.join('.') });
      } catch (e) {
        description = '@whatis() ==> ';
      }

      console.log(description, x);

      return '<h2>' + description + '<pre>' + JSON.stringify(x, null, 4) + '</pre>';
    };

    // ...........................................  
    this.addFunction = function(name, fn) {
      if ( ! isStr(name)) {
        throw new MananaError("1st arg to Manana.add_fn() must be a string");
      }

      if ( ! is(fn, "function")) {
        throw new MananaError("2nd arg to Manana.add_fn() must be a function");
      }

      self.fns[name] = fn;
    }; // end Manana.add_fn()

    this.add_fn = this.addFunction; // switching to camelcase, leaving for backward compatability

  } // end Manana() 


  // _____________________________________________ Make available in both node.js & browser 
  if (_manana_is_server_side) {
    exports['Manana'] = Manana;
    exports['MananaNamespace'] = MananaNamespace;
    exports['MananaView'] = MananaView;
    exports['MananaError'] = MananaError;
  }

  if (typeof window === 'undefined') {
    window = {};
  }
  window['Manana'] = Manana;
  window['MananaNamespace'] = MananaNamespace;
  window['MananaView'] = MananaView;
  window['MananaError'] = MananaError;

})(typeof exports === "undefined" ? {} : exports);
