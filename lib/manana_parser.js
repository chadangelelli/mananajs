/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var manana_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"prog_list":4,"EOF":5,"stmt":6,"block":7,"INDENT":8,"stmt_list":9,"DEDENT":10,"html_stmt":11,"void_tag_stmt":12,"code_tag_stmt":13,"tag_stmt":14,"raw_text_stmt":15,"filter_stmt":16,"alias_stmt":17,"unalias_stmt":18,"include_stmt":19,"with_stmt":20,"if_stmt":21,"switch_stmt":22,"for_stmt":23,"name":24,"fn":25,"break":26,"continue":27,"HTML":28,"i_html":29,"I_HTML_START":30,"i_html_text":31,"I_HTML_END":32,"i_html_text_el":33,"I_HTML_TEXT":34,"VOID_TAG":35,"END_TAG":36,"tag_attrs":37,"CODE_TAG":38,"END_CODE_TAG":39,"code":40,"line":41,"LINE":42,"BLANK_LINE":43,"TAG":44,"tag_text":45,"TAG_TEXT":46,"RAW_TEXT":47,"tag_attr":48,"tag_attr_args":49,"TAG_ID":50,"TAG_SRC":51,"TAG_SRC_I_STRING":52,"string":53,"tag_classes":54,"TAG_ATTR":55,"EQ":56,"TAG_DATA_ATTR":57,"LPAREN":58,"tag_attr_arg_list":59,"RPAREN":60,"LBRACE":61,"tag_attr_arg_list_alt":62,"RBRACE":63,"tag_attr_arg":64,"COMMA":65,"tag_attr_arg_alt":66,"COLON":67,"TAG_CLASS":68,"FILTER":69,"text":70,"word_list":71,"word":72,"WORD":73,"SPACE":74,"path_or_fn":75,"path":76,"WITH":77,"END_EXPR":78,"FOR":79,"ID":80,"IN":81,"BREAK":82,"CONTINUE":83,"ifs":84,"if":85,"else":86,"elifs":87,"IF":88,"conds":89,"elif":90,"ELIF":91,"cond":92,"AND":93,"OR":94,"ev":95,"NOT":96,"COND":97,"IS":98,"TYPE":99,"EXISTS":100,"ELSE":101,"INT":102,"BOOL":103,"CASE":104,"cases":105,"case":106,"WHEN":107,"ALIAS":108,"AS":109,"UNALIAS":110,"INCLUDE":111,"id":112,"DOT":113,"meths":114,"LBRACK":115,"RBRACK":116,"meth":117,"meth_args":118,"meth_arg":119,"FN":120,"fn_args":121,"fn_arg":122,"hash":123,"hash_data":124,"hash_pair":125,"hash_val":126,"START_NAME":127,"STRING":128,"i_string":129,"I_STRING_D":130,"i_string_text":131,"END_I_STRING_D":132,"I_STRING_S":133,"END_I_STRING_S":134,"i_string_text_el":135,"I_STRING_TEXT":136,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",10:"DEDENT",28:"HTML",30:"I_HTML_START",32:"I_HTML_END",34:"I_HTML_TEXT",35:"VOID_TAG",36:"END_TAG",38:"CODE_TAG",39:"END_CODE_TAG",42:"LINE",43:"BLANK_LINE",44:"TAG",46:"TAG_TEXT",47:"RAW_TEXT",50:"TAG_ID",51:"TAG_SRC",52:"TAG_SRC_I_STRING",55:"TAG_ATTR",56:"EQ",57:"TAG_DATA_ATTR",58:"LPAREN",60:"RPAREN",61:"LBRACE",63:"RBRACE",65:"COMMA",67:"COLON",68:"TAG_CLASS",69:"FILTER",73:"WORD",74:"SPACE",77:"WITH",78:"END_EXPR",79:"FOR",80:"ID",81:"IN",82:"BREAK",83:"CONTINUE",88:"IF",91:"ELIF",93:"AND",94:"OR",96:"NOT",97:"COND",98:"IS",99:"TYPE",100:"EXISTS",101:"ELSE",102:"INT",103:"BOOL",104:"CASE",107:"WHEN",108:"ALIAS",109:"AS",110:"UNALIAS",111:"INCLUDE",113:"DOT",115:"LBRACK",116:"RBRACK",120:"FN",127:"START_NAME",128:"STRING",130:"I_STRING_D",132:"END_I_STRING_D",133:"I_STRING_S",134:"END_I_STRING_S",136:"I_STRING_TEXT"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,3],[9,2],[9,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,1],[11,1],[29,3],[31,2],[31,1],[33,1],[33,1],[12,2],[12,3],[13,4],[13,5],[40,2],[40,1],[41,2],[41,1],[14,2],[14,3],[14,3],[14,3],[14,4],[14,4],[45,1],[45,1],[37,2],[37,1],[37,1],[48,1],[48,1],[48,2],[48,1],[48,3],[48,3],[49,3],[49,3],[59,2],[59,1],[64,3],[64,4],[64,3],[64,4],[62,2],[62,1],[66,3],[66,4],[66,3],[66,4],[54,2],[54,1],[15,1],[16,4],[70,1],[71,1],[71,2],[72,1],[72,1],[72,1],[72,1],[72,1],[75,1],[75,1],[20,4],[23,6],[23,6],[26,1],[27,1],[21,1],[84,1],[84,2],[84,2],[84,3],[85,4],[87,2],[87,1],[90,4],[89,1],[89,3],[89,3],[92,1],[92,2],[92,3],[92,3],[92,4],[92,3],[92,4],[92,2],[92,3],[86,3],[95,1],[95,1],[95,1],[95,1],[95,1],[22,6],[22,7],[105,1],[105,2],[106,4],[17,5],[18,3],[19,3],[19,3],[76,1],[76,3],[76,3],[112,1],[112,4],[112,6],[112,6],[112,4],[112,6],[112,6],[112,5],[112,5],[112,4],[114,1],[114,3],[117,3],[117,4],[118,3],[118,1],[119,1],[119,1],[119,1],[25,3],[25,4],[121,3],[121,1],[122,1],[122,1],[122,1],[122,1],[122,1],[122,1],[122,1],[122,3],[122,3],[122,3],[122,3],[122,3],[122,3],[122,3],[123,3],[123,4],[124,3],[124,1],[125,3],[126,1],[126,1],[126,1],[126,1],[126,1],[126,1],[24,3],[53,1],[53,1],[129,3],[129,3],[131,2],[131,1],[135,1],[135,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0-1]; 
break;
case 6: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = [$$[$0]]; 
break;
case 25: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 27: 
      var body = [$$[$0-2]];
      body.push.apply(body, $$[$0-1]);
      body.push($$[$0]);
      this.$ = new MananaStringNode(body, new Loc(_$[$0-2], _$[$0])); 
    
break;
case 28: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 29: this.$ = [$$[$0]]; 
break;
case 32: this.$ = new VoidTagNode($$[$0-1], null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 33: this.$ = new VoidTagNode($$[$0-2], $$[$0-1],   new Loc(_$[$0-2], _$[$0-1])); 
break;
case 34: this.$ = new CodeTagNode($$[$0-3], null, $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 35: this.$ = new CodeTagNode($$[$0-4], $$[$0-3],   $$[$0-1], new Loc(_$[$0-4], _$[$0-1])); 
break;
case 36: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 37: this.$ = [$$[$0]]; 
break;
case 38: this.$ = $$[$0-1] + $$[$0] 
break;
case 39: this.$ = ''; 
break;
case 40: this.$ = new TagNode($$[$0-1], null, null, null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 41: this.$ = new TagNode($$[$0-2], null, $$[$0-1],   null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 42: this.$ = new TagNode($$[$0-2], null, null, $$[$0],   new Loc(_$[$0-2], _$[$0])); 
break;
case 43: this.$ = new TagNode($$[$0-2], $$[$0-1],   null, null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 44: this.$ = new TagNode($$[$0-3], $$[$0-2],   $$[$0-1],   null, new Loc(_$[$0-3], _$[$0-1])); 
break;
case 45: this.$ = new TagNode($$[$0-3], $$[$0-2],   null, $$[$0],   new Loc(_$[$0-3], _$[$0])); 
break;
case 46: this.$ = new RawTextNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 47: this.$ = new RawTextNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 48: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 49: this.$ = [$$[$0]]; 
break;
case 50: this.$ = $$[$0]; 
break;
case 51: this.$ = ['id', $$[$0]]; 
break;
case 52: this.$ = ['src', new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])) ]; 
break;
case 53: this.$ = ['src', $$[$0]]; 
break;
case 54: this.$ = ['class', $$[$0].join(" ")]; 
break;
case 55: this.$ = ['attr', $$[$0-2], $$[$0]]; 
break;
case 56: this.$ = ['data', $$[$0-2], $$[$0]]; 
break;
case 57: this.$ = $$[$0-1]; 
break;
case 58: this.$ = $$[$0-1]; 
break;
case 59: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 60: this.$ = [$$[$0]]; 
break;
case 61: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 62: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 63: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 64: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 65: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 66: this.$ = [$$[$0]]; 
break;
case 67: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 68: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 69: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 70: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 71: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 72: this.$ = [$$[$0]]; 
break;
case 73: this.$ = new RawTextNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 74: this.$ = new FilterNode($$[$0-3], $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 75: this.$ = new TextNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 76: this.$ = [$$[$0]]; 
break;
case 77: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 85: this.$ = new WithNode($$[$0-2], $$[$0], new Loc(_$[$0-3], _$[$0])); 
break;
case 86: this.$ = new ForNode($$[$0-4], $$[$0-2], $$[$0], new Loc(_$[$0-5], _$[$0])); 
break;
case 87: this.$ = new ForNode($$[$0-4], $$[$0-2], $$[$0], new Loc(_$[$0-5], _$[$0])); 
break;
case 88: this.$ = new BreakNode(new Loc(_$[$0], _$[$0])); 
break;
case 89: this.$ = new ContinueNode(new Loc(_$[$0], _$[$0])); 
break;
case 90: this.$ = new IfNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 91: this.$ = [$$[$0]]; 
break;
case 92: this.$ = [$$[$0-1], $$[$0]]; 
break;
case 93: this.$ = [$$[$0-1]]; this.$.push.apply(this.$, $$[$0]); 
break;
case 94: this.$ = [$$[$0-2]]; this.$.push.apply(this.$, $$[$0-1]); this.$.push($$[$0]); 
break;
case 95: this.$ = { "case": $$[$0-3], conditions: $$[$0-2], body: $$[$0] }; 
break;
case 96: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 97: this.$ = [$$[$0]]; 
break;
case 98: this.$ = { "case": $$[$0-3], conditions: $$[$0-2], body: $$[$0] }; 
break;
case 99: this.$ = [[null,  $$[$0]]]; 
break;
case 100: this.$ = $$[$0-2]; this.$.push([$$[$0-1], $$[$0]]); 
break;
case 101: this.$ = $$[$0-2]; this.$.push([$$[$0-1], $$[$0]]); 
break;
case 102: this.$ = ["true", $$[$0]]; 
break;
case 103: this.$ = ["not_true", $$[$0-1]]; 
break;
case 104: this.$ = [$$[$0-1], $$[$0-2], $$[$0]]; 
break;
case 105: this.$ = [$$[$0-1], $$[$0-2], $$[$0]]; 
break;
case 106: this.$ = ["not_is", $$[$0-3], $$[$0]]; 
break;
case 107: this.$ = [$$[$0-1], $$[$0-2], $$[$0]]; 
break;
case 108: this.$ = ["not_in", $$[$0-3], $$[$0]]; 
break;
case 109: this.$ = [$$[$0-1], $$[$0]]; 
break;
case 110: this.$ = ["not_exists", $$[$0-1]]; 
break;
case 111: this.$ = { "case": $$[$0-2], "body": $$[$0] }; 
break;
case 117: this.$ = new SwitchNode($$[$0-4], $$[$0-1], null   , new Loc(_$[$0-5], _$[$0])); 
break;
case 118: this.$ = new SwitchNode($$[$0-5], $$[$0-2], $$[$0-1].body, new Loc(_$[$0-6], _$[$0])); 
break;
case 119: this.$ = [$$[$0]]; 
break;
case 120: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 121: this.$ = { value: $$[$0-2], block: $$[$0] }; 
break;
case 122: this.$ = new AliasNode($$[$0-3], $$[$0-1], new Loc(_$[$0-4], _$[$0])); 
break;
case 123: this.$ = new UnaliasNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 124: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 125: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 126: this.$ = new PathNode(null, $$[$0]  , null, new Loc(_$[$0], _$[$0])); 
break;
case 127: this.$ = new PathNode($$[$0-2]  , $$[$0]  , null, new Loc(_$[$0-2], _$[$0])); 
break;
case 128: this.$ = new PathNode($$[$0-2]  , null, $$[$0]  , new Loc(_$[$0-2], _$[$0])); 
break;
case 129: this.$ = new IdNode($$[$0], null, null, new Loc(_$[$0], _$[$0])); 
break;
case 130: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 131: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 132: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 133: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 134: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 135: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 136: this.$ = new IdNode($$[$0-4], 0   , $$[$0-1]  , new Loc(_$[$0-4], _$[$0])); 
break;
case 137: this.$ = new IdNode($$[$0-4], $$[$0-2]  , '*' , new Loc(_$[$0-4], _$[$0])); 
break;
case 138: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 139: this.$ = new MethodChainNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 140: this.$ = $$[$0-2]; this.$.chain.push($$[$0])                        ; 
break;
case 141: this.$ = new MethodNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 142: this.$ = new MethodNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 143: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 144: this.$ = [$$[$0]]; 
break;
case 148: this.$ = new FunctionNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 149: this.$ = new FunctionNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 150: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 151: this.$ = [$$[$0]]; 
break;
case 159: this.$ = $$[$0]; 
break;
case 160: this.$ = $$[$0]; 
break;
case 161: this.$ = $$[$0]; 
break;
case 162: this.$ = $$[$0]; 
break;
case 163: this.$ = $$[$0]; 
break;
case 164: this.$ = $$[$0]; 
break;
case 165: this.$ = $$[$0]; 
break;
case 166: this.$ = new MananaHash($$[$0-1]); 
break;
case 167: this.$ = new MananaHash($$[$0-2]); 
break;
case 168: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 169: this.$ = [$$[$0]]; 
break;
case 170: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 177: this.$ = $$[$0-1]; 
break;
case 178: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 180: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 181: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 182: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 183: this.$ = [$$[$0]]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,22],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:[1,23],29:24,30:[1,41],35:[1,25],38:[1,26],44:[1,27],47:[1,28],69:[1,29],77:[1,33],79:[1,36],82:[1,39],83:[1,40],84:34,85:42,88:[1,43],104:[1,35],108:[1,30],110:[1,31],111:[1,32],120:[1,38],127:[1,37]},{1:[3]},{5:[1,44],6:45,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:[1,23],29:24,30:[1,41],35:[1,25],38:[1,26],44:[1,27],47:[1,28],69:[1,29],77:[1,33],79:[1,36],82:[1,39],83:[1,40],84:34,85:42,88:[1,43],104:[1,35],108:[1,30],110:[1,31],111:[1,32],120:[1,38],127:[1,37]},{5:[2,3],28:[2,3],30:[2,3],35:[2,3],38:[2,3],44:[2,3],47:[2,3],69:[2,3],77:[2,3],79:[2,3],82:[2,3],83:[2,3],88:[2,3],104:[2,3],108:[2,3],110:[2,3],111:[2,3],120:[2,3],127:[2,3]},{5:[2,4],28:[2,4],30:[2,4],35:[2,4],38:[2,4],44:[2,4],47:[2,4],69:[2,4],77:[2,4],79:[2,4],82:[2,4],83:[2,4],88:[2,4],104:[2,4],108:[2,4],110:[2,4],111:[2,4],120:[2,4],127:[2,4]},{5:[2,8],10:[2,8],28:[2,8],30:[2,8],35:[2,8],38:[2,8],44:[2,8],47:[2,8],69:[2,8],77:[2,8],79:[2,8],82:[2,8],83:[2,8],88:[2,8],104:[2,8],108:[2,8],110:[2,8],111:[2,8],120:[2,8],127:[2,8]},{5:[2,9],10:[2,9],28:[2,9],30:[2,9],35:[2,9],38:[2,9],44:[2,9],47:[2,9],69:[2,9],77:[2,9],79:[2,9],82:[2,9],83:[2,9],88:[2,9],104:[2,9],108:[2,9],110:[2,9],111:[2,9],120:[2,9],127:[2,9]},{5:[2,10],10:[2,10],28:[2,10],30:[2,10],35:[2,10],38:[2,10],44:[2,10],47:[2,10],69:[2,10],77:[2,10],79:[2,10],82:[2,10],83:[2,10],88:[2,10],104:[2,10],108:[2,10],110:[2,10],111:[2,10],120:[2,10],127:[2,10]},{5:[2,11],10:[2,11],28:[2,11],30:[2,11],35:[2,11],38:[2,11],44:[2,11],47:[2,11],69:[2,11],77:[2,11],79:[2,11],82:[2,11],83:[2,11],88:[2,11],104:[2,11],108:[2,11],110:[2,11],111:[2,11],120:[2,11],127:[2,11]},{5:[2,12],10:[2,12],28:[2,12],30:[2,12],35:[2,12],38:[2,12],44:[2,12],47:[2,12],69:[2,12],77:[2,12],79:[2,12],82:[2,12],83:[2,12],88:[2,12],104:[2,12],108:[2,12],110:[2,12],111:[2,12],120:[2,12],127:[2,12]},{5:[2,13],10:[2,13],28:[2,13],30:[2,13],35:[2,13],38:[2,13],44:[2,13],47:[2,13],69:[2,13],77:[2,13],79:[2,13],82:[2,13],83:[2,13],88:[2,13],104:[2,13],108:[2,13],110:[2,13],111:[2,13],120:[2,13],127:[2,13]},{5:[2,14],10:[2,14],28:[2,14],30:[2,14],35:[2,14],38:[2,14],44:[2,14],47:[2,14],69:[2,14],77:[2,14],79:[2,14],82:[2,14],83:[2,14],88:[2,14],104:[2,14],108:[2,14],110:[2,14],111:[2,14],120:[2,14],127:[2,14]},{5:[2,15],10:[2,15],28:[2,15],30:[2,15],35:[2,15],38:[2,15],44:[2,15],47:[2,15],69:[2,15],77:[2,15],79:[2,15],82:[2,15],83:[2,15],88:[2,15],104:[2,15],108:[2,15],110:[2,15],111:[2,15],120:[2,15],127:[2,15]},{5:[2,16],10:[2,16],28:[2,16],30:[2,16],35:[2,16],38:[2,16],44:[2,16],47:[2,16],69:[2,16],77:[2,16],79:[2,16],82:[2,16],83:[2,16],88:[2,16],104:[2,16],108:[2,16],110:[2,16],111:[2,16],120:[2,16],127:[2,16]},{5:[2,17],10:[2,17],28:[2,17],30:[2,17],35:[2,17],38:[2,17],44:[2,17],47:[2,17],69:[2,17],77:[2,17],79:[2,17],82:[2,17],83:[2,17],88:[2,17],104:[2,17],108:[2,17],110:[2,17],111:[2,17],120:[2,17],127:[2,17]},{5:[2,18],10:[2,18],28:[2,18],30:[2,18],35:[2,18],38:[2,18],44:[2,18],47:[2,18],69:[2,18],77:[2,18],79:[2,18],82:[2,18],83:[2,18],88:[2,18],104:[2,18],108:[2,18],110:[2,18],111:[2,18],120:[2,18],127:[2,18]},{5:[2,19],10:[2,19],28:[2,19],30:[2,19],35:[2,19],38:[2,19],44:[2,19],47:[2,19],69:[2,19],77:[2,19],79:[2,19],82:[2,19],83:[2,19],88:[2,19],104:[2,19],108:[2,19],110:[2,19],111:[2,19],120:[2,19],127:[2,19]},{5:[2,20],10:[2,20],28:[2,20],30:[2,20],35:[2,20],38:[2,20],44:[2,20],47:[2,20],69:[2,20],77:[2,20],79:[2,20],82:[2,20],83:[2,20],88:[2,20],104:[2,20],108:[2,20],110:[2,20],111:[2,20],120:[2,20],127:[2,20]},{5:[2,21],10:[2,21],28:[2,21],30:[2,21],35:[2,21],38:[2,21],44:[2,21],47:[2,21],69:[2,21],77:[2,21],79:[2,21],82:[2,21],83:[2,21],88:[2,21],104:[2,21],108:[2,21],110:[2,21],111:[2,21],120:[2,21],127:[2,21]},{5:[2,22],10:[2,22],28:[2,22],30:[2,22],35:[2,22],38:[2,22],44:[2,22],47:[2,22],69:[2,22],77:[2,22],79:[2,22],82:[2,22],83:[2,22],88:[2,22],104:[2,22],108:[2,22],110:[2,22],111:[2,22],120:[2,22],127:[2,22]},{5:[2,23],10:[2,23],28:[2,23],30:[2,23],35:[2,23],38:[2,23],44:[2,23],47:[2,23],69:[2,23],77:[2,23],79:[2,23],82:[2,23],83:[2,23],88:[2,23],104:[2,23],108:[2,23],110:[2,23],111:[2,23],120:[2,23],127:[2,23]},{5:[2,24],10:[2,24],28:[2,24],30:[2,24],35:[2,24],38:[2,24],44:[2,24],47:[2,24],69:[2,24],77:[2,24],79:[2,24],82:[2,24],83:[2,24],88:[2,24],104:[2,24],108:[2,24],110:[2,24],111:[2,24],120:[2,24],127:[2,24]},{6:47,9:46,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:[1,23],29:24,30:[1,41],35:[1,25],38:[1,26],44:[1,27],47:[1,28],69:[1,29],77:[1,33],79:[1,36],82:[1,39],83:[1,40],84:34,85:42,88:[1,43],104:[1,35],108:[1,30],110:[1,31],111:[1,32],120:[1,38],127:[1,37]},{5:[2,25],10:[2,25],28:[2,25],30:[2,25],35:[2,25],38:[2,25],44:[2,25],47:[2,25],69:[2,25],77:[2,25],79:[2,25],82:[2,25],83:[2,25],88:[2,25],104:[2,25],108:[2,25],110:[2,25],111:[2,25],120:[2,25],127:[2,25]},{5:[2,26],10:[2,26],28:[2,26],30:[2,26],35:[2,26],38:[2,26],44:[2,26],47:[2,26],69:[2,26],77:[2,26],79:[2,26],82:[2,26],83:[2,26],88:[2,26],104:[2,26],108:[2,26],110:[2,26],111:[2,26],120:[2,26],127:[2,26]},{36:[1,48],37:49,48:50,49:51,50:[1,52],51:[1,53],52:[1,54],54:55,55:[1,56],57:[1,57],58:[1,58],61:[1,59],68:[1,60]},{37:62,39:[1,61],48:50,49:51,50:[1,52],51:[1,53],52:[1,54],54:55,55:[1,56],57:[1,57],58:[1,58],61:[1,59],68:[1,60]},{36:[1,63],37:65,45:64,46:[1,66],47:[1,67],48:50,49:51,50:[1,52],51:[1,53],52:[1,54],54:55,55:[1,56],57:[1,57],58:[1,58],61:[1,59],68:[1,60]},{5:[2,73],10:[2,73],28:[2,73],30:[2,73],35:[2,73],38:[2,73],44:[2,73],47:[2,73],69:[2,73],77:[2,73],79:[2,73],82:[2,73],83:[2,73],88:[2,73],104:[2,73],108:[2,73],110:[2,73],111:[2,73],120:[2,73],127:[2,73]},{8:[1,68]},{25:71,75:69,76:70,80:[1,73],112:72,120:[1,38]},{80:[1,74]},{53:75,76:76,80:[1,73],112:72,128:[1,77],129:78,130:[1,79],133:[1,80]},{76:81,80:[1,73],112:72},{5:[2,90],10:[2,90],28:[2,90],30:[2,90],35:[2,90],38:[2,90],44:[2,90],47:[2,90],69:[2,90],77:[2,90],79:[2,90],82:[2,90],83:[2,90],88:[2,90],104:[2,90],108:[2,90],110:[2,90],111:[2,90],120:[2,90],127:[2,90]},{25:87,53:83,76:86,80:[1,73],95:82,102:[1,84],103:[1,85],112:72,120:[1,38],128:[1,77],129:78,130:[1,79],133:[1,80]},{80:[1,88]},{76:89,80:[1,73],112:72},{58:[1,90]},{5:[2,88],10:[2,88],28:[2,88],30:[2,88],35:[2,88],38:[2,88],44:[2,88],47:[2,88],69:[2,88],77:[2,88],79:[2,88],82:[2,88],83:[2,88],88:[2,88],104:[2,88],108:[2,88],110:[2,88],111:[2,88],120:[2,88],127:[2,88]},{5:[2,89],10:[2,89],28:[2,89],30:[2,89],35:[2,89],38:[2,89],44:[2,89],47:[2,89],69:[2,89],77:[2,89],79:[2,89],82:[2,89],83:[2,89],88:[2,89],104:[2,89],108:[2,89],110:[2,89],111:[2,89],120:[2,89],127:[2,89]},{24:94,31:91,33:92,34:[1,93],127:[1,37]},{5:[2,91],10:[2,91],28:[2,91],30:[2,91],35:[2,91],38:[2,91],44:[2,91],47:[2,91],69:[2,91],77:[2,91],79:[2,91],82:[2,91],83:[2,91],86:95,87:96,88:[2,91],90:98,91:[1,99],101:[1,97],104:[2,91],108:[2,91],110:[2,91],111:[2,91],120:[2,91],127:[2,91]},{25:87,53:83,76:86,80:[1,73],89:100,92:101,95:102,96:[1,103],100:[1,104],102:[1,84],103:[1,85],112:72,120:[1,38],128:[1,77],129:78,130:[1,79],133:[1,80]},{1:[2,1]},{5:[2,2],28:[2,2],30:[2,2],35:[2,2],38:[2,2],44:[2,2],47:[2,2],69:[2,2],77:[2,2],79:[2,2],82:[2,2],83:[2,2],88:[2,2],104:[2,2],108:[2,2],110:[2,2],111:[2,2],120:[2,2],127:[2,2]},{6:106,10:[1,105],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:20,27:21,28:[1,23],29:24,30:[1,41],35:[1,25],38:[1,26],44:[1,27],47:[1,28],69:[1,29],77:[1,33],79:[1,36],82:[1,39],83:[1,40],84:34,85:42,88:[1,43],104:[1,35],108:[1,30],110:[1,31],111:[1,32],120:[1,38],127:[1,37]},{10:[2,7],28:[2,7],30:[2,7],35:[2,7],38:[2,7],44:[2,7],47:[2,7],69:[2,7],77:[2,7],79:[2,7],82:[2,7],83:[2,7],88:[2,7],104:[2,7],108:[2,7],110:[2,7],111:[2,7],120:[2,7],127:[2,7]},{5:[2,32],10:[2,32],28:[2,32],30:[2,32],35:[2,32],38:[2,32],44:[2,32],47:[2,32],69:[2,32],77:[2,32],79:[2,32],82:[2,32],83:[2,32],88:[2,32],104:[2,32],108:[2,32],110:[2,32],111:[2,32],120:[2,32],127:[2,32]},{36:[1,107],48:108,50:[1,52],51:[1,53],52:[1,54],54:55,55:[1,56],57:[1,57],68:[1,60]},{36:[2,49],39:[2,49],46:[2,49],47:[2,49],50:[2,49],51:[2,49],52:[2,49],55:[2,49],57:[2,49],68:[2,49]},{36:[2,50],39:[2,50],46:[2,50],47:[2,50],50:[2,50],51:[2,50],52:[2,50],55:[2,50],57:[2,50],68:[2,50]},{36:[2,51],39:[2,51],46:[2,51],47:[2,51],50:[2,51],51:[2,51],52:[2,51],55:[2,51],57:[2,51],68:[2,51]},{36:[2,52],39:[2,52],46:[2,52],47:[2,52],50:[2,52],51:[2,52],52:[2,52],55:[2,52],57:[2,52],68:[2,52]},{53:109,128:[1,77],129:78,130:[1,79],133:[1,80]},{36:[2,54],39:[2,54],46:[2,54],47:[2,54],50:[2,54],51:[2,54],52:[2,54],55:[2,54],57:[2,54],68:[1,110]},{56:[1,111]},{56:[1,112]},{55:[1,115],57:[1,116],59:113,64:114},{55:[1,119],57:[1,120],62:117,66:118},{36:[2,72],39:[2,72],46:[2,72],47:[2,72],50:[2,72],51:[2,72],52:[2,72],55:[2,72],57:[2,72],68:[2,72]},{8:[1,123],40:121,41:122,43:[1,124]},{39:[1,125],48:108,50:[1,52],51:[1,53],52:[1,54],54:55,55:[1,56],57:[1,57],68:[1,60]},{5:[2,40],7:126,8:[1,22],10:[2,40],28:[2,40],30:[2,40],35:[2,40],38:[2,40],44:[2,40],47:[2,40],69:[2,40],77:[2,40],79:[2,40],82:[2,40],83:[2,40],88:[2,40],104:[2,40],108:[2,40],110:[2,40],111:[2,40],120:[2,40],127:[2,40]},{36:[1,127]},{36:[1,128],45:129,46:[1,66],47:[1,67],48:108,50:[1,52],51:[1,53],52:[1,54],54:55,55:[1,56],57:[1,57],68:[1,60]},{36:[2,46]},{36:[2,47]},{24:134,25:135,53:136,70:130,71:131,72:132,73:[1,133],74:[1,137],120:[1,38],127:[1,37],128:[1,77],129:78,130:[1,79],133:[1,80]},{109:[1,138]},{109:[2,83],113:[1,139]},{109:[2,84]},{60:[2,126],63:[2,126],65:[2,126],67:[2,126],78:[2,126],81:[2,126],93:[2,126],94:[2,126],96:[2,126],97:[2,126],98:[2,126],109:[2,126],113:[2,126],116:[2,126]},{60:[2,129],63:[2,129],65:[2,129],67:[2,129],78:[2,129],81:[2,129],93:[2,129],94:[2,129],96:[2,129],97:[2,129],98:[2,129],109:[2,129],113:[2,129],115:[1,140],116:[2,129]},{78:[1,141]},{78:[1,142]},{78:[1,143],113:[1,139]},{10:[2,178],36:[2,178],39:[2,178],46:[2,178],47:[2,178],50:[2,178],51:[2,178],52:[2,178],55:[2,178],57:[2,178],60:[2,178],63:[2,178],65:[2,178],68:[2,178],73:[2,178],74:[2,178],78:[2,178],81:[2,178],93:[2,178],94:[2,178],96:[2,178],97:[2,178],98:[2,178],116:[2,178],120:[2,178],127:[2,178],128:[2,178],130:[2,178],133:[2,178]},{10:[2,179],36:[2,179],39:[2,179],46:[2,179],47:[2,179],50:[2,179],51:[2,179],52:[2,179],55:[2,179],57:[2,179],60:[2,179],63:[2,179],65:[2,179],68:[2,179],73:[2,179],74:[2,179],78:[2,179],81:[2,179],93:[2,179],94:[2,179],96:[2,179],97:[2,179],98:[2,179],116:[2,179],120:[2,179],127:[2,179],128:[2,179],130:[2,179],133:[2,179]},{24:146,127:[1,37],131:144,135:145,136:[1,147]},{24:146,127:[1,37],131:148,135:145,136:[1,147]},{78:[1,149],113:[1,139]},{78:[1,150]},{78:[2,112],81:[2,112],93:[2,112],94:[2,112],96:[2,112],97:[2,112],98:[2,112]},{78:[2,113],81:[2,113],93:[2,113],94:[2,113],96:[2,113],97:[2,113],98:[2,113]},{78:[2,114],81:[2,114],93:[2,114],94:[2,114],96:[2,114],97:[2,114],98:[2,114]},{78:[2,115],81:[2,115],93:[2,115],94:[2,115],96:[2,115],97:[2,115],98:[2,115],113:[1,139]},{78:[2,116],81:[2,116],93:[2,116],94:[2,116],96:[2,116],97:[2,116],98:[2,116]},{81:[1,151]},{63:[1,152],113:[1,139]},{25:159,53:158,60:[1,153],61:[1,164],76:156,80:[1,163],99:[1,162],102:[1,157],103:[1,161],112:72,120:[1,38],121:154,122:155,123:160,128:[1,77],129:78,130:[1,79],133:[1,80]},{24:94,32:[1,165],33:166,34:[1,93],127:[1,37]},{32:[2,29],34:[2,29],127:[2,29]},{32:[2,30],34:[2,30],127:[2,30]},{32:[2,31],34:[2,31],127:[2,31]},{5:[2,92],10:[2,92],28:[2,92],30:[2,92],35:[2,92],38:[2,92],44:[2,92],47:[2,92],69:[2,92],77:[2,92],79:[2,92],82:[2,92],83:[2,92],88:[2,92],104:[2,92],108:[2,92],110:[2,92],111:[2,92],120:[2,92],127:[2,92]},{5:[2,93],10:[2,93],28:[2,93],30:[2,93],35:[2,93],38:[2,93],44:[2,93],47:[2,93],69:[2,93],77:[2,93],79:[2,93],82:[2,93],83:[2,93],86:167,88:[2,93],90:168,91:[1,99],101:[1,97],104:[2,93],108:[2,93],110:[2,93],111:[2,93],120:[2,93],127:[2,93]},{78:[1,169]},{5:[2,97],10:[2,97],28:[2,97],30:[2,97],35:[2,97],38:[2,97],44:[2,97],47:[2,97],69:[2,97],77:[2,97],79:[2,97],82:[2,97],83:[2,97],88:[2,97],91:[2,97],101:[2,97],104:[2,97],108:[2,97],110:[2,97],111:[2,97],120:[2,97],127:[2,97]},{25:87,53:83,76:86,80:[1,73],89:170,92:101,95:102,96:[1,103],100:[1,104],102:[1,84],103:[1,85],112:72,120:[1,38],128:[1,77],129:78,130:[1,79],133:[1,80]},{78:[1,171],93:[1,172],94:[1,173]},{78:[2,99],93:[2,99],94:[2,99]},{78:[2,102],81:[1,177],93:[2,102],94:[2,102],96:[1,176],97:[1,174],98:[1,175]},{25:87,53:83,76:86,80:[1,73],95:178,100:[1,179],102:[1,84],103:[1,85],112:72,120:[1,38],128:[1,77],129:78,130:[1,79],133:[1,80]},{25:87,53:83,76:86,80:[1,73],95:180,102:[1,84],103:[1,85],112:72,120:[1,38],128:[1,77],129:78,130:[1,79],133:[1,80]},{5:[2,5],10:[2,5],28:[2,5],30:[2,5],35:[2,5],38:[2,5],44:[2,5],47:[2,5],69:[2,5],77:[2,5],79:[2,5],82:[2,5],83:[2,5],88:[2,5],91:[2,5],101:[2,5],104:[2,5],107:[2,5],108:[2,5],110:[2,5],111:[2,5],120:[2,5],127:[2,5]},{10:[2,6],28:[2,6],30:[2,6],35:[2,6],38:[2,6],44:[2,6],47:[2,6],69:[2,6],77:[2,6],79:[2,6],82:[2,6],83:[2,6],88:[2,6],104:[2,6],108:[2,6],110:[2,6],111:[2,6],120:[2,6],127:[2,6]},{5:[2,33],10:[2,33],28:[2,33],30:[2,33],35:[2,33],38:[2,33],44:[2,33],47:[2,33],69:[2,33],77:[2,33],79:[2,33],82:[2,33],83:[2,33],88:[2,33],104:[2,33],108:[2,33],110:[2,33],111:[2,33],120:[2,33],127:[2,33]},{36:[2,48],39:[2,48],46:[2,48],47:[2,48],50:[2,48],51:[2,48],52:[2,48],55:[2,48],57:[2,48],68:[2,48]},{36:[2,53],39:[2,53],46:[2,53],47:[2,53],50:[2,53],51:[2,53],52:[2,53],55:[2,53],57:[2,53],68:[2,53]},{36:[2,71],39:[2,71],46:[2,71],47:[2,71],50:[2,71],51:[2,71],52:[2,71],55:[2,71],57:[2,71],68:[2,71]},{53:181,128:[1,77],129:78,130:[1,79],133:[1,80]},{53:182,128:[1,77],129:78,130:[1,79],133:[1,80]},{55:[1,115],57:[1,116],60:[1,183],64:184},{55:[2,60],57:[2,60],60:[2,60]},{56:[1,185]},{56:[1,186]},{55:[1,119],57:[1,120],63:[1,187],66:188},{55:[2,66],57:[2,66],63:[2,66]},{67:[1,189]},{67:[1,190]},{8:[1,123],10:[1,191],41:192,43:[1,124]},{8:[2,37],10:[2,37],43:[2,37]},{42:[1,193]},{8:[2,39],10:[2,39],43:[2,39]},{8:[1,123],40:194,41:122,43:[1,124]},{5:[2,42],10:[2,42],28:[2,42],30:[2,42],35:[2,42],38:[2,42],44:[2,42],47:[2,42],69:[2,42],77:[2,42],79:[2,42],82:[2,42],83:[2,42],88:[2,42],104:[2,42],108:[2,42],110:[2,42],111:[2,42],120:[2,42],127:[2,42]},{5:[2,41],10:[2,41],28:[2,41],30:[2,41],35:[2,41],38:[2,41],44:[2,41],47:[2,41],69:[2,41],77:[2,41],79:[2,41],82:[2,41],83:[2,41],88:[2,41],104:[2,41],108:[2,41],110:[2,41],111:[2,41],120:[2,41],127:[2,41]},{5:[2,43],7:195,8:[1,22],10:[2,43],28:[2,43],30:[2,43],35:[2,43],38:[2,43],44:[2,43],47:[2,43],69:[2,43],77:[2,43],79:[2,43],82:[2,43],83:[2,43],88:[2,43],104:[2,43],108:[2,43],110:[2,43],111:[2,43],120:[2,43],127:[2,43]},{36:[1,196]},{10:[1,197]},{10:[2,75],24:134,25:135,53:136,72:198,73:[1,133],74:[1,137],120:[1,38],127:[1,37],128:[1,77],129:78,130:[1,79],133:[1,80]},{10:[2,76],73:[2,76],74:[2,76],120:[2,76],127:[2,76],128:[2,76],130:[2,76],133:[2,76]},{10:[2,78],73:[2,78],74:[2,78],120:[2,78],127:[2,78],128:[2,78],130:[2,78],133:[2,78]},{10:[2,79],73:[2,79],74:[2,79],120:[2,79],127:[2,79],128:[2,79],130:[2,79],133:[2,79]},{10:[2,80],73:[2,80],74:[2,80],120:[2,80],127:[2,80],128:[2,80],130:[2,80],133:[2,80]},{10:[2,81],73:[2,81],74:[2,81],120:[2,81],127:[2,81],128:[2,81],130:[2,81],133:[2,81]},{10:[2,82],73:[2,82],74:[2,82],120:[2,82],127:[2,82],128:[2,82],130:[2,82],133:[2,82]},{80:[1,199]},{80:[1,202],112:200,114:201,117:203},{53:207,67:[1,206],76:205,80:[1,73],102:[1,204],112:72,128:[1,77],129:78,130:[1,79],133:[1,80]},{5:[2,123],10:[2,123],28:[2,123],30:[2,123],35:[2,123],38:[2,123],44:[2,123],47:[2,123],69:[2,123],77:[2,123],79:[2,123],82:[2,123],83:[2,123],88:[2,123],104:[2,123],108:[2,123],110:[2,123],111:[2,123],120:[2,123],127:[2,123]},{5:[2,124],10:[2,124],28:[2,124],30:[2,124],35:[2,124],38:[2,124],44:[2,124],47:[2,124],69:[2,124],77:[2,124],79:[2,124],82:[2,124],83:[2,124],88:[2,124],104:[2,124],108:[2,124],110:[2,124],111:[2,124],120:[2,124],127:[2,124]},{5:[2,125],10:[2,125],28:[2,125],30:[2,125],35:[2,125],38:[2,125],44:[2,125],47:[2,125],69:[2,125],77:[2,125],79:[2,125],82:[2,125],83:[2,125],88:[2,125],104:[2,125],108:[2,125],110:[2,125],111:[2,125],120:[2,125],127:[2,125]},{24:146,127:[1,37],132:[1,208],135:209,136:[1,147]},{127:[2,183],132:[2,183],134:[2,183],136:[2,183]},{127:[2,184],132:[2,184],134:[2,184],136:[2,184]},{127:[2,185],132:[2,185],134:[2,185],136:[2,185]},{24:146,127:[1,37],134:[1,210],135:209,136:[1,147]},{7:211,8:[1,22]},{8:[1,212]},{53:214,76:213,80:[1,73],112:72,128:[1,77],129:78,130:[1,79],133:[1,80]},{5:[2,177],10:[2,177],28:[2,177],30:[2,177],32:[2,177],34:[2,177],35:[2,177],38:[2,177],44:[2,177],47:[2,177],69:[2,177],73:[2,177],74:[2,177],77:[2,177],79:[2,177],82:[2,177],83:[2,177],88:[2,177],104:[2,177],108:[2,177],110:[2,177],111:[2,177],120:[2,177],127:[2,177],128:[2,177],130:[2,177],132:[2,177],133:[2,177],134:[2,177],136:[2,177]},{5:[2,148],10:[2,148],28:[2,148],30:[2,148],35:[2,148],38:[2,148],44:[2,148],47:[2,148],60:[2,148],63:[2,148],65:[2,148],69:[2,148],73:[2,148],74:[2,148],77:[2,148],78:[2,148],79:[2,148],81:[2,148],82:[2,148],83:[2,148],88:[2,148],93:[2,148],94:[2,148],96:[2,148],97:[2,148],98:[2,148],104:[2,148],108:[2,148],109:[2,148],110:[2,148],111:[2,148],120:[2,148],127:[2,148],128:[2,148],130:[2,148],133:[2,148]},{60:[1,215],65:[1,216]},{60:[2,151],65:[2,151]},{60:[2,152],65:[2,152],113:[1,139]},{60:[2,153],65:[2,153]},{60:[2,154],65:[2,154]},{60:[2,155],65:[2,155]},{60:[2,156],65:[2,156]},{60:[2,157],65:[2,157]},{60:[2,158],65:[2,158]},{56:[1,217],60:[2,129],65:[2,129],113:[2,129],115:[1,140]},{80:[1,220],124:218,125:219},{5:[2,27],10:[2,27],28:[2,27],30:[2,27],35:[2,27],38:[2,27],44:[2,27],47:[2,27],69:[2,27],77:[2,27],79:[2,27],82:[2,27],83:[2,27],88:[2,27],104:[2,27],108:[2,27],110:[2,27],111:[2,27],120:[2,27],127:[2,27]},{32:[2,28],34:[2,28],127:[2,28]},{5:[2,94],10:[2,94],28:[2,94],30:[2,94],35:[2,94],38:[2,94],44:[2,94],47:[2,94],69:[2,94],77:[2,94],79:[2,94],82:[2,94],83:[2,94],88:[2,94],104:[2,94],108:[2,94],110:[2,94],111:[2,94],120:[2,94],127:[2,94]},{5:[2,96],10:[2,96],28:[2,96],30:[2,96],35:[2,96],38:[2,96],44:[2,96],47:[2,96],69:[2,96],77:[2,96],79:[2,96],82:[2,96],83:[2,96],88:[2,96],91:[2,96],101:[2,96],104:[2,96],108:[2,96],110:[2,96],111:[2,96],120:[2,96],127:[2,96]},{7:221,8:[1,22]},{78:[1,222],93:[1,172],94:[1,173]},{7:223,8:[1,22]},{25:87,53:83,76:86,80:[1,73],92:224,95:102,96:[1,103],100:[1,104],102:[1,84],103:[1,85],112:72,120:[1,38],128:[1,77],129:78,130:[1,79],133:[1,80]},{25:87,53:83,76:86,80:[1,73],92:225,95:102,96:[1,103],100:[1,104],102:[1,84],103:[1,85],112:72,120:[1,38],128:[1,77],129:78,130:[1,79],133:[1,80]},{25:87,53:83,76:86,80:[1,73],95:226,102:[1,84],103:[1,85],112:72,120:[1,38],128:[1,77],129:78,130:[1,79],133:[1,80]},{99:[1,227]},{81:[1,229],98:[1,228]},{25:87,53:83,76:86,80:[1,73],95:230,102:[1,84],103:[1,85],112:72,120:[1,38],128:[1,77],129:78,130:[1,79],133:[1,80]},{78:[2,103],93:[2,103],94:[2,103]},{25:87,53:83,76:86,80:[1,73],95:231,102:[1,84],103:[1,85],112:72,120:[1,38],128:[1,77],129:78,130:[1,79],133:[1,80]},{78:[2,109],93:[2,109],94:[2,109]},{36:[2,55],39:[2,55],46:[2,55],47:[2,55],50:[2,55],51:[2,55],52:[2,55],55:[2,55],57:[2,55],68:[2,55]},{36:[2,56],39:[2,56],46:[2,56],47:[2,56],50:[2,56],51:[2,56],52:[2,56],55:[2,56],57:[2,56],68:[2,56]},{36:[2,57],39:[2,57],46:[2,57],47:[2,57],50:[2,57],51:[2,57],52:[2,57],55:[2,57],57:[2,57],68:[2,57]},{55:[2,59],57:[2,59],60:[2,59]},{53:232,128:[1,77],129:78,130:[1,79],133:[1,80]},{53:233,128:[1,77],129:78,130:[1,79],133:[1,80]},{36:[2,58],39:[2,58],46:[2,58],47:[2,58],50:[2,58],51:[2,58],52:[2,58],55:[2,58],57:[2,58],68:[2,58]},{55:[2,65],57:[2,65],63:[2,65]},{53:234,128:[1,77],129:78,130:[1,79],133:[1,80]},{53:235,128:[1,77],129:78,130:[1,79],133:[1,80]},{5:[2,34],10:[2,34],28:[2,34],30:[2,34],35:[2,34],38:[2,34],44:[2,34],47:[2,34],69:[2,34],77:[2,34],79:[2,34],82:[2,34],83:[2,34],88:[2,34],104:[2,34],108:[2,34],110:[2,34],111:[2,34],120:[2,34],127:[2,34]},{8:[2,36],10:[2,36],43:[2,36]},{8:[2,38],10:[2,38],43:[2,38]},{8:[1,123],10:[1,236],41:192,43:[1,124]},{5:[2,45],10:[2,45],28:[2,45],30:[2,45],35:[2,45],38:[2,45],44:[2,45],47:[2,45],69:[2,45],77:[2,45],79:[2,45],82:[2,45],83:[2,45],88:[2,45],104:[2,45],108:[2,45],110:[2,45],111:[2,45],120:[2,45],127:[2,45]},{5:[2,44],10:[2,44],28:[2,44],30:[2,44],35:[2,44],38:[2,44],44:[2,44],47:[2,44],69:[2,44],77:[2,44],79:[2,44],82:[2,44],83:[2,44],88:[2,44],104:[2,44],108:[2,44],110:[2,44],111:[2,44],120:[2,44],127:[2,44]},{5:[2,74],10:[2,74],28:[2,74],30:[2,74],35:[2,74],38:[2,74],44:[2,74],47:[2,74],69:[2,74],77:[2,74],79:[2,74],82:[2,74],83:[2,74],88:[2,74],104:[2,74],108:[2,74],110:[2,74],111:[2,74],120:[2,74],127:[2,74]},{10:[2,77],73:[2,77],74:[2,77],120:[2,77],127:[2,77],128:[2,77],130:[2,77],133:[2,77]},{78:[1,237]},{60:[2,127],63:[2,127],65:[2,127],67:[2,127],78:[2,127],81:[2,127],93:[2,127],94:[2,127],96:[2,127],97:[2,127],98:[2,127],109:[2,127],113:[2,127],116:[2,127]},{60:[2,128],63:[2,128],65:[2,128],67:[2,128],78:[2,128],81:[2,128],93:[2,128],94:[2,128],96:[2,128],97:[2,128],98:[2,128],109:[2,128],113:[1,238],116:[2,128]},{58:[1,239],60:[2,129],63:[2,129],65:[2,129],67:[2,129],78:[2,129],81:[2,129],93:[2,129],94:[2,129],96:[2,129],97:[2,129],98:[2,129],109:[2,129],113:[2,129],115:[1,140],116:[2,129]},{60:[2,139],63:[2,139],65:[2,139],67:[2,139],78:[2,139],81:[2,139],93:[2,139],94:[2,139],96:[2,139],97:[2,139],98:[2,139],109:[2,139],113:[2,139],116:[2,139]},{67:[1,241],116:[1,240]},{67:[1,243],113:[1,139],116:[1,242]},{102:[1,244]},{116:[1,245]},{10:[2,180],36:[2,180],39:[2,180],46:[2,180],47:[2,180],50:[2,180],51:[2,180],52:[2,180],55:[2,180],57:[2,180],60:[2,180],63:[2,180],65:[2,180],68:[2,180],73:[2,180],74:[2,180],78:[2,180],81:[2,180],93:[2,180],94:[2,180],96:[2,180],97:[2,180],98:[2,180],116:[2,180],120:[2,180],127:[2,180],128:[2,180],130:[2,180],133:[2,180]},{127:[2,182],132:[2,182],134:[2,182],136:[2,182]},{10:[2,181],36:[2,181],39:[2,181],46:[2,181],47:[2,181],50:[2,181],51:[2,181],52:[2,181],55:[2,181],57:[2,181],60:[2,181],63:[2,181],65:[2,181],68:[2,181],73:[2,181],74:[2,181],78:[2,181],81:[2,181],93:[2,181],94:[2,181],96:[2,181],97:[2,181],98:[2,181],116:[2,181],120:[2,181],127:[2,181],128:[2,181],130:[2,181],133:[2,181]},{5:[2,85],10:[2,85],28:[2,85],30:[2,85],35:[2,85],38:[2,85],44:[2,85],47:[2,85],69:[2,85],77:[2,85],79:[2,85],82:[2,85],83:[2,85],88:[2,85],104:[2,85],108:[2,85],110:[2,85],111:[2,85],120:[2,85],127:[2,85]},{105:246,106:247,107:[1,248]},{78:[1,249],113:[1,139]},{78:[1,250]},{5:[2,149],10:[2,149],28:[2,149],30:[2,149],35:[2,149],38:[2,149],44:[2,149],47:[2,149],60:[2,149],63:[2,149],65:[2,149],69:[2,149],73:[2,149],74:[2,149],77:[2,149],78:[2,149],79:[2,149],81:[2,149],82:[2,149],83:[2,149],88:[2,149],93:[2,149],94:[2,149],96:[2,149],97:[2,149],98:[2,149],104:[2,149],108:[2,149],109:[2,149],110:[2,149],111:[2,149],120:[2,149],127:[2,149],128:[2,149],130:[2,149],133:[2,149]},{25:159,53:158,61:[1,164],76:156,80:[1,163],99:[1,162],102:[1,157],103:[1,161],112:72,120:[1,38],122:251,123:160,128:[1,77],129:78,130:[1,79],133:[1,80]},{25:255,53:254,61:[1,164],76:252,80:[1,73],99:[1,258],102:[1,253],103:[1,257],112:72,120:[1,38],123:256,128:[1,77],129:78,130:[1,79],133:[1,80]},{63:[1,259],65:[1,260]},{63:[2,169],65:[2,169]},{67:[1,261]},{5:[2,111],10:[2,111],28:[2,111],30:[2,111],35:[2,111],38:[2,111],44:[2,111],47:[2,111],69:[2,111],77:[2,111],79:[2,111],82:[2,111],83:[2,111],88:[2,111],104:[2,111],108:[2,111],110:[2,111],111:[2,111],120:[2,111],127:[2,111]},{7:262,8:[1,22]},{5:[2,95],10:[2,95],28:[2,95],30:[2,95],35:[2,95],38:[2,95],44:[2,95],47:[2,95],69:[2,95],77:[2,95],79:[2,95],82:[2,95],83:[2,95],88:[2,95],91:[2,95],101:[2,95],104:[2,95],108:[2,95],110:[2,95],111:[2,95],120:[2,95],127:[2,95]},{78:[2,100],93:[2,100],94:[2,100]},{78:[2,101],93:[2,101],94:[2,101]},{78:[2,104],93:[2,104],94:[2,104]},{78:[2,105],93:[2,105],94:[2,105]},{99:[1,263]},{25:87,53:83,76:86,80:[1,73],95:264,102:[1,84],103:[1,85],112:72,120:[1,38],128:[1,77],129:78,130:[1,79],133:[1,80]},{78:[2,107],93:[2,107],94:[2,107]},{78:[2,110],93:[2,110],94:[2,110]},{55:[2,61],57:[2,61],60:[2,61],65:[1,265]},{55:[2,63],57:[2,63],60:[2,63],65:[1,266]},{55:[2,67],57:[2,67],63:[2,67],65:[1,267]},{55:[2,69],57:[2,69],63:[2,69],65:[1,268]},{5:[2,35],10:[2,35],28:[2,35],30:[2,35],35:[2,35],38:[2,35],44:[2,35],47:[2,35],69:[2,35],77:[2,35],79:[2,35],82:[2,35],83:[2,35],88:[2,35],104:[2,35],108:[2,35],110:[2,35],111:[2,35],120:[2,35],127:[2,35]},{5:[2,122],10:[2,122],28:[2,122],30:[2,122],35:[2,122],38:[2,122],44:[2,122],47:[2,122],69:[2,122],77:[2,122],79:[2,122],82:[2,122],83:[2,122],88:[2,122],104:[2,122],108:[2,122],110:[2,122],111:[2,122],120:[2,122],127:[2,122]},{80:[1,270],117:269},{53:276,60:[1,271],76:274,80:[1,73],102:[1,275],112:72,118:272,119:273,128:[1,77],129:78,130:[1,79],133:[1,80]},{60:[2,130],63:[2,130],65:[2,130],67:[2,130],78:[2,130],81:[2,130],93:[2,130],94:[2,130],96:[2,130],97:[2,130],98:[2,130],109:[2,130],113:[2,130],116:[2,130]},{76:278,80:[1,73],102:[1,277],112:72,116:[1,279]},{60:[2,133],63:[2,133],65:[2,133],67:[2,133],78:[2,133],81:[2,133],93:[2,133],94:[2,133],96:[2,133],97:[2,133],98:[2,133],109:[2,133],113:[2,133],116:[2,133]},{76:281,80:[1,73],102:[1,280],112:72},{116:[1,282]},{60:[2,138],63:[2,138],65:[2,138],67:[2,138],78:[2,138],81:[2,138],93:[2,138],94:[2,138],96:[2,138],97:[2,138],98:[2,138],109:[2,138],113:[2,138],116:[2,138]},{10:[1,283],86:284,101:[1,97],106:285,107:[1,248]},{10:[2,119],101:[2,119],107:[2,119]},{25:87,53:83,76:86,80:[1,73],95:286,102:[1,84],103:[1,85],112:72,120:[1,38],128:[1,77],129:78,130:[1,79],133:[1,80]},{7:287,8:[1,22]},{7:288,8:[1,22]},{60:[2,150],65:[2,150]},{60:[2,159],65:[2,159],113:[1,139]},{60:[2,160],65:[2,160]},{60:[2,161],65:[2,161]},{60:[2,162],65:[2,162]},{60:[2,163],65:[2,163]},{60:[2,164],65:[2,164]},{60:[2,165],65:[2,165]},{60:[2,166],63:[2,166],65:[2,166]},{63:[1,289],80:[1,220],125:290},{25:295,53:294,61:[1,164],76:297,80:[1,73],102:[1,292],103:[1,293],112:72,120:[1,38],123:296,126:291,128:[1,77],129:78,130:[1,79],133:[1,80]},{5:[2,98],10:[2,98],28:[2,98],30:[2,98],35:[2,98],38:[2,98],44:[2,98],47:[2,98],69:[2,98],77:[2,98],79:[2,98],82:[2,98],83:[2,98],88:[2,98],91:[2,98],101:[2,98],104:[2,98],108:[2,98],110:[2,98],111:[2,98],120:[2,98],127:[2,98]},{78:[2,106],93:[2,106],94:[2,106]},{78:[2,108],93:[2,108],94:[2,108]},{55:[2,62],57:[2,62],60:[2,62]},{55:[2,64],57:[2,64],60:[2,64]},{55:[2,68],57:[2,68],63:[2,68]},{55:[2,70],57:[2,70],63:[2,70]},{60:[2,140],63:[2,140],65:[2,140],67:[2,140],78:[2,140],81:[2,140],93:[2,140],94:[2,140],96:[2,140],97:[2,140],98:[2,140],109:[2,140],113:[2,140],116:[2,140]},{58:[1,239]},{60:[2,141],63:[2,141],65:[2,141],67:[2,141],78:[2,141],81:[2,141],93:[2,141],94:[2,141],96:[2,141],97:[2,141],98:[2,141],109:[2,141],113:[2,141],116:[2,141]},{60:[1,298],65:[1,299]},{60:[2,144],65:[2,144]},{60:[2,145],65:[2,145],113:[1,139]},{60:[2,146],65:[2,146]},{60:[2,147],65:[2,147]},{116:[1,300]},{113:[1,139],116:[1,301]},{60:[2,137],63:[2,137],65:[2,137],67:[2,137],78:[2,137],81:[2,137],93:[2,137],94:[2,137],96:[2,137],97:[2,137],98:[2,137],109:[2,137],113:[2,137],116:[2,137]},{116:[1,302]},{113:[1,139],116:[1,303]},{60:[2,136],63:[2,136],65:[2,136],67:[2,136],78:[2,136],81:[2,136],93:[2,136],94:[2,136],96:[2,136],97:[2,136],98:[2,136],109:[2,136],113:[2,136],116:[2,136]},{5:[2,117],10:[2,117],28:[2,117],30:[2,117],35:[2,117],38:[2,117],44:[2,117],47:[2,117],69:[2,117],77:[2,117],79:[2,117],82:[2,117],83:[2,117],88:[2,117],104:[2,117],108:[2,117],110:[2,117],111:[2,117],120:[2,117],127:[2,117]},{10:[1,304]},{10:[2,120],101:[2,120],107:[2,120]},{78:[1,305]},{5:[2,86],10:[2,86],28:[2,86],30:[2,86],35:[2,86],38:[2,86],44:[2,86],47:[2,86],69:[2,86],77:[2,86],79:[2,86],82:[2,86],83:[2,86],88:[2,86],104:[2,86],108:[2,86],110:[2,86],111:[2,86],120:[2,86],127:[2,86]},{5:[2,87],10:[2,87],28:[2,87],30:[2,87],35:[2,87],38:[2,87],44:[2,87],47:[2,87],69:[2,87],77:[2,87],79:[2,87],82:[2,87],83:[2,87],88:[2,87],104:[2,87],108:[2,87],110:[2,87],111:[2,87],120:[2,87],127:[2,87]},{60:[2,167],63:[2,167],65:[2,167]},{63:[2,168],65:[2,168]},{63:[2,170],65:[2,170]},{63:[2,171],65:[2,171]},{63:[2,172],65:[2,172]},{63:[2,173],65:[2,173]},{63:[2,174],65:[2,174]},{63:[2,175],65:[2,175]},{63:[2,176],65:[2,176],113:[1,139]},{60:[2,142],63:[2,142],65:[2,142],67:[2,142],78:[2,142],81:[2,142],93:[2,142],94:[2,142],96:[2,142],97:[2,142],98:[2,142],109:[2,142],113:[2,142],116:[2,142]},{53:276,76:274,80:[1,73],102:[1,275],112:72,119:306,128:[1,77],129:78,130:[1,79],133:[1,80]},{60:[2,131],63:[2,131],65:[2,131],67:[2,131],78:[2,131],81:[2,131],93:[2,131],94:[2,131],96:[2,131],97:[2,131],98:[2,131],109:[2,131],113:[2,131],116:[2,131]},{60:[2,132],63:[2,132],65:[2,132],67:[2,132],78:[2,132],81:[2,132],93:[2,132],94:[2,132],96:[2,132],97:[2,132],98:[2,132],109:[2,132],113:[2,132],116:[2,132]},{60:[2,134],63:[2,134],65:[2,134],67:[2,134],78:[2,134],81:[2,134],93:[2,134],94:[2,134],96:[2,134],97:[2,134],98:[2,134],109:[2,134],113:[2,134],116:[2,134]},{60:[2,135],63:[2,135],65:[2,135],67:[2,135],78:[2,135],81:[2,135],93:[2,135],94:[2,135],96:[2,135],97:[2,135],98:[2,135],109:[2,135],113:[2,135],116:[2,135]},{5:[2,118],10:[2,118],28:[2,118],30:[2,118],35:[2,118],38:[2,118],44:[2,118],47:[2,118],69:[2,118],77:[2,118],79:[2,118],82:[2,118],83:[2,118],88:[2,118],104:[2,118],108:[2,118],110:[2,118],111:[2,118],120:[2,118],127:[2,118]},{7:307,8:[1,22]},{60:[2,143],65:[2,143]},{10:[2,121],101:[2,121],107:[2,121]}],
defaultActions: {44:[2,1],66:[2,46],67:[2,47],71:[2,84]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* tracing/debugging functions */

function Loc(start, end) {
  this.start = { line: start.first_line, column: start.first_column };
  this.end = { line: end.last_line, column: end.last_column };
}

/* Manana data types */

function MananaHash(data, loc) {
  var hash = {}, i = 0;

  while (data[i]) {
    hash[data[i][0]] = data[i][1];
    i++;
  }

  return hash;
}

/* AST nodes */

function VoidTagNode(tag, attrs, loc) {
  this.type = "VoidTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
}

function CodeTagNode(tag, attrs, code, loc) {
  this.type = "CodeTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = code;
}

function TagNode(tag, attrs, text, block, loc) {
  this.type = "Tag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = text ? [text] : block;
}

function RawTextNode(text, loc) {
  this.type = "RawText";
  this.body = text;
  this.loc = loc;
}

function TextNode(words, loc) {
  this.type = "Text";
  this.loc = loc;

  var w = words, t = [], s = [], i = 0; 

  while (typeof w[i] !== "undefined") {
    if (typeof w[i] === "string") {
      s.push(w[i]);
    } else {
      if (s.length) {
        t.push(s.join(' '));
        s = [];
      }
      t.push(w[i]);
    }
    i++;
  }
  if (s.length) {
    t.push(s.join(' '));
  }

  this.body = t;
}

function NameNode(path, loc) {
  this.type = "Name";
  this.loc = loc;
  this.body = path;
}

function WithNode(path, body, loc) {
  this.type = "With";
  this.loc = loc;
  this.path = path;
  this.body = body;
}

function IdNode(id, start, end, loc) {
  this.type = "Id";
  this.loc = loc;
  this.id = id;
  this.start = start;
  this.end = end;
}

function PathNode(path_node, component, methods, loc) {
  var k, c;

  if (path_node === null) {
    this.type = "Path";
    this.loc = loc;
    this.methods = null;
    this.components = [];
  } else {
    for (k in path_node) {
      if (path_node.hasOwnProperty(k)) {
        this[k] = path_node[k];
      }
    }

    if (loc && path_node.loc) {
      if (loc.end.line > path_node.loc.end.line || loc.end.column > path_node.loc.end.column) {
        this.loc.end = loc.end;
      }
    }
  }

  if (component) {
    c = [component.id];
    if (component.start !== null) {
      c.push(component.start);
    }
    if (component.end !== null) {
      c.push(component.end);
    }
    this.components.push(c);
  }

  if (methods !== null) {
    this.methods = methods;
  }
}

function MethodNode(name, args, loc) {
  this.type = "Method";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function MethodChainNode(method, loc) {
  this.type = "MethodChain";
  this.loc = loc;
  this.chain = [method];
}

function FunctionNode(name, args, loc) {
  this.type = "Function";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function ForNode(id, path, body, loc) {
  this.type = "For";
  this.loc = loc;
  this.id = id;
  this.path = path;
  this.body = body;
}

function IfNode(conditions, loc) {
  this.type = "If";
  this.loc = loc;
  this.body = conditions;
}

function SwitchNode(control, cases, else_case, loc) {
  this.type = "Switch";
  this.loc = loc;
  this.control = control;
  this.cases = cases;
  this.else_case = else_case;
}

function AliasNode(path, id, loc) {
  this.type = "Alias";
  this.loc = loc;
  this.path = path;
  this.id = id;
}

function UnaliasNode(id, loc) {
  this.type = "Unalias";
  this.loc = loc;
  this.id = id;
}

function IncludeNode(path, loc) {
  this.type = "Include";
  this.loc = loc;
  this.path = path;
}

function FilterNode(filter, body, loc) {
  this.type = "Filter";
  this.loc = loc;
  this.body = [body];
}

function MananaStringNode(body, loc) {
  this.type = "MananaString";
  this.loc = loc;
  if (typeof body === "string") {
    this.body = [body];
  } else {
    this.body = body;
  }
}

function BreakNode(loc) {
  this.type = "Break";
  this.loc = loc;
}

function ContinueNode(loc) {
  this.type = "Continue";
  this.loc = loc;
}

/* expose AST constructors to parser */

parser.ast = {};
parser.ast.Loc = Loc;
parser.ast.MananaStringNode = MananaStringNode;
parser.ast.VoidTagNode = VoidTagNode;
parser.ast.CodeTagNode = CodeTagNode;
parser.ast.TagNode = TagNode;
parser.ast.TextNode = TextNode;
parser.ast.RawTextNode = RawTextNode;
parser.ast.NameNode = NameNode;
parser.ast.WithNode = WithNode;
parser.ast.IdNode = IdNode;
parser.ast.PathNode = PathNode;
parser.ast.MethodNode = MethodNode;
parser.ast.MethodChainNode = MethodChainNode;
parser.ast.FunctionNode = FunctionNode;
parser.ast.ForNode = ForNode;
parser.ast.IfNode = IfNode;
parser.ast.SwitchNode = SwitchNode;
parser.ast.AliasNode = AliasNode;
parser.ast.UnaliasNode = UnaliasNode;
parser.ast.IncludeNode = IncludeNode;
parser.ast.FilterNode = FilterNode;
parser.ast.BreakNode = BreakNode;
parser.ast.ContinueNode = ContinueNode;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

  function strip(start, end) {
    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comments */
break;
case 1:this.pushState("expr"); return "FOR";
break;
case 2:this.pushState("expr"); return "IF";
break;
case 3:this.pushState("expr"); return "ELIF";
break;
case 4:this.pushState("expr"); return "ELSE";
break;
case 5:this.pushState("expr"); return "ALIAS";
break;
case 6:this.pushState("expr"); return "UNALIAS";
break;
case 7:this.pushState("expr"); return "WITH";
break;
case 8:this.pushState("expr"); return "INCLUDE";
break;
case 9:this.pushState("expr"); return "CASE";
break;
case 10:this.pushState("expr"); return "WHEN";
break;
case 11:return "BREAK";
break;
case 12:return "CONTINUE";
break;
case 13:yy_.yytext = yy_.yytext.slice(1); return "RAW_TEXT";
break;
case 14:return "BOOL";
break;
case 15:return "BOOL";
break;
case 16:this.popState(); return "END_EXPR";
break;
case 17:return "AND";
break;
case 18:return "OR";
break;
case 19:return "IN";
break;
case 20:return "IS";
break;
case 21:return "AS";
break;
case 22:return "NOT";
break;
case 23:return "TYPE";
break;
case 24:return "TYPE";
break;
case 25:return "TYPE";
break;
case 26:return "TYPE";
break;
case 27:return "TYPE";
break;
case 28:return "TYPE";
break;
case 29:return "COND";
break;
case 30:return "COND";
break;
case 31:return "COND";
break;
case 32:return "COND";
break;
case 33:return "COND";
break;
case 34:return "COND";
break;
case 35:return "COND";
break;
case 36:return "COND";
break;
case 37:return "EXISTS";
break;
case 38:this.pushState("tag");      return "VOID_TAG";
break;
case 39:this.pushState("code_tag"); return "CODE_TAG";
break;
case 40:this.pushState("tag");      return "TAG";
break;
case 41:this.popState();            return "END_TAG";
break;
case 42:yy_.yytext = yy_.yytext.slice(1);   return "TAG_ID";
break;
case 43:yy_.yytext = yy_.yytext.slice(1);   return "TAG_CLASS";
break;
case 44:this.popState(); this.pushState("code"); return "END_CODE_TAG";
break;
case 45:
                                            yy_.yytext = yy_.yytext.replace("->", '');
                                            yy_.yytext = yy_.yytext.replace(/\s*/, '')
                                            yy_.yytext = yy_.yytext.slice(1, -1)
                                            return "TAG_SRC";
                                         
break;
case 46:this.pushState("i_string_d"); return ["TAG_SRC_I_STRING", "I_STRING_D"];
break;
case 47:this.pushState("i_string_d"); return "I_STRING_D";
break;
case 48:this.pushState("i_string_d"); return "I_STRING_D";                                      
break;
case 49:this.pushState("name");       return "START_NAME";
break;
case 50:this.popState();              return "END_I_STRING_D";
break;
case 51:return "I_STRING_TEXT";
break;
case 52:this.pushState("i_string_s"); return ["TAG_SRC_I_STRING", "I_STRING_S"];
break;
case 53:this.pushState("i_string_s"); return "I_STRING_S";
break;
case 54:this.pushState("i_string_s"); return "I_STRING_S";                                      
break;
case 55:this.pushState("name");       return "START_NAME";
break;
case 56:this.popState();              return "END_I_STRING_S"; // "
break;
case 57:return "I_STRING_TEXT";
break;
case 58:this.pushState("i_html"); return "I_HTML_START";
break;
case 59:this.pushState("name");   return "START_NAME";
break;
case 60:this.popState();          return "I_HTML_END";
break;
case 61:return "I_HTML_TEXT";
break;
case 62:return "HTML";
break;
case 63:this.pushState("tagargs"); return "LPAREN";
break;
case 64:this.popState();           return "RPAREN";
break;
case 65:this.pushState("tagargs"); return "LBRACE";
break;
case 66:this.popState();           return "RBRACE";
break;
case 67:return "COLON";
break;
case 68:return "EQ";
break;
case 69:return "COMMA";
break;
case 70:return "TAG_ATTR";
break;
case 71:yy_.yytext = "data-" + yy_.yytext.slice(1); return "TAG_DATA_ATTR";
break;
case 72:/* ignore */
break;
case 73:/* ignore */
break;
case 74:return "TAG_TEXT";
break;
case 75:this.pushState("filter"); yy_.yytext = yy_.yytext.slice(1); return "FILTER";
break;
case 76:this.pushState("name"); return "START_NAME";
break;
case 77:this.popState(); return "RBRACE"
break;
case 78:this.pushState("fn"); yy_.yytext = yy_.yytext.slice(1); return "FN";
break;
case 79:this.popState(); return "RPAREN";
break;
case 80:/* ignore */
break;
case 81:/* ignore */
break;
case 82:return "LBRACE";
break;
case 83:return "RBRACE";
break;
case 84:return "COMMA";
break;
case 85:return "EQ";
break;
case 86:return "ID";
break;
case 87:return "DOT";
break;
case 88:return "LPAREN";
break;
case 89:return "RPAREN";
break;
case 90:return "LBRACK";
break;
case 91:return "RBRACK";
break;
case 92:return "COLON"; 
break;
case 93:return "COMMA";
break;
case 94:return "INT";
break;
case 95:yy_.yytext = strip(1,2).replace(/\\"/g, '"'); return "STRING";
break;
case 96:return "STRING"; // Do not strip quotes
break;
case 97:return "WORD";
break;
case 98:
  var tokens = [];
  while (0 < indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  if (tokens.length) {
    tokens.push("EOF");
    return tokens;
  } else {
    return "EOF";
  }

break;
case 99:/* eat blank lines */
break;
case 100:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (indentation > indent_stack[0]) {
    indent_stack.unshift(indentation);
    return "INDENT";
  }

  var tokens = [];
  while (indentation < indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  if (tokens.length) {
    return tokens;
  }

break;
case 101:
  this.popState();

  var tokens = [];
  while (code_indent_level >= indent_stack[0]) {
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  code_indent_level = 0;

  tokens.shift();
  tokens.push("EOF");

  return tokens;

break;
case 102:yy_.yytext = ''; return "BLANK_LINE";
break;
case 103:
  var indent_level = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (code_indent_level === 0) {
    code_indent_level = indent_level;
    indent_stack.unshift(indent_level);
    yy_.yytext = yy_.yytext.slice(code_indent_level + 1);
    return "INDENT";

  } else if (indent_level < code_indent_level) {
    code_indent_level = 0;

    var tokens = [];
    while (indent_level < indent_stack[0]) {
      tokens.unshift("DEDENT");
      indent_stack.shift();
    }

    this.popState();
    return tokens;

  } else if (code_indent_level > 0) {
    yy_.yytext = yy_.yytext.slice(code_indent_level + 1);
    return "INDENT";
  }

break;
case 104:return "LINE";
break;
case 105:
  this.popState();

  var tokens = [];
  while (filter_indent_level >= indent_stack[0]) {
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  filter_indent_level = 0;

  tokens.shift();
  tokens.push("EOF");

  return tokens;

break;
case 106:
  var indent_level, tokens;
    
  indent_level = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (filter_indent_level === 0) {
    filter_indent_level = indent_level;
    indent_stack.unshift(indent_level);
    return "INDENT";

  } else if (indent_level < filter_indent_level) {
    this.popState();
    filter_indent_level = 0;
    
    tokens = [];
    while (indent_stack[0] > indent_level) {
      tokens.push("DEDENT");
      indent_stack.shift();
    }

    return tokens;
  }

break;
case 107:/* ignore all other whitespace */
break;
}
},
rules: [/^(?:[\n\r]*([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*"""(.|\n)*?""")/,/^(?:for\b)/,/^(?:if\b)/,/^(?:elif\b)/,/^(?:else\b)/,/^(?:alias\b)/,/^(?:unalias\b)/,/^(?:with\b)/,/^(?:include\b)/,/^(?:case\b)/,/^(?:when\b)/,/^(?:!break\b)/,/^(?:!continue\b)/,/^(?:`.*(?=\n))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:(?=\n))/,/^(?:and\b)/,/^(?:or\b)/,/^(?:in\b)/,/^(?:is\b)/,/^(?:as\b)/,/^(?:not\b)/,/^(?:Hash\b)/,/^(?:List\b)/,/^(?:String\b)/,/^(?:Integer\b)/,/^(?:Number\b)/,/^(?:Boolean\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?:>)/,/^(?:<)/,/^(?:%)/,/^(?:exists\b)/,/^(?:((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)))/,/^(?:pre|code\b)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:(?=\n))/,/^(?:(#[a-zA-Z][a-zA-Z0-9\-\:_]*))/,/^(?:(\.-?[_a-zA-Z]+[_a-zA-Z0-9\-]*(?=["."\s\n])))/,/^(?:(?=\n))/,/^(?:->\s*(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:->\s*(i"(?=.*?@\{)))/,/^(?:(i"(?=.*?@\{)))/,/^(?:(i"(?=.*?@\{)))/,/^(?:@\{)/,/^(?:")/,/^(?:[^"@"'"']*)/,/^(?:->\s*(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:@\{)/,/^(?:')/,/^(?:[^"@""'"]*)/,/^(?:(<(?=.*?@\{)))/,/^(?:@\{)/,/^(?:>(?=\s*\n))/,/^(?:.)/,/^(?:<.*(?=\n))/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z][a-zA-Z0-9\-_]*(?=\s*["="":"])))/,/^(?:(\*[a-zA-Z][a-zA-Z0-9\-]*(?=\s*["="":"])))/,/^(?:\s)/,/^(?:\n)/,/^(?:[^\s]((?!\{).)*)/,/^(?::(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:@\{)/,/^(?:\})/,/^(?:@(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254})\s?(?=\())/,/^(?:\)(?!\)))/,/^(?:\s)/,/^(?:\n)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:=)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:(\+|-)?(0|[1-9][0-9]*))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:([^\s\n"@"][^\s\n]*))/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:.*)/,/^(?:\s*$)/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"tag":{"rules":[13,41,42,43,45,46,48,52,54,63,65,74,76,78,96,99,107],"inclusive":true},"tagargs":{"rules":[47,53,64,66,67,68,69,70,71,72,73,95,99,107],"inclusive":true},"filter":{"rules":[48,54,76,96,97,99,105,106,107],"inclusive":true},"expr":{"rules":[14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,47,53,78,86,87,88,89,90,91,92,93,94,95,107],"inclusive":true},"name":{"rules":[47,53,77,86,87,88,89,90,91,92,93,94,95,107],"inclusive":true},"fn":{"rules":[14,15,47,53,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,99,107],"inclusive":true},"i_string_d":{"rules":[49,50,51,107],"inclusive":true},"i_string_s":{"rules":[55,56,57,107],"inclusive":true},"i_html":{"rules":[59,60,61,99,107],"inclusive":true},"code_tag":{"rules":[42,43,44,107],"inclusive":true},"code":{"rules":[101,102,103,104,107],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,38,39,40,48,54,58,62,75,76,78,96,97,98,99,100,107],"inclusive":true}}
};
indent_stack = [0];
filter_indent_level = 0;
code_indent_level = 0;;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = manana_parser;
exports.Parser = manana_parser.Parser;
exports.parse = function () { return manana_parser.parse.apply(manana_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}