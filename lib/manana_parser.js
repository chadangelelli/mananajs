/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var manana_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"prog_list":4,"EOF":5,"stmt":6,"block":7,"INDENT":8,"stmt_list":9,"DEDENT":10,"html_stmt":11,"void_tag_stmt":12,"code_tag_stmt":13,"tag_stmt":14,"filter_stmt":15,"alias_stmt":16,"include_stmt":17,"with_stmt":18,"if_stmt":19,"switch_stmt":20,"for_stmt":21,"name":22,"fn":23,"break":24,"continue":25,"HTML":26,"i_html":27,"I_HTML_START":28,"i_html_text":29,"I_HTML_END":30,"i_html_text_el":31,"I_HTML_TEXT":32,"void_tag":33,"END_TAG":34,"tag_attrs":35,"VOID_TAG":36,"CODE_TAG":37,"END_CODE_TAG":38,"code":39,"line":40,"LINE":41,"BLANK_LINE":42,"tag":43,"text":44,"TAG":45,"tag_attr":46,"tag_attr_args":47,"TAG_ID":48,"TAG_SRC":49,"TAG_SRC_I_STRING":50,"string":51,"tag_classes":52,"TAG_ATTR":53,"EQ":54,"TAG_DATA_ATTR":55,"LPAREN":56,"tag_attr_arg_list":57,"RPAREN":58,"LBRACE":59,"tag_attr_arg_list_alt":60,"RBRACE":61,"tag_attr_arg":62,"COMMA":63,"tag_attr_arg_alt":64,"COLON":65,"TAG_CLASS":66,"FILTER":67,"word_list":68,"word":69,"WORD":70,"SPACE":71,"path_or_fn":72,"path":73,"WITH":74,"AS":75,"ID":76,"END_EXPR":77,"FOR":78,"IN":79,"BREAK":80,"CONTINUE":81,"ifs":82,"if":83,"else":84,"elifs":85,"IF":86,"conds":87,"elif":88,"ELIF":89,"cond":90,"AND":91,"OR":92,"ev":93,"NOT":94,"COND":95,"IS":96,"TYPE":97,"EXISTS":98,"ELSE":99,"INT":100,"BOOL":101,"CASE":102,"cases":103,"case":104,"WHEN":105,"ALIAS":106,"INCLUDE":107,"id":108,"DOT":109,"meths":110,"LBRACK":111,"RBRACK":112,"meth":113,"meth_args":114,"meth_arg":115,"FN":116,"fn_args":117,"fn_arg":118,"hash":119,"hash_data":120,"hash_pair":121,"hash_val":122,"START_NAME":123,"STRING":124,"i_string":125,"I_STRING_D":126,"i_string_text":127,"END_I_STRING_D":128,"I_STRING_S":129,"END_I_STRING_S":130,"i_string_text_el":131,"I_STRING_TEXT":132,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",10:"DEDENT",26:"HTML",28:"I_HTML_START",30:"I_HTML_END",32:"I_HTML_TEXT",34:"END_TAG",36:"VOID_TAG",37:"CODE_TAG",38:"END_CODE_TAG",41:"LINE",42:"BLANK_LINE",45:"TAG",48:"TAG_ID",49:"TAG_SRC",50:"TAG_SRC_I_STRING",53:"TAG_ATTR",54:"EQ",55:"TAG_DATA_ATTR",56:"LPAREN",58:"RPAREN",59:"LBRACE",61:"RBRACE",63:"COMMA",65:"COLON",66:"TAG_CLASS",67:"FILTER",70:"WORD",71:"SPACE",74:"WITH",75:"AS",76:"ID",77:"END_EXPR",78:"FOR",79:"IN",80:"BREAK",81:"CONTINUE",86:"IF",89:"ELIF",91:"AND",92:"OR",94:"NOT",95:"COND",96:"IS",97:"TYPE",98:"EXISTS",99:"ELSE",100:"INT",101:"BOOL",102:"CASE",105:"WHEN",106:"ALIAS",107:"INCLUDE",109:"DOT",111:"LBRACK",112:"RBRACK",116:"FN",123:"START_NAME",124:"STRING",126:"I_STRING_D",128:"END_I_STRING_D",129:"I_STRING_S",130:"END_I_STRING_S",132:"I_STRING_TEXT"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,3],[9,2],[9,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,1],[11,1],[27,3],[29,2],[29,1],[31,1],[31,1],[12,2],[12,3],[33,1],[13,4],[13,5],[39,2],[39,1],[40,2],[40,1],[14,2],[14,3],[14,3],[14,3],[14,4],[14,4],[43,1],[35,2],[35,1],[35,1],[46,1],[46,1],[46,2],[46,1],[46,3],[46,3],[47,3],[47,3],[57,2],[57,1],[62,3],[62,4],[62,3],[62,4],[60,2],[60,1],[64,3],[64,4],[64,3],[64,4],[52,2],[52,1],[15,4],[44,1],[68,1],[68,2],[69,1],[69,1],[69,1],[69,1],[69,1],[72,1],[72,1],[18,6],[21,6],[21,6],[24,1],[25,1],[19,1],[82,1],[82,2],[82,2],[82,3],[83,4],[85,2],[85,1],[88,4],[87,1],[87,3],[87,3],[90,1],[90,2],[90,3],[90,3],[90,4],[90,3],[90,4],[90,2],[90,3],[84,3],[93,1],[93,1],[93,1],[93,1],[93,1],[20,6],[20,7],[103,1],[103,2],[104,4],[16,5],[17,3],[17,3],[73,1],[73,3],[73,3],[108,1],[108,4],[108,6],[108,6],[108,4],[108,6],[108,6],[108,5],[108,5],[108,4],[110,1],[110,3],[113,3],[113,4],[114,3],[114,1],[115,1],[115,1],[115,1],[23,3],[23,4],[117,3],[117,1],[118,1],[118,1],[118,1],[118,1],[118,1],[118,1],[118,1],[118,3],[118,3],[118,3],[118,3],[118,3],[118,3],[118,3],[119,3],[119,4],[120,3],[120,1],[121,3],[122,1],[122,1],[122,1],[122,1],[122,1],[122,1],[22,3],[51,1],[51,1],[125,3],[125,3],[127,2],[127,1],[131,1],[131,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0-1]; 
break;
case 6: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = [$$[$0]]; 
break;
case 23: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 25: 
      var body = [$$[$0-2]];
      body.push.apply(body, $$[$0-1]);
      body.push($$[$0]);
      this.$ = new MananaStringNode(body, new Loc(_$[$0-2], _$[$0])); 
    
break;
case 26: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 27: this.$ = [$$[$0]]; 
break;
case 30: this.$ = new VoidTagNode($$[$0-1], null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 31: this.$ = new VoidTagNode($$[$0-2], $$[$0-1],   new Loc(_$[$0-2], _$[$0-1])); 
break;
case 32: this.$ = $$[$0]; 
break;
case 33: this.$ = new CodeTagNode($$[$0-3], null, $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 34: this.$ = new CodeTagNode($$[$0-4], $$[$0-3],   $$[$0-1], new Loc(_$[$0-4], _$[$0-1])); 
break;
case 35: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 36: this.$ = [$$[$0]]; 
break;
case 37: this.$ = $$[$0-1] + $$[$0] 
break;
case 38: this.$ = ''; 
break;
case 39: this.$ = new TagNode($$[$0-1], null, null, null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 40: this.$ = new TagNode($$[$0-2], null, $$[$0-1],   null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 41: this.$ = new TagNode($$[$0-2], null, null, $$[$0],   new Loc(_$[$0-2], _$[$0])); 
break;
case 42: this.$ = new TagNode($$[$0-2], $$[$0-1],   null, null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 43: this.$ = new TagNode($$[$0-3], $$[$0-2],   $$[$0-1],   null, new Loc(_$[$0-3], _$[$0-1])); 
break;
case 44: this.$ = new TagNode($$[$0-3], $$[$0-2],   null, $$[$0],   new Loc(_$[$0-3], _$[$0])); 
break;
case 45: this.$ = $$[$0]; 
break;
case 46: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 47: this.$ = [$$[$0]]; 
break;
case 48: this.$ = $$[$0]; 
break;
case 49: this.$ = ['id', $$[$0]]; 
break;
case 50: this.$ = ['src', new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])) ]; 
break;
case 51: this.$ = ['src', $$[$0]]; 
break;
case 52: this.$ = ['class', $$[$0].join(" ")]; 
break;
case 53: this.$ = ['attr', $$[$0-2], $$[$0]]; 
break;
case 54: this.$ = ['data', $$[$0-2], $$[$0]]; 
break;
case 55: this.$ = $$[$0-1]; 
break;
case 56: this.$ = $$[$0-1]; 
break;
case 57: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 58: this.$ = [$$[$0]]; 
break;
case 59: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 60: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 61: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 62: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 63: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 64: this.$ = [$$[$0]]; 
break;
case 65: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 66: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 67: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 68: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 69: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 70: this.$ = [$$[$0]]; 
break;
case 71: this.$ = new FilterNode($$[$0-3], $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 72: this.$ = new TextNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 73: this.$ = [$$[$0]]; 
break;
case 74: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 82: this.$ = new WithNode($$[$0-4], $$[$0-2], $$[$0], new Loc(_$[$0-5], _$[$0])); 
break;
case 83: this.$ = new ForNode($$[$0-4], $$[$0-2], $$[$0], new Loc(_$[$0-5], _$[$0])); 
break;
case 84: this.$ = new ForNode($$[$0-4], $$[$0-2], $$[$0], new Loc(_$[$0-5], _$[$0])); 
break;
case 85: this.$ = new BreakNode(new Loc(_$[$0], _$[$0])); 
break;
case 86: this.$ = new ContinueNode(new Loc(_$[$0], _$[$0])); 
break;
case 87: this.$ = new IfNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 88: this.$ = [$$[$0]]; 
break;
case 89: this.$ = [$$[$0-1], $$[$0]]; 
break;
case 90: this.$ = [$$[$0-1]]; this.$.push.apply(this.$, $$[$0]); 
break;
case 91: this.$ = [$$[$0-2]]; this.$.push.apply(this.$, $$[$0-1]); this.$.push($$[$0]); 
break;
case 92: this.$ = { "case": $$[$0-3], conditions: $$[$0-2], body: $$[$0] }; 
break;
case 93: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 94: this.$ = [$$[$0]]; 
break;
case 95: this.$ = { "case": $$[$0-3], conditions: $$[$0-2], body: $$[$0] }; 
break;
case 96: this.$ = [[null,  $$[$0]]]; 
break;
case 97: this.$ = $$[$0-2]; this.$.push([$$[$0-1], $$[$0]]); 
break;
case 98: this.$ = $$[$0-2]; this.$.push([$$[$0-1], $$[$0]]); 
break;
case 99: this.$ = ["true", $$[$0]]; 
break;
case 100: this.$ = ["not_true", $$[$0-1]]; 
break;
case 101: this.$ = [$$[$0-1], $$[$0-2], $$[$0]]; 
break;
case 102: this.$ = [$$[$0-1], $$[$0-2], $$[$0]]; 
break;
case 103: this.$ = ["not_is", $$[$0-3], $$[$0]]; 
break;
case 104: this.$ = [$$[$0-1], $$[$0-2], $$[$0]]; 
break;
case 105: this.$ = ["not_in", $$[$0-3], $$[$0]]; 
break;
case 106: this.$ = [$$[$0-1], $$[$0]]; 
break;
case 107: this.$ = ["not_exists", $$[$0-1]]; 
break;
case 108: this.$ = { "case": $$[$0-2], "body": $$[$0] }; 
break;
case 114: this.$ = new SwitchNode($$[$0-4], $$[$0-1], null   , new Loc(_$[$0-5], _$[$0])); 
break;
case 115: this.$ = new SwitchNode($$[$0-5], $$[$0-2], $$[$0-1].body, new Loc(_$[$0-6], _$[$0])); 
break;
case 116: this.$ = [$$[$0]]; 
break;
case 117: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 118: this.$ = { value: $$[$0-2], block: $$[$0] }; 
break;
case 119: this.$ = new AliasNode($$[$0-3], $$[$0-1], new Loc(_$[$0-4], _$[$0])); 
break;
case 120: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 121: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 122: this.$ = new PathNode(null, $$[$0]  , null, new Loc(_$[$0], _$[$0])); 
break;
case 123: this.$ = new PathNode($$[$0-2]  , $$[$0]  , null, new Loc(_$[$0-2], _$[$0])); 
break;
case 124: this.$ = new PathNode($$[$0-2]  , null, $$[$0]  , new Loc(_$[$0-2], _$[$0])); 
break;
case 125: this.$ = new IdNode($$[$0], null, null, new Loc(_$[$0], _$[$0])); 
break;
case 126: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 127: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 128: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 129: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 130: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 131: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 132: this.$ = new IdNode($$[$0-4], 0   , $$[$0-1]  , new Loc(_$[$0-4], _$[$0])); 
break;
case 133: this.$ = new IdNode($$[$0-4], $$[$0-2]  , '*' , new Loc(_$[$0-4], _$[$0])); 
break;
case 134: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 135: this.$ = new MethodChainNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 136: this.$ = $$[$0-2]; this.$.chain.push($$[$0])                        ; 
break;
case 137: this.$ = new MethodNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 138: this.$ = new MethodNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 139: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 140: this.$ = [$$[$0]]; 
break;
case 144: this.$ = new FunctionNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 145: this.$ = new FunctionNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 146: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 147: this.$ = [$$[$0]]; 
break;
case 155: this.$ = $$[$0]; 
break;
case 156: this.$ = $$[$0]; 
break;
case 157: this.$ = $$[$0]; 
break;
case 158: this.$ = $$[$0]; 
break;
case 159: this.$ = $$[$0]; 
break;
case 160: this.$ = $$[$0]; 
break;
case 161: this.$ = $$[$0]; 
break;
case 162: this.$ = new MananaHash($$[$0-1]); 
break;
case 163: this.$ = new MananaHash($$[$0-2]); 
break;
case 164: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 165: this.$ = [$$[$0]]; 
break;
case 166: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 173: this.$ = $$[$0-1]; 
break;
case 174: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 176: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 177: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 178: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 179: this.$ = [$$[$0]]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,20],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:[1,21],27:22,28:[1,37],33:23,36:[1,38],37:[1,24],43:25,45:[1,39],67:[1,26],74:[1,29],78:[1,32],80:[1,35],81:[1,36],82:30,83:40,86:[1,41],102:[1,31],106:[1,27],107:[1,28],116:[1,34],123:[1,33]},{1:[3]},{5:[1,42],6:43,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:[1,21],27:22,28:[1,37],33:23,36:[1,38],37:[1,24],43:25,45:[1,39],67:[1,26],74:[1,29],78:[1,32],80:[1,35],81:[1,36],82:30,83:40,86:[1,41],102:[1,31],106:[1,27],107:[1,28],116:[1,34],123:[1,33]},{5:[2,3],26:[2,3],28:[2,3],36:[2,3],37:[2,3],45:[2,3],67:[2,3],74:[2,3],78:[2,3],80:[2,3],81:[2,3],86:[2,3],102:[2,3],106:[2,3],107:[2,3],116:[2,3],123:[2,3]},{5:[2,4],26:[2,4],28:[2,4],36:[2,4],37:[2,4],45:[2,4],67:[2,4],74:[2,4],78:[2,4],80:[2,4],81:[2,4],86:[2,4],102:[2,4],106:[2,4],107:[2,4],116:[2,4],123:[2,4]},{5:[2,8],10:[2,8],26:[2,8],28:[2,8],36:[2,8],37:[2,8],45:[2,8],67:[2,8],74:[2,8],78:[2,8],80:[2,8],81:[2,8],86:[2,8],102:[2,8],106:[2,8],107:[2,8],116:[2,8],123:[2,8]},{5:[2,9],10:[2,9],26:[2,9],28:[2,9],36:[2,9],37:[2,9],45:[2,9],67:[2,9],74:[2,9],78:[2,9],80:[2,9],81:[2,9],86:[2,9],102:[2,9],106:[2,9],107:[2,9],116:[2,9],123:[2,9]},{5:[2,10],10:[2,10],26:[2,10],28:[2,10],36:[2,10],37:[2,10],45:[2,10],67:[2,10],74:[2,10],78:[2,10],80:[2,10],81:[2,10],86:[2,10],102:[2,10],106:[2,10],107:[2,10],116:[2,10],123:[2,10]},{5:[2,11],10:[2,11],26:[2,11],28:[2,11],36:[2,11],37:[2,11],45:[2,11],67:[2,11],74:[2,11],78:[2,11],80:[2,11],81:[2,11],86:[2,11],102:[2,11],106:[2,11],107:[2,11],116:[2,11],123:[2,11]},{5:[2,12],10:[2,12],26:[2,12],28:[2,12],36:[2,12],37:[2,12],45:[2,12],67:[2,12],74:[2,12],78:[2,12],80:[2,12],81:[2,12],86:[2,12],102:[2,12],106:[2,12],107:[2,12],116:[2,12],123:[2,12]},{5:[2,13],10:[2,13],26:[2,13],28:[2,13],36:[2,13],37:[2,13],45:[2,13],67:[2,13],74:[2,13],78:[2,13],80:[2,13],81:[2,13],86:[2,13],102:[2,13],106:[2,13],107:[2,13],116:[2,13],123:[2,13]},{5:[2,14],10:[2,14],26:[2,14],28:[2,14],36:[2,14],37:[2,14],45:[2,14],67:[2,14],74:[2,14],78:[2,14],80:[2,14],81:[2,14],86:[2,14],102:[2,14],106:[2,14],107:[2,14],116:[2,14],123:[2,14]},{5:[2,15],10:[2,15],26:[2,15],28:[2,15],36:[2,15],37:[2,15],45:[2,15],67:[2,15],74:[2,15],78:[2,15],80:[2,15],81:[2,15],86:[2,15],102:[2,15],106:[2,15],107:[2,15],116:[2,15],123:[2,15]},{5:[2,16],10:[2,16],26:[2,16],28:[2,16],36:[2,16],37:[2,16],45:[2,16],67:[2,16],74:[2,16],78:[2,16],80:[2,16],81:[2,16],86:[2,16],102:[2,16],106:[2,16],107:[2,16],116:[2,16],123:[2,16]},{5:[2,17],10:[2,17],26:[2,17],28:[2,17],36:[2,17],37:[2,17],45:[2,17],67:[2,17],74:[2,17],78:[2,17],80:[2,17],81:[2,17],86:[2,17],102:[2,17],106:[2,17],107:[2,17],116:[2,17],123:[2,17]},{5:[2,18],10:[2,18],26:[2,18],28:[2,18],36:[2,18],37:[2,18],45:[2,18],67:[2,18],74:[2,18],78:[2,18],80:[2,18],81:[2,18],86:[2,18],102:[2,18],106:[2,18],107:[2,18],116:[2,18],123:[2,18]},{5:[2,19],10:[2,19],26:[2,19],28:[2,19],36:[2,19],37:[2,19],45:[2,19],67:[2,19],74:[2,19],78:[2,19],80:[2,19],81:[2,19],86:[2,19],102:[2,19],106:[2,19],107:[2,19],116:[2,19],123:[2,19]},{5:[2,20],10:[2,20],26:[2,20],28:[2,20],36:[2,20],37:[2,20],45:[2,20],67:[2,20],74:[2,20],78:[2,20],80:[2,20],81:[2,20],86:[2,20],102:[2,20],106:[2,20],107:[2,20],116:[2,20],123:[2,20]},{5:[2,21],10:[2,21],26:[2,21],28:[2,21],36:[2,21],37:[2,21],45:[2,21],67:[2,21],74:[2,21],78:[2,21],80:[2,21],81:[2,21],86:[2,21],102:[2,21],106:[2,21],107:[2,21],116:[2,21],123:[2,21]},{5:[2,22],10:[2,22],26:[2,22],28:[2,22],36:[2,22],37:[2,22],45:[2,22],67:[2,22],74:[2,22],78:[2,22],80:[2,22],81:[2,22],86:[2,22],102:[2,22],106:[2,22],107:[2,22],116:[2,22],123:[2,22]},{6:45,9:44,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:[1,21],27:22,28:[1,37],33:23,36:[1,38],37:[1,24],43:25,45:[1,39],67:[1,26],74:[1,29],78:[1,32],80:[1,35],81:[1,36],82:30,83:40,86:[1,41],102:[1,31],106:[1,27],107:[1,28],116:[1,34],123:[1,33]},{5:[2,23],10:[2,23],26:[2,23],28:[2,23],36:[2,23],37:[2,23],45:[2,23],67:[2,23],74:[2,23],78:[2,23],80:[2,23],81:[2,23],86:[2,23],102:[2,23],106:[2,23],107:[2,23],116:[2,23],123:[2,23]},{5:[2,24],10:[2,24],26:[2,24],28:[2,24],36:[2,24],37:[2,24],45:[2,24],67:[2,24],74:[2,24],78:[2,24],80:[2,24],81:[2,24],86:[2,24],102:[2,24],106:[2,24],107:[2,24],116:[2,24],123:[2,24]},{34:[1,46],35:47,46:48,47:49,48:[1,50],49:[1,51],50:[1,52],52:53,53:[1,54],55:[1,55],56:[1,56],59:[1,57],66:[1,58]},{35:60,38:[1,59],46:48,47:49,48:[1,50],49:[1,51],50:[1,52],52:53,53:[1,54],55:[1,55],56:[1,56],59:[1,57],66:[1,58]},{22:67,23:68,34:[1,61],35:63,44:62,46:48,47:49,48:[1,50],49:[1,51],50:[1,52],51:69,52:53,53:[1,54],55:[1,55],56:[1,56],59:[1,57],66:[1,58],68:64,69:65,70:[1,66],71:[1,70],116:[1,34],123:[1,33],124:[1,71],125:72,126:[1,73],129:[1,74]},{8:[1,75]},{23:78,72:76,73:77,76:[1,80],108:79,116:[1,34]},{51:81,73:82,76:[1,80],108:79,124:[1,71],125:72,126:[1,73],129:[1,74]},{23:78,72:83,73:77,76:[1,80],108:79,116:[1,34]},{5:[2,87],10:[2,87],26:[2,87],28:[2,87],36:[2,87],37:[2,87],45:[2,87],67:[2,87],74:[2,87],78:[2,87],80:[2,87],81:[2,87],86:[2,87],102:[2,87],106:[2,87],107:[2,87],116:[2,87],123:[2,87]},{23:89,51:85,73:88,76:[1,80],93:84,100:[1,86],101:[1,87],108:79,116:[1,34],124:[1,71],125:72,126:[1,73],129:[1,74]},{76:[1,90]},{73:91,76:[1,80],108:79},{56:[1,92]},{5:[2,85],10:[2,85],26:[2,85],28:[2,85],36:[2,85],37:[2,85],45:[2,85],67:[2,85],74:[2,85],78:[2,85],80:[2,85],81:[2,85],86:[2,85],102:[2,85],106:[2,85],107:[2,85],116:[2,85],123:[2,85]},{5:[2,86],10:[2,86],26:[2,86],28:[2,86],36:[2,86],37:[2,86],45:[2,86],67:[2,86],74:[2,86],78:[2,86],80:[2,86],81:[2,86],86:[2,86],102:[2,86],106:[2,86],107:[2,86],116:[2,86],123:[2,86]},{22:96,29:93,31:94,32:[1,95],123:[1,33]},{34:[2,32],48:[2,32],49:[2,32],50:[2,32],53:[2,32],55:[2,32],56:[2,32],59:[2,32],66:[2,32]},{34:[2,45],48:[2,45],49:[2,45],50:[2,45],53:[2,45],55:[2,45],56:[2,45],59:[2,45],66:[2,45],70:[2,45],71:[2,45],116:[2,45],123:[2,45],124:[2,45],126:[2,45],129:[2,45]},{5:[2,88],10:[2,88],26:[2,88],28:[2,88],36:[2,88],37:[2,88],45:[2,88],67:[2,88],74:[2,88],78:[2,88],80:[2,88],81:[2,88],84:97,85:98,86:[2,88],88:100,89:[1,101],99:[1,99],102:[2,88],106:[2,88],107:[2,88],116:[2,88],123:[2,88]},{23:89,51:85,73:88,76:[1,80],87:102,90:103,93:104,94:[1,105],98:[1,106],100:[1,86],101:[1,87],108:79,116:[1,34],124:[1,71],125:72,126:[1,73],129:[1,74]},{1:[2,1]},{5:[2,2],26:[2,2],28:[2,2],36:[2,2],37:[2,2],45:[2,2],67:[2,2],74:[2,2],78:[2,2],80:[2,2],81:[2,2],86:[2,2],102:[2,2],106:[2,2],107:[2,2],116:[2,2],123:[2,2]},{6:108,10:[1,107],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:18,25:19,26:[1,21],27:22,28:[1,37],33:23,36:[1,38],37:[1,24],43:25,45:[1,39],67:[1,26],74:[1,29],78:[1,32],80:[1,35],81:[1,36],82:30,83:40,86:[1,41],102:[1,31],106:[1,27],107:[1,28],116:[1,34],123:[1,33]},{10:[2,7],26:[2,7],28:[2,7],36:[2,7],37:[2,7],45:[2,7],67:[2,7],74:[2,7],78:[2,7],80:[2,7],81:[2,7],86:[2,7],102:[2,7],106:[2,7],107:[2,7],116:[2,7],123:[2,7]},{5:[2,30],10:[2,30],26:[2,30],28:[2,30],36:[2,30],37:[2,30],45:[2,30],67:[2,30],74:[2,30],78:[2,30],80:[2,30],81:[2,30],86:[2,30],102:[2,30],106:[2,30],107:[2,30],116:[2,30],123:[2,30]},{34:[1,109],46:110,48:[1,50],49:[1,51],50:[1,52],52:53,53:[1,54],55:[1,55],66:[1,58]},{34:[2,47],38:[2,47],48:[2,47],49:[2,47],50:[2,47],53:[2,47],55:[2,47],66:[2,47],70:[2,47],71:[2,47],116:[2,47],123:[2,47],124:[2,47],126:[2,47],129:[2,47]},{34:[2,48],38:[2,48],48:[2,48],49:[2,48],50:[2,48],53:[2,48],55:[2,48],66:[2,48],70:[2,48],71:[2,48],116:[2,48],123:[2,48],124:[2,48],126:[2,48],129:[2,48]},{34:[2,49],38:[2,49],48:[2,49],49:[2,49],50:[2,49],53:[2,49],55:[2,49],66:[2,49],70:[2,49],71:[2,49],116:[2,49],123:[2,49],124:[2,49],126:[2,49],129:[2,49]},{34:[2,50],38:[2,50],48:[2,50],49:[2,50],50:[2,50],53:[2,50],55:[2,50],66:[2,50],70:[2,50],71:[2,50],116:[2,50],123:[2,50],124:[2,50],126:[2,50],129:[2,50]},{51:111,124:[1,71],125:72,126:[1,73],129:[1,74]},{34:[2,52],38:[2,52],48:[2,52],49:[2,52],50:[2,52],53:[2,52],55:[2,52],66:[1,112],70:[2,52],71:[2,52],116:[2,52],123:[2,52],124:[2,52],126:[2,52],129:[2,52]},{54:[1,113]},{54:[1,114]},{53:[1,117],55:[1,118],57:115,62:116},{53:[1,121],55:[1,122],60:119,64:120},{34:[2,70],38:[2,70],48:[2,70],49:[2,70],50:[2,70],53:[2,70],55:[2,70],66:[2,70],70:[2,70],71:[2,70],116:[2,70],123:[2,70],124:[2,70],126:[2,70],129:[2,70]},{8:[1,125],39:123,40:124,42:[1,126]},{38:[1,127],46:110,48:[1,50],49:[1,51],50:[1,52],52:53,53:[1,54],55:[1,55],66:[1,58]},{5:[2,39],7:128,8:[1,20],10:[2,39],26:[2,39],28:[2,39],36:[2,39],37:[2,39],45:[2,39],67:[2,39],74:[2,39],78:[2,39],80:[2,39],81:[2,39],86:[2,39],102:[2,39],106:[2,39],107:[2,39],116:[2,39],123:[2,39]},{34:[1,129]},{22:67,23:68,34:[1,130],44:131,46:110,48:[1,50],49:[1,51],50:[1,52],51:69,52:53,53:[1,54],55:[1,55],66:[1,58],68:64,69:65,70:[1,66],71:[1,70],116:[1,34],123:[1,33],124:[1,71],125:72,126:[1,73],129:[1,74]},{10:[2,72],22:67,23:68,34:[2,72],51:69,69:132,70:[1,66],71:[1,70],116:[1,34],123:[1,33],124:[1,71],125:72,126:[1,73],129:[1,74]},{10:[2,73],34:[2,73],70:[2,73],71:[2,73],116:[2,73],123:[2,73],124:[2,73],126:[2,73],129:[2,73]},{10:[2,75],34:[2,75],70:[2,75],71:[2,75],116:[2,75],123:[2,75],124:[2,75],126:[2,75],129:[2,75]},{10:[2,76],34:[2,76],70:[2,76],71:[2,76],116:[2,76],123:[2,76],124:[2,76],126:[2,76],129:[2,76]},{10:[2,77],34:[2,77],70:[2,77],71:[2,77],116:[2,77],123:[2,77],124:[2,77],126:[2,77],129:[2,77]},{10:[2,78],34:[2,78],70:[2,78],71:[2,78],116:[2,78],123:[2,78],124:[2,78],126:[2,78],129:[2,78]},{10:[2,79],34:[2,79],70:[2,79],71:[2,79],116:[2,79],123:[2,79],124:[2,79],126:[2,79],129:[2,79]},{10:[2,174],34:[2,174],38:[2,174],48:[2,174],49:[2,174],50:[2,174],53:[2,174],55:[2,174],58:[2,174],61:[2,174],63:[2,174],66:[2,174],70:[2,174],71:[2,174],77:[2,174],79:[2,174],91:[2,174],92:[2,174],94:[2,174],95:[2,174],96:[2,174],112:[2,174],116:[2,174],123:[2,174],124:[2,174],126:[2,174],129:[2,174]},{10:[2,175],34:[2,175],38:[2,175],48:[2,175],49:[2,175],50:[2,175],53:[2,175],55:[2,175],58:[2,175],61:[2,175],63:[2,175],66:[2,175],70:[2,175],71:[2,175],77:[2,175],79:[2,175],91:[2,175],92:[2,175],94:[2,175],95:[2,175],96:[2,175],112:[2,175],116:[2,175],123:[2,175],124:[2,175],126:[2,175],129:[2,175]},{22:135,123:[1,33],127:133,131:134,132:[1,136]},{22:135,123:[1,33],127:137,131:134,132:[1,136]},{22:67,23:68,44:138,51:69,68:64,69:65,70:[1,66],71:[1,70],116:[1,34],123:[1,33],124:[1,71],125:72,126:[1,73],129:[1,74]},{75:[1,139]},{75:[2,80],109:[1,140]},{75:[2,81]},{58:[2,122],61:[2,122],63:[2,122],65:[2,122],75:[2,122],77:[2,122],79:[2,122],91:[2,122],92:[2,122],94:[2,122],95:[2,122],96:[2,122],109:[2,122],112:[2,122]},{58:[2,125],61:[2,125],63:[2,125],65:[2,125],75:[2,125],77:[2,125],79:[2,125],91:[2,125],92:[2,125],94:[2,125],95:[2,125],96:[2,125],109:[2,125],111:[1,141],112:[2,125]},{77:[1,142]},{77:[1,143],109:[1,140]},{75:[1,144]},{77:[1,145]},{77:[2,109],79:[2,109],91:[2,109],92:[2,109],94:[2,109],95:[2,109],96:[2,109]},{77:[2,110],79:[2,110],91:[2,110],92:[2,110],94:[2,110],95:[2,110],96:[2,110]},{77:[2,111],79:[2,111],91:[2,111],92:[2,111],94:[2,111],95:[2,111],96:[2,111]},{77:[2,112],79:[2,112],91:[2,112],92:[2,112],94:[2,112],95:[2,112],96:[2,112],109:[1,140]},{77:[2,113],79:[2,113],91:[2,113],92:[2,113],94:[2,113],95:[2,113],96:[2,113]},{79:[1,146]},{61:[1,147],109:[1,140]},{23:154,51:153,58:[1,148],59:[1,159],73:151,76:[1,158],97:[1,157],100:[1,152],101:[1,156],108:79,116:[1,34],117:149,118:150,119:155,124:[1,71],125:72,126:[1,73],129:[1,74]},{22:96,30:[1,160],31:161,32:[1,95],123:[1,33]},{30:[2,27],32:[2,27],123:[2,27]},{30:[2,28],32:[2,28],123:[2,28]},{30:[2,29],32:[2,29],123:[2,29]},{5:[2,89],10:[2,89],26:[2,89],28:[2,89],36:[2,89],37:[2,89],45:[2,89],67:[2,89],74:[2,89],78:[2,89],80:[2,89],81:[2,89],86:[2,89],102:[2,89],106:[2,89],107:[2,89],116:[2,89],123:[2,89]},{5:[2,90],10:[2,90],26:[2,90],28:[2,90],36:[2,90],37:[2,90],45:[2,90],67:[2,90],74:[2,90],78:[2,90],80:[2,90],81:[2,90],84:162,86:[2,90],88:163,89:[1,101],99:[1,99],102:[2,90],106:[2,90],107:[2,90],116:[2,90],123:[2,90]},{77:[1,164]},{5:[2,94],10:[2,94],26:[2,94],28:[2,94],36:[2,94],37:[2,94],45:[2,94],67:[2,94],74:[2,94],78:[2,94],80:[2,94],81:[2,94],86:[2,94],89:[2,94],99:[2,94],102:[2,94],106:[2,94],107:[2,94],116:[2,94],123:[2,94]},{23:89,51:85,73:88,76:[1,80],87:165,90:103,93:104,94:[1,105],98:[1,106],100:[1,86],101:[1,87],108:79,116:[1,34],124:[1,71],125:72,126:[1,73],129:[1,74]},{77:[1,166],91:[1,167],92:[1,168]},{77:[2,96],91:[2,96],92:[2,96]},{77:[2,99],79:[1,172],91:[2,99],92:[2,99],94:[1,171],95:[1,169],96:[1,170]},{23:89,51:85,73:88,76:[1,80],93:173,98:[1,174],100:[1,86],101:[1,87],108:79,116:[1,34],124:[1,71],125:72,126:[1,73],129:[1,74]},{23:89,51:85,73:88,76:[1,80],93:175,100:[1,86],101:[1,87],108:79,116:[1,34],124:[1,71],125:72,126:[1,73],129:[1,74]},{5:[2,5],10:[2,5],26:[2,5],28:[2,5],36:[2,5],37:[2,5],45:[2,5],67:[2,5],74:[2,5],78:[2,5],80:[2,5],81:[2,5],86:[2,5],89:[2,5],99:[2,5],102:[2,5],105:[2,5],106:[2,5],107:[2,5],116:[2,5],123:[2,5]},{10:[2,6],26:[2,6],28:[2,6],36:[2,6],37:[2,6],45:[2,6],67:[2,6],74:[2,6],78:[2,6],80:[2,6],81:[2,6],86:[2,6],102:[2,6],106:[2,6],107:[2,6],116:[2,6],123:[2,6]},{5:[2,31],10:[2,31],26:[2,31],28:[2,31],36:[2,31],37:[2,31],45:[2,31],67:[2,31],74:[2,31],78:[2,31],80:[2,31],81:[2,31],86:[2,31],102:[2,31],106:[2,31],107:[2,31],116:[2,31],123:[2,31]},{34:[2,46],38:[2,46],48:[2,46],49:[2,46],50:[2,46],53:[2,46],55:[2,46],66:[2,46],70:[2,46],71:[2,46],116:[2,46],123:[2,46],124:[2,46],126:[2,46],129:[2,46]},{34:[2,51],38:[2,51],48:[2,51],49:[2,51],50:[2,51],53:[2,51],55:[2,51],66:[2,51],70:[2,51],71:[2,51],116:[2,51],123:[2,51],124:[2,51],126:[2,51],129:[2,51]},{34:[2,69],38:[2,69],48:[2,69],49:[2,69],50:[2,69],53:[2,69],55:[2,69],66:[2,69],70:[2,69],71:[2,69],116:[2,69],123:[2,69],124:[2,69],126:[2,69],129:[2,69]},{51:176,124:[1,71],125:72,126:[1,73],129:[1,74]},{51:177,124:[1,71],125:72,126:[1,73],129:[1,74]},{53:[1,117],55:[1,118],58:[1,178],62:179},{53:[2,58],55:[2,58],58:[2,58]},{54:[1,180]},{54:[1,181]},{53:[1,121],55:[1,122],61:[1,182],64:183},{53:[2,64],55:[2,64],61:[2,64]},{65:[1,184]},{65:[1,185]},{8:[1,125],10:[1,186],40:187,42:[1,126]},{8:[2,36],10:[2,36],42:[2,36]},{41:[1,188]},{8:[2,38],10:[2,38],42:[2,38]},{8:[1,125],39:189,40:124,42:[1,126]},{5:[2,41],10:[2,41],26:[2,41],28:[2,41],36:[2,41],37:[2,41],45:[2,41],67:[2,41],74:[2,41],78:[2,41],80:[2,41],81:[2,41],86:[2,41],102:[2,41],106:[2,41],107:[2,41],116:[2,41],123:[2,41]},{5:[2,40],10:[2,40],26:[2,40],28:[2,40],36:[2,40],37:[2,40],45:[2,40],67:[2,40],74:[2,40],78:[2,40],80:[2,40],81:[2,40],86:[2,40],102:[2,40],106:[2,40],107:[2,40],116:[2,40],123:[2,40]},{5:[2,42],7:190,8:[1,20],10:[2,42],26:[2,42],28:[2,42],36:[2,42],37:[2,42],45:[2,42],67:[2,42],74:[2,42],78:[2,42],80:[2,42],81:[2,42],86:[2,42],102:[2,42],106:[2,42],107:[2,42],116:[2,42],123:[2,42]},{34:[1,191]},{10:[2,74],34:[2,74],70:[2,74],71:[2,74],116:[2,74],123:[2,74],124:[2,74],126:[2,74],129:[2,74]},{22:135,123:[1,33],128:[1,192],131:193,132:[1,136]},{123:[2,179],128:[2,179],130:[2,179],132:[2,179]},{123:[2,180],128:[2,180],130:[2,180],132:[2,180]},{123:[2,181],128:[2,181],130:[2,181],132:[2,181]},{22:135,123:[1,33],130:[1,194],131:193,132:[1,136]},{10:[1,195]},{76:[1,196]},{76:[1,199],108:197,110:198,113:200},{51:204,65:[1,203],73:202,76:[1,80],100:[1,201],108:79,124:[1,71],125:72,126:[1,73],129:[1,74]},{5:[2,120],10:[2,120],26:[2,120],28:[2,120],36:[2,120],37:[2,120],45:[2,120],67:[2,120],74:[2,120],78:[2,120],80:[2,120],81:[2,120],86:[2,120],102:[2,120],106:[2,120],107:[2,120],116:[2,120],123:[2,120]},{5:[2,121],10:[2,121],26:[2,121],28:[2,121],36:[2,121],37:[2,121],45:[2,121],67:[2,121],74:[2,121],78:[2,121],80:[2,121],81:[2,121],86:[2,121],102:[2,121],106:[2,121],107:[2,121],116:[2,121],123:[2,121]},{76:[1,205]},{8:[1,206]},{51:208,73:207,76:[1,80],108:79,124:[1,71],125:72,126:[1,73],129:[1,74]},{5:[2,173],10:[2,173],26:[2,173],28:[2,173],30:[2,173],32:[2,173],34:[2,173],36:[2,173],37:[2,173],45:[2,173],67:[2,173],70:[2,173],71:[2,173],74:[2,173],78:[2,173],80:[2,173],81:[2,173],86:[2,173],102:[2,173],106:[2,173],107:[2,173],116:[2,173],123:[2,173],124:[2,173],126:[2,173],128:[2,173],129:[2,173],130:[2,173],132:[2,173]},{5:[2,144],10:[2,144],26:[2,144],28:[2,144],34:[2,144],36:[2,144],37:[2,144],45:[2,144],58:[2,144],61:[2,144],63:[2,144],67:[2,144],70:[2,144],71:[2,144],74:[2,144],75:[2,144],77:[2,144],78:[2,144],79:[2,144],80:[2,144],81:[2,144],86:[2,144],91:[2,144],92:[2,144],94:[2,144],95:[2,144],96:[2,144],102:[2,144],106:[2,144],107:[2,144],116:[2,144],123:[2,144],124:[2,144],126:[2,144],129:[2,144]},{58:[1,209],63:[1,210]},{58:[2,147],63:[2,147]},{58:[2,148],63:[2,148],109:[1,140]},{58:[2,149],63:[2,149]},{58:[2,150],63:[2,150]},{58:[2,151],63:[2,151]},{58:[2,152],63:[2,152]},{58:[2,153],63:[2,153]},{58:[2,154],63:[2,154]},{54:[1,211],58:[2,125],63:[2,125],109:[2,125],111:[1,141]},{76:[1,214],120:212,121:213},{5:[2,25],10:[2,25],26:[2,25],28:[2,25],36:[2,25],37:[2,25],45:[2,25],67:[2,25],74:[2,25],78:[2,25],80:[2,25],81:[2,25],86:[2,25],102:[2,25],106:[2,25],107:[2,25],116:[2,25],123:[2,25]},{30:[2,26],32:[2,26],123:[2,26]},{5:[2,91],10:[2,91],26:[2,91],28:[2,91],36:[2,91],37:[2,91],45:[2,91],67:[2,91],74:[2,91],78:[2,91],80:[2,91],81:[2,91],86:[2,91],102:[2,91],106:[2,91],107:[2,91],116:[2,91],123:[2,91]},{5:[2,93],10:[2,93],26:[2,93],28:[2,93],36:[2,93],37:[2,93],45:[2,93],67:[2,93],74:[2,93],78:[2,93],80:[2,93],81:[2,93],86:[2,93],89:[2,93],99:[2,93],102:[2,93],106:[2,93],107:[2,93],116:[2,93],123:[2,93]},{7:215,8:[1,20]},{77:[1,216],91:[1,167],92:[1,168]},{7:217,8:[1,20]},{23:89,51:85,73:88,76:[1,80],90:218,93:104,94:[1,105],98:[1,106],100:[1,86],101:[1,87],108:79,116:[1,34],124:[1,71],125:72,126:[1,73],129:[1,74]},{23:89,51:85,73:88,76:[1,80],90:219,93:104,94:[1,105],98:[1,106],100:[1,86],101:[1,87],108:79,116:[1,34],124:[1,71],125:72,126:[1,73],129:[1,74]},{23:89,51:85,73:88,76:[1,80],93:220,100:[1,86],101:[1,87],108:79,116:[1,34],124:[1,71],125:72,126:[1,73],129:[1,74]},{97:[1,221]},{79:[1,223],96:[1,222]},{23:89,51:85,73:88,76:[1,80],93:224,100:[1,86],101:[1,87],108:79,116:[1,34],124:[1,71],125:72,126:[1,73],129:[1,74]},{77:[2,100],91:[2,100],92:[2,100]},{23:89,51:85,73:88,76:[1,80],93:225,100:[1,86],101:[1,87],108:79,116:[1,34],124:[1,71],125:72,126:[1,73],129:[1,74]},{77:[2,106],91:[2,106],92:[2,106]},{34:[2,53],38:[2,53],48:[2,53],49:[2,53],50:[2,53],53:[2,53],55:[2,53],66:[2,53],70:[2,53],71:[2,53],116:[2,53],123:[2,53],124:[2,53],126:[2,53],129:[2,53]},{34:[2,54],38:[2,54],48:[2,54],49:[2,54],50:[2,54],53:[2,54],55:[2,54],66:[2,54],70:[2,54],71:[2,54],116:[2,54],123:[2,54],124:[2,54],126:[2,54],129:[2,54]},{34:[2,55],38:[2,55],48:[2,55],49:[2,55],50:[2,55],53:[2,55],55:[2,55],66:[2,55],70:[2,55],71:[2,55],116:[2,55],123:[2,55],124:[2,55],126:[2,55],129:[2,55]},{53:[2,57],55:[2,57],58:[2,57]},{51:226,124:[1,71],125:72,126:[1,73],129:[1,74]},{51:227,124:[1,71],125:72,126:[1,73],129:[1,74]},{34:[2,56],38:[2,56],48:[2,56],49:[2,56],50:[2,56],53:[2,56],55:[2,56],66:[2,56],70:[2,56],71:[2,56],116:[2,56],123:[2,56],124:[2,56],126:[2,56],129:[2,56]},{53:[2,63],55:[2,63],61:[2,63]},{51:228,124:[1,71],125:72,126:[1,73],129:[1,74]},{51:229,124:[1,71],125:72,126:[1,73],129:[1,74]},{5:[2,33],10:[2,33],26:[2,33],28:[2,33],36:[2,33],37:[2,33],45:[2,33],67:[2,33],74:[2,33],78:[2,33],80:[2,33],81:[2,33],86:[2,33],102:[2,33],106:[2,33],107:[2,33],116:[2,33],123:[2,33]},{8:[2,35],10:[2,35],42:[2,35]},{8:[2,37],10:[2,37],42:[2,37]},{8:[1,125],10:[1,230],40:187,42:[1,126]},{5:[2,44],10:[2,44],26:[2,44],28:[2,44],36:[2,44],37:[2,44],45:[2,44],67:[2,44],74:[2,44],78:[2,44],80:[2,44],81:[2,44],86:[2,44],102:[2,44],106:[2,44],107:[2,44],116:[2,44],123:[2,44]},{5:[2,43],10:[2,43],26:[2,43],28:[2,43],36:[2,43],37:[2,43],45:[2,43],67:[2,43],74:[2,43],78:[2,43],80:[2,43],81:[2,43],86:[2,43],102:[2,43],106:[2,43],107:[2,43],116:[2,43],123:[2,43]},{10:[2,176],34:[2,176],38:[2,176],48:[2,176],49:[2,176],50:[2,176],53:[2,176],55:[2,176],58:[2,176],61:[2,176],63:[2,176],66:[2,176],70:[2,176],71:[2,176],77:[2,176],79:[2,176],91:[2,176],92:[2,176],94:[2,176],95:[2,176],96:[2,176],112:[2,176],116:[2,176],123:[2,176],124:[2,176],126:[2,176],129:[2,176]},{123:[2,178],128:[2,178],130:[2,178],132:[2,178]},{10:[2,177],34:[2,177],38:[2,177],48:[2,177],49:[2,177],50:[2,177],53:[2,177],55:[2,177],58:[2,177],61:[2,177],63:[2,177],66:[2,177],70:[2,177],71:[2,177],77:[2,177],79:[2,177],91:[2,177],92:[2,177],94:[2,177],95:[2,177],96:[2,177],112:[2,177],116:[2,177],123:[2,177],124:[2,177],126:[2,177],129:[2,177]},{5:[2,71],10:[2,71],26:[2,71],28:[2,71],36:[2,71],37:[2,71],45:[2,71],67:[2,71],74:[2,71],78:[2,71],80:[2,71],81:[2,71],86:[2,71],102:[2,71],106:[2,71],107:[2,71],116:[2,71],123:[2,71]},{77:[1,231]},{58:[2,123],61:[2,123],63:[2,123],65:[2,123],75:[2,123],77:[2,123],79:[2,123],91:[2,123],92:[2,123],94:[2,123],95:[2,123],96:[2,123],109:[2,123],112:[2,123]},{58:[2,124],61:[2,124],63:[2,124],65:[2,124],75:[2,124],77:[2,124],79:[2,124],91:[2,124],92:[2,124],94:[2,124],95:[2,124],96:[2,124],109:[1,232],112:[2,124]},{56:[1,233],58:[2,125],61:[2,125],63:[2,125],65:[2,125],75:[2,125],77:[2,125],79:[2,125],91:[2,125],92:[2,125],94:[2,125],95:[2,125],96:[2,125],109:[2,125],111:[1,141],112:[2,125]},{58:[2,135],61:[2,135],63:[2,135],65:[2,135],75:[2,135],77:[2,135],79:[2,135],91:[2,135],92:[2,135],94:[2,135],95:[2,135],96:[2,135],109:[2,135],112:[2,135]},{65:[1,235],112:[1,234]},{65:[1,237],109:[1,140],112:[1,236]},{100:[1,238]},{112:[1,239]},{77:[1,240]},{103:241,104:242,105:[1,243]},{77:[1,244],109:[1,140]},{77:[1,245]},{5:[2,145],10:[2,145],26:[2,145],28:[2,145],34:[2,145],36:[2,145],37:[2,145],45:[2,145],58:[2,145],61:[2,145],63:[2,145],67:[2,145],70:[2,145],71:[2,145],74:[2,145],75:[2,145],77:[2,145],78:[2,145],79:[2,145],80:[2,145],81:[2,145],86:[2,145],91:[2,145],92:[2,145],94:[2,145],95:[2,145],96:[2,145],102:[2,145],106:[2,145],107:[2,145],116:[2,145],123:[2,145],124:[2,145],126:[2,145],129:[2,145]},{23:154,51:153,59:[1,159],73:151,76:[1,158],97:[1,157],100:[1,152],101:[1,156],108:79,116:[1,34],118:246,119:155,124:[1,71],125:72,126:[1,73],129:[1,74]},{23:250,51:249,59:[1,159],73:247,76:[1,80],97:[1,253],100:[1,248],101:[1,252],108:79,116:[1,34],119:251,124:[1,71],125:72,126:[1,73],129:[1,74]},{61:[1,254],63:[1,255]},{61:[2,165],63:[2,165]},{65:[1,256]},{5:[2,108],10:[2,108],26:[2,108],28:[2,108],36:[2,108],37:[2,108],45:[2,108],67:[2,108],74:[2,108],78:[2,108],80:[2,108],81:[2,108],86:[2,108],102:[2,108],106:[2,108],107:[2,108],116:[2,108],123:[2,108]},{7:257,8:[1,20]},{5:[2,92],10:[2,92],26:[2,92],28:[2,92],36:[2,92],37:[2,92],45:[2,92],67:[2,92],74:[2,92],78:[2,92],80:[2,92],81:[2,92],86:[2,92],89:[2,92],99:[2,92],102:[2,92],106:[2,92],107:[2,92],116:[2,92],123:[2,92]},{77:[2,97],91:[2,97],92:[2,97]},{77:[2,98],91:[2,98],92:[2,98]},{77:[2,101],91:[2,101],92:[2,101]},{77:[2,102],91:[2,102],92:[2,102]},{97:[1,258]},{23:89,51:85,73:88,76:[1,80],93:259,100:[1,86],101:[1,87],108:79,116:[1,34],124:[1,71],125:72,126:[1,73],129:[1,74]},{77:[2,104],91:[2,104],92:[2,104]},{77:[2,107],91:[2,107],92:[2,107]},{53:[2,59],55:[2,59],58:[2,59],63:[1,260]},{53:[2,61],55:[2,61],58:[2,61],63:[1,261]},{53:[2,65],55:[2,65],61:[2,65],63:[1,262]},{53:[2,67],55:[2,67],61:[2,67],63:[1,263]},{5:[2,34],10:[2,34],26:[2,34],28:[2,34],36:[2,34],37:[2,34],45:[2,34],67:[2,34],74:[2,34],78:[2,34],80:[2,34],81:[2,34],86:[2,34],102:[2,34],106:[2,34],107:[2,34],116:[2,34],123:[2,34]},{5:[2,119],10:[2,119],26:[2,119],28:[2,119],36:[2,119],37:[2,119],45:[2,119],67:[2,119],74:[2,119],78:[2,119],80:[2,119],81:[2,119],86:[2,119],102:[2,119],106:[2,119],107:[2,119],116:[2,119],123:[2,119]},{76:[1,265],113:264},{51:271,58:[1,266],73:269,76:[1,80],100:[1,270],108:79,114:267,115:268,124:[1,71],125:72,126:[1,73],129:[1,74]},{58:[2,126],61:[2,126],63:[2,126],65:[2,126],75:[2,126],77:[2,126],79:[2,126],91:[2,126],92:[2,126],94:[2,126],95:[2,126],96:[2,126],109:[2,126],112:[2,126]},{73:273,76:[1,80],100:[1,272],108:79,112:[1,274]},{58:[2,129],61:[2,129],63:[2,129],65:[2,129],75:[2,129],77:[2,129],79:[2,129],91:[2,129],92:[2,129],94:[2,129],95:[2,129],96:[2,129],109:[2,129],112:[2,129]},{73:276,76:[1,80],100:[1,275],108:79},{112:[1,277]},{58:[2,134],61:[2,134],63:[2,134],65:[2,134],75:[2,134],77:[2,134],79:[2,134],91:[2,134],92:[2,134],94:[2,134],95:[2,134],96:[2,134],109:[2,134],112:[2,134]},{7:278,8:[1,20]},{10:[1,279],84:280,99:[1,99],104:281,105:[1,243]},{10:[2,116],99:[2,116],105:[2,116]},{23:89,51:85,73:88,76:[1,80],93:282,100:[1,86],101:[1,87],108:79,116:[1,34],124:[1,71],125:72,126:[1,73],129:[1,74]},{7:283,8:[1,20]},{7:284,8:[1,20]},{58:[2,146],63:[2,146]},{58:[2,155],63:[2,155],109:[1,140]},{58:[2,156],63:[2,156]},{58:[2,157],63:[2,157]},{58:[2,158],63:[2,158]},{58:[2,159],63:[2,159]},{58:[2,160],63:[2,160]},{58:[2,161],63:[2,161]},{58:[2,162],61:[2,162],63:[2,162]},{61:[1,285],76:[1,214],121:286},{23:291,51:290,59:[1,159],73:293,76:[1,80],100:[1,288],101:[1,289],108:79,116:[1,34],119:292,122:287,124:[1,71],125:72,126:[1,73],129:[1,74]},{5:[2,95],10:[2,95],26:[2,95],28:[2,95],36:[2,95],37:[2,95],45:[2,95],67:[2,95],74:[2,95],78:[2,95],80:[2,95],81:[2,95],86:[2,95],89:[2,95],99:[2,95],102:[2,95],106:[2,95],107:[2,95],116:[2,95],123:[2,95]},{77:[2,103],91:[2,103],92:[2,103]},{77:[2,105],91:[2,105],92:[2,105]},{53:[2,60],55:[2,60],58:[2,60]},{53:[2,62],55:[2,62],58:[2,62]},{53:[2,66],55:[2,66],61:[2,66]},{53:[2,68],55:[2,68],61:[2,68]},{58:[2,136],61:[2,136],63:[2,136],65:[2,136],75:[2,136],77:[2,136],79:[2,136],91:[2,136],92:[2,136],94:[2,136],95:[2,136],96:[2,136],109:[2,136],112:[2,136]},{56:[1,233]},{58:[2,137],61:[2,137],63:[2,137],65:[2,137],75:[2,137],77:[2,137],79:[2,137],91:[2,137],92:[2,137],94:[2,137],95:[2,137],96:[2,137],109:[2,137],112:[2,137]},{58:[1,294],63:[1,295]},{58:[2,140],63:[2,140]},{58:[2,141],63:[2,141],109:[1,140]},{58:[2,142],63:[2,142]},{58:[2,143],63:[2,143]},{112:[1,296]},{109:[1,140],112:[1,297]},{58:[2,133],61:[2,133],63:[2,133],65:[2,133],75:[2,133],77:[2,133],79:[2,133],91:[2,133],92:[2,133],94:[2,133],95:[2,133],96:[2,133],109:[2,133],112:[2,133]},{112:[1,298]},{109:[1,140],112:[1,299]},{58:[2,132],61:[2,132],63:[2,132],65:[2,132],75:[2,132],77:[2,132],79:[2,132],91:[2,132],92:[2,132],94:[2,132],95:[2,132],96:[2,132],109:[2,132],112:[2,132]},{5:[2,82],10:[2,82],26:[2,82],28:[2,82],36:[2,82],37:[2,82],45:[2,82],67:[2,82],74:[2,82],78:[2,82],80:[2,82],81:[2,82],86:[2,82],102:[2,82],106:[2,82],107:[2,82],116:[2,82],123:[2,82]},{5:[2,114],10:[2,114],26:[2,114],28:[2,114],36:[2,114],37:[2,114],45:[2,114],67:[2,114],74:[2,114],78:[2,114],80:[2,114],81:[2,114],86:[2,114],102:[2,114],106:[2,114],107:[2,114],116:[2,114],123:[2,114]},{10:[1,300]},{10:[2,117],99:[2,117],105:[2,117]},{77:[1,301]},{5:[2,83],10:[2,83],26:[2,83],28:[2,83],36:[2,83],37:[2,83],45:[2,83],67:[2,83],74:[2,83],78:[2,83],80:[2,83],81:[2,83],86:[2,83],102:[2,83],106:[2,83],107:[2,83],116:[2,83],123:[2,83]},{5:[2,84],10:[2,84],26:[2,84],28:[2,84],36:[2,84],37:[2,84],45:[2,84],67:[2,84],74:[2,84],78:[2,84],80:[2,84],81:[2,84],86:[2,84],102:[2,84],106:[2,84],107:[2,84],116:[2,84],123:[2,84]},{58:[2,163],61:[2,163],63:[2,163]},{61:[2,164],63:[2,164]},{61:[2,166],63:[2,166]},{61:[2,167],63:[2,167]},{61:[2,168],63:[2,168]},{61:[2,169],63:[2,169]},{61:[2,170],63:[2,170]},{61:[2,171],63:[2,171]},{61:[2,172],63:[2,172],109:[1,140]},{58:[2,138],61:[2,138],63:[2,138],65:[2,138],75:[2,138],77:[2,138],79:[2,138],91:[2,138],92:[2,138],94:[2,138],95:[2,138],96:[2,138],109:[2,138],112:[2,138]},{51:271,73:269,76:[1,80],100:[1,270],108:79,115:302,124:[1,71],125:72,126:[1,73],129:[1,74]},{58:[2,127],61:[2,127],63:[2,127],65:[2,127],75:[2,127],77:[2,127],79:[2,127],91:[2,127],92:[2,127],94:[2,127],95:[2,127],96:[2,127],109:[2,127],112:[2,127]},{58:[2,128],61:[2,128],63:[2,128],65:[2,128],75:[2,128],77:[2,128],79:[2,128],91:[2,128],92:[2,128],94:[2,128],95:[2,128],96:[2,128],109:[2,128],112:[2,128]},{58:[2,130],61:[2,130],63:[2,130],65:[2,130],75:[2,130],77:[2,130],79:[2,130],91:[2,130],92:[2,130],94:[2,130],95:[2,130],96:[2,130],109:[2,130],112:[2,130]},{58:[2,131],61:[2,131],63:[2,131],65:[2,131],75:[2,131],77:[2,131],79:[2,131],91:[2,131],92:[2,131],94:[2,131],95:[2,131],96:[2,131],109:[2,131],112:[2,131]},{5:[2,115],10:[2,115],26:[2,115],28:[2,115],36:[2,115],37:[2,115],45:[2,115],67:[2,115],74:[2,115],78:[2,115],80:[2,115],81:[2,115],86:[2,115],102:[2,115],106:[2,115],107:[2,115],116:[2,115],123:[2,115]},{7:303,8:[1,20]},{58:[2,139],63:[2,139]},{10:[2,118],99:[2,118],105:[2,118]}],
defaultActions: {42:[2,1],78:[2,81]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* tracing/debugging functions */

function Loc(start, end) {
  this.start = { line: start.first_line, column: start.first_column };
  this.end = { line: end.last_line, column: end.last_column };
}

/* Manana data types */

function MananaHash(data, loc) {
  var hash = {}, i = 0;

  while (data[i]) {
    hash[data[i][0]] = data[i][1];
    i++;
  }

  return hash;
}

/* AST nodes */

function VoidTagNode(tag, attrs, loc) {
  this.type = "VoidTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
}

function CodeTagNode(tag, attrs, code, loc) {
  this.type = "CodeTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = code;
}

function TagNode(tag, attrs, text, block, loc) {
  this.type = "Tag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = text ? [text] : block;
}

function TextNode(words, loc) {
  this.type = "Text";
  this.loc = loc;

  var w = words, t = [], s = [], i = 0; 

  while (typeof w[i] !== "undefined") {
    if (typeof w[i] === "string") {
      s.push(w[i]);
    } else {
      if (s.length) {
        t.push(s.join(' '));
        s = [];
      }
      t.push(w[i]);
    }
    i++;
  }
  if (s.length) {
    t.push(s.join(' '));
  }

  this.body = t;
}

function NameNode(path, loc) {
  this.type = "Name";
  this.loc = loc;
  this.body = path;
}

function WithNode(path, id, body, loc) {
  this.type = "With";
  this.loc = loc;
  this.path = path;
  this.id = id;
  this.body = body;
}

function IdNode(id, start, end, loc) {
  this.type = "Id";
  this.loc = loc;
  this.id = id;
  this.start = start;
  this.end = end;
}

function PathNode(path_node, component, methods, loc) {
  var k, c;

  if (path_node === null) {
    this.type = "Path";
    this.loc = loc;
    this.methods = null;
    this.components = [];
  } else {
    for (k in path_node) {
      if (path_node.hasOwnProperty(k)) {
        this[k] = path_node[k];
      }
    }

    if (loc && path_node.loc) {
      if (loc.end.line > path_node.loc.end.line || loc.end.column > path_node.loc.end.column) {
        this.loc.end = loc.end;
      }
    }
  }

  if (component) {
    c = [component.id];
    if (component.start !== null) {
      c.push(component.start);
    }
    if (component.end !== null) {
      c.push(component.end);
    }
    this.components.push(c);
  }

  if (methods !== null) {
    this.methods = methods;
  }
}

function MethodNode(name, args, loc) {
  this.type = "Method";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function MethodChainNode(method, loc) {
  this.type = "MethodChain";
  this.loc = loc;
  this.chain = [method];
}

function FunctionNode(name, args, loc) {
  this.type = "Function";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function ForNode(id, path, body, loc) {
  this.type = "For";
  this.loc = loc;
  this.id = id;
  this.path = path;
  this.body = body;
}

function IfNode(conditions, loc) {
  this.type = "If";
  this.loc = loc;
  this.body = conditions;
}

function SwitchNode(control, cases, else_case, loc) {
  this.type = "Switch";
  this.loc = loc;
  this.control = control;
  this.cases = cases;
  this.else_case = else_case;
}

function AliasNode(path, id, loc) {
  this.type = "Alias";
  this.loc = loc;
  this.path = path;
  this.id = id;
}

function IncludeNode(path, loc) {
  this.type = "Include";
  this.loc = loc;
  this.path = path;
}

function FilterNode(filter, body, loc) {
  this.type = "Filter";
  this.loc = loc;
  this.body = [body];
}

function MananaStringNode(body, loc) {
  this.type = "MananaString";
  this.loc = loc;
  if (typeof body === "string") {
    this.body = [body];
  } else {
    this.body = body;
  }
}

function BreakNode(loc) {
  this.type = "Break";
  this.loc = loc;
}

function ContinueNode(loc) {
  this.type = "Continue";
  this.loc = loc;
}

/* expose AST constructors to parser */

parser.ast = {};
parser.ast.Loc = Loc;
parser.ast.MananaStringNode = MananaStringNode;
parser.ast.VoidTagNode = VoidTagNode;
parser.ast.CodeTagNode = CodeTagNode;
parser.ast.TagNode = TagNode;
parser.ast.TextNode = TextNode;
parser.ast.NameNode = NameNode;
parser.ast.WithNode = WithNode;
parser.ast.IdNode = IdNode;
parser.ast.PathNode = PathNode;
parser.ast.MethodNode = MethodNode;
parser.ast.MethodChainNode = MethodChainNode;
parser.ast.FunctionNode = FunctionNode;
parser.ast.ForNode = ForNode;
parser.ast.IfNode = IfNode;
parser.ast.SwitchNode = SwitchNode;
parser.ast.AliasNode = AliasNode;
parser.ast.IncludeNode = IncludeNode;
parser.ast.FilterNode = FilterNode;
parser.ast.BreakNode = BreakNode;
parser.ast.ContinueNode = ContinueNode;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

  function strip(start, end) {
    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comments */
break;
case 1:this.pushState("expr"); return "FOR";
break;
case 2:this.pushState("expr"); return "IF";
break;
case 3:this.pushState("expr"); return "ELIF";
break;
case 4:this.pushState("expr"); return "ELSE";
break;
case 5:this.pushState("expr"); return "ALIAS";
break;
case 6:this.pushState("expr"); return "WITH";
break;
case 7:this.pushState("expr"); return "INCLUDE";
break;
case 8:this.pushState("expr"); return "CASE";
break;
case 9:this.pushState("expr"); return "WHEN";
break;
case 10:return "BREAK";
break;
case 11:return "CONTINUE";
break;
case 12:return "BOOL";
break;
case 13:return "BOOL";
break;
case 14:this.popState(); return "END_EXPR";
break;
case 15:return "AND";
break;
case 16:return "OR";
break;
case 17:return "IN";
break;
case 18:return "IS";
break;
case 19:return "AS";
break;
case 20:return "NOT";
break;
case 21:return "TYPE";
break;
case 22:return "TYPE";
break;
case 23:return "TYPE";
break;
case 24:return "TYPE";
break;
case 25:return "TYPE";
break;
case 26:return "TYPE";
break;
case 27:return "COND";
break;
case 28:return "COND";
break;
case 29:return "COND";
break;
case 30:return "COND";
break;
case 31:return "COND";
break;
case 32:return "COND";
break;
case 33:return "COND";
break;
case 34:return "COND";
break;
case 35:return "EXISTS";
break;
case 36:this.pushState("tag");      return "VOID_TAG";
break;
case 37:this.pushState("code_tag"); return "CODE_TAG";
break;
case 38:this.pushState("tag");      return "TAG";
break;
case 39:this.popState();            return "END_TAG";
break;
case 40:yy_.yytext = yy_.yytext.slice(1);   return "TAG_ID";
break;
case 41:yy_.yytext = yy_.yytext.slice(1);   return "TAG_CLASS";
break;
case 42:this.popState(); this.pushState("code"); return "END_CODE_TAG";
break;
case 43:
                                            yy_.yytext = yy_.yytext.replace("->", '');
                                            yy_.yytext = yy_.yytext.replace(/\s*/, '')
                                            yy_.yytext = yy_.yytext.slice(1, -1)
                                            return "TAG_SRC";
                                         
break;
case 44:this.pushState("i_string_d"); return ["TAG_SRC_I_STRING", "I_STRING_D"];
break;
case 45:this.pushState("i_string_d"); return "I_STRING_D";
break;
case 46:this.pushState("i_string_d"); return "I_STRING_D";                                      
break;
case 47:this.pushState("name");       return "START_NAME";
break;
case 48:this.popState();              return "END_I_STRING_D";
break;
case 49:return "I_STRING_TEXT";
break;
case 50:this.pushState("i_string_s"); return ["TAG_SRC_I_STRING", "I_STRING_S"];
break;
case 51:this.pushState("i_string_s"); return "I_STRING_S";
break;
case 52:this.pushState("i_string_s"); return "I_STRING_S";                                      
break;
case 53:this.pushState("name");       return "START_NAME";
break;
case 54:this.popState();              return "END_I_STRING_S"; // "
break;
case 55:return "I_STRING_TEXT";
break;
case 56:this.pushState("i_html"); return "I_HTML_START";
break;
case 57:this.pushState("name");   return "START_NAME";
break;
case 58:this.popState();          return "I_HTML_END";
break;
case 59:return "I_HTML_TEXT";
break;
case 60:return "HTML";
break;
case 61:this.pushState("tagargs"); return "LPAREN";
break;
case 62:this.popState();           return "RPAREN";
break;
case 63:this.pushState("tagargs"); return "LBRACE";
break;
case 64:this.popState();           return "RBRACE";
break;
case 65:return "COLON";
break;
case 66:return "EQ";
break;
case 67:return "COMMA";
break;
case 68:return "TAG_ATTR";
break;
case 69:yy_.yytext = "data-" + yy_.yytext.slice(1); return "TAG_DATA_ATTR";
break;
case 70:/* ignore */
break;
case 71:/* ignore */
break;
case 72:this.pushState("filter"); yy_.yytext = yy_.yytext.slice(1); return "FILTER";
break;
case 73:this.pushState("name"); return "START_NAME";
break;
case 74:this.popState(); return "RBRACE"
break;
case 75:this.pushState("fn"); yy_.yytext = yy_.yytext.slice(1); return "FN";
break;
case 76:this.popState(); return "RPAREN";
break;
case 77:/* ignore */
break;
case 78:/* ignore */
break;
case 79:return "LBRACE";
break;
case 80:return "RBRACE";
break;
case 81:return "COMMA";
break;
case 82:return "EQ";
break;
case 83:return "ID";
break;
case 84:return "DOT";
break;
case 85:return "LPAREN";
break;
case 86:return "RPAREN";
break;
case 87:return "LBRACK";
break;
case 88:return "RBRACK";
break;
case 89:return "COLON"; 
break;
case 90:return "COMMA";
break;
case 91:return "INT";
break;
case 92:yy_.yytext = strip(1,2).replace(/\\"/g, '"'); return "STRING";
break;
case 93:return "STRING"; // Do not strip quotes
break;
case 94:return "WORD";
break;
case 95:
  var tokens = [];
  while (0 < indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  if (tokens.length) {
    tokens.push("EOF");
    return tokens;
  } else {
    return "EOF";
  }

break;
case 96:/* eat blank lines */
break;
case 97:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (indentation > indent_stack[0]) {
    indent_stack.unshift(indentation);
    return "INDENT";
  }

  var tokens = [];
  while (indentation < indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  if (tokens.length) {
    return tokens;
  }

break;
case 98:
  this.popState();

  var tokens = [];
  while (code_indent_level >= indent_stack[0]) {
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  code_indent_level = 0;

  tokens.shift();
  tokens.push("EOF");

  return tokens;

break;
case 99:yy_.yytext = ''; return "BLANK_LINE";
break;
case 100:
  var indent_level = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (code_indent_level === 0) {
    code_indent_level = indent_level;
    indent_stack.unshift(indent_level);
    yy_.yytext = yy_.yytext.slice(code_indent_level + 1);
    return "INDENT";

  } else if (indent_level < code_indent_level) {
    code_indent_level = 0;

    var tokens = [];
    while (indent_level < indent_stack[0]) {
      tokens.unshift("DEDENT");
      indent_stack.shift();
    }

    this.popState();
    return tokens;

  } else if (code_indent_level > 0) {
    yy_.yytext = yy_.yytext.slice(code_indent_level + 1);
    return "INDENT";
  }

break;
case 101:return "LINE";
break;
case 102:
  this.popState();

  var tokens = [];
  while (filter_indent_level >= indent_stack[0]) {
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  filter_indent_level = 0;

  tokens.shift();
  tokens.push("EOF");

  return tokens;

break;
case 103:
  var indent_level, tokens;
    
  indent_level = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (filter_indent_level === 0) {
    filter_indent_level = indent_level;
    indent_stack.unshift(indent_level);
    return "INDENT";

  } else if (indent_level < filter_indent_level) {
    this.popState();
    filter_indent_level = 0;
    
    tokens = [];
    while (indent_stack[0] > indent_level) {
      tokens.push("DEDENT");
      indent_stack.shift();
    }

    return tokens;
  }

break;
case 104:/* ignore all other whitespace */
break;
}
},
rules: [/^(?:[\n\r]*([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*"""(.|\n)*?""")/,/^(?:for\b)/,/^(?:if\b)/,/^(?:elif\b)/,/^(?:else\b)/,/^(?:alias\b)/,/^(?:with\b)/,/^(?:include\b)/,/^(?:case\b)/,/^(?:when\b)/,/^(?:!break\b)/,/^(?:!continue\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:(?=\n))/,/^(?:and\b)/,/^(?:or\b)/,/^(?:in\b)/,/^(?:is\b)/,/^(?:as\b)/,/^(?:not\b)/,/^(?:Hash\b)/,/^(?:List\b)/,/^(?:String\b)/,/^(?:Integer\b)/,/^(?:Number\b)/,/^(?:Boolean\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?:>)/,/^(?:<)/,/^(?:%)/,/^(?:exists\b)/,/^(?:((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)))/,/^(?:pre|code\b)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:(?=\n))/,/^(?:(#[a-zA-Z][a-zA-Z0-9\-\:_]*))/,/^(?:(\.-?[_a-zA-Z]+[_a-zA-Z0-9\-]*(?=["."\s\n])))/,/^(?:(?=\n))/,/^(?:->\s*(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:->\s*(i"(?=.*?@\{)))/,/^(?:(i"(?=.*?@\{)))/,/^(?:(i"(?=.*?@\{)))/,/^(?:@\{)/,/^(?:")/,/^(?:[^"@"'"']*)/,/^(?:->\s*(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:@\{)/,/^(?:')/,/^(?:[^"@""'"]*)/,/^(?:(<(?=.*?@\{)))/,/^(?:@\{)/,/^(?:>(?=\s*\n))/,/^(?:.)/,/^(?:<.*(?=\n))/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z][a-zA-Z0-9\-_]*(?=\s*["="":"])))/,/^(?:(\*[a-zA-Z][a-zA-Z0-9\-]*(?=["="":"])))/,/^(?:\s)/,/^(?:\n)/,/^(?::(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:@\{)/,/^(?:\})/,/^(?:@(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254})\s?(?=\())/,/^(?:\)(?!\)))/,/^(?:\s)/,/^(?:\n)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:=)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:(\+|-)?(0|[1-9][0-9]*))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:([^\s\n"@"][^\s\n]*))/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:.*)/,/^(?:\s*$)/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"tag":{"rules":[39,40,41,43,44,46,50,52,61,63,73,75,93,94,96,104],"inclusive":true},"tagargs":{"rules":[45,51,62,64,65,66,67,68,69,70,71,92,96,104],"inclusive":true},"filter":{"rules":[46,52,73,93,94,96,102,103,104],"inclusive":true},"expr":{"rules":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,45,51,75,83,84,85,86,87,88,89,90,91,92,104],"inclusive":true},"name":{"rules":[45,51,74,83,84,85,86,87,88,89,90,91,92,104],"inclusive":true},"fn":{"rules":[12,13,45,51,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,96,104],"inclusive":true},"i_string_d":{"rules":[47,48,49,104],"inclusive":true},"i_string_s":{"rules":[53,54,55,104],"inclusive":true},"i_html":{"rules":[57,58,59,96,104],"inclusive":true},"code_tag":{"rules":[40,41,42,104],"inclusive":true},"code":{"rules":[98,99,100,101,104],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,36,37,38,46,52,56,60,72,73,75,93,94,95,96,97,104],"inclusive":true}}
};
indent_stack = [0];
filter_indent_level = 0;
code_indent_level = 0;;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = manana_parser;
exports.Parser = manana_parser.Parser;
exports.parse = function () { return manana_parser.parse.apply(manana_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}