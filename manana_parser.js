/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var manana_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"prog_list":4,"EOF":5,"stmt":6,"block":7,"INDENT":8,"stmt_list":9,"DEDENT":10,"html_stmt":11,"void_tag_stmt":12,"tag_stmt":13,"filter_stmt":14,"alias_stmt":15,"include_stmt":16,"with_stmt":17,"if_stmt":18,"for_stmt":19,"name":20,"fn":21,"HTML":22,"i_html":23,"I_HTML_START":24,"i_html_text":25,"I_HTML_END":26,"i_html_text_el":27,"I_HTML_TEXT":28,"void_tag":29,"END_TAG":30,"tag_attrs":31,"VOID_TAG":32,"regular_tag":33,"pre_tag":34,"tag":35,"text":36,"PRE_TAG":37,"END_PRE_TAG":38,"pre_block":39,"FILTER_START":40,"pre_text":41,"LINE":42,"TAG":43,"tag_attr":44,"tag_attr_args":45,"TAG_ID":46,"TAG_SRC":47,"TAG_SRC_I_STRING":48,"string":49,"tag_classes":50,"TAG_ATTR":51,"EQ":52,"TAG_DATA_ATTR":53,"LPAREN":54,"tag_attr_arg_list":55,"RPAREN":56,"LBRACE":57,"tag_attr_arg_list_alt":58,"RBRACE":59,"tag_attr_arg":60,"COMMA":61,"tag_attr_arg_alt":62,"COLON":63,"TAG_CLASS":64,"FILTER":65,"word_list":66,"word":67,"WORD":68,"SPACE":69,"path_or_fn":70,"path":71,"WITH":72,"AS":73,"ID":74,"END_EXPR":75,"FOR":76,"IN":77,"IF":78,"ev":79,"ELSE":80,"NOT":81,"COND":82,"IS":83,"TYPE":84,"EXISTS":85,"INT":86,"BOOL":87,"ALIAS":88,"INCLUDE":89,"id":90,"DOT":91,"meths":92,"LBRACK":93,"RBRACK":94,"meth":95,"meth_args":96,"meth_arg":97,"FN":98,"fn_args":99,"fn_arg":100,"hash":101,"hash_data":102,"hash_pair":103,"hash_val":104,"START_NAME":105,"STRING":106,"i_string":107,"I_STRING_D":108,"i_string_text":109,"END_I_STRING_D":110,"I_STRING_S":111,"END_I_STRING_S":112,"i_string_text_el":113,"I_STRING_TEXT":114,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",10:"DEDENT",22:"HTML",24:"I_HTML_START",26:"I_HTML_END",28:"I_HTML_TEXT",30:"END_TAG",32:"VOID_TAG",37:"PRE_TAG",38:"END_PRE_TAG",40:"FILTER_START",42:"LINE",43:"TAG",46:"TAG_ID",47:"TAG_SRC",48:"TAG_SRC_I_STRING",51:"TAG_ATTR",52:"EQ",53:"TAG_DATA_ATTR",54:"LPAREN",56:"RPAREN",57:"LBRACE",59:"RBRACE",61:"COMMA",63:"COLON",64:"TAG_CLASS",65:"FILTER",68:"WORD",69:"SPACE",72:"WITH",73:"AS",74:"ID",75:"END_EXPR",76:"FOR",77:"IN",78:"IF",80:"ELSE",81:"NOT",82:"COND",83:"IS",84:"TYPE",85:"EXISTS",86:"INT",87:"BOOL",88:"ALIAS",89:"INCLUDE",91:"DOT",93:"LBRACK",94:"RBRACK",98:"FN",105:"START_NAME",106:"STRING",108:"I_STRING_D",110:"END_I_STRING_D",111:"I_STRING_S",112:"END_I_STRING_S",114:"I_STRING_TEXT"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,3],[9,2],[9,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,1],[11,1],[23,3],[25,2],[25,1],[27,1],[27,1],[12,2],[12,3],[29,1],[13,1],[13,1],[33,2],[33,3],[33,3],[33,3],[33,4],[33,4],[34,2],[34,3],[34,3],[34,4],[39,3],[41,2],[41,1],[35,1],[31,2],[31,1],[31,1],[44,1],[44,1],[44,2],[44,1],[44,3],[44,3],[45,3],[45,3],[55,2],[55,1],[60,3],[60,4],[60,3],[60,4],[58,2],[58,1],[62,3],[62,4],[62,3],[62,4],[50,2],[50,1],[14,4],[36,1],[66,1],[66,2],[67,1],[67,1],[67,1],[67,1],[67,1],[70,1],[70,1],[17,6],[19,6],[18,4],[18,7],[18,5],[18,8],[18,6],[18,9],[18,6],[18,9],[18,7],[18,10],[18,5],[18,8],[79,1],[79,1],[79,1],[79,1],[79,1],[15,5],[16,3],[16,3],[71,1],[71,3],[71,3],[90,1],[90,4],[90,6],[90,6],[90,4],[90,6],[90,6],[90,5],[90,5],[92,1],[92,3],[95,3],[95,4],[96,3],[96,1],[97,1],[97,1],[97,1],[21,3],[21,4],[99,3],[99,1],[100,1],[100,1],[100,1],[100,1],[100,1],[101,3],[101,4],[102,3],[102,1],[103,3],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[20,3],[49,1],[49,1],[107,3],[107,3],[109,2],[109,1],[113,1],[113,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0-1]; 
break;
case 6: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = [$$[$0]]; 
break;
case 19: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 21: 
      var body = [$$[$0-2]];
      body.push.apply(body, $$[$0-1]);
      body.push($$[$0]);
      this.$ = new MananaStringNode(body, new Loc(_$[$0-2], _$[$0])); 
    
break;
case 22: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 23: this.$ = [$$[$0]]; 
break;
case 26: this.$ = new VoidTagNode($$[$0-1], null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 27: this.$ = new VoidTagNode($$[$0-2], $$[$0-1],   new Loc(_$[$0-2], _$[$0-1])); 
break;
case 28: this.$ = $$[$0]; 
break;
case 31: this.$ = new TagNode($$[$0-1], null, null, null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 32: this.$ = new TagNode($$[$0-2], null, $$[$0-1],   null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 33: this.$ = new TagNode($$[$0-2], null, null, $$[$0],   new Loc(_$[$0-2], _$[$0])); 
break;
case 34: this.$ = new TagNode($$[$0-2], $$[$0-1],   null, null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 35: this.$ = new TagNode($$[$0-3], $$[$0-2],   $$[$0-1],   null, new Loc(_$[$0-3], _$[$0-1])); 
break;
case 36: this.$ = new TagNode($$[$0-3], $$[$0-2],   null, $$[$0],   new Loc(_$[$0-3], _$[$0])); 
break;
case 37: this.$ = new PreTagNode($$[$0-1], null, null, new Loc(_$[$0-1], _$[$0])); 
break;
case 38: this.$ = new PreTagNode($$[$0-2], $$[$0-1],   null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 39: this.$ = new PreTagNode($$[$0-2], null, $$[$0],   new Loc(_$[$0-2], _$[$0])); 
break;
case 40: this.$ = new PreTagNode($$[$0-3], $$[$0-2],   $$[$0],   new Loc(_$[$0-3], _$[$0-1])); 
break;
case 41: this.$ = $$[$0-1]; 
break;
case 42: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 43: this.$ = [$$[$0]]; 
break;
case 44: this.$ = $$[$0]; 
break;
case 45: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 46: this.$ = [$$[$0]]; 
break;
case 47: this.$ = $$[$0]; 
break;
case 48: this.$ = ['id', $$[$0]]; 
break;
case 49: this.$ = ['src', new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])) ]; 
break;
case 50: this.$ = ['src', $$[$0]]; 
break;
case 51: this.$ = ['class', $$[$0].join(" ")]; 
break;
case 52: this.$ = ['attr', $$[$0-2], $$[$0]]; 
break;
case 53: this.$ = ['data', $$[$0-2], $$[$0]]; 
break;
case 54: this.$ = $$[$0-1]; 
break;
case 55: this.$ = $$[$0-1]; 
break;
case 56: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 57: this.$ = [$$[$0]]; 
break;
case 58: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 59: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 60: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 61: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 62: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 63: this.$ = [$$[$0]]; 
break;
case 64: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 65: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 66: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 67: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 68: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 69: this.$ = [$$[$0]]; 
break;
case 70: this.$ = new FilterNode($$[$0-3], $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 71: this.$ = new TextNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 72: this.$ = [$$[$0]]; 
break;
case 73: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 81: this.$ = new WithNode($$[$0-4], $$[$0-2], $$[$0], new Loc(_$[$0-5], _$[$0])); 
break;
case 82: this.$ = new ForNode($$[$0-4], $$[$0-2], $$[$0] , new Loc(_$[$0-5], _$[$0])) ; 
break;
case 83: this.$ = new IfNode("true", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-3], _$[$0])); 
break;
case 84: this.$ = new IfNode("true", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-6], _$[$0])); 
break;
case 85: this.$ = new IfNode("false", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-4], _$[$0])); 
break;
case 86: this.$ = new IfNode("false", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-7], _$[$0])); 
break;
case 87: this.$ = new IfNode($$[$0-3], $$[$0-4], $$[$0-2], $$[$0], null, new Loc(_$[$0-5], _$[$0])); 
break;
case 88: this.$ = new IfNode($$[$0-6], $$[$0-7], $$[$0-5], $$[$0-3], $$[$0], new Loc(_$[$0-8], _$[$0])); 
break;
case 89: this.$ = new IfNode($$[$0-3], $$[$0-4], $$[$0-2], $$[$0], null, new Loc(_$[$0-5], _$[$0])); 
break;
case 90: this.$ = new IfNode($$[$0-6], $$[$0-7], $$[$0-5], $$[$0-3], null, new Loc(_$[$0-8], _$[$0])); 
break;
case 91: this.$ = new IfNode("is not", $$[$0-5], $$[$0-2], $$[$0], null, new Loc(_$[$0-6], _$[$0])); 
break;
case 92: this.$ = new IfNode("is not", $$[$0-8], $$[$0-5], $$[$0-3], $$[$0], new Loc(_$[$0-9], _$[$0])); 
break;
case 93: this.$ = new IfNode("exists", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-4], _$[$0])); 
break;
case 94: this.$ = new IfNode("exists", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-7], _$[$0])); 
break;
case 100: this.$ = new AliasNode($$[$0-3], $$[$0-1], new Loc(_$[$0-4], _$[$0])); 
break;
case 101: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 102: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 103: this.$ = new PathNode(null, $$[$0]  , null, new Loc(_$[$0], _$[$0])); 
break;
case 104: this.$ = new PathNode($$[$0-2]  , $$[$0]  , null, new Loc(_$[$0-2], _$[$0])); 
break;
case 105: this.$ = new PathNode($$[$0-2]  , null, $$[$0]  , new Loc(_$[$0-2], _$[$0])); 
break;
case 106: this.$ = new IdNode($$[$0], null, null, new Loc(_$[$0], _$[$0])); 
break;
case 107: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 108: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 109: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 110: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 111: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 112: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 113: this.$ = new IdNode($$[$0-4], 0   , $$[$0-1]  , new Loc(_$[$0-4], _$[$0])); 
break;
case 114: this.$ = new IdNode($$[$0-4], $$[$0-2]  , '*' , new Loc(_$[$0-4], _$[$0])); 
break;
case 115: this.$ = new MethodChainNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 116: this.$ = $$[$0-2]; this.$.chain.push($$[$0])                        ; 
break;
case 117: this.$ = new MethodNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 118: this.$ = new MethodNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 119: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 120: this.$ = [$$[$0]]; 
break;
case 124: this.$ = new FunctionNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 125: this.$ = new FunctionNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 126: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 127: this.$ = [$$[$0]]; 
break;
case 133: this.$ = new MananaHash($$[$0-1]); 
break;
case 134: this.$ = new MananaHash($$[$0-2]); 
break;
case 135: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 136: this.$ = [$$[$0]]; 
break;
case 137: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 144: this.$ = $$[$0-1]; 
break;
case 145: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 147: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 148: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 149: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 150: this.$ = [$$[$0]]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,16],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:[1,17],23:18,24:[1,30],29:19,32:[1,31],33:20,34:21,35:32,37:[1,33],43:[1,34],65:[1,22],72:[1,25],76:[1,27],78:[1,26],88:[1,23],89:[1,24],98:[1,29],105:[1,28]},{1:[3]},{5:[1,35],6:36,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:[1,17],23:18,24:[1,30],29:19,32:[1,31],33:20,34:21,35:32,37:[1,33],43:[1,34],65:[1,22],72:[1,25],76:[1,27],78:[1,26],88:[1,23],89:[1,24],98:[1,29],105:[1,28]},{5:[2,3],22:[2,3],24:[2,3],32:[2,3],37:[2,3],43:[2,3],65:[2,3],72:[2,3],76:[2,3],78:[2,3],88:[2,3],89:[2,3],98:[2,3],105:[2,3]},{5:[2,4],22:[2,4],24:[2,4],32:[2,4],37:[2,4],43:[2,4],65:[2,4],72:[2,4],76:[2,4],78:[2,4],88:[2,4],89:[2,4],98:[2,4],105:[2,4]},{5:[2,8],10:[2,8],22:[2,8],24:[2,8],32:[2,8],37:[2,8],43:[2,8],65:[2,8],72:[2,8],76:[2,8],78:[2,8],88:[2,8],89:[2,8],98:[2,8],105:[2,8]},{5:[2,9],10:[2,9],22:[2,9],24:[2,9],32:[2,9],37:[2,9],43:[2,9],65:[2,9],72:[2,9],76:[2,9],78:[2,9],88:[2,9],89:[2,9],98:[2,9],105:[2,9]},{5:[2,10],10:[2,10],22:[2,10],24:[2,10],32:[2,10],37:[2,10],43:[2,10],65:[2,10],72:[2,10],76:[2,10],78:[2,10],88:[2,10],89:[2,10],98:[2,10],105:[2,10]},{5:[2,11],10:[2,11],22:[2,11],24:[2,11],32:[2,11],37:[2,11],43:[2,11],65:[2,11],72:[2,11],76:[2,11],78:[2,11],88:[2,11],89:[2,11],98:[2,11],105:[2,11]},{5:[2,12],10:[2,12],22:[2,12],24:[2,12],32:[2,12],37:[2,12],43:[2,12],65:[2,12],72:[2,12],76:[2,12],78:[2,12],88:[2,12],89:[2,12],98:[2,12],105:[2,12]},{5:[2,13],10:[2,13],22:[2,13],24:[2,13],32:[2,13],37:[2,13],43:[2,13],65:[2,13],72:[2,13],76:[2,13],78:[2,13],88:[2,13],89:[2,13],98:[2,13],105:[2,13]},{5:[2,14],10:[2,14],22:[2,14],24:[2,14],32:[2,14],37:[2,14],43:[2,14],65:[2,14],72:[2,14],76:[2,14],78:[2,14],88:[2,14],89:[2,14],98:[2,14],105:[2,14]},{5:[2,15],10:[2,15],22:[2,15],24:[2,15],32:[2,15],37:[2,15],43:[2,15],65:[2,15],72:[2,15],76:[2,15],78:[2,15],88:[2,15],89:[2,15],98:[2,15],105:[2,15]},{5:[2,16],10:[2,16],22:[2,16],24:[2,16],32:[2,16],37:[2,16],43:[2,16],65:[2,16],72:[2,16],76:[2,16],78:[2,16],88:[2,16],89:[2,16],98:[2,16],105:[2,16]},{5:[2,17],10:[2,17],22:[2,17],24:[2,17],32:[2,17],37:[2,17],43:[2,17],65:[2,17],72:[2,17],76:[2,17],78:[2,17],88:[2,17],89:[2,17],98:[2,17],105:[2,17]},{5:[2,18],10:[2,18],22:[2,18],24:[2,18],32:[2,18],37:[2,18],43:[2,18],65:[2,18],72:[2,18],76:[2,18],78:[2,18],88:[2,18],89:[2,18],98:[2,18],105:[2,18]},{6:38,9:37,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:[1,17],23:18,24:[1,30],29:19,32:[1,31],33:20,34:21,35:32,37:[1,33],43:[1,34],65:[1,22],72:[1,25],76:[1,27],78:[1,26],88:[1,23],89:[1,24],98:[1,29],105:[1,28]},{5:[2,19],10:[2,19],22:[2,19],24:[2,19],32:[2,19],37:[2,19],43:[2,19],65:[2,19],72:[2,19],76:[2,19],78:[2,19],88:[2,19],89:[2,19],98:[2,19],105:[2,19]},{5:[2,20],10:[2,20],22:[2,20],24:[2,20],32:[2,20],37:[2,20],43:[2,20],65:[2,20],72:[2,20],76:[2,20],78:[2,20],88:[2,20],89:[2,20],98:[2,20],105:[2,20]},{30:[1,39],31:40,44:41,45:42,46:[1,43],47:[1,44],48:[1,45],50:46,51:[1,47],53:[1,48],54:[1,49],57:[1,50],64:[1,51]},{5:[2,29],10:[2,29],22:[2,29],24:[2,29],32:[2,29],37:[2,29],43:[2,29],65:[2,29],72:[2,29],76:[2,29],78:[2,29],88:[2,29],89:[2,29],98:[2,29],105:[2,29]},{5:[2,30],10:[2,30],22:[2,30],24:[2,30],32:[2,30],37:[2,30],43:[2,30],65:[2,30],72:[2,30],76:[2,30],78:[2,30],88:[2,30],89:[2,30],98:[2,30],105:[2,30]},{40:[1,52]},{21:55,70:53,71:54,74:[1,57],90:56,98:[1,29]},{49:58,71:59,74:[1,57],90:56,106:[1,60],107:61,108:[1,62],111:[1,63]},{21:55,70:64,71:54,74:[1,57],90:56,98:[1,29]},{21:72,49:68,71:71,74:[1,57],79:65,81:[1,66],85:[1,67],86:[1,69],87:[1,70],90:56,98:[1,29],106:[1,60],107:61,108:[1,62],111:[1,63]},{74:[1,73]},{71:74,74:[1,57],90:56},{54:[1,75]},{20:79,25:76,27:77,28:[1,78],105:[1,28]},{30:[2,28],46:[2,28],47:[2,28],48:[2,28],51:[2,28],53:[2,28],54:[2,28],57:[2,28],64:[2,28]},{20:86,21:87,30:[1,80],31:82,36:81,44:41,45:42,46:[1,43],47:[1,44],48:[1,45],49:88,50:46,51:[1,47],53:[1,48],54:[1,49],57:[1,50],64:[1,51],66:83,67:84,68:[1,85],69:[1,89],98:[1,29],105:[1,28],106:[1,60],107:61,108:[1,62],111:[1,63]},{31:91,38:[1,90],44:41,45:42,46:[1,43],47:[1,44],48:[1,45],50:46,51:[1,47],53:[1,48],54:[1,49],57:[1,50],64:[1,51]},{30:[2,44],46:[2,44],47:[2,44],48:[2,44],51:[2,44],53:[2,44],54:[2,44],57:[2,44],64:[2,44],68:[2,44],69:[2,44],98:[2,44],105:[2,44],106:[2,44],108:[2,44],111:[2,44]},{1:[2,1]},{5:[2,2],22:[2,2],24:[2,2],32:[2,2],37:[2,2],43:[2,2],65:[2,2],72:[2,2],76:[2,2],78:[2,2],88:[2,2],89:[2,2],98:[2,2],105:[2,2]},{6:93,10:[1,92],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:[1,17],23:18,24:[1,30],29:19,32:[1,31],33:20,34:21,35:32,37:[1,33],43:[1,34],65:[1,22],72:[1,25],76:[1,27],78:[1,26],88:[1,23],89:[1,24],98:[1,29],105:[1,28]},{10:[2,7],22:[2,7],24:[2,7],32:[2,7],37:[2,7],43:[2,7],65:[2,7],72:[2,7],76:[2,7],78:[2,7],88:[2,7],89:[2,7],98:[2,7],105:[2,7]},{5:[2,26],10:[2,26],22:[2,26],24:[2,26],32:[2,26],37:[2,26],43:[2,26],65:[2,26],72:[2,26],76:[2,26],78:[2,26],88:[2,26],89:[2,26],98:[2,26],105:[2,26]},{30:[1,94],44:95,46:[1,43],47:[1,44],48:[1,45],50:46,51:[1,47],53:[1,48],64:[1,51]},{30:[2,46],38:[2,46],46:[2,46],47:[2,46],48:[2,46],51:[2,46],53:[2,46],64:[2,46],68:[2,46],69:[2,46],98:[2,46],105:[2,46],106:[2,46],108:[2,46],111:[2,46]},{30:[2,47],38:[2,47],46:[2,47],47:[2,47],48:[2,47],51:[2,47],53:[2,47],64:[2,47],68:[2,47],69:[2,47],98:[2,47],105:[2,47],106:[2,47],108:[2,47],111:[2,47]},{30:[2,48],38:[2,48],46:[2,48],47:[2,48],48:[2,48],51:[2,48],53:[2,48],64:[2,48],68:[2,48],69:[2,48],98:[2,48],105:[2,48],106:[2,48],108:[2,48],111:[2,48]},{30:[2,49],38:[2,49],46:[2,49],47:[2,49],48:[2,49],51:[2,49],53:[2,49],64:[2,49],68:[2,49],69:[2,49],98:[2,49],105:[2,49],106:[2,49],108:[2,49],111:[2,49]},{49:96,106:[1,60],107:61,108:[1,62],111:[1,63]},{30:[2,51],38:[2,51],46:[2,51],47:[2,51],48:[2,51],51:[2,51],53:[2,51],64:[1,97],68:[2,51],69:[2,51],98:[2,51],105:[2,51],106:[2,51],108:[2,51],111:[2,51]},{52:[1,98]},{52:[1,99]},{51:[1,102],53:[1,103],55:100,60:101},{51:[1,106],53:[1,107],58:104,62:105},{30:[2,69],38:[2,69],46:[2,69],47:[2,69],48:[2,69],51:[2,69],53:[2,69],64:[2,69],68:[2,69],69:[2,69],98:[2,69],105:[2,69],106:[2,69],108:[2,69],111:[2,69]},{20:86,21:87,36:108,49:88,66:83,67:84,68:[1,85],69:[1,89],98:[1,29],105:[1,28],106:[1,60],107:61,108:[1,62],111:[1,63]},{73:[1,109]},{73:[2,79],91:[1,110]},{73:[2,80]},{56:[2,103],59:[2,103],61:[2,103],63:[2,103],73:[2,103],75:[2,103],82:[2,103],83:[2,103],91:[2,103],94:[2,103]},{56:[2,106],59:[2,106],61:[2,106],63:[2,106],73:[2,106],75:[2,106],82:[2,106],83:[2,106],91:[2,106],93:[1,111],94:[2,106]},{75:[1,112]},{75:[1,113],91:[1,110]},{10:[2,145],30:[2,145],38:[2,145],46:[2,145],47:[2,145],48:[2,145],51:[2,145],53:[2,145],56:[2,145],59:[2,145],61:[2,145],64:[2,145],68:[2,145],69:[2,145],75:[2,145],82:[2,145],83:[2,145],98:[2,145],105:[2,145],106:[2,145],108:[2,145],111:[2,145]},{10:[2,146],30:[2,146],38:[2,146],46:[2,146],47:[2,146],48:[2,146],51:[2,146],53:[2,146],56:[2,146],59:[2,146],61:[2,146],64:[2,146],68:[2,146],69:[2,146],75:[2,146],82:[2,146],83:[2,146],98:[2,146],105:[2,146],106:[2,146],108:[2,146],111:[2,146]},{20:116,105:[1,28],109:114,113:115,114:[1,117]},{20:116,105:[1,28],109:118,113:115,114:[1,117]},{73:[1,119]},{75:[1,120],82:[1,121],83:[1,122]},{21:72,49:68,71:71,74:[1,57],79:123,86:[1,69],87:[1,70],90:56,98:[1,29],106:[1,60],107:61,108:[1,62],111:[1,63]},{21:72,49:68,71:71,74:[1,57],79:124,86:[1,69],87:[1,70],90:56,98:[1,29],106:[1,60],107:61,108:[1,62],111:[1,63]},{75:[2,95],82:[2,95],83:[2,95]},{75:[2,96],82:[2,96],83:[2,96]},{75:[2,97],82:[2,97],83:[2,97]},{75:[2,98],82:[2,98],83:[2,98],91:[1,110]},{75:[2,99],82:[2,99],83:[2,99]},{77:[1,125]},{59:[1,126],91:[1,110]},{21:133,49:132,56:[1,127],57:[1,135],71:130,74:[1,57],86:[1,131],90:56,98:[1,29],99:128,100:129,101:134,106:[1,60],107:61,108:[1,62],111:[1,63]},{20:79,26:[1,136],27:137,28:[1,78],105:[1,28]},{26:[2,23],28:[2,23],105:[2,23]},{26:[2,24],28:[2,24],105:[2,24]},{26:[2,25],28:[2,25],105:[2,25]},{5:[2,31],7:138,8:[1,16],10:[2,31],22:[2,31],24:[2,31],32:[2,31],37:[2,31],43:[2,31],65:[2,31],72:[2,31],76:[2,31],78:[2,31],88:[2,31],89:[2,31],98:[2,31],105:[2,31]},{30:[1,139]},{20:86,21:87,30:[1,140],36:141,44:95,46:[1,43],47:[1,44],48:[1,45],49:88,50:46,51:[1,47],53:[1,48],64:[1,51],66:83,67:84,68:[1,85],69:[1,89],98:[1,29],105:[1,28],106:[1,60],107:61,108:[1,62],111:[1,63]},{10:[2,71],20:86,21:87,30:[2,71],49:88,67:142,68:[1,85],69:[1,89],98:[1,29],105:[1,28],106:[1,60],107:61,108:[1,62],111:[1,63]},{10:[2,72],30:[2,72],68:[2,72],69:[2,72],98:[2,72],105:[2,72],106:[2,72],108:[2,72],111:[2,72]},{10:[2,74],30:[2,74],68:[2,74],69:[2,74],98:[2,74],105:[2,74],106:[2,74],108:[2,74],111:[2,74]},{10:[2,75],30:[2,75],68:[2,75],69:[2,75],98:[2,75],105:[2,75],106:[2,75],108:[2,75],111:[2,75]},{10:[2,76],30:[2,76],68:[2,76],69:[2,76],98:[2,76],105:[2,76],106:[2,76],108:[2,76],111:[2,76]},{10:[2,77],30:[2,77],68:[2,77],69:[2,77],98:[2,77],105:[2,77],106:[2,77],108:[2,77],111:[2,77]},{10:[2,78],30:[2,78],68:[2,78],69:[2,78],98:[2,78],105:[2,78],106:[2,78],108:[2,78],111:[2,78]},{5:[2,37],10:[2,37],22:[2,37],24:[2,37],32:[2,37],37:[2,37],39:143,40:[1,144],43:[2,37],65:[2,37],72:[2,37],76:[2,37],78:[2,37],88:[2,37],89:[2,37],98:[2,37],105:[2,37]},{38:[1,145],44:95,46:[1,43],47:[1,44],48:[1,45],50:46,51:[1,47],53:[1,48],64:[1,51]},{5:[2,5],10:[2,5],22:[2,5],24:[2,5],32:[2,5],37:[2,5],43:[2,5],65:[2,5],72:[2,5],76:[2,5],78:[2,5],80:[2,5],88:[2,5],89:[2,5],98:[2,5],105:[2,5]},{10:[2,6],22:[2,6],24:[2,6],32:[2,6],37:[2,6],43:[2,6],65:[2,6],72:[2,6],76:[2,6],78:[2,6],88:[2,6],89:[2,6],98:[2,6],105:[2,6]},{5:[2,27],10:[2,27],22:[2,27],24:[2,27],32:[2,27],37:[2,27],43:[2,27],65:[2,27],72:[2,27],76:[2,27],78:[2,27],88:[2,27],89:[2,27],98:[2,27],105:[2,27]},{30:[2,45],38:[2,45],46:[2,45],47:[2,45],48:[2,45],51:[2,45],53:[2,45],64:[2,45],68:[2,45],69:[2,45],98:[2,45],105:[2,45],106:[2,45],108:[2,45],111:[2,45]},{30:[2,50],38:[2,50],46:[2,50],47:[2,50],48:[2,50],51:[2,50],53:[2,50],64:[2,50],68:[2,50],69:[2,50],98:[2,50],105:[2,50],106:[2,50],108:[2,50],111:[2,50]},{30:[2,68],38:[2,68],46:[2,68],47:[2,68],48:[2,68],51:[2,68],53:[2,68],64:[2,68],68:[2,68],69:[2,68],98:[2,68],105:[2,68],106:[2,68],108:[2,68],111:[2,68]},{49:146,106:[1,60],107:61,108:[1,62],111:[1,63]},{49:147,106:[1,60],107:61,108:[1,62],111:[1,63]},{51:[1,102],53:[1,103],56:[1,148],60:149},{51:[2,57],53:[2,57],56:[2,57]},{52:[1,150]},{52:[1,151]},{51:[1,106],53:[1,107],59:[1,152],62:153},{51:[2,63],53:[2,63],59:[2,63]},{63:[1,154]},{63:[1,155]},{10:[1,156]},{74:[1,157]},{74:[1,160],90:158,92:159,95:161},{63:[1,164],71:163,74:[1,57],86:[1,162],90:56},{5:[2,101],10:[2,101],22:[2,101],24:[2,101],32:[2,101],37:[2,101],43:[2,101],65:[2,101],72:[2,101],76:[2,101],78:[2,101],88:[2,101],89:[2,101],98:[2,101],105:[2,101]},{5:[2,102],10:[2,102],22:[2,102],24:[2,102],32:[2,102],37:[2,102],43:[2,102],65:[2,102],72:[2,102],76:[2,102],78:[2,102],88:[2,102],89:[2,102],98:[2,102],105:[2,102]},{20:116,105:[1,28],110:[1,165],113:166,114:[1,117]},{105:[2,150],110:[2,150],112:[2,150],114:[2,150]},{105:[2,151],110:[2,151],112:[2,151],114:[2,151]},{105:[2,152],110:[2,152],112:[2,152],114:[2,152]},{20:116,105:[1,28],112:[1,167],113:166,114:[1,117]},{74:[1,168]},{7:169,8:[1,16]},{21:72,49:68,71:71,74:[1,57],79:170,86:[1,69],87:[1,70],90:56,98:[1,29],106:[1,60],107:61,108:[1,62],111:[1,63]},{81:[1,172],84:[1,171]},{75:[1,173]},{75:[1,174]},{71:175,74:[1,57],90:56},{5:[2,144],10:[2,144],22:[2,144],24:[2,144],26:[2,144],28:[2,144],30:[2,144],32:[2,144],37:[2,144],43:[2,144],65:[2,144],68:[2,144],69:[2,144],72:[2,144],76:[2,144],78:[2,144],88:[2,144],89:[2,144],98:[2,144],105:[2,144],106:[2,144],108:[2,144],110:[2,144],111:[2,144],112:[2,144],114:[2,144]},{5:[2,124],10:[2,124],22:[2,124],24:[2,124],30:[2,124],32:[2,124],37:[2,124],43:[2,124],56:[2,124],59:[2,124],61:[2,124],65:[2,124],68:[2,124],69:[2,124],72:[2,124],73:[2,124],75:[2,124],76:[2,124],78:[2,124],82:[2,124],83:[2,124],88:[2,124],89:[2,124],98:[2,124],105:[2,124],106:[2,124],108:[2,124],111:[2,124]},{56:[1,176],61:[1,177]},{56:[2,127],61:[2,127]},{56:[2,128],61:[2,128],91:[1,110]},{56:[2,129],61:[2,129]},{56:[2,130],61:[2,130]},{56:[2,131],61:[2,131]},{56:[2,132],61:[2,132]},{74:[1,180],102:178,103:179},{5:[2,21],10:[2,21],22:[2,21],24:[2,21],32:[2,21],37:[2,21],43:[2,21],65:[2,21],72:[2,21],76:[2,21],78:[2,21],88:[2,21],89:[2,21],98:[2,21],105:[2,21]},{26:[2,22],28:[2,22],105:[2,22]},{5:[2,33],10:[2,33],22:[2,33],24:[2,33],32:[2,33],37:[2,33],43:[2,33],65:[2,33],72:[2,33],76:[2,33],78:[2,33],88:[2,33],89:[2,33],98:[2,33],105:[2,33]},{5:[2,32],10:[2,32],22:[2,32],24:[2,32],32:[2,32],37:[2,32],43:[2,32],65:[2,32],72:[2,32],76:[2,32],78:[2,32],88:[2,32],89:[2,32],98:[2,32],105:[2,32]},{5:[2,34],7:181,8:[1,16],10:[2,34],22:[2,34],24:[2,34],32:[2,34],37:[2,34],43:[2,34],65:[2,34],72:[2,34],76:[2,34],78:[2,34],88:[2,34],89:[2,34],98:[2,34],105:[2,34]},{30:[1,182]},{10:[2,73],30:[2,73],68:[2,73],69:[2,73],98:[2,73],105:[2,73],106:[2,73],108:[2,73],111:[2,73]},{5:[2,39],10:[2,39],22:[2,39],24:[2,39],32:[2,39],37:[2,39],43:[2,39],65:[2,39],72:[2,39],76:[2,39],78:[2,39],88:[2,39],89:[2,39],98:[2,39],105:[2,39]},{41:183,42:[1,184]},{5:[2,38],10:[2,38],22:[2,38],24:[2,38],32:[2,38],37:[2,38],39:185,40:[1,144],43:[2,38],65:[2,38],72:[2,38],76:[2,38],78:[2,38],88:[2,38],89:[2,38],98:[2,38],105:[2,38]},{30:[2,52],38:[2,52],46:[2,52],47:[2,52],48:[2,52],51:[2,52],53:[2,52],64:[2,52],68:[2,52],69:[2,52],98:[2,52],105:[2,52],106:[2,52],108:[2,52],111:[2,52]},{30:[2,53],38:[2,53],46:[2,53],47:[2,53],48:[2,53],51:[2,53],53:[2,53],64:[2,53],68:[2,53],69:[2,53],98:[2,53],105:[2,53],106:[2,53],108:[2,53],111:[2,53]},{30:[2,54],38:[2,54],46:[2,54],47:[2,54],48:[2,54],51:[2,54],53:[2,54],64:[2,54],68:[2,54],69:[2,54],98:[2,54],105:[2,54],106:[2,54],108:[2,54],111:[2,54]},{51:[2,56],53:[2,56],56:[2,56]},{49:186,106:[1,60],107:61,108:[1,62],111:[1,63]},{49:187,106:[1,60],107:61,108:[1,62],111:[1,63]},{30:[2,55],38:[2,55],46:[2,55],47:[2,55],48:[2,55],51:[2,55],53:[2,55],64:[2,55],68:[2,55],69:[2,55],98:[2,55],105:[2,55],106:[2,55],108:[2,55],111:[2,55]},{51:[2,62],53:[2,62],59:[2,62]},{49:188,106:[1,60],107:61,108:[1,62],111:[1,63]},{49:189,106:[1,60],107:61,108:[1,62],111:[1,63]},{5:[2,70],10:[2,70],22:[2,70],24:[2,70],32:[2,70],37:[2,70],43:[2,70],65:[2,70],72:[2,70],76:[2,70],78:[2,70],88:[2,70],89:[2,70],98:[2,70],105:[2,70]},{75:[1,190]},{56:[2,104],59:[2,104],61:[2,104],63:[2,104],73:[2,104],75:[2,104],82:[2,104],83:[2,104],91:[2,104],94:[2,104]},{56:[2,105],59:[2,105],61:[2,105],63:[2,105],73:[2,105],75:[2,105],82:[2,105],83:[2,105],91:[1,191],94:[2,105]},{54:[1,192],56:[2,106],59:[2,106],61:[2,106],63:[2,106],73:[2,106],75:[2,106],82:[2,106],83:[2,106],91:[2,106],93:[1,111],94:[2,106]},{56:[2,115],59:[2,115],61:[2,115],63:[2,115],73:[2,115],75:[2,115],82:[2,115],83:[2,115],91:[2,115],94:[2,115]},{63:[1,194],94:[1,193]},{63:[1,196],91:[1,110],94:[1,195]},{86:[1,197]},{10:[2,147],30:[2,147],38:[2,147],46:[2,147],47:[2,147],48:[2,147],51:[2,147],53:[2,147],56:[2,147],59:[2,147],61:[2,147],64:[2,147],68:[2,147],69:[2,147],75:[2,147],82:[2,147],83:[2,147],98:[2,147],105:[2,147],106:[2,147],108:[2,147],111:[2,147]},{105:[2,149],110:[2,149],112:[2,149],114:[2,149]},{10:[2,148],30:[2,148],38:[2,148],46:[2,148],47:[2,148],48:[2,148],51:[2,148],53:[2,148],56:[2,148],59:[2,148],61:[2,148],64:[2,148],68:[2,148],69:[2,148],75:[2,148],82:[2,148],83:[2,148],98:[2,148],105:[2,148],106:[2,148],108:[2,148],111:[2,148]},{75:[1,198]},{5:[2,83],10:[2,83],22:[2,83],24:[2,83],32:[2,83],37:[2,83],43:[2,83],65:[2,83],72:[2,83],76:[2,83],78:[2,83],80:[1,199],88:[2,83],89:[2,83],98:[2,83],105:[2,83]},{75:[1,200]},{75:[1,201]},{84:[1,202]},{7:203,8:[1,16]},{7:204,8:[1,16]},{75:[1,205],91:[1,110]},{5:[2,125],10:[2,125],22:[2,125],24:[2,125],30:[2,125],32:[2,125],37:[2,125],43:[2,125],56:[2,125],59:[2,125],61:[2,125],65:[2,125],68:[2,125],69:[2,125],72:[2,125],73:[2,125],75:[2,125],76:[2,125],78:[2,125],82:[2,125],83:[2,125],88:[2,125],89:[2,125],98:[2,125],105:[2,125],106:[2,125],108:[2,125],111:[2,125]},{21:133,49:132,57:[1,135],71:130,74:[1,57],86:[1,131],90:56,98:[1,29],100:206,101:134,106:[1,60],107:61,108:[1,62],111:[1,63]},{59:[1,207],61:[1,208]},{59:[2,136],61:[2,136]},{63:[1,209]},{5:[2,36],10:[2,36],22:[2,36],24:[2,36],32:[2,36],37:[2,36],43:[2,36],65:[2,36],72:[2,36],76:[2,36],78:[2,36],88:[2,36],89:[2,36],98:[2,36],105:[2,36]},{5:[2,35],10:[2,35],22:[2,35],24:[2,35],32:[2,35],37:[2,35],43:[2,35],65:[2,35],72:[2,35],76:[2,35],78:[2,35],88:[2,35],89:[2,35],98:[2,35],105:[2,35]},{10:[1,210],42:[1,211]},{10:[2,43],42:[2,43]},{5:[2,40],10:[2,40],22:[2,40],24:[2,40],32:[2,40],37:[2,40],43:[2,40],65:[2,40],72:[2,40],76:[2,40],78:[2,40],88:[2,40],89:[2,40],98:[2,40],105:[2,40]},{51:[2,58],53:[2,58],56:[2,58],61:[1,212]},{51:[2,60],53:[2,60],56:[2,60],61:[1,213]},{51:[2,64],53:[2,64],59:[2,64],61:[1,214]},{51:[2,66],53:[2,66],59:[2,66],61:[1,215]},{5:[2,100],10:[2,100],22:[2,100],24:[2,100],32:[2,100],37:[2,100],43:[2,100],65:[2,100],72:[2,100],76:[2,100],78:[2,100],88:[2,100],89:[2,100],98:[2,100],105:[2,100]},{74:[1,217],95:216},{49:223,56:[1,218],71:221,74:[1,57],86:[1,222],90:56,96:219,97:220,106:[1,60],107:61,108:[1,62],111:[1,63]},{56:[2,107],59:[2,107],61:[2,107],63:[2,107],73:[2,107],75:[2,107],82:[2,107],83:[2,107],91:[2,107],94:[2,107]},{71:225,74:[1,57],86:[1,224],90:56,94:[1,226]},{56:[2,110],59:[2,110],61:[2,110],63:[2,110],73:[2,110],75:[2,110],82:[2,110],83:[2,110],91:[2,110],94:[2,110]},{71:228,74:[1,57],86:[1,227],90:56},{94:[1,229]},{7:230,8:[1,16]},{75:[1,231]},{7:232,8:[1,16]},{7:233,8:[1,16]},{75:[1,234]},{5:[2,85],10:[2,85],22:[2,85],24:[2,85],32:[2,85],37:[2,85],43:[2,85],65:[2,85],72:[2,85],76:[2,85],78:[2,85],80:[1,235],88:[2,85],89:[2,85],98:[2,85],105:[2,85]},{5:[2,93],10:[2,93],22:[2,93],24:[2,93],32:[2,93],37:[2,93],43:[2,93],65:[2,93],72:[2,93],76:[2,93],78:[2,93],80:[1,236],88:[2,93],89:[2,93],98:[2,93],105:[2,93]},{7:237,8:[1,16]},{56:[2,126],61:[2,126]},{56:[2,133],59:[2,133],61:[2,133]},{59:[1,238],74:[1,180],103:239},{21:244,49:243,57:[1,135],71:246,74:[1,57],86:[1,241],87:[1,242],90:56,98:[1,29],101:245,104:240,106:[1,60],107:61,108:[1,62],111:[1,63]},{5:[2,41],10:[2,41],22:[2,41],24:[2,41],32:[2,41],37:[2,41],43:[2,41],65:[2,41],72:[2,41],76:[2,41],78:[2,41],88:[2,41],89:[2,41],98:[2,41],105:[2,41]},{10:[2,42],42:[2,42]},{51:[2,59],53:[2,59],56:[2,59]},{51:[2,61],53:[2,61],56:[2,61]},{51:[2,65],53:[2,65],59:[2,65]},{51:[2,67],53:[2,67],59:[2,67]},{56:[2,116],59:[2,116],61:[2,116],63:[2,116],73:[2,116],75:[2,116],82:[2,116],83:[2,116],91:[2,116],94:[2,116]},{54:[1,192]},{56:[2,117],59:[2,117],61:[2,117],63:[2,117],73:[2,117],75:[2,117],82:[2,117],83:[2,117],91:[2,117],94:[2,117]},{56:[1,247],61:[1,248]},{56:[2,120],61:[2,120]},{56:[2,121],61:[2,121],91:[1,110]},{56:[2,122],61:[2,122]},{56:[2,123],61:[2,123]},{94:[1,249]},{91:[1,110],94:[1,250]},{56:[2,114],59:[2,114],61:[2,114],63:[2,114],73:[2,114],75:[2,114],82:[2,114],83:[2,114],91:[2,114],94:[2,114]},{94:[1,251]},{91:[1,110],94:[1,252]},{56:[2,113],59:[2,113],61:[2,113],63:[2,113],73:[2,113],75:[2,113],82:[2,113],83:[2,113],91:[2,113],94:[2,113]},{5:[2,81],10:[2,81],22:[2,81],24:[2,81],32:[2,81],37:[2,81],43:[2,81],65:[2,81],72:[2,81],76:[2,81],78:[2,81],88:[2,81],89:[2,81],98:[2,81],105:[2,81]},{7:253,8:[1,16]},{5:[2,87],10:[2,87],22:[2,87],24:[2,87],32:[2,87],37:[2,87],43:[2,87],65:[2,87],72:[2,87],76:[2,87],78:[2,87],80:[1,254],88:[2,87],89:[2,87],98:[2,87],105:[2,87]},{5:[2,89],10:[2,89],22:[2,89],24:[2,89],32:[2,89],37:[2,89],43:[2,89],65:[2,89],72:[2,89],76:[2,89],78:[2,89],80:[1,255],88:[2,89],89:[2,89],98:[2,89],105:[2,89]},{7:256,8:[1,16]},{75:[1,257]},{75:[1,258]},{5:[2,82],10:[2,82],22:[2,82],24:[2,82],32:[2,82],37:[2,82],43:[2,82],65:[2,82],72:[2,82],76:[2,82],78:[2,82],88:[2,82],89:[2,82],98:[2,82],105:[2,82]},{56:[2,134],59:[2,134],61:[2,134]},{59:[2,135],61:[2,135]},{59:[2,137],61:[2,137]},{59:[2,138],61:[2,138]},{59:[2,139],61:[2,139]},{59:[2,140],61:[2,140]},{59:[2,141],61:[2,141]},{59:[2,142],61:[2,142]},{59:[2,143],61:[2,143],91:[1,110]},{56:[2,118],59:[2,118],61:[2,118],63:[2,118],73:[2,118],75:[2,118],82:[2,118],83:[2,118],91:[2,118],94:[2,118]},{49:223,71:221,74:[1,57],86:[1,222],90:56,97:259,106:[1,60],107:61,108:[1,62],111:[1,63]},{56:[2,108],59:[2,108],61:[2,108],63:[2,108],73:[2,108],75:[2,108],82:[2,108],83:[2,108],91:[2,108],94:[2,108]},{56:[2,109],59:[2,109],61:[2,109],63:[2,109],73:[2,109],75:[2,109],82:[2,109],83:[2,109],91:[2,109],94:[2,109]},{56:[2,111],59:[2,111],61:[2,111],63:[2,111],73:[2,111],75:[2,111],82:[2,111],83:[2,111],91:[2,111],94:[2,111]},{56:[2,112],59:[2,112],61:[2,112],63:[2,112],73:[2,112],75:[2,112],82:[2,112],83:[2,112],91:[2,112],94:[2,112]},{5:[2,84],10:[2,84],22:[2,84],24:[2,84],32:[2,84],37:[2,84],43:[2,84],65:[2,84],72:[2,84],76:[2,84],78:[2,84],88:[2,84],89:[2,84],98:[2,84],105:[2,84]},{75:[1,260]},{75:[1,261]},{5:[2,91],10:[2,91],22:[2,91],24:[2,91],32:[2,91],37:[2,91],43:[2,91],65:[2,91],72:[2,91],76:[2,91],78:[2,91],80:[1,262],88:[2,91],89:[2,91],98:[2,91],105:[2,91]},{7:263,8:[1,16]},{7:264,8:[1,16]},{56:[2,119],61:[2,119]},{7:265,8:[1,16]},{7:266,8:[1,16]},{75:[1,267]},{5:[2,86],10:[2,86],22:[2,86],24:[2,86],32:[2,86],37:[2,86],43:[2,86],65:[2,86],72:[2,86],76:[2,86],78:[2,86],88:[2,86],89:[2,86],98:[2,86],105:[2,86]},{5:[2,94],10:[2,94],22:[2,94],24:[2,94],32:[2,94],37:[2,94],43:[2,94],65:[2,94],72:[2,94],76:[2,94],78:[2,94],88:[2,94],89:[2,94],98:[2,94],105:[2,94]},{5:[2,88],10:[2,88],22:[2,88],24:[2,88],32:[2,88],37:[2,88],43:[2,88],65:[2,88],72:[2,88],76:[2,88],78:[2,88],88:[2,88],89:[2,88],98:[2,88],105:[2,88]},{5:[2,90],10:[2,90],22:[2,90],24:[2,90],32:[2,90],37:[2,90],43:[2,90],65:[2,90],72:[2,90],76:[2,90],78:[2,90],88:[2,90],89:[2,90],98:[2,90],105:[2,90]},{7:268,8:[1,16]},{5:[2,92],10:[2,92],22:[2,92],24:[2,92],32:[2,92],37:[2,92],43:[2,92],65:[2,92],72:[2,92],76:[2,92],78:[2,92],88:[2,92],89:[2,92],98:[2,92],105:[2,92]}],
defaultActions: {35:[2,1],55:[2,80]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* tracing/debugging functions */

function Loc(start, end) {
  this.start = { line: start.first_line, column: start.first_column };
  this.end = { line: end.last_line, column: end.last_column };
}

/* Manana data types */

function MananaHash(data, loc) {
  var hash = {}, i = 0;

  while (data[i]) {
    hash[data[i][0]] = data[i][1];
    i++;
  }

  return hash;
}

/* AST nodes */

function VoidTagNode(tag, attrs, loc) {
  this.type = "VoidTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
}

function TagNode(tag, attrs, text, block, loc) {
  this.type = "Tag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = text ? [text] : block;
}

function PreTagNode(tag, attrs, text, loc) {
  this.type = "PreTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = text;
}

function TextNode(words, loc) {
  this.type = "Text";
  this.loc = loc;

  var w = words, t = [], s = [], i = 0; 

  while (typeof w[i] !== "undefined") {
    if (typeof w[i] === "string") {
      s.push(w[i]);
    } else {
      if (s.length) {
        t.push(s.join(' '));
        s = [];
      }
      t.push(w[i]);
    }
    i++;
  }
  if (s.length) {
    t.push(s.join(' '));
  }

  this.body = t;
}

function NameNode(path, loc) {
  this.type = "Name";
  this.loc = loc;
  this.body = path;
}

function WithNode(path, id, body, loc) {
  this.type = "With";
  this.loc = loc;
  this.path = path;
  this.id = id;
  this.body = body;
}

function IdNode(id, start, end, loc) {
  this.type = "Id";
  this.loc = loc;
  this.id = id;
  this.start = start;
  this.end = end;
}

function PathNode(path_node, component, methods, loc) {
  var k, c;

  if (path_node === null) {
    this.type = "Path";
    this.loc = loc;
    this.methods = null;
    this.components = [];
  } else {
    for (k in path_node) {
      if (path_node.hasOwnProperty(k)) {
        this[k] = path_node[k];
      }
    }

    if (loc && path_node.loc) {
      if (loc.end.line > path_node.loc.end.line || loc.end.column > path_node.loc.end.column) {
        this.loc.end = loc.end;
      }
    }
  }

  if (component) {
    c = [component.id];
    if (component.start !== null) {
      c.push(component.start);
    }
    if (component.end !== null) {
      c.push(component.end);
    }
    this.components.push(c);
  }

  if (methods !== null) {
    this.methods = methods;
  }
}

function MethodNode(name, args, loc) {
  this.type = "Method";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function MethodChainNode(method, loc) {
  this.type = "MethodChain";
  this.loc = loc;
  this.chain = [method];
}

function FunctionNode(name, args, loc) {
  this.type = "Function";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function ForNode(id, path, body, loc) {
  this.type = "For";
  this.loc = loc;
  this.id = id;
  this.path = path;
  this.body = body;
}

function IfNode(cond, v1, v2, body, else_body, loc) {
  this.type = "If";
  this.loc = loc;
  this.condition = cond;
  this.value_1 = v1;
  this.value_2 = v2;
  this.body = body;
  this.else_body = else_body;
}

function AliasNode(path, id, loc) {
  this.type = "Alias";
  this.loc = loc;
  this.path = path;
  this.id = id;
}

function IncludeNode(path, loc) {
  this.type = "Include";
  this.loc = loc;
  this.path = path;
}

function FilterNode(filter, body, loc) {
  this.type = "Filter";
  this.loc = loc;
  this.body = [body];
}

function MananaStringNode(body, loc) {
  this.type = "MananaString";
  this.loc = loc;
  if (typeof body === "string") {
    this.body = [body];
  } else {
    this.body = body;
  }
}

/* expose AST constructors to parser */

parser.ast = {};
parser.ast.Loc = Loc;
parser.ast.MananaStringNode = MananaStringNode;
parser.ast.VoidTagNode = VoidTagNode;
parser.ast.TagNode = TagNode;
parser.ast.PreTagNode = PreTagNode;
parser.ast.TextNode = TextNode;
parser.ast.NameNode = NameNode;
parser.ast.WithNode = WithNode;
parser.ast.IdNode = IdNode;
parser.ast.PathNode = PathNode;
parser.ast.MethodNode = MethodNode;
parser.ast.MethodChainNode = MethodChainNode;
parser.ast.FunctionNode = FunctionNode;
parser.ast.ForNode = ForNode;
parser.ast.IfNode = IfNode;
parser.ast.AliasNode = AliasNode;
parser.ast.IncludeNode = IncludeNode;
parser.ast.FilterNode = FilterNode;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

  function strip(start, end) {
    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.pushState("comment"); /* ignore */ 
break;
case 1:this.popState(); /* ignore */ 
break;
case 2:/* ignore */
break;
case 3:/* ignore */
break;
case 4:this.pushState("expr"); return "FOR";
break;
case 5:this.pushState("expr"); return "IF";
break;
case 6:this.pushState("expr"); return "ELSE";
break;
case 7:this.pushState("expr"); return "ALIAS";
break;
case 8:this.pushState("expr"); return "WITH";
break;
case 9:this.pushState("expr"); return "INCLUDE";
break;
case 10:return "BOOL";
break;
case 11:return "BOOL";
break;
case 12:this.popState(); return "END_EXPR";
break;
case 13:return "IN";
break;
case 14:return "IS";
break;
case 15:return "AS";
break;
case 16:return "NOT";
break;
case 17:return "TYPE";
break;
case 18:return "TYPE";
break;
case 19:return "TYPE";
break;
case 20:return "TYPE";
break;
case 21:return "TYPE";
break;
case 22:return "COND";
break;
case 23:return "COND";
break;
case 24:return "COND";
break;
case 25:return "COND";
break;
case 26:return "COND";
break;
case 27:return "COND";
break;
case 28:return "COND";
break;
case 29:return "COND";
break;
case 30:return "EXISTS";
break;
case 31:this.pushState("tag");    return "VOID_TAG";
break;
case 32:
                                           if (yy_.yytext == "pre") {
                                             this.pushState("pretag");
                                             return "PRE_TAG";
                                           } else {
                                             this.pushState("tag");    
                                             return "TAG";
                                           }
                                         
break;
case 33:this.popState();          return "END_TAG";
break;
case 34:yy_.yytext = yy_.yytext.slice(1); return "TAG_ID";
break;
case 35:yy_.yytext = yy_.yytext.slice(1); return "TAG_CLASS";
break;
case 36:
                                            yy_.yytext = yy_.yytext.replace("->", '');
                                            yy_.yytext = yy_.yytext.replace(/\s*/, '')
                                            yy_.yytext = yy_.yytext.replace(/"|'/g, '');
                                            return "TAG_SRC";
                                         
break;
case 37:this.pushState("i_string_d"); return ["TAG_SRC_I_STRING", "I_STRING_D"];
break;
case 38:this.popState(); this.pushState("pretext"); return "END_PRE_TAG";
break;
case 39:return "LINE";
break;
case 40:return "LINE"; 
break;
case 41:this.pushState("i_string_d"); return "I_STRING_D";
break;
case 42:this.pushState("i_string_d"); return "I_STRING_D";                                      
break;
case 43:this.pushState("name");       return "START_NAME";
break;
case 44:this.popState();              return "END_I_STRING_D"; // "
break;
case 45:return "I_STRING_TEXT";
break;
case 46:this.pushState("i_string_s"); return ["TAG_SRC_I_STRING", "I_STRING_S"];
break;
case 47:this.pushState("i_string_s"); return "I_STRING_S";
break;
case 48:this.pushState("i_string_s"); return "I_STRING_S";                                      
break;
case 49:this.pushState("name");       return "START_NAME";
break;
case 50:this.popState();              return "END_I_STRING_S"; // "
break;
case 51:return "I_STRING_TEXT";
break;
case 52:this.pushState("i_html"); return "I_HTML_START";
break;
case 53:this.pushState("name");   return "START_NAME";
break;
case 54:this.popState();          return "I_HTML_END";
break;
case 55:return "I_HTML_TEXT";
break;
case 56:return "HTML";
break;
case 57:this.pushState("tagargs"); return "LPAREN";
break;
case 58:this.popState();           return "RPAREN";
break;
case 59:this.pushState("tagargs"); return "LBRACE";
break;
case 60:this.popState();           return "RBRACE";
break;
case 61:return "COLON";
break;
case 62:return "EQ";
break;
case 63:return "COMMA";
break;
case 64:return "TAG_ATTR";
break;
case 65:yy_.yytext = "data-" + yy_.yytext.slice(1); return "TAG_DATA_ATTR";
break;
case 66:/* ignore */
break;
case 67:/* ignore */
break;
case 68:this.pushState("filter"); yy_.yytext = yy_.yytext.slice(1); return "FILTER";
break;
case 69:this.pushState("name"); return "START_NAME";
break;
case 70:this.popState(); return "RBRACE"
break;
case 71:this.pushState("fn"); yy_.yytext = yy_.yytext.slice(1); return "FN";
break;
case 72:this.popState(); return "RPAREN";
break;
case 73:/* ignore */
break;
case 74:/* ignore */
break;
case 75:return "LBRACE";
break;
case 76:return "RBRACE";
break;
case 77:return "COMMA";
break;
case 78:return "ID";
break;
case 79:return "DOT";
break;
case 80:return "LPAREN";
break;
case 81:return "RPAREN";
break;
case 82:return "LBRACK";
break;
case 83:return "RBRACK";
break;
case 84:return "COLON"; 
break;
case 85:return "COMMA";
break;
case 86:return "INT";
break;
case 87:yy_.yytext = strip(1,2).replace(/\\"/g, '"'); return "STRING";
break;
case 88:return "STRING"; // Do not strip quotes
break;
case 89:return "WORD";
break;
case 90:
  var tokens = [];
  while (0 < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }

  if (tokens.length) {
    tokens.push("EOF");
    return tokens;
  } else {
    return "EOF";
  }

break;
case 91:
  var tokens = [];
  while (_filter_indent_level >= _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }

  if (tokens.length) {
    tokens.push("EOF");
    return tokens;
  } else {
    return "EOF";
  }

break;
case 92:/* eat blank lines */
break;
case 93:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (indentation > _indent_stack[0]) {
    _indent_stack.unshift(indentation);
    _indent_level = indentation;
    return "INDENT";
  }

  var tokens = [];
  while (indentation < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }

  if (tokens.length) {
    return tokens;
  }

break;
case 94:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (typeof _filter_indent_level === "undefined") {
    _filter_indent_level = indentation;
    return "FILTER_START";
  } else if (indentation < _filter_indent_level) {
    _filter_indent_level = undefined;
    this.popState();
    return "DEDENT";
  } 
  /* else ignore */

break;
case 95:/* ignore all other whitespace */
break;
}
},
rules: [/^(?:""")/,/^(?:""")/,/^(?:.+)/,/^(?:\n)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:alias\b)/,/^(?:with\b)/,/^(?:include\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:(?=\n))/,/^(?:in\b)/,/^(?:is\b)/,/^(?:as\b)/,/^(?:not\b)/,/^(?:Hash\b)/,/^(?:List\b)/,/^(?:String\b)/,/^(?:Integer\b)/,/^(?:Number\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?:>)/,/^(?:<)/,/^(?:%)/,/^(?:exists\b)/,/^(?:((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)))/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:(?=\n))/,/^(?:(#[a-zA-Z][a-zA-Z0-9\-\:_]*))/,/^(?:(\.-?[_a-zA-Z]+[_a-zA-Z0-9\-]*(?=["."\s\n])))/,/^(?:->\s*(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:->\s*(i"(?=.*?@\{)))/,/^(?:(?=\n))/,/^(?:.+)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:(i"(?=.*?@\{)))/,/^(?:(i"(?=.*?@\{)))/,/^(?:@\{)/,/^(?:")/,/^(?:[^"@"'"']*)/,/^(?:->\s*(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:@\{)/,/^(?:')/,/^(?:[^"@""'"]*)/,/^(?:(<(?=.*?@\{)))/,/^(?:@\{)/,/^(?:>(?=\s*\n))/,/^(?:.)/,/^(?:<.*(?=\n))/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z][a-zA-Z0-9\-_]*(?=\s*["="":"])))/,/^(?:(\*[a-zA-Z][a-zA-Z0-9\-]*(?=["="":"])))/,/^(?:\s)/,/^(?:\n)/,/^(?::(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:@\{)/,/^(?:\})/,/^(?:@(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254})\s?(?=\())/,/^(?:\)(?!\)))/,/^(?:\s)/,/^(?:\n)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:(\+|-)?(0|[1-9][0-9]*))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:([^\s\n"@"][^\s\n]*))/,/^(?:\s*$)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"comment":{"rules":[1,2,3,95],"inclusive":true},"tag":{"rules":[33,34,35,36,37,42,46,48,57,59,69,71,88,89,95],"inclusive":true},"tagargs":{"rules":[41,47,58,60,61,62,63,64,65,66,67,87,95],"inclusive":true},"filter":{"rules":[42,48,69,88,89,91,94,95],"inclusive":true},"expr":{"rules":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,41,47,71,78,79,80,81,82,83,84,85,86,87,95],"inclusive":true},"name":{"rules":[41,47,70,78,79,80,81,82,83,84,85,86,87,95],"inclusive":true},"fn":{"rules":[10,11,41,47,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,95],"inclusive":true},"i_string_d":{"rules":[43,44,45,95],"inclusive":true},"i_string_s":{"rules":[49,50,51,95],"inclusive":true},"i_html":{"rules":[53,54,55,95],"inclusive":true},"pretag":{"rules":[34,35,38,95],"inclusive":true},"pretext":{"rules":[39,40,91,94,95],"inclusive":true},"INITIAL":{"rules":[0,4,5,6,7,8,9,31,32,42,48,52,56,68,69,71,88,89,90,92,93,95],"inclusive":true}}
};
_indent_stack = [0];
_indent_level = 0;
_filter_indent_level = undefined;;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = manana_parser;
exports.Parser = manana_parser.Parser;
exports.parse = function () { return manana_parser.parse.apply(manana_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}