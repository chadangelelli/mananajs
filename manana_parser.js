/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var manana_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"prog_list":4,"EOF":5,"stmt":6,"block":7,"INDENT":8,"stmt_list":9,"DEDENT":10,"html_stmt":11,"void_tag_stmt":12,"tag_stmt":13,"filter_stmt":14,"code_stmt":15,"alias_stmt":16,"include_stmt":17,"with_stmt":18,"if_stmt":19,"for_stmt":20,"name":21,"fn":22,"HTML":23,"i_html":24,"I_HTML_START":25,"i_html_text":26,"I_HTML_END":27,"i_html_text_el":28,"I_HTML_TEXT":29,"void_tag":30,"END_TAG":31,"tag_attrs":32,"VOID_TAG":33,"regular_tag":34,"pre_tag":35,"tag":36,"text":37,"PRE_TAG":38,"pre_block":39,"FILTER_START":40,"pre_text":41,"LINE":42,"TAG":43,"tag_attr":44,"tag_attr_args":45,"TAG_ID":46,"TAG_SRC":47,"TAG_SRC_I_STRING":48,"string":49,"tag_classes":50,"TAG_ATTR":51,"EQ":52,"TAG_DATA_ATTR":53,"LPAREN":54,"tag_attr_arg_list":55,"RPAREN":56,"LBRACE":57,"tag_attr_arg_list_alt":58,"RBRACE":59,"tag_attr_arg":60,"COMMA":61,"tag_attr_arg_alt":62,"COLON":63,"TAG_CLASS":64,"FILTER":65,"CODE_START":66,"code":67,"CODE":68,"word_list":69,"word":70,"WORD":71,"SPACE":72,"path_or_fn":73,"path":74,"WITH":75,"AS":76,"ID":77,"END_EXPR":78,"FOR":79,"IN":80,"IF":81,"ev":82,"ELSE":83,"NOT":84,"COND":85,"IS":86,"TYPE":87,"EXISTS":88,"INT":89,"BOOL":90,"ALIAS":91,"INCLUDE":92,"id":93,"DOT":94,"meths":95,"LBRACK":96,"RBRACK":97,"meth":98,"meth_args":99,"meth_arg":100,"FN":101,"fn_args":102,"fn_arg":103,"hash":104,"hash_data":105,"hash_pair":106,"hash_val":107,"START_NAME":108,"STRING":109,"i_string":110,"I_STRING_D":111,"i_string_text":112,"END_I_STRING_D":113,"I_STRING_S":114,"END_I_STRING_S":115,"i_string_text_el":116,"I_STRING_TEXT":117,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",10:"DEDENT",23:"HTML",25:"I_HTML_START",27:"I_HTML_END",29:"I_HTML_TEXT",31:"END_TAG",33:"VOID_TAG",38:"PRE_TAG",40:"FILTER_START",42:"LINE",43:"TAG",46:"TAG_ID",47:"TAG_SRC",48:"TAG_SRC_I_STRING",51:"TAG_ATTR",52:"EQ",53:"TAG_DATA_ATTR",54:"LPAREN",56:"RPAREN",57:"LBRACE",59:"RBRACE",61:"COMMA",63:"COLON",64:"TAG_CLASS",65:"FILTER",66:"CODE_START",68:"CODE",71:"WORD",72:"SPACE",75:"WITH",76:"AS",77:"ID",78:"END_EXPR",79:"FOR",80:"IN",81:"IF",83:"ELSE",84:"NOT",85:"COND",86:"IS",87:"TYPE",88:"EXISTS",89:"INT",90:"BOOL",91:"ALIAS",92:"INCLUDE",94:"DOT",96:"LBRACK",97:"RBRACK",101:"FN",108:"START_NAME",109:"STRING",111:"I_STRING_D",113:"END_I_STRING_D",114:"I_STRING_S",115:"END_I_STRING_S",117:"I_STRING_TEXT"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,3],[9,2],[9,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,1],[11,1],[24,3],[26,2],[26,1],[28,1],[28,1],[12,2],[12,3],[30,1],[13,1],[13,1],[34,2],[34,3],[34,3],[34,3],[34,4],[34,4],[35,2],[35,3],[39,3],[41,2],[41,1],[36,1],[32,2],[32,1],[32,1],[44,1],[44,1],[44,2],[44,1],[44,3],[44,3],[45,3],[45,3],[55,2],[55,1],[60,3],[60,4],[60,3],[60,4],[58,2],[58,1],[62,3],[62,4],[62,3],[62,4],[50,2],[50,1],[14,4],[15,4],[67,2],[67,1],[37,1],[69,1],[69,2],[70,1],[70,1],[70,1],[70,1],[70,1],[73,1],[73,1],[18,6],[20,6],[19,4],[19,7],[19,5],[19,8],[19,6],[19,9],[19,6],[19,9],[19,7],[19,10],[19,5],[19,8],[82,1],[82,1],[82,1],[82,1],[82,1],[16,5],[17,3],[17,3],[74,1],[74,3],[74,3],[93,1],[93,4],[93,6],[93,6],[93,4],[93,6],[93,6],[93,5],[93,5],[95,1],[95,3],[98,3],[98,4],[99,3],[99,1],[100,1],[100,1],[100,1],[22,3],[22,4],[102,3],[102,1],[103,1],[103,1],[103,1],[103,1],[103,1],[104,3],[104,4],[105,3],[105,1],[106,3],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[21,3],[49,1],[49,1],[110,3],[110,3],[112,2],[112,1],[116,1],[116,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0-1]; 
break;
case 6: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = [$$[$0]]; 
break;
case 20: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 22: 
      var body = [$$[$0-2]];
      body.push.apply(body, $$[$0-1]);
      body.push($$[$0]);
      this.$ = new MananaStringNode(body, new Loc(_$[$0-2], _$[$0])); 
    
break;
case 23: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 24: this.$ = [$$[$0]]; 
break;
case 27: this.$ = new VoidTagNode($$[$0-1], null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 28: this.$ = new VoidTagNode($$[$0-2], $$[$0-1],   new Loc(_$[$0-2], _$[$0-1])); 
break;
case 29: this.$ = $$[$0]; 
break;
case 32: this.$ = new TagNode($$[$0-1], null, null, null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 33: this.$ = new TagNode($$[$0-2], null, $$[$0-1],   null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 34: this.$ = new TagNode($$[$0-2], null, null, $$[$0],   new Loc(_$[$0-2], _$[$0])); 
break;
case 35: this.$ = new TagNode($$[$0-2], $$[$0-1],   null, null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 36: this.$ = new TagNode($$[$0-3], $$[$0-2],   $$[$0-1],   null, new Loc(_$[$0-3], _$[$0-1])); 
break;
case 37: this.$ = new TagNode($$[$0-3], $$[$0-2],   null, $$[$0],   new Loc(_$[$0-3], _$[$0])); 
break;
case 38: this.$ = new PreTagNode($$[$0-1], null, $$[$0], new Loc(_$[$0-1], _$[$0])); 
break;
case 39: this.$ = new PreTagNode($$[$0-2], $$[$0-1],   $$[$0], new Loc(_$[$0-2], _$[$0])); 
break;
case 40: this.$ = $$[$0-1]; 
break;
case 41: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 42: this.$ = [$$[$0]]; 
break;
case 43: this.$ = $$[$0]; 
break;
case 44: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 45: this.$ = [$$[$0]]; 
break;
case 46: this.$ = $$[$0]; 
break;
case 47: this.$ = ['id', $$[$0]]; 
break;
case 48: this.$ = ['src', new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])) ]; 
break;
case 49: this.$ = ['src', $$[$0]]; 
break;
case 50: this.$ = ['class', $$[$0].join(" ")]; 
break;
case 51: this.$ = ['attr', $$[$0-2], $$[$0]]; 
break;
case 52: this.$ = ['data', $$[$0-2], $$[$0]]; 
break;
case 53: this.$ = $$[$0-1]; 
break;
case 54: this.$ = $$[$0-1]; 
break;
case 55: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 56: this.$ = [$$[$0]]; 
break;
case 57: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 58: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 59: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 60: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 61: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 62: this.$ = [$$[$0]]; 
break;
case 63: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 64: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 65: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 66: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 67: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 68: this.$ = [$$[$0]]; 
break;
case 69: this.$ = new FilterNode($$[$0-3], $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 70: this.$ = new CodeNode($$[$0-1], $$[$0-3], new Loc(_$[$0-3], _$[$0])); 
break;
case 71: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 72: this.$ = [$$[$0]]; 
break;
case 73: this.$ = new TextNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 74: this.$ = [$$[$0]]; 
break;
case 75: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 83: this.$ = new WithNode($$[$0-4], $$[$0-2], $$[$0], new Loc(_$[$0-5], _$[$0])); 
break;
case 84: this.$ = new ForNode($$[$0-4], $$[$0-2], $$[$0] , new Loc(_$[$0-5], _$[$0])) ; 
break;
case 85: this.$ = new IfNode("true", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-3], _$[$0])); 
break;
case 86: this.$ = new IfNode("true", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-6], _$[$0])); 
break;
case 87: this.$ = new IfNode("false", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-4], _$[$0])); 
break;
case 88: this.$ = new IfNode("false", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-7], _$[$0])); 
break;
case 89: this.$ = new IfNode($$[$0-3], $$[$0-4], $$[$0-2], $$[$0], null, new Loc(_$[$0-5], _$[$0])); 
break;
case 90: this.$ = new IfNode($$[$0-6], $$[$0-7], $$[$0-5], $$[$0-3], $$[$0], new Loc(_$[$0-8], _$[$0])); 
break;
case 91: this.$ = new IfNode($$[$0-3], $$[$0-4], $$[$0-2], $$[$0], null, new Loc(_$[$0-5], _$[$0])); 
break;
case 92: this.$ = new IfNode($$[$0-6], $$[$0-7], $$[$0-5], $$[$0-3], null, new Loc(_$[$0-8], _$[$0])); 
break;
case 93: this.$ = new IfNode("is not", $$[$0-5], $$[$0-2], $$[$0], null, new Loc(_$[$0-6], _$[$0])); 
break;
case 94: this.$ = new IfNode("is not", $$[$0-8], $$[$0-5], $$[$0-3], $$[$0], new Loc(_$[$0-9], _$[$0])); 
break;
case 95: this.$ = new IfNode("exists", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-4], _$[$0])); 
break;
case 96: this.$ = new IfNode("exists", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-7], _$[$0])); 
break;
case 102: this.$ = new AliasNode($$[$0-3], $$[$0-1], new Loc(_$[$0-4], _$[$0])); 
break;
case 103: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 104: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 105: this.$ = new PathNode(null, $$[$0]  , null, new Loc(_$[$0], _$[$0])); 
break;
case 106: this.$ = new PathNode($$[$0-2]  , $$[$0]  , null, new Loc(_$[$0-2], _$[$0])); 
break;
case 107: this.$ = new PathNode($$[$0-2]  , null, $$[$0]  , new Loc(_$[$0-2], _$[$0])); 
break;
case 108: this.$ = new IdNode($$[$0], null, null, new Loc(_$[$0], _$[$0])); 
break;
case 109: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 110: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 111: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 112: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 113: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 114: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 115: this.$ = new IdNode($$[$0-4], 0   , $$[$0-1]  , new Loc(_$[$0-4], _$[$0])); 
break;
case 116: this.$ = new IdNode($$[$0-4], $$[$0-2]  , '*' , new Loc(_$[$0-4], _$[$0])); 
break;
case 117: this.$ = new MethodChainNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 118: this.$ = $$[$0-2]; this.$.chain.push($$[$0])                        ; 
break;
case 119: this.$ = new MethodNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 120: this.$ = new MethodNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 121: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 122: this.$ = [$$[$0]]; 
break;
case 126: this.$ = new FunctionNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 127: this.$ = new FunctionNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 128: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 129: this.$ = [$$[$0]]; 
break;
case 135: this.$ = new MananaHash($$[$0-1]); 
break;
case 136: this.$ = new MananaHash($$[$0-2]); 
break;
case 137: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 138: this.$ = [$$[$0]]; 
break;
case 139: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 146: this.$ = $$[$0-1]; 
break;
case 147: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 149: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 150: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 151: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 152: this.$ = [$$[$0]]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,17],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:[1,18],24:19,25:[1,32],30:20,33:[1,33],34:21,35:22,36:34,38:[1,35],43:[1,36],65:[1,23],66:[1,24],75:[1,27],79:[1,29],81:[1,28],91:[1,25],92:[1,26],101:[1,31],108:[1,30]},{1:[3]},{5:[1,37],6:38,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:[1,18],24:19,25:[1,32],30:20,33:[1,33],34:21,35:22,36:34,38:[1,35],43:[1,36],65:[1,23],66:[1,24],75:[1,27],79:[1,29],81:[1,28],91:[1,25],92:[1,26],101:[1,31],108:[1,30]},{5:[2,3],23:[2,3],25:[2,3],33:[2,3],38:[2,3],43:[2,3],65:[2,3],66:[2,3],75:[2,3],79:[2,3],81:[2,3],91:[2,3],92:[2,3],101:[2,3],108:[2,3]},{5:[2,4],23:[2,4],25:[2,4],33:[2,4],38:[2,4],43:[2,4],65:[2,4],66:[2,4],75:[2,4],79:[2,4],81:[2,4],91:[2,4],92:[2,4],101:[2,4],108:[2,4]},{5:[2,8],10:[2,8],23:[2,8],25:[2,8],33:[2,8],38:[2,8],43:[2,8],65:[2,8],66:[2,8],75:[2,8],79:[2,8],81:[2,8],91:[2,8],92:[2,8],101:[2,8],108:[2,8]},{5:[2,9],10:[2,9],23:[2,9],25:[2,9],33:[2,9],38:[2,9],43:[2,9],65:[2,9],66:[2,9],75:[2,9],79:[2,9],81:[2,9],91:[2,9],92:[2,9],101:[2,9],108:[2,9]},{5:[2,10],10:[2,10],23:[2,10],25:[2,10],33:[2,10],38:[2,10],43:[2,10],65:[2,10],66:[2,10],75:[2,10],79:[2,10],81:[2,10],91:[2,10],92:[2,10],101:[2,10],108:[2,10]},{5:[2,11],10:[2,11],23:[2,11],25:[2,11],33:[2,11],38:[2,11],43:[2,11],65:[2,11],66:[2,11],75:[2,11],79:[2,11],81:[2,11],91:[2,11],92:[2,11],101:[2,11],108:[2,11]},{5:[2,12],10:[2,12],23:[2,12],25:[2,12],33:[2,12],38:[2,12],43:[2,12],65:[2,12],66:[2,12],75:[2,12],79:[2,12],81:[2,12],91:[2,12],92:[2,12],101:[2,12],108:[2,12]},{5:[2,13],10:[2,13],23:[2,13],25:[2,13],33:[2,13],38:[2,13],43:[2,13],65:[2,13],66:[2,13],75:[2,13],79:[2,13],81:[2,13],91:[2,13],92:[2,13],101:[2,13],108:[2,13]},{5:[2,14],10:[2,14],23:[2,14],25:[2,14],33:[2,14],38:[2,14],43:[2,14],65:[2,14],66:[2,14],75:[2,14],79:[2,14],81:[2,14],91:[2,14],92:[2,14],101:[2,14],108:[2,14]},{5:[2,15],10:[2,15],23:[2,15],25:[2,15],33:[2,15],38:[2,15],43:[2,15],65:[2,15],66:[2,15],75:[2,15],79:[2,15],81:[2,15],91:[2,15],92:[2,15],101:[2,15],108:[2,15]},{5:[2,16],10:[2,16],23:[2,16],25:[2,16],33:[2,16],38:[2,16],43:[2,16],65:[2,16],66:[2,16],75:[2,16],79:[2,16],81:[2,16],91:[2,16],92:[2,16],101:[2,16],108:[2,16]},{5:[2,17],10:[2,17],23:[2,17],25:[2,17],33:[2,17],38:[2,17],43:[2,17],65:[2,17],66:[2,17],75:[2,17],79:[2,17],81:[2,17],91:[2,17],92:[2,17],101:[2,17],108:[2,17]},{5:[2,18],10:[2,18],23:[2,18],25:[2,18],33:[2,18],38:[2,18],43:[2,18],65:[2,18],66:[2,18],75:[2,18],79:[2,18],81:[2,18],91:[2,18],92:[2,18],101:[2,18],108:[2,18]},{5:[2,19],10:[2,19],23:[2,19],25:[2,19],33:[2,19],38:[2,19],43:[2,19],65:[2,19],66:[2,19],75:[2,19],79:[2,19],81:[2,19],91:[2,19],92:[2,19],101:[2,19],108:[2,19]},{6:40,9:39,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:[1,18],24:19,25:[1,32],30:20,33:[1,33],34:21,35:22,36:34,38:[1,35],43:[1,36],65:[1,23],66:[1,24],75:[1,27],79:[1,29],81:[1,28],91:[1,25],92:[1,26],101:[1,31],108:[1,30]},{5:[2,20],10:[2,20],23:[2,20],25:[2,20],33:[2,20],38:[2,20],43:[2,20],65:[2,20],66:[2,20],75:[2,20],79:[2,20],81:[2,20],91:[2,20],92:[2,20],101:[2,20],108:[2,20]},{5:[2,21],10:[2,21],23:[2,21],25:[2,21],33:[2,21],38:[2,21],43:[2,21],65:[2,21],66:[2,21],75:[2,21],79:[2,21],81:[2,21],91:[2,21],92:[2,21],101:[2,21],108:[2,21]},{31:[1,41],32:42,44:43,45:44,46:[1,45],47:[1,46],48:[1,47],50:48,51:[1,49],53:[1,50],54:[1,51],57:[1,52],64:[1,53]},{5:[2,30],10:[2,30],23:[2,30],25:[2,30],33:[2,30],38:[2,30],43:[2,30],65:[2,30],66:[2,30],75:[2,30],79:[2,30],81:[2,30],91:[2,30],92:[2,30],101:[2,30],108:[2,30]},{5:[2,31],10:[2,31],23:[2,31],25:[2,31],33:[2,31],38:[2,31],43:[2,31],65:[2,31],66:[2,31],75:[2,31],79:[2,31],81:[2,31],91:[2,31],92:[2,31],101:[2,31],108:[2,31]},{40:[1,54]},{40:[1,55]},{22:58,73:56,74:57,77:[1,60],93:59,101:[1,31]},{49:61,74:62,77:[1,60],93:59,109:[1,63],110:64,111:[1,65],114:[1,66]},{22:58,73:67,74:57,77:[1,60],93:59,101:[1,31]},{22:75,49:71,74:74,77:[1,60],82:68,84:[1,69],88:[1,70],89:[1,72],90:[1,73],93:59,101:[1,31],109:[1,63],110:64,111:[1,65],114:[1,66]},{77:[1,76]},{74:77,77:[1,60],93:59},{54:[1,78]},{21:82,26:79,28:80,29:[1,81],108:[1,30]},{31:[2,29],46:[2,29],47:[2,29],48:[2,29],51:[2,29],53:[2,29],54:[2,29],57:[2,29],64:[2,29]},{21:89,22:90,31:[1,83],32:85,37:84,44:43,45:44,46:[1,45],47:[1,46],48:[1,47],49:91,50:48,51:[1,49],53:[1,50],54:[1,51],57:[1,52],64:[1,53],69:86,70:87,71:[1,88],72:[1,92],101:[1,31],108:[1,30],109:[1,63],110:64,111:[1,65],114:[1,66]},{32:94,39:93,40:[1,95],44:43,45:44,46:[1,45],47:[1,46],48:[1,47],50:48,51:[1,49],53:[1,50],54:[1,51],57:[1,52],64:[1,53]},{31:[2,43],46:[2,43],47:[2,43],48:[2,43],51:[2,43],53:[2,43],54:[2,43],57:[2,43],64:[2,43],71:[2,43],72:[2,43],101:[2,43],108:[2,43],109:[2,43],111:[2,43],114:[2,43]},{1:[2,1]},{5:[2,2],23:[2,2],25:[2,2],33:[2,2],38:[2,2],43:[2,2],65:[2,2],66:[2,2],75:[2,2],79:[2,2],81:[2,2],91:[2,2],92:[2,2],101:[2,2],108:[2,2]},{6:97,10:[1,96],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:[1,18],24:19,25:[1,32],30:20,33:[1,33],34:21,35:22,36:34,38:[1,35],43:[1,36],65:[1,23],66:[1,24],75:[1,27],79:[1,29],81:[1,28],91:[1,25],92:[1,26],101:[1,31],108:[1,30]},{10:[2,7],23:[2,7],25:[2,7],33:[2,7],38:[2,7],43:[2,7],65:[2,7],66:[2,7],75:[2,7],79:[2,7],81:[2,7],91:[2,7],92:[2,7],101:[2,7],108:[2,7]},{5:[2,27],10:[2,27],23:[2,27],25:[2,27],33:[2,27],38:[2,27],43:[2,27],65:[2,27],66:[2,27],75:[2,27],79:[2,27],81:[2,27],91:[2,27],92:[2,27],101:[2,27],108:[2,27]},{31:[1,98],44:99,46:[1,45],47:[1,46],48:[1,47],50:48,51:[1,49],53:[1,50],64:[1,53]},{31:[2,45],40:[2,45],46:[2,45],47:[2,45],48:[2,45],51:[2,45],53:[2,45],64:[2,45],71:[2,45],72:[2,45],101:[2,45],108:[2,45],109:[2,45],111:[2,45],114:[2,45]},{31:[2,46],40:[2,46],46:[2,46],47:[2,46],48:[2,46],51:[2,46],53:[2,46],64:[2,46],71:[2,46],72:[2,46],101:[2,46],108:[2,46],109:[2,46],111:[2,46],114:[2,46]},{31:[2,47],40:[2,47],46:[2,47],47:[2,47],48:[2,47],51:[2,47],53:[2,47],64:[2,47],71:[2,47],72:[2,47],101:[2,47],108:[2,47],109:[2,47],111:[2,47],114:[2,47]},{31:[2,48],40:[2,48],46:[2,48],47:[2,48],48:[2,48],51:[2,48],53:[2,48],64:[2,48],71:[2,48],72:[2,48],101:[2,48],108:[2,48],109:[2,48],111:[2,48],114:[2,48]},{49:100,109:[1,63],110:64,111:[1,65],114:[1,66]},{31:[2,50],40:[2,50],46:[2,50],47:[2,50],48:[2,50],51:[2,50],53:[2,50],64:[1,101],71:[2,50],72:[2,50],101:[2,50],108:[2,50],109:[2,50],111:[2,50],114:[2,50]},{52:[1,102]},{52:[1,103]},{51:[1,106],53:[1,107],55:104,60:105},{51:[1,110],53:[1,111],58:108,62:109},{31:[2,68],40:[2,68],46:[2,68],47:[2,68],48:[2,68],51:[2,68],53:[2,68],64:[2,68],71:[2,68],72:[2,68],101:[2,68],108:[2,68],109:[2,68],111:[2,68],114:[2,68]},{21:89,22:90,37:112,49:91,69:86,70:87,71:[1,88],72:[1,92],101:[1,31],108:[1,30],109:[1,63],110:64,111:[1,65],114:[1,66]},{67:113,68:[1,114]},{76:[1,115]},{76:[2,81],94:[1,116]},{76:[2,82]},{56:[2,105],59:[2,105],61:[2,105],63:[2,105],76:[2,105],78:[2,105],85:[2,105],86:[2,105],94:[2,105],97:[2,105]},{56:[2,108],59:[2,108],61:[2,108],63:[2,108],76:[2,108],78:[2,108],85:[2,108],86:[2,108],94:[2,108],96:[1,117],97:[2,108]},{78:[1,118]},{78:[1,119],94:[1,116]},{10:[2,147],31:[2,147],40:[2,147],46:[2,147],47:[2,147],48:[2,147],51:[2,147],53:[2,147],56:[2,147],59:[2,147],61:[2,147],64:[2,147],71:[2,147],72:[2,147],78:[2,147],85:[2,147],86:[2,147],101:[2,147],108:[2,147],109:[2,147],111:[2,147],114:[2,147]},{10:[2,148],31:[2,148],40:[2,148],46:[2,148],47:[2,148],48:[2,148],51:[2,148],53:[2,148],56:[2,148],59:[2,148],61:[2,148],64:[2,148],71:[2,148],72:[2,148],78:[2,148],85:[2,148],86:[2,148],101:[2,148],108:[2,148],109:[2,148],111:[2,148],114:[2,148]},{21:122,108:[1,30],112:120,116:121,117:[1,123]},{21:122,108:[1,30],112:124,116:121,117:[1,123]},{76:[1,125]},{78:[1,126],85:[1,127],86:[1,128]},{22:75,49:71,74:74,77:[1,60],82:129,89:[1,72],90:[1,73],93:59,101:[1,31],109:[1,63],110:64,111:[1,65],114:[1,66]},{22:75,49:71,74:74,77:[1,60],82:130,89:[1,72],90:[1,73],93:59,101:[1,31],109:[1,63],110:64,111:[1,65],114:[1,66]},{78:[2,97],85:[2,97],86:[2,97]},{78:[2,98],85:[2,98],86:[2,98]},{78:[2,99],85:[2,99],86:[2,99]},{78:[2,100],85:[2,100],86:[2,100],94:[1,116]},{78:[2,101],85:[2,101],86:[2,101]},{80:[1,131]},{59:[1,132],94:[1,116]},{22:139,49:138,56:[1,133],57:[1,141],74:136,77:[1,60],89:[1,137],93:59,101:[1,31],102:134,103:135,104:140,109:[1,63],110:64,111:[1,65],114:[1,66]},{21:82,27:[1,142],28:143,29:[1,81],108:[1,30]},{27:[2,24],29:[2,24],108:[2,24]},{27:[2,25],29:[2,25],108:[2,25]},{27:[2,26],29:[2,26],108:[2,26]},{5:[2,32],7:144,8:[1,17],10:[2,32],23:[2,32],25:[2,32],33:[2,32],38:[2,32],43:[2,32],65:[2,32],66:[2,32],75:[2,32],79:[2,32],81:[2,32],91:[2,32],92:[2,32],101:[2,32],108:[2,32]},{31:[1,145]},{21:89,22:90,31:[1,146],37:147,44:99,46:[1,45],47:[1,46],48:[1,47],49:91,50:48,51:[1,49],53:[1,50],64:[1,53],69:86,70:87,71:[1,88],72:[1,92],101:[1,31],108:[1,30],109:[1,63],110:64,111:[1,65],114:[1,66]},{10:[2,73],21:89,22:90,31:[2,73],49:91,70:148,71:[1,88],72:[1,92],101:[1,31],108:[1,30],109:[1,63],110:64,111:[1,65],114:[1,66]},{10:[2,74],31:[2,74],71:[2,74],72:[2,74],101:[2,74],108:[2,74],109:[2,74],111:[2,74],114:[2,74]},{10:[2,76],31:[2,76],71:[2,76],72:[2,76],101:[2,76],108:[2,76],109:[2,76],111:[2,76],114:[2,76]},{10:[2,77],31:[2,77],71:[2,77],72:[2,77],101:[2,77],108:[2,77],109:[2,77],111:[2,77],114:[2,77]},{10:[2,78],31:[2,78],71:[2,78],72:[2,78],101:[2,78],108:[2,78],109:[2,78],111:[2,78],114:[2,78]},{10:[2,79],31:[2,79],71:[2,79],72:[2,79],101:[2,79],108:[2,79],109:[2,79],111:[2,79],114:[2,79]},{10:[2,80],31:[2,80],71:[2,80],72:[2,80],101:[2,80],108:[2,80],109:[2,80],111:[2,80],114:[2,80]},{5:[2,38],10:[2,38],23:[2,38],25:[2,38],33:[2,38],38:[2,38],43:[2,38],65:[2,38],66:[2,38],75:[2,38],79:[2,38],81:[2,38],91:[2,38],92:[2,38],101:[2,38],108:[2,38]},{39:149,40:[1,95],44:99,46:[1,45],47:[1,46],48:[1,47],50:48,51:[1,49],53:[1,50],64:[1,53]},{41:150,42:[1,151]},{5:[2,5],10:[2,5],23:[2,5],25:[2,5],33:[2,5],38:[2,5],43:[2,5],65:[2,5],66:[2,5],75:[2,5],79:[2,5],81:[2,5],83:[2,5],91:[2,5],92:[2,5],101:[2,5],108:[2,5]},{10:[2,6],23:[2,6],25:[2,6],33:[2,6],38:[2,6],43:[2,6],65:[2,6],66:[2,6],75:[2,6],79:[2,6],81:[2,6],91:[2,6],92:[2,6],101:[2,6],108:[2,6]},{5:[2,28],10:[2,28],23:[2,28],25:[2,28],33:[2,28],38:[2,28],43:[2,28],65:[2,28],66:[2,28],75:[2,28],79:[2,28],81:[2,28],91:[2,28],92:[2,28],101:[2,28],108:[2,28]},{31:[2,44],40:[2,44],46:[2,44],47:[2,44],48:[2,44],51:[2,44],53:[2,44],64:[2,44],71:[2,44],72:[2,44],101:[2,44],108:[2,44],109:[2,44],111:[2,44],114:[2,44]},{31:[2,49],40:[2,49],46:[2,49],47:[2,49],48:[2,49],51:[2,49],53:[2,49],64:[2,49],71:[2,49],72:[2,49],101:[2,49],108:[2,49],109:[2,49],111:[2,49],114:[2,49]},{31:[2,67],40:[2,67],46:[2,67],47:[2,67],48:[2,67],51:[2,67],53:[2,67],64:[2,67],71:[2,67],72:[2,67],101:[2,67],108:[2,67],109:[2,67],111:[2,67],114:[2,67]},{49:152,109:[1,63],110:64,111:[1,65],114:[1,66]},{49:153,109:[1,63],110:64,111:[1,65],114:[1,66]},{51:[1,106],53:[1,107],56:[1,154],60:155},{51:[2,56],53:[2,56],56:[2,56]},{52:[1,156]},{52:[1,157]},{51:[1,110],53:[1,111],59:[1,158],62:159},{51:[2,62],53:[2,62],59:[2,62]},{63:[1,160]},{63:[1,161]},{10:[1,162]},{10:[1,163],68:[1,164]},{10:[2,72],68:[2,72]},{77:[1,165]},{77:[1,168],93:166,95:167,98:169},{63:[1,172],74:171,77:[1,60],89:[1,170],93:59},{5:[2,103],10:[2,103],23:[2,103],25:[2,103],33:[2,103],38:[2,103],43:[2,103],65:[2,103],66:[2,103],75:[2,103],79:[2,103],81:[2,103],91:[2,103],92:[2,103],101:[2,103],108:[2,103]},{5:[2,104],10:[2,104],23:[2,104],25:[2,104],33:[2,104],38:[2,104],43:[2,104],65:[2,104],66:[2,104],75:[2,104],79:[2,104],81:[2,104],91:[2,104],92:[2,104],101:[2,104],108:[2,104]},{21:122,108:[1,30],113:[1,173],116:174,117:[1,123]},{108:[2,152],113:[2,152],115:[2,152],117:[2,152]},{108:[2,153],113:[2,153],115:[2,153],117:[2,153]},{108:[2,154],113:[2,154],115:[2,154],117:[2,154]},{21:122,108:[1,30],115:[1,175],116:174,117:[1,123]},{77:[1,176]},{7:177,8:[1,17]},{22:75,49:71,74:74,77:[1,60],82:178,89:[1,72],90:[1,73],93:59,101:[1,31],109:[1,63],110:64,111:[1,65],114:[1,66]},{84:[1,180],87:[1,179]},{78:[1,181]},{78:[1,182]},{74:183,77:[1,60],93:59},{5:[2,146],10:[2,146],23:[2,146],25:[2,146],27:[2,146],29:[2,146],31:[2,146],33:[2,146],38:[2,146],43:[2,146],65:[2,146],66:[2,146],71:[2,146],72:[2,146],75:[2,146],79:[2,146],81:[2,146],91:[2,146],92:[2,146],101:[2,146],108:[2,146],109:[2,146],111:[2,146],113:[2,146],114:[2,146],115:[2,146],117:[2,146]},{5:[2,126],10:[2,126],23:[2,126],25:[2,126],31:[2,126],33:[2,126],38:[2,126],43:[2,126],56:[2,126],59:[2,126],61:[2,126],65:[2,126],66:[2,126],71:[2,126],72:[2,126],75:[2,126],76:[2,126],78:[2,126],79:[2,126],81:[2,126],85:[2,126],86:[2,126],91:[2,126],92:[2,126],101:[2,126],108:[2,126],109:[2,126],111:[2,126],114:[2,126]},{56:[1,184],61:[1,185]},{56:[2,129],61:[2,129]},{56:[2,130],61:[2,130],94:[1,116]},{56:[2,131],61:[2,131]},{56:[2,132],61:[2,132]},{56:[2,133],61:[2,133]},{56:[2,134],61:[2,134]},{77:[1,188],105:186,106:187},{5:[2,22],10:[2,22],23:[2,22],25:[2,22],33:[2,22],38:[2,22],43:[2,22],65:[2,22],66:[2,22],75:[2,22],79:[2,22],81:[2,22],91:[2,22],92:[2,22],101:[2,22],108:[2,22]},{27:[2,23],29:[2,23],108:[2,23]},{5:[2,34],10:[2,34],23:[2,34],25:[2,34],33:[2,34],38:[2,34],43:[2,34],65:[2,34],66:[2,34],75:[2,34],79:[2,34],81:[2,34],91:[2,34],92:[2,34],101:[2,34],108:[2,34]},{5:[2,33],10:[2,33],23:[2,33],25:[2,33],33:[2,33],38:[2,33],43:[2,33],65:[2,33],66:[2,33],75:[2,33],79:[2,33],81:[2,33],91:[2,33],92:[2,33],101:[2,33],108:[2,33]},{5:[2,35],7:189,8:[1,17],10:[2,35],23:[2,35],25:[2,35],33:[2,35],38:[2,35],43:[2,35],65:[2,35],66:[2,35],75:[2,35],79:[2,35],81:[2,35],91:[2,35],92:[2,35],101:[2,35],108:[2,35]},{31:[1,190]},{10:[2,75],31:[2,75],71:[2,75],72:[2,75],101:[2,75],108:[2,75],109:[2,75],111:[2,75],114:[2,75]},{5:[2,39],10:[2,39],23:[2,39],25:[2,39],33:[2,39],38:[2,39],43:[2,39],65:[2,39],66:[2,39],75:[2,39],79:[2,39],81:[2,39],91:[2,39],92:[2,39],101:[2,39],108:[2,39]},{10:[1,191],42:[1,192]},{10:[2,42],42:[2,42]},{31:[2,51],40:[2,51],46:[2,51],47:[2,51],48:[2,51],51:[2,51],53:[2,51],64:[2,51],71:[2,51],72:[2,51],101:[2,51],108:[2,51],109:[2,51],111:[2,51],114:[2,51]},{31:[2,52],40:[2,52],46:[2,52],47:[2,52],48:[2,52],51:[2,52],53:[2,52],64:[2,52],71:[2,52],72:[2,52],101:[2,52],108:[2,52],109:[2,52],111:[2,52],114:[2,52]},{31:[2,53],40:[2,53],46:[2,53],47:[2,53],48:[2,53],51:[2,53],53:[2,53],64:[2,53],71:[2,53],72:[2,53],101:[2,53],108:[2,53],109:[2,53],111:[2,53],114:[2,53]},{51:[2,55],53:[2,55],56:[2,55]},{49:193,109:[1,63],110:64,111:[1,65],114:[1,66]},{49:194,109:[1,63],110:64,111:[1,65],114:[1,66]},{31:[2,54],40:[2,54],46:[2,54],47:[2,54],48:[2,54],51:[2,54],53:[2,54],64:[2,54],71:[2,54],72:[2,54],101:[2,54],108:[2,54],109:[2,54],111:[2,54],114:[2,54]},{51:[2,61],53:[2,61],59:[2,61]},{49:195,109:[1,63],110:64,111:[1,65],114:[1,66]},{49:196,109:[1,63],110:64,111:[1,65],114:[1,66]},{5:[2,69],10:[2,69],23:[2,69],25:[2,69],33:[2,69],38:[2,69],43:[2,69],65:[2,69],66:[2,69],75:[2,69],79:[2,69],81:[2,69],91:[2,69],92:[2,69],101:[2,69],108:[2,69]},{5:[2,70],10:[2,70],23:[2,70],25:[2,70],33:[2,70],38:[2,70],43:[2,70],65:[2,70],66:[2,70],75:[2,70],79:[2,70],81:[2,70],91:[2,70],92:[2,70],101:[2,70],108:[2,70]},{10:[2,71],68:[2,71]},{78:[1,197]},{56:[2,106],59:[2,106],61:[2,106],63:[2,106],76:[2,106],78:[2,106],85:[2,106],86:[2,106],94:[2,106],97:[2,106]},{56:[2,107],59:[2,107],61:[2,107],63:[2,107],76:[2,107],78:[2,107],85:[2,107],86:[2,107],94:[1,198],97:[2,107]},{54:[1,199],56:[2,108],59:[2,108],61:[2,108],63:[2,108],76:[2,108],78:[2,108],85:[2,108],86:[2,108],94:[2,108],96:[1,117],97:[2,108]},{56:[2,117],59:[2,117],61:[2,117],63:[2,117],76:[2,117],78:[2,117],85:[2,117],86:[2,117],94:[2,117],97:[2,117]},{63:[1,201],97:[1,200]},{63:[1,203],94:[1,116],97:[1,202]},{89:[1,204]},{10:[2,149],31:[2,149],40:[2,149],46:[2,149],47:[2,149],48:[2,149],51:[2,149],53:[2,149],56:[2,149],59:[2,149],61:[2,149],64:[2,149],71:[2,149],72:[2,149],78:[2,149],85:[2,149],86:[2,149],101:[2,149],108:[2,149],109:[2,149],111:[2,149],114:[2,149]},{108:[2,151],113:[2,151],115:[2,151],117:[2,151]},{10:[2,150],31:[2,150],40:[2,150],46:[2,150],47:[2,150],48:[2,150],51:[2,150],53:[2,150],56:[2,150],59:[2,150],61:[2,150],64:[2,150],71:[2,150],72:[2,150],78:[2,150],85:[2,150],86:[2,150],101:[2,150],108:[2,150],109:[2,150],111:[2,150],114:[2,150]},{78:[1,205]},{5:[2,85],10:[2,85],23:[2,85],25:[2,85],33:[2,85],38:[2,85],43:[2,85],65:[2,85],66:[2,85],75:[2,85],79:[2,85],81:[2,85],83:[1,206],91:[2,85],92:[2,85],101:[2,85],108:[2,85]},{78:[1,207]},{78:[1,208]},{87:[1,209]},{7:210,8:[1,17]},{7:211,8:[1,17]},{78:[1,212],94:[1,116]},{5:[2,127],10:[2,127],23:[2,127],25:[2,127],31:[2,127],33:[2,127],38:[2,127],43:[2,127],56:[2,127],59:[2,127],61:[2,127],65:[2,127],66:[2,127],71:[2,127],72:[2,127],75:[2,127],76:[2,127],78:[2,127],79:[2,127],81:[2,127],85:[2,127],86:[2,127],91:[2,127],92:[2,127],101:[2,127],108:[2,127],109:[2,127],111:[2,127],114:[2,127]},{22:139,49:138,57:[1,141],74:136,77:[1,60],89:[1,137],93:59,101:[1,31],103:213,104:140,109:[1,63],110:64,111:[1,65],114:[1,66]},{59:[1,214],61:[1,215]},{59:[2,138],61:[2,138]},{63:[1,216]},{5:[2,37],10:[2,37],23:[2,37],25:[2,37],33:[2,37],38:[2,37],43:[2,37],65:[2,37],66:[2,37],75:[2,37],79:[2,37],81:[2,37],91:[2,37],92:[2,37],101:[2,37],108:[2,37]},{5:[2,36],10:[2,36],23:[2,36],25:[2,36],33:[2,36],38:[2,36],43:[2,36],65:[2,36],66:[2,36],75:[2,36],79:[2,36],81:[2,36],91:[2,36],92:[2,36],101:[2,36],108:[2,36]},{5:[2,40],10:[2,40],23:[2,40],25:[2,40],33:[2,40],38:[2,40],43:[2,40],65:[2,40],66:[2,40],75:[2,40],79:[2,40],81:[2,40],91:[2,40],92:[2,40],101:[2,40],108:[2,40]},{10:[2,41],42:[2,41]},{51:[2,57],53:[2,57],56:[2,57],61:[1,217]},{51:[2,59],53:[2,59],56:[2,59],61:[1,218]},{51:[2,63],53:[2,63],59:[2,63],61:[1,219]},{51:[2,65],53:[2,65],59:[2,65],61:[1,220]},{5:[2,102],10:[2,102],23:[2,102],25:[2,102],33:[2,102],38:[2,102],43:[2,102],65:[2,102],66:[2,102],75:[2,102],79:[2,102],81:[2,102],91:[2,102],92:[2,102],101:[2,102],108:[2,102]},{77:[1,222],98:221},{49:228,56:[1,223],74:226,77:[1,60],89:[1,227],93:59,99:224,100:225,109:[1,63],110:64,111:[1,65],114:[1,66]},{56:[2,109],59:[2,109],61:[2,109],63:[2,109],76:[2,109],78:[2,109],85:[2,109],86:[2,109],94:[2,109],97:[2,109]},{74:230,77:[1,60],89:[1,229],93:59,97:[1,231]},{56:[2,112],59:[2,112],61:[2,112],63:[2,112],76:[2,112],78:[2,112],85:[2,112],86:[2,112],94:[2,112],97:[2,112]},{74:233,77:[1,60],89:[1,232],93:59},{97:[1,234]},{7:235,8:[1,17]},{78:[1,236]},{7:237,8:[1,17]},{7:238,8:[1,17]},{78:[1,239]},{5:[2,87],10:[2,87],23:[2,87],25:[2,87],33:[2,87],38:[2,87],43:[2,87],65:[2,87],66:[2,87],75:[2,87],79:[2,87],81:[2,87],83:[1,240],91:[2,87],92:[2,87],101:[2,87],108:[2,87]},{5:[2,95],10:[2,95],23:[2,95],25:[2,95],33:[2,95],38:[2,95],43:[2,95],65:[2,95],66:[2,95],75:[2,95],79:[2,95],81:[2,95],83:[1,241],91:[2,95],92:[2,95],101:[2,95],108:[2,95]},{7:242,8:[1,17]},{56:[2,128],61:[2,128]},{56:[2,135],59:[2,135],61:[2,135]},{59:[1,243],77:[1,188],106:244},{22:249,49:248,57:[1,141],74:251,77:[1,60],89:[1,246],90:[1,247],93:59,101:[1,31],104:250,107:245,109:[1,63],110:64,111:[1,65],114:[1,66]},{51:[2,58],53:[2,58],56:[2,58]},{51:[2,60],53:[2,60],56:[2,60]},{51:[2,64],53:[2,64],59:[2,64]},{51:[2,66],53:[2,66],59:[2,66]},{56:[2,118],59:[2,118],61:[2,118],63:[2,118],76:[2,118],78:[2,118],85:[2,118],86:[2,118],94:[2,118],97:[2,118]},{54:[1,199]},{56:[2,119],59:[2,119],61:[2,119],63:[2,119],76:[2,119],78:[2,119],85:[2,119],86:[2,119],94:[2,119],97:[2,119]},{56:[1,252],61:[1,253]},{56:[2,122],61:[2,122]},{56:[2,123],61:[2,123],94:[1,116]},{56:[2,124],61:[2,124]},{56:[2,125],61:[2,125]},{97:[1,254]},{94:[1,116],97:[1,255]},{56:[2,116],59:[2,116],61:[2,116],63:[2,116],76:[2,116],78:[2,116],85:[2,116],86:[2,116],94:[2,116],97:[2,116]},{97:[1,256]},{94:[1,116],97:[1,257]},{56:[2,115],59:[2,115],61:[2,115],63:[2,115],76:[2,115],78:[2,115],85:[2,115],86:[2,115],94:[2,115],97:[2,115]},{5:[2,83],10:[2,83],23:[2,83],25:[2,83],33:[2,83],38:[2,83],43:[2,83],65:[2,83],66:[2,83],75:[2,83],79:[2,83],81:[2,83],91:[2,83],92:[2,83],101:[2,83],108:[2,83]},{7:258,8:[1,17]},{5:[2,89],10:[2,89],23:[2,89],25:[2,89],33:[2,89],38:[2,89],43:[2,89],65:[2,89],66:[2,89],75:[2,89],79:[2,89],81:[2,89],83:[1,259],91:[2,89],92:[2,89],101:[2,89],108:[2,89]},{5:[2,91],10:[2,91],23:[2,91],25:[2,91],33:[2,91],38:[2,91],43:[2,91],65:[2,91],66:[2,91],75:[2,91],79:[2,91],81:[2,91],83:[1,260],91:[2,91],92:[2,91],101:[2,91],108:[2,91]},{7:261,8:[1,17]},{78:[1,262]},{78:[1,263]},{5:[2,84],10:[2,84],23:[2,84],25:[2,84],33:[2,84],38:[2,84],43:[2,84],65:[2,84],66:[2,84],75:[2,84],79:[2,84],81:[2,84],91:[2,84],92:[2,84],101:[2,84],108:[2,84]},{56:[2,136],59:[2,136],61:[2,136]},{59:[2,137],61:[2,137]},{59:[2,139],61:[2,139]},{59:[2,140],61:[2,140]},{59:[2,141],61:[2,141]},{59:[2,142],61:[2,142]},{59:[2,143],61:[2,143]},{59:[2,144],61:[2,144]},{59:[2,145],61:[2,145],94:[1,116]},{56:[2,120],59:[2,120],61:[2,120],63:[2,120],76:[2,120],78:[2,120],85:[2,120],86:[2,120],94:[2,120],97:[2,120]},{49:228,74:226,77:[1,60],89:[1,227],93:59,100:264,109:[1,63],110:64,111:[1,65],114:[1,66]},{56:[2,110],59:[2,110],61:[2,110],63:[2,110],76:[2,110],78:[2,110],85:[2,110],86:[2,110],94:[2,110],97:[2,110]},{56:[2,111],59:[2,111],61:[2,111],63:[2,111],76:[2,111],78:[2,111],85:[2,111],86:[2,111],94:[2,111],97:[2,111]},{56:[2,113],59:[2,113],61:[2,113],63:[2,113],76:[2,113],78:[2,113],85:[2,113],86:[2,113],94:[2,113],97:[2,113]},{56:[2,114],59:[2,114],61:[2,114],63:[2,114],76:[2,114],78:[2,114],85:[2,114],86:[2,114],94:[2,114],97:[2,114]},{5:[2,86],10:[2,86],23:[2,86],25:[2,86],33:[2,86],38:[2,86],43:[2,86],65:[2,86],66:[2,86],75:[2,86],79:[2,86],81:[2,86],91:[2,86],92:[2,86],101:[2,86],108:[2,86]},{78:[1,265]},{78:[1,266]},{5:[2,93],10:[2,93],23:[2,93],25:[2,93],33:[2,93],38:[2,93],43:[2,93],65:[2,93],66:[2,93],75:[2,93],79:[2,93],81:[2,93],83:[1,267],91:[2,93],92:[2,93],101:[2,93],108:[2,93]},{7:268,8:[1,17]},{7:269,8:[1,17]},{56:[2,121],61:[2,121]},{7:270,8:[1,17]},{7:271,8:[1,17]},{78:[1,272]},{5:[2,88],10:[2,88],23:[2,88],25:[2,88],33:[2,88],38:[2,88],43:[2,88],65:[2,88],66:[2,88],75:[2,88],79:[2,88],81:[2,88],91:[2,88],92:[2,88],101:[2,88],108:[2,88]},{5:[2,96],10:[2,96],23:[2,96],25:[2,96],33:[2,96],38:[2,96],43:[2,96],65:[2,96],66:[2,96],75:[2,96],79:[2,96],81:[2,96],91:[2,96],92:[2,96],101:[2,96],108:[2,96]},{5:[2,90],10:[2,90],23:[2,90],25:[2,90],33:[2,90],38:[2,90],43:[2,90],65:[2,90],66:[2,90],75:[2,90],79:[2,90],81:[2,90],91:[2,90],92:[2,90],101:[2,90],108:[2,90]},{5:[2,92],10:[2,92],23:[2,92],25:[2,92],33:[2,92],38:[2,92],43:[2,92],65:[2,92],66:[2,92],75:[2,92],79:[2,92],81:[2,92],91:[2,92],92:[2,92],101:[2,92],108:[2,92]},{7:273,8:[1,17]},{5:[2,94],10:[2,94],23:[2,94],25:[2,94],33:[2,94],38:[2,94],43:[2,94],65:[2,94],66:[2,94],75:[2,94],79:[2,94],81:[2,94],91:[2,94],92:[2,94],101:[2,94],108:[2,94]}],
defaultActions: {37:[2,1],58:[2,82]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* tracing/debugging functions */

function Loc(start, end) {
  this.start = { line: start.first_line, column: start.first_column };
  this.end = { line: end.last_line, column: end.last_column };
}

/* Manana data types */

function MananaHash(data, loc) {
  var hash = {}, i = 0;

  while (data[i]) {
    hash[data[i][0]] = data[i][1];
    i++;
  }

  return hash;
}

/* AST nodes */

function VoidTagNode(tag, attrs, loc) {
  this.type = "VoidTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
}

function TagNode(tag, attrs, text, block, loc) {
  this.type = "Tag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = text ? [text] : block;
}

function PreTagNode(tag, attrs, text, loc) {
  this.type = "PreTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = text;
}

function TextNode(words, loc) {
  this.type = "Text";
  this.loc = loc;

  var w = words, t = [], s = [], i = 0; 

  while (typeof w[i] !== "undefined") {
    if (typeof w[i] === "string") {
      s.push(w[i]);
    } else {
      if (s.length) {
        t.push(s.join(' '));
        s = [];
      }
      t.push(w[i]);
    }
    i++;
  }
  if (s.length) {
    t.push(s.join(' '));
  }

  this.body = t;
}

function NameNode(path, loc) {
  this.type = "Name";
  this.loc = loc;
  this.body = path;
}

function WithNode(path, id, body, loc) {
  this.type = "With";
  this.loc = loc;
  this.path = path;
  this.id = id;
  this.body = body;
}

function IdNode(id, start, end, loc) {
  this.type = "Id";
  this.loc = loc;
  this.id = id;
  this.start = start;
  this.end = end;
}

function PathNode(path_node, component, methods, loc) {
  var k, c;

  if (path_node === null) {
    this.type = "Path";
    this.loc = loc;
    this.methods = null;
    this.components = [];
  } else {
    for (k in path_node) {
      if (path_node.hasOwnProperty(k)) {
        this[k] = path_node[k];
      }
    }

    if (loc && path_node.loc) {
      if (loc.end.line > path_node.loc.end.line || loc.end.column > path_node.loc.end.column) {
        this.loc.end = loc.end;
      }
    }
  }

  if (component) {
    c = [component.id];
    if (component.start !== null) {
      c.push(component.start);
    }
    if (component.end !== null) {
      c.push(component.end);
    }
    this.components.push(c);
  }

  if (methods !== null) {
    this.methods = methods;
  }
}

function MethodNode(name, args, loc) {
  this.type = "Method";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function MethodChainNode(method, loc) {
  this.type = "MethodChain";
  this.loc = loc;
  this.chain = [method];
}

function FunctionNode(name, args, loc) {
  this.type = "Function";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function ForNode(id, path, body, loc) {
  this.type = "For";
  this.loc = loc;
  this.id = id;
  this.path = path;
  this.body = body;
}

function IfNode(cond, v1, v2, body, else_body, loc) {
  this.type = "If";
  this.loc = loc;
  this.condition = cond;
  this.value_1 = v1;
  this.value_2 = v2;
  this.body = body;
  this.else_body = else_body;
}

function AliasNode(path, id, loc) {
  this.type = "Alias";
  this.loc = loc;
  this.path = path;
  this.id = id;
}

function IncludeNode(path, loc) {
  this.type = "Include";
  this.loc = loc;
  this.path = path;
}

function FilterNode(filter, body, loc) {
  this.type = "Filter";
  this.loc = loc;
  this.body = [body];
}

function CodeNode(code, language, loc) {
  this.type = "Code";
  this.loc = loc;
  this.language = language;
  this.body = code.join('');
}

function MananaStringNode(body, loc) {
  this.type = "MananaString";
  this.loc = loc;
  if (typeof body === "string") {
    this.body = [body];
  } else {
    this.body = body;
  }
}

/* expose AST constructors to parser */

parser.ast = {};
parser.ast.Loc = Loc;
parser.ast.MananaStringNode = MananaStringNode;
parser.ast.VoidTagNode = VoidTagNode;
parser.ast.TagNode = TagNode;
parser.ast.PreTagNode = PreTagNode;
parser.ast.TextNode = TextNode;
parser.ast.NameNode = NameNode;
parser.ast.WithNode = WithNode;
parser.ast.IdNode = IdNode;
parser.ast.PathNode = PathNode;
parser.ast.MethodNode = MethodNode;
parser.ast.MethodChainNode = MethodChainNode;
parser.ast.FunctionNode = FunctionNode;
parser.ast.ForNode = ForNode;
parser.ast.IfNode = IfNode;
parser.ast.AliasNode = AliasNode;
parser.ast.IncludeNode = IncludeNode;
parser.ast.FilterNode = FilterNode;
parser.ast.CodeNode = CodeNode;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

  function strip(start, end) {
    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.pushState("comment"); /* ignore */ 
break;
case 1:this.popState(); /* ignore */ 
break;
case 2:/* ignore */
break;
case 3:/* ignore */
break;
case 4:this.pushState("expr"); return "FOR";
break;
case 5:this.pushState("expr"); return "IF";
break;
case 6:this.pushState("expr"); return "ELSE";
break;
case 7:this.pushState("expr"); return "ALIAS";
break;
case 8:this.pushState("expr"); return "WITH";
break;
case 9:this.pushState("expr"); return "INCLUDE";
break;
case 10:return "BOOL";
break;
case 11:return "BOOL";
break;
case 12:this.popState(); return "END_EXPR";
break;
case 13:return "IN";
break;
case 14:return "IS";
break;
case 15:return "AS";
break;
case 16:return "NOT";
break;
case 17:return "TYPE";
break;
case 18:return "TYPE";
break;
case 19:return "TYPE";
break;
case 20:return "TYPE";
break;
case 21:return "TYPE";
break;
case 22:return "COND";
break;
case 23:return "COND";
break;
case 24:return "COND";
break;
case 25:return "COND";
break;
case 26:return "COND";
break;
case 27:return "COND";
break;
case 28:return "COND";
break;
case 29:return "COND";
break;
case 30:return "EXISTS";
break;
case 31:this.pushState("tag");    return "VOID_TAG";
break;
case 32:
                                           if (yy_.yytext == "pre") {
                                             this.pushState("pre");
                                             return "PRE_TAG";
                                           } else {
                                             this.pushState("tag");    
                                             return "TAG";
                                           }
                                         
break;
case 33:return "LINE";
break;
case 34:return "LINE"; 
break;
case 35:this.popState();          return "END_TAG";
break;
case 36:yy_.yytext = yy_.yytext.slice(1); return "TAG_ID";
break;
case 37:yy_.yytext = yy_.yytext.slice(1); return "TAG_CLASS";
break;
case 38:
                                            yy_.yytext = yy_.yytext.replace("->", '');
                                            yy_.yytext = yy_.yytext.replace(/\s*/, '')
                                            yy_.yytext = yy_.yytext.replace(/"|'/g, '');
                                            return "TAG_SRC";
                                         
break;
case 39:this.pushState("i_string_d"); return ["TAG_SRC_I_STRING", "I_STRING_D"];
break;
case 40:this.pushState("i_string_d"); return "I_STRING_D";
break;
case 41:this.pushState("i_string_d"); return "I_STRING_D";                                      
break;
case 42:this.pushState("name");       return "START_NAME";
break;
case 43:this.popState();              return "END_I_STRING_D"; // "
break;
case 44:return "I_STRING_TEXT";
break;
case 45:this.pushState("i_string_s"); return ["TAG_SRC_I_STRING", "I_STRING_S"];
break;
case 46:this.pushState("i_string_s"); return "I_STRING_S";
break;
case 47:this.pushState("i_string_s"); return "I_STRING_S";                                      
break;
case 48:this.pushState("name");       return "START_NAME";
break;
case 49:this.popState();              return "END_I_STRING_S"; // "
break;
case 50:return "I_STRING_TEXT";
break;
case 51:this.pushState("i_html"); return "I_HTML_START";
break;
case 52:this.pushState("name");   return "START_NAME";
break;
case 53:this.popState();          return "I_HTML_END";
break;
case 54:return "I_HTML_TEXT";
break;
case 55:return "HTML";
break;
case 56:this.pushState("tagargs"); return "LPAREN";
break;
case 57:this.popState();           return "RPAREN";
break;
case 58:this.pushState("tagargs"); return "LBRACE";
break;
case 59:this.popState();           return "RBRACE";
break;
case 60:return "COLON";
break;
case 61:return "EQ";
break;
case 62:return "COMMA";
break;
case 63:return "TAG_ATTR";
break;
case 64:yy_.yytext = "data-" + yy_.yytext.slice(1); return "TAG_DATA_ATTR";
break;
case 65:/* ignore */
break;
case 66:/* ignore */
break;
case 67:this.pushState("code"); return "CODE_START";
break;
case 68:return "CODE";
break;
case 69:return "CODE"; 
break;
case 70:this.pushState("filter"); yy_.yytext = yy_.yytext.slice(1); return "FILTER";
break;
case 71:this.pushState("name"); return "START_NAME";
break;
case 72:this.popState(); return "RBRACE"
break;
case 73:this.pushState("fn"); yy_.yytext = yy_.yytext.slice(1); return "FN";
break;
case 74:this.popState(); return "RPAREN";
break;
case 75:/* ignore */
break;
case 76:/* ignore */
break;
case 77:return "LBRACE";
break;
case 78:return "RBRACE";
break;
case 79:return "COMMA";
break;
case 80:return "ID";
break;
case 81:return "DOT";
break;
case 82:return "LPAREN";
break;
case 83:return "RPAREN";
break;
case 84:return "LBRACK";
break;
case 85:return "RBRACK";
break;
case 86:return "COLON"; 
break;
case 87:return "COMMA";
break;
case 88:return "INT";
break;
case 89:yy_.yytext = strip(1,2).replace(/\\"/g, '"'); return "STRING";
break;
case 90:return "STRING"; // Do not strip quotes
break;
case 91:return "WORD";
break;
case 92:
  var tokens = [];
  while (0 < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }

  if (tokens.length) {
    tokens.push("EOF");
    return tokens;
  } else {
    return "EOF";
  }

break;
case 93:
  var tokens = [];
  while (_filter_indent_level >= _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }

  if (tokens.length) {
    tokens.push("EOF");
    return tokens;
  } else {
    return "EOF";
  }

break;
case 94:/* eat blank lines */
break;
case 95:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (indentation > _indent_stack[0]) {
    _indent_stack.unshift(indentation);
    _indent_level = indentation;
    return "INDENT";
  }

  var tokens = [];
  while (indentation < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }

  if (tokens.length) {
    return tokens;
  }

break;
case 96:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (typeof _filter_indent_level === "undefined") {
    _filter_indent_level = indentation;
    return "FILTER_START";
  } else if (indentation < _filter_indent_level) {
    _filter_indent_level = undefined;
    this.popState();
    return "DEDENT";
  } 
  /* else ignore */

break;
case 97:/* ignore all other whitespace */
break;
}
},
rules: [/^(?:""")/,/^(?:""")/,/^(?:.+)/,/^(?:\n)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:alias\b)/,/^(?:with\b)/,/^(?:include\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:(?=\n))/,/^(?:in\b)/,/^(?:is\b)/,/^(?:as\b)/,/^(?:not\b)/,/^(?:Hash\b)/,/^(?:List\b)/,/^(?:String\b)/,/^(?:Integer\b)/,/^(?:Number\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?:>)/,/^(?:<)/,/^(?:%)/,/^(?:exists\b)/,/^(?:((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)))/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:.+)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:(?=\n))/,/^(?:(#[a-zA-Z][a-zA-Z0-9\-\:_]*))/,/^(?:(\.-?[_a-zA-Z]+[_a-zA-Z0-9\-]*(?=["."\s\n])))/,/^(?:->\s*(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:->\s*(i"(?=.*?@\{)))/,/^(?:(i"(?=.*?@\{)))/,/^(?:(i"(?=.*?@\{)))/,/^(?:@\{)/,/^(?:")/,/^(?:[^"@"'"']*)/,/^(?:->\s*(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:@\{)/,/^(?:')/,/^(?:[^"@""'"]*)/,/^(?:(<(?=.*?@\{)))/,/^(?:@\{)/,/^(?:>(?=\s*\n))/,/^(?:.)/,/^(?:<.*(?=\n))/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z][a-zA-Z0-9\-_]*(?=\s*["="":"])))/,/^(?:(\*[a-zA-Z][a-zA-Z0-9\-]*(?=["="":"])))/,/^(?:\s)/,/^(?:\n)/,/^(?::code(\/[a-z]+)?)/,/^(?:.+)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?::(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:@\{)/,/^(?:\})/,/^(?:@(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254})\s?(?=\())/,/^(?:\)(?!\)))/,/^(?:\s)/,/^(?:\n)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:(\+|-)?(0|[1-9][0-9]*))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:([^\s\n"@"][^\s\n]*))/,/^(?:\s*$)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"comment":{"rules":[1,2,3,97],"inclusive":true},"tag":{"rules":[35,36,37,38,39,41,45,47,56,58,71,73,90,91,97],"inclusive":true},"tagargs":{"rules":[40,46,57,59,60,61,62,63,64,65,66,89,97],"inclusive":true},"filter":{"rules":[41,47,71,90,91,93,96,97],"inclusive":true},"expr":{"rules":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,40,46,73,80,81,82,83,84,85,86,87,88,89,97],"inclusive":true},"name":{"rules":[40,46,72,80,81,82,83,84,85,86,87,88,89,97],"inclusive":true},"fn":{"rules":[10,11,40,46,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,97],"inclusive":true},"i_string_d":{"rules":[42,43,44,97],"inclusive":true},"i_string_s":{"rules":[48,49,50,97],"inclusive":true},"i_html":{"rules":[52,53,54,97],"inclusive":true},"pre":{"rules":[33,34,93,96,97],"inclusive":true},"code":{"rules":[68,69,93,96,97],"inclusive":true},"INITIAL":{"rules":[0,4,5,6,7,8,9,31,32,41,47,51,55,67,70,71,73,90,91,92,94,95,97],"inclusive":true}}
};
_indent_stack = [0];
_indent_level = 0;
_filter_indent_level = undefined;;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = manana_parser;
exports.Parser = manana_parser.Parser;
exports.parse = function () { return manana_parser.parse.apply(manana_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}