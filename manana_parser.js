/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var manana_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"prog_list":4,"EOF":5,"stmt":6,"block":7,"INDENT":8,"stmt_list":9,"DEDENT":10,"html_stmt":11,"void_tag_stmt":12,"tag_stmt":13,"filter_stmt":14,"alias_stmt":15,"include_stmt":16,"with_stmt":17,"if_stmt":18,"for_stmt":19,"name":20,"fn":21,"HTML":22,"void_tag":23,"END_TAG":24,"tag_attrs":25,"VOID_TAG":26,"tag":27,"text":28,"TAG":29,"tag_attr":30,"tag_attr_args":31,"TAG_ID":32,"tag_classes":33,"TAG_ATTR":34,"EQ":35,"STRING":36,"TAG_DATA_ATTR":37,"LPAREN":38,"tag_attr_arg_list":39,"RPAREN":40,"tag_attr_arg":41,"COMMA":42,"TAG_CLASS":43,"FILTER":44,"FILTER_START":45,"word_list":46,"word":47,"WORD":48,"SPACE":49,"WITH":50,"path":51,"AS":52,"ID":53,"END_EXPR":54,"FOR":55,"IN":56,"IF":57,"ev":58,"ELSE":59,"NOT":60,"COND":61,"IS":62,"TYPE":63,"INT":64,"BOOL":65,"ALIAS":66,"INCLUDE":67,"id":68,"DOT":69,"meths":70,"LBRACK":71,"RBRACK":72,"COLON":73,"meth":74,"meth_args":75,"meth_arg":76,"FN":77,"fn_args":78,"fn_arg":79,"hash":80,"LBRACE":81,"hash_data":82,"RBRACE":83,"hash_pair":84,"hash_val":85,"START_NAME":86,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",10:"DEDENT",22:"HTML",24:"END_TAG",26:"VOID_TAG",29:"TAG",32:"TAG_ID",34:"TAG_ATTR",35:"EQ",36:"STRING",37:"TAG_DATA_ATTR",38:"LPAREN",40:"RPAREN",42:"COMMA",43:"TAG_CLASS",44:"FILTER",45:"FILTER_START",48:"WORD",49:"SPACE",50:"WITH",52:"AS",53:"ID",54:"END_EXPR",55:"FOR",56:"IN",57:"IF",59:"ELSE",60:"NOT",61:"COND",62:"IS",63:"TYPE",64:"INT",65:"BOOL",66:"ALIAS",67:"INCLUDE",69:"DOT",71:"LBRACK",72:"RBRACK",73:"COLON",77:"FN",81:"LBRACE",83:"RBRACE",86:"START_NAME"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,3],[9,2],[9,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,1],[12,2],[12,3],[23,1],[13,2],[13,3],[13,3],[13,3],[13,4],[13,4],[27,1],[25,2],[25,1],[25,1],[30,1],[30,1],[30,3],[30,3],[31,3],[39,2],[39,1],[41,3],[41,4],[41,3],[41,4],[33,2],[33,1],[14,4],[28,1],[46,1],[46,2],[47,1],[47,1],[47,1],[17,6],[19,6],[18,4],[18,7],[18,5],[18,8],[18,6],[18,9],[18,6],[18,9],[18,7],[18,10],[58,1],[58,1],[58,1],[58,1],[15,5],[16,3],[16,3],[51,1],[51,3],[51,3],[68,1],[68,4],[68,6],[68,6],[68,4],[68,6],[68,6],[68,5],[68,5],[70,1],[70,3],[74,3],[74,4],[75,3],[75,1],[76,1],[76,1],[76,1],[21,3],[21,4],[78,3],[78,1],[79,1],[79,1],[79,1],[79,1],[79,1],[80,3],[80,4],[82,3],[82,1],[84,3],[85,1],[85,1],[85,1],[85,1],[85,1],[85,1],[20,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0-1]; 
break;
case 6: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = [$$[$0]]; 
break;
case 19: this.$ = new HtmlNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 20: this.$ = new VoidTagNode($$[$0-1], null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 21: this.$ = new VoidTagNode($$[$0-2], $$[$0-1],   new Loc(_$[$0-2], _$[$0-1])); 
break;
case 22: this.$ = $$[$0]; 
break;
case 23: this.$ = new TagNode($$[$0-1], null, null, null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 24: this.$ = new TagNode($$[$0-2], null, $$[$0-1],   null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 25: this.$ = new TagNode($$[$0-2], null, null, $$[$0],   new Loc(_$[$0-2], _$[$0])); 
break;
case 26: this.$ = new TagNode($$[$0-2], $$[$0-1],   null, null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 27: this.$ = new TagNode($$[$0-3], $$[$0-2],   $$[$0-1],   null, new Loc(_$[$0-3], _$[$0-1])); 
break;
case 28: this.$ = new TagNode($$[$0-3], $$[$0-2],   null, $$[$0],   new Loc(_$[$0-3], _$[$0])); 
break;
case 29: this.$ = $$[$0]; 
break;
case 30: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 31: this.$ = [$$[$0]]; 
break;
case 32: this.$ = $$[$0]; 
break;
case 33: this.$ = ['id', $$[$0]]; 
break;
case 34: this.$ = ['class', $$[$0].join(" ")]; 
break;
case 35: this.$ = ['attr', $$[$0-2], $$[$0]]; 
break;
case 36: this.$ = ['data', $$[$0-2], $$[$0]]; 
break;
case 37: this.$ = $$[$0-1]; 
break;
case 38: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 39: this.$ = [$$[$0]]; 
break;
case 40: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 41: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 42: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 43: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 44: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 45: this.$ = [$$[$0]]; 
break;
case 46: this.$ = new FilterNode($$[$0-3], $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 47: this.$ = new TextNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 48: this.$ = [$$[$0]]; 
break;
case 49: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 53: this.$ = new WithNode($$[$0-4], $$[$0-2], $$[$0], new Loc(_$[$0-5], _$[$0])); 
break;
case 54: this.$ = new ForNode($$[$0-4], $$[$0-2], $$[$0] , new Loc(_$[$0-5], _$[$0])) ; 
break;
case 55: this.$ = new IfNode("true", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-3], _$[$0])); 
break;
case 56: this.$ = new IfNode("true", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-6], _$[$0])); 
break;
case 57: this.$ = new IfNode("false", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-4], _$[$0])); 
break;
case 58: this.$ = new IfNode("false", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-7], _$[$0])); 
break;
case 59: this.$ = new IfNode($$[$0-3], $$[$0-4], $$[$0-2], $$[$0], null, new Loc(_$[$0-5], _$[$0])); 
break;
case 60: this.$ = new IfNode($$[$0-6], $$[$0-7], $$[$0-5], $$[$0-3], $$[$0], new Loc(_$[$0-8], _$[$0])); 
break;
case 61: this.$ = new IfNode($$[$0-3], $$[$0-4], $$[$0-2], $$[$0], null, new Loc(_$[$0-5], _$[$0])); 
break;
case 62: this.$ = new IfNode($$[$0-6], $$[$0-7], $$[$0-5], $$[$0-3], null, new Loc(_$[$0-8], _$[$0])); 
break;
case 63: this.$ = new IfNode("is not", $$[$0-5], $$[$0-2], $$[$0], null, new Loc(_$[$0-6], _$[$0])); 
break;
case 64: this.$ = new IfNode("is not", $$[$0-8], $$[$0-5], $$[$0-3], $$[$0], new Loc(_$[$0-9], _$[$0])); 
break;
case 69: this.$ = new AliasNode($$[$0-3], $$[$0-1], new Loc(_$[$0-4], _$[$0])); 
break;
case 70: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 71: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 72: this.$ = new PathNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 73: this.$ = updatePathNode($$[$0-2], $$[$0], null, new Loc(_$[$0-2], _$[$0]));  
break;
case 74: this.$ = updatePathNode($$[$0-2], null, $$[$0], new Loc(_$[$0-2], _$[$0])); 
break;
case 75: this.$ = new IdNode($$[$0], null, null, new Loc(_$[$0], _$[$0])); 
break;
case 76: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 77: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 78: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 79: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 80: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 81: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 82: this.$ = new IdNode($$[$0-4], 0   , $$[$0-1]  , new Loc(_$[$0-4], _$[$0])); 
break;
case 83: this.$ = new IdNode($$[$0-4], $$[$0-2]  , '*' , new Loc(_$[$0-4], _$[$0])); 
break;
case 84: this.$ = new MethodChainNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 85: this.$ = $$[$0-2]; this.$.chain.push($$[$0])                        ; 
break;
case 86: this.$ = new MethodNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 87: this.$ = new MethodNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 88: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 89: this.$ = [$$[$0]]; 
break;
case 93: this.$ = new FunctionNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 94: this.$ = new FunctionNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 95: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 96: this.$ = [$$[$0]]; 
break;
case 102: this.$ = new MananaHash($$[$0-1]); console.log(this.$); 
break;
case 103: this.$ = new MananaHash($$[$0-2]); console.log(this.$); 
break;
case 104: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 105: this.$ = [$$[$0]]; 
break;
case 106: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 113: this.$ = $$[$0-1]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,16],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:[1,17],23:18,26:[1,28],27:19,29:[1,29],44:[1,20],50:[1,23],55:[1,25],57:[1,24],66:[1,21],67:[1,22],77:[1,27],86:[1,26]},{1:[3]},{5:[1,30],6:31,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:[1,17],23:18,26:[1,28],27:19,29:[1,29],44:[1,20],50:[1,23],55:[1,25],57:[1,24],66:[1,21],67:[1,22],77:[1,27],86:[1,26]},{5:[2,3],22:[2,3],26:[2,3],29:[2,3],44:[2,3],50:[2,3],55:[2,3],57:[2,3],66:[2,3],67:[2,3],77:[2,3],86:[2,3]},{5:[2,4],22:[2,4],26:[2,4],29:[2,4],44:[2,4],50:[2,4],55:[2,4],57:[2,4],66:[2,4],67:[2,4],77:[2,4],86:[2,4]},{5:[2,8],10:[2,8],22:[2,8],26:[2,8],29:[2,8],44:[2,8],50:[2,8],55:[2,8],57:[2,8],66:[2,8],67:[2,8],77:[2,8],86:[2,8]},{5:[2,9],10:[2,9],22:[2,9],26:[2,9],29:[2,9],44:[2,9],50:[2,9],55:[2,9],57:[2,9],66:[2,9],67:[2,9],77:[2,9],86:[2,9]},{5:[2,10],10:[2,10],22:[2,10],26:[2,10],29:[2,10],44:[2,10],50:[2,10],55:[2,10],57:[2,10],66:[2,10],67:[2,10],77:[2,10],86:[2,10]},{5:[2,11],10:[2,11],22:[2,11],26:[2,11],29:[2,11],44:[2,11],50:[2,11],55:[2,11],57:[2,11],66:[2,11],67:[2,11],77:[2,11],86:[2,11]},{5:[2,12],10:[2,12],22:[2,12],26:[2,12],29:[2,12],44:[2,12],50:[2,12],55:[2,12],57:[2,12],66:[2,12],67:[2,12],77:[2,12],86:[2,12]},{5:[2,13],10:[2,13],22:[2,13],26:[2,13],29:[2,13],44:[2,13],50:[2,13],55:[2,13],57:[2,13],66:[2,13],67:[2,13],77:[2,13],86:[2,13]},{5:[2,14],10:[2,14],22:[2,14],26:[2,14],29:[2,14],44:[2,14],50:[2,14],55:[2,14],57:[2,14],66:[2,14],67:[2,14],77:[2,14],86:[2,14]},{5:[2,15],10:[2,15],22:[2,15],26:[2,15],29:[2,15],44:[2,15],50:[2,15],55:[2,15],57:[2,15],66:[2,15],67:[2,15],77:[2,15],86:[2,15]},{5:[2,16],10:[2,16],22:[2,16],26:[2,16],29:[2,16],44:[2,16],50:[2,16],55:[2,16],57:[2,16],66:[2,16],67:[2,16],77:[2,16],86:[2,16]},{5:[2,17],10:[2,17],22:[2,17],26:[2,17],29:[2,17],44:[2,17],50:[2,17],55:[2,17],57:[2,17],66:[2,17],67:[2,17],77:[2,17],86:[2,17]},{5:[2,18],10:[2,18],22:[2,18],26:[2,18],29:[2,18],44:[2,18],50:[2,18],55:[2,18],57:[2,18],66:[2,18],67:[2,18],77:[2,18],86:[2,18]},{6:33,9:32,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:[1,17],23:18,26:[1,28],27:19,29:[1,29],44:[1,20],50:[1,23],55:[1,25],57:[1,24],66:[1,21],67:[1,22],77:[1,27],86:[1,26]},{5:[2,19],10:[2,19],22:[2,19],26:[2,19],29:[2,19],44:[2,19],50:[2,19],55:[2,19],57:[2,19],66:[2,19],67:[2,19],77:[2,19],86:[2,19]},{24:[1,34],25:35,30:36,31:37,32:[1,38],33:39,34:[1,40],37:[1,41],38:[1,42],43:[1,43]},{20:50,24:[1,44],25:46,28:45,30:36,31:37,32:[1,38],33:39,34:[1,40],37:[1,41],38:[1,42],43:[1,43],46:47,47:48,48:[1,49],49:[1,51],86:[1,26]},{45:[1,52]},{53:[1,53]},{36:[1,54],51:55,53:[1,57],68:56},{51:58,53:[1,57],68:56},{36:[1,61],51:64,53:[1,57],58:59,60:[1,60],64:[1,62],65:[1,63],68:56},{53:[1,65]},{51:66,53:[1,57],68:56},{38:[1,67]},{24:[2,22],32:[2,22],34:[2,22],37:[2,22],38:[2,22],43:[2,22]},{24:[2,29],32:[2,29],34:[2,29],37:[2,29],38:[2,29],43:[2,29],48:[2,29],49:[2,29],86:[2,29]},{1:[2,1]},{5:[2,2],22:[2,2],26:[2,2],29:[2,2],44:[2,2],50:[2,2],55:[2,2],57:[2,2],66:[2,2],67:[2,2],77:[2,2],86:[2,2]},{6:69,10:[1,68],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:[1,17],23:18,26:[1,28],27:19,29:[1,29],44:[1,20],50:[1,23],55:[1,25],57:[1,24],66:[1,21],67:[1,22],77:[1,27],86:[1,26]},{10:[2,7],22:[2,7],26:[2,7],29:[2,7],44:[2,7],50:[2,7],55:[2,7],57:[2,7],66:[2,7],67:[2,7],77:[2,7],86:[2,7]},{5:[2,20],10:[2,20],22:[2,20],26:[2,20],29:[2,20],44:[2,20],50:[2,20],55:[2,20],57:[2,20],66:[2,20],67:[2,20],77:[2,20],86:[2,20]},{24:[1,70],30:71,32:[1,38],33:39,34:[1,40],37:[1,41],43:[1,43]},{24:[2,31],32:[2,31],34:[2,31],37:[2,31],43:[2,31],48:[2,31],49:[2,31],86:[2,31]},{24:[2,32],32:[2,32],34:[2,32],37:[2,32],43:[2,32],48:[2,32],49:[2,32],86:[2,32]},{24:[2,33],32:[2,33],34:[2,33],37:[2,33],43:[2,33],48:[2,33],49:[2,33],86:[2,33]},{24:[2,34],32:[2,34],34:[2,34],37:[2,34],43:[1,72],48:[2,34],49:[2,34],86:[2,34]},{35:[1,73]},{35:[1,74]},{34:[1,77],37:[1,78],39:75,41:76},{24:[2,45],32:[2,45],34:[2,45],37:[2,45],43:[2,45],48:[2,45],49:[2,45],86:[2,45]},{5:[2,23],7:79,8:[1,16],10:[2,23],22:[2,23],26:[2,23],29:[2,23],44:[2,23],50:[2,23],55:[2,23],57:[2,23],66:[2,23],67:[2,23],77:[2,23],86:[2,23]},{24:[1,80]},{20:50,24:[1,81],28:82,30:71,32:[1,38],33:39,34:[1,40],37:[1,41],43:[1,43],46:47,47:48,48:[1,49],49:[1,51],86:[1,26]},{10:[2,47],20:50,24:[2,47],47:83,48:[1,49],49:[1,51],86:[1,26]},{10:[2,48],24:[2,48],48:[2,48],49:[2,48],86:[2,48]},{10:[2,50],24:[2,50],48:[2,50],49:[2,50],86:[2,50]},{10:[2,51],24:[2,51],48:[2,51],49:[2,51],86:[2,51]},{10:[2,52],24:[2,52],48:[2,52],49:[2,52],86:[2,52]},{20:50,28:84,46:47,47:48,48:[1,49],49:[1,51],86:[1,26]},{35:[1,85]},{54:[1,86]},{54:[1,87],69:[1,88]},{40:[2,72],42:[2,72],52:[2,72],54:[2,72],61:[2,72],62:[2,72],69:[2,72],72:[2,72],73:[2,72],83:[2,72]},{40:[2,75],42:[2,75],52:[2,75],54:[2,75],61:[2,75],62:[2,75],69:[2,75],71:[1,89],72:[2,75],73:[2,75],83:[2,75]},{52:[1,90],69:[1,88]},{54:[1,91],61:[1,92],62:[1,93]},{36:[1,61],51:64,53:[1,57],58:94,64:[1,62],65:[1,63],68:56},{54:[2,65],61:[2,65],62:[2,65]},{54:[2,66],61:[2,66],62:[2,66]},{54:[2,67],61:[2,67],62:[2,67]},{54:[2,68],61:[2,68],62:[2,68],69:[1,88]},{56:[1,95]},{69:[1,88],83:[1,96]},{21:103,36:[1,102],40:[1,97],51:100,53:[1,57],64:[1,101],68:56,77:[1,27],78:98,79:99,80:104,81:[1,105]},{5:[2,5],10:[2,5],22:[2,5],26:[2,5],29:[2,5],44:[2,5],50:[2,5],55:[2,5],57:[2,5],59:[2,5],66:[2,5],67:[2,5],77:[2,5],86:[2,5]},{10:[2,6],22:[2,6],26:[2,6],29:[2,6],44:[2,6],50:[2,6],55:[2,6],57:[2,6],66:[2,6],67:[2,6],77:[2,6],86:[2,6]},{5:[2,21],10:[2,21],22:[2,21],26:[2,21],29:[2,21],44:[2,21],50:[2,21],55:[2,21],57:[2,21],66:[2,21],67:[2,21],77:[2,21],86:[2,21]},{24:[2,30],32:[2,30],34:[2,30],37:[2,30],43:[2,30],48:[2,30],49:[2,30],86:[2,30]},{24:[2,44],32:[2,44],34:[2,44],37:[2,44],43:[2,44],48:[2,44],49:[2,44],86:[2,44]},{36:[1,106]},{36:[1,107]},{34:[1,77],37:[1,78],40:[1,108],41:109},{34:[2,39],37:[2,39],40:[2,39]},{35:[1,110]},{35:[1,111]},{5:[2,25],10:[2,25],22:[2,25],26:[2,25],29:[2,25],44:[2,25],50:[2,25],55:[2,25],57:[2,25],66:[2,25],67:[2,25],77:[2,25],86:[2,25]},{5:[2,24],10:[2,24],22:[2,24],26:[2,24],29:[2,24],44:[2,24],50:[2,24],55:[2,24],57:[2,24],66:[2,24],67:[2,24],77:[2,24],86:[2,24]},{5:[2,26],7:112,8:[1,16],10:[2,26],22:[2,26],26:[2,26],29:[2,26],44:[2,26],50:[2,26],55:[2,26],57:[2,26],66:[2,26],67:[2,26],77:[2,26],86:[2,26]},{24:[1,113]},{10:[2,49],24:[2,49],48:[2,49],49:[2,49],86:[2,49]},{10:[1,114]},{51:115,53:[1,57],68:56},{5:[2,70],10:[2,70],22:[2,70],26:[2,70],29:[2,70],44:[2,70],50:[2,70],55:[2,70],57:[2,70],66:[2,70],67:[2,70],77:[2,70],86:[2,70]},{5:[2,71],10:[2,71],22:[2,71],26:[2,71],29:[2,71],44:[2,71],50:[2,71],55:[2,71],57:[2,71],66:[2,71],67:[2,71],77:[2,71],86:[2,71]},{53:[1,118],68:116,70:117,74:119},{51:121,53:[1,57],64:[1,120],68:56,73:[1,122]},{53:[1,123]},{7:124,8:[1,16]},{36:[1,61],51:64,53:[1,57],58:125,64:[1,62],65:[1,63],68:56},{60:[1,127],63:[1,126]},{54:[1,128]},{51:129,53:[1,57],68:56},{5:[2,113],10:[2,113],22:[2,113],24:[2,113],26:[2,113],29:[2,113],44:[2,113],48:[2,113],49:[2,113],50:[2,113],55:[2,113],57:[2,113],66:[2,113],67:[2,113],77:[2,113],86:[2,113]},{5:[2,93],10:[2,93],22:[2,93],26:[2,93],29:[2,93],40:[2,93],42:[2,93],44:[2,93],50:[2,93],55:[2,93],57:[2,93],66:[2,93],67:[2,93],77:[2,93],83:[2,93],86:[2,93]},{40:[1,130],42:[1,131]},{40:[2,96],42:[2,96]},{40:[2,97],42:[2,97],69:[1,88]},{40:[2,98],42:[2,98]},{40:[2,99],42:[2,99]},{40:[2,100],42:[2,100]},{40:[2,101],42:[2,101]},{53:[1,134],82:132,84:133},{24:[2,35],32:[2,35],34:[2,35],37:[2,35],43:[2,35],48:[2,35],49:[2,35],86:[2,35]},{24:[2,36],32:[2,36],34:[2,36],37:[2,36],43:[2,36],48:[2,36],49:[2,36],86:[2,36]},{24:[2,37],32:[2,37],34:[2,37],37:[2,37],43:[2,37],48:[2,37],49:[2,37],86:[2,37]},{34:[2,38],37:[2,38],40:[2,38]},{36:[1,135]},{36:[1,136]},{5:[2,28],10:[2,28],22:[2,28],26:[2,28],29:[2,28],44:[2,28],50:[2,28],55:[2,28],57:[2,28],66:[2,28],67:[2,28],77:[2,28],86:[2,28]},{5:[2,27],10:[2,27],22:[2,27],26:[2,27],29:[2,27],44:[2,27],50:[2,27],55:[2,27],57:[2,27],66:[2,27],67:[2,27],77:[2,27],86:[2,27]},{5:[2,46],10:[2,46],22:[2,46],26:[2,46],29:[2,46],44:[2,46],50:[2,46],55:[2,46],57:[2,46],66:[2,46],67:[2,46],77:[2,46],86:[2,46]},{54:[1,137],69:[1,88]},{40:[2,73],42:[2,73],52:[2,73],54:[2,73],61:[2,73],62:[2,73],69:[2,73],72:[2,73],73:[2,73],83:[2,73]},{40:[2,74],42:[2,74],52:[2,74],54:[2,74],61:[2,74],62:[2,74],69:[1,138],72:[2,74],73:[2,74],83:[2,74]},{38:[1,139],40:[2,75],42:[2,75],52:[2,75],54:[2,75],61:[2,75],62:[2,75],69:[2,75],71:[1,89],72:[2,75],73:[2,75],83:[2,75]},{40:[2,84],42:[2,84],52:[2,84],54:[2,84],61:[2,84],62:[2,84],69:[2,84],72:[2,84],73:[2,84],83:[2,84]},{72:[1,140],73:[1,141]},{69:[1,88],72:[1,142],73:[1,143]},{64:[1,144]},{54:[1,145]},{5:[2,55],10:[2,55],22:[2,55],26:[2,55],29:[2,55],44:[2,55],50:[2,55],55:[2,55],57:[2,55],59:[1,146],66:[2,55],67:[2,55],77:[2,55],86:[2,55]},{54:[1,147]},{54:[1,148]},{63:[1,149]},{7:150,8:[1,16]},{54:[1,151],69:[1,88]},{5:[2,94],10:[2,94],22:[2,94],26:[2,94],29:[2,94],40:[2,94],42:[2,94],44:[2,94],50:[2,94],55:[2,94],57:[2,94],66:[2,94],67:[2,94],77:[2,94],83:[2,94],86:[2,94]},{21:103,36:[1,102],51:100,53:[1,57],64:[1,101],68:56,77:[1,27],79:152,80:104,81:[1,105]},{42:[1,154],83:[1,153]},{42:[2,105],83:[2,105]},{73:[1,155]},{34:[2,40],37:[2,40],40:[2,40],42:[1,156]},{34:[2,42],37:[2,42],40:[2,42],42:[1,157]},{5:[2,69],10:[2,69],22:[2,69],26:[2,69],29:[2,69],44:[2,69],50:[2,69],55:[2,69],57:[2,69],66:[2,69],67:[2,69],77:[2,69],86:[2,69]},{53:[1,159],74:158},{36:[1,165],40:[1,160],51:163,53:[1,57],64:[1,164],68:56,75:161,76:162},{40:[2,76],42:[2,76],52:[2,76],54:[2,76],61:[2,76],62:[2,76],69:[2,76],72:[2,76],73:[2,76],83:[2,76]},{51:167,53:[1,57],64:[1,166],68:56,72:[1,168]},{40:[2,79],42:[2,79],52:[2,79],54:[2,79],61:[2,79],62:[2,79],69:[2,79],72:[2,79],73:[2,79],83:[2,79]},{51:170,53:[1,57],64:[1,169],68:56},{72:[1,171]},{7:172,8:[1,16]},{54:[1,173]},{7:174,8:[1,16]},{7:175,8:[1,16]},{54:[1,176]},{5:[2,57],10:[2,57],22:[2,57],26:[2,57],29:[2,57],44:[2,57],50:[2,57],55:[2,57],57:[2,57],59:[1,177],66:[2,57],67:[2,57],77:[2,57],86:[2,57]},{7:178,8:[1,16]},{40:[2,95],42:[2,95]},{40:[2,102],42:[2,102],83:[2,102]},{53:[1,134],83:[1,179],84:180},{21:185,36:[1,184],51:187,53:[1,57],64:[1,182],65:[1,183],68:56,77:[1,27],80:186,81:[1,105],85:181},{34:[2,41],37:[2,41],40:[2,41]},{34:[2,43],37:[2,43],40:[2,43]},{40:[2,85],42:[2,85],52:[2,85],54:[2,85],61:[2,85],62:[2,85],69:[2,85],72:[2,85],73:[2,85],83:[2,85]},{38:[1,139]},{40:[2,86],42:[2,86],52:[2,86],54:[2,86],61:[2,86],62:[2,86],69:[2,86],72:[2,86],73:[2,86],83:[2,86]},{40:[1,188],42:[1,189]},{40:[2,89],42:[2,89]},{40:[2,90],42:[2,90],69:[1,88]},{40:[2,91],42:[2,91]},{40:[2,92],42:[2,92]},{72:[1,190]},{69:[1,88],72:[1,191]},{40:[2,83],42:[2,83],52:[2,83],54:[2,83],61:[2,83],62:[2,83],69:[2,83],72:[2,83],73:[2,83],83:[2,83]},{72:[1,192]},{69:[1,88],72:[1,193]},{40:[2,82],42:[2,82],52:[2,82],54:[2,82],61:[2,82],62:[2,82],69:[2,82],72:[2,82],73:[2,82],83:[2,82]},{5:[2,53],10:[2,53],22:[2,53],26:[2,53],29:[2,53],44:[2,53],50:[2,53],55:[2,53],57:[2,53],66:[2,53],67:[2,53],77:[2,53],86:[2,53]},{7:194,8:[1,16]},{5:[2,59],10:[2,59],22:[2,59],26:[2,59],29:[2,59],44:[2,59],50:[2,59],55:[2,59],57:[2,59],59:[1,195],66:[2,59],67:[2,59],77:[2,59],86:[2,59]},{5:[2,61],10:[2,61],22:[2,61],26:[2,61],29:[2,61],44:[2,61],50:[2,61],55:[2,61],57:[2,61],59:[1,196],66:[2,61],67:[2,61],77:[2,61],86:[2,61]},{7:197,8:[1,16]},{54:[1,198]},{5:[2,54],10:[2,54],22:[2,54],26:[2,54],29:[2,54],44:[2,54],50:[2,54],55:[2,54],57:[2,54],66:[2,54],67:[2,54],77:[2,54],86:[2,54]},{40:[2,103],42:[2,103],83:[2,103]},{42:[2,104],83:[2,104]},{42:[2,106],83:[2,106]},{42:[2,107],83:[2,107]},{42:[2,108],83:[2,108]},{42:[2,109],83:[2,109]},{42:[2,110],83:[2,110]},{42:[2,111],83:[2,111]},{42:[2,112],69:[1,88],83:[2,112]},{40:[2,87],42:[2,87],52:[2,87],54:[2,87],61:[2,87],62:[2,87],69:[2,87],72:[2,87],73:[2,87],83:[2,87]},{36:[1,165],51:163,53:[1,57],64:[1,164],68:56,76:199},{40:[2,77],42:[2,77],52:[2,77],54:[2,77],61:[2,77],62:[2,77],69:[2,77],72:[2,77],73:[2,77],83:[2,77]},{40:[2,78],42:[2,78],52:[2,78],54:[2,78],61:[2,78],62:[2,78],69:[2,78],72:[2,78],73:[2,78],83:[2,78]},{40:[2,80],42:[2,80],52:[2,80],54:[2,80],61:[2,80],62:[2,80],69:[2,80],72:[2,80],73:[2,80],83:[2,80]},{40:[2,81],42:[2,81],52:[2,81],54:[2,81],61:[2,81],62:[2,81],69:[2,81],72:[2,81],73:[2,81],83:[2,81]},{5:[2,56],10:[2,56],22:[2,56],26:[2,56],29:[2,56],44:[2,56],50:[2,56],55:[2,56],57:[2,56],66:[2,56],67:[2,56],77:[2,56],86:[2,56]},{54:[1,200]},{54:[1,201]},{5:[2,63],10:[2,63],22:[2,63],26:[2,63],29:[2,63],44:[2,63],50:[2,63],55:[2,63],57:[2,63],59:[1,202],66:[2,63],67:[2,63],77:[2,63],86:[2,63]},{7:203,8:[1,16]},{40:[2,88],42:[2,88]},{7:204,8:[1,16]},{7:205,8:[1,16]},{54:[1,206]},{5:[2,58],10:[2,58],22:[2,58],26:[2,58],29:[2,58],44:[2,58],50:[2,58],55:[2,58],57:[2,58],66:[2,58],67:[2,58],77:[2,58],86:[2,58]},{5:[2,60],10:[2,60],22:[2,60],26:[2,60],29:[2,60],44:[2,60],50:[2,60],55:[2,60],57:[2,60],66:[2,60],67:[2,60],77:[2,60],86:[2,60]},{5:[2,62],10:[2,62],22:[2,62],26:[2,62],29:[2,62],44:[2,62],50:[2,62],55:[2,62],57:[2,62],66:[2,62],67:[2,62],77:[2,62],86:[2,62]},{7:207,8:[1,16]},{5:[2,64],10:[2,64],22:[2,64],26:[2,64],29:[2,64],44:[2,64],50:[2,64],55:[2,64],57:[2,64],66:[2,64],67:[2,64],77:[2,64],86:[2,64]}],
defaultActions: {30:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* tracing/debugging functions */

function Loc(start, end) {
  this.start = { line: start.first_line, column: start.first_column };
  this.end = { line: end.last_line, column: end.last_column };
}

/* Manana data types */

function MananaHash(data, loc) {
  var hash = {}, i = 0;

  while (data[i]) {
    hash[data[i][0]] = data[i][1];
    i++;
  }

  return hash;
}

/* AST nodes */

function HtmlNode(text, loc) {
  this.type = "HTML";
  this.body = text;
  this.loc = loc;
}

function VoidTagNode(tag, attrs, loc) {
  this.type = "VoidTag";
  this.tag = tag;
  this.attrs = attrs;
  this.loc = loc;
}

function TagNode(tag, attrs, text, block, loc) {
  this.type = "Tag";
  this.tag = tag;
  this.attrs = attrs;
  this.body = text ? [text] : block;
  this.loc = loc;
}

function TextNode(words, loc) {
  this.type = "Text";
  this.loc = loc;

  var w = words, t = [], s = [], i = 0; 

  while (typeof w[i] !== "undefined") {
    if (typeof w[i] === "string") {
      s.push(w[i]);
    } else {
      if (s.length) {
        t.push(s.join(' '));
        s = [];
      }
      t.push(w[i]);
    }
    i++;
  }
  if (s.length) {
    t.push(s.join(' '));
  }

  this.body = t;
}

function NameNode(path, loc) {
  this.type = "Name";
  this.body = path;
  this.loc = loc;
}

function WithNode(path, id, body, loc) {
  this.type = "With";
  this.path = path;
  this.id = id;
  this.body = body;
  this.loc = loc;
}

function IdNode(id, start, end, loc) {
  this.type = "Id";
  this.id = id;
  this.start = start;
  this.end = end;
  this.loc = loc;
}

function PathNode(component, loc) {
  this.type = "Path";
  this.components = [ createPathComponent(component) ];
  this.methods = [];
  this.loc = loc;
}

function createPathComponent(c) {
  var comp = [c.id];
  if (c.start !== null) {
    comp.push(c.start);
  }
  if (c.end !== null) {
    comp.push(c.end);
  }
  return comp;
}

function updatePathNode(node, component, methods, loc) {
  if (component !== null) {
    node.components.push(createPathComponent(component));
  }
  if (methods !== null) {
    node.methods = methods;
  }
  if (loc.end.line > node.loc.end.line || loc.end.column > node.loc.end.column) {
    node.loc.end = loc.end;
  }
  return node;
}

function MethodNode(name, args, loc) {
  this.type = "Method";
  this.name = name;
  this.args = args;
  this.loc = loc;
}

function MethodChainNode(method, loc) {
  this.type = "MethodChain";
  this.chain = [method];
  this.loc = loc;
}

function FunctionNode(name, args, loc) {
  this.type = "Function";
  this.name = name;
  this.args = args;
  this.loc = loc;
}

function ForNode(id, path, body, loc) {
  this.type = "For";
  this.id = id;
  this.path = path;
  this.body = body;
  this.loc = loc;
}

function IfNode(cond, v1, v2, body, else_body, loc) {
  this.type = "If";
  this.condition = cond;
  this.value_1 = v1;
  this.value_2 = v2;
  this.body = body;
  this.else_body = else_body;
  this.loc = loc;
}

function AliasNode(id, path, loc) {
  this.type = "Alias";
  this.id = id;
  this.path = path;
  this.loc = loc;
}

function IncludeNode(path, loc) {
  this.type = "Include";
  this.path = path;
  this.loc = loc;
}

function FilterNode(filter, body, loc) {
  this.type = "Filter";
  this.body = [body];
  this.loc = loc;
}

/* expose AST constructors to parser */

parser.ast = {};
parser.ast.Loc = Loc;
parser.ast.HtmlNode = HtmlNode;
parser.ast.VoidTagNode = VoidTagNode;
parser.ast.TagNode = TagNode;
parser.ast.TextNode = TextNode;
parser.ast.NameNode = NameNode;
parser.ast.WithNode = WithNode;
parser.ast.IdNode = IdNode;
parser.ast.PathNode = PathNode;
parser.ast.createPathComponent = createPathComponent;
parser.ast.updatePathNode = updatePathNode;
parser.ast.MethodNode = MethodNode;
parser.ast.MethodChainNode = MethodChainNode;
parser.ast.FunctionNode = FunctionNode;
parser.ast.ForNode = ForNode;
parser.ast.IfNode = IfNode;
parser.ast.AliasNode = AliasNode;
parser.ast.IncludeNode = IncludeNode;
parser.ast.FilterNode = FilterNode;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

  function strip(start, end) {
    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.pushState("comment"); /* ignore */ 
break;
case 1:this.popState(); /* ignore */ 
break;
case 2:/* ignore */
break;
case 3:/* ignore */
break;
case 4:return 22;
break;
case 5:this.pushState("expr"); return "FOR";
break;
case 6:this.pushState("expr"); return "IF";
break;
case 7:this.pushState("expr"); return "ELSE";
break;
case 8:this.pushState("expr"); return "ALIAS";
break;
case 9:this.pushState("expr"); return "WITH";
break;
case 10:this.pushState("expr"); return "INCLUDE";
break;
case 11:return "BOOL";
break;
case 12:return "BOOL";
break;
case 13:this.popState(); return "END_EXPR";
break;
case 14:return "IN";
break;
case 15:return "IS";
break;
case 16:return "AS";
break;
case 17:return "NOT";
break;
case 18:return "TYPE";
break;
case 19:return "TYPE";
break;
case 20:return "TYPE";
break;
case 21:return "TYPE";
break;
case 22:return "TYPE";
break;
case 23:return "COND";
break;
case 24:return "COND";
break;
case 25:return "COND";
break;
case 26:return "COND";
break;
case 27:return "COND";
break;
case 28:return "COND";
break;
case 29:return "COND";
break;
case 30:return "=";
break;
case 31:this.pushState("tag"); return "VOID_TAG";
break;
case 32:this.pushState("tag"); return "TAG";
break;
case 33:this.popState(); return "END_TAG";
break;
case 34:yy_.yytext = yy_.yytext.slice(1); return "TAG_ID";
break;
case 35:yy_.yytext = yy_.yytext.slice(1); return "TAG_CLASS";
break;
case 36:this.pushState("tagargs"); return "LPAREN";
break;
case 37:this.popState(); return "RPAREN";
break;
case 38:/* ignore */
break;
case 39:/* ignore */
break;
case 40:return "EQ";
break;
case 41:return "COMMA";
break;
case 42:return "TAG_ATTR";
break;
case 43:yy_.yytext = "data-" + yy_.yytext.slice(1); return "TAG_DATA_ATTR";
break;
case 44:this.pushState("filter"); yy_.yytext = yy_.yytext.slice(1); return "FILTER";
break;
case 45:this.pushState("name"); return "START_NAME";
break;
case 46:this.popState(); return "RBRACE"
break;
case 47:this.pushState("fn"); yy_.yytext = yy_.yytext.slice(1); return "FN";
break;
case 48:this.popState(); return "RPAREN";
break;
case 49:/* ignore */
break;
case 50:/* ignore */
break;
case 51:return "LBRACE";
break;
case 52:return "RBRACE";
break;
case 53:return "COMMA";
break;
case 54:return "ID";
break;
case 55:return "DOT";
break;
case 56:return "LPAREN";
break;
case 57:return "RPAREN";
break;
case 58:return "LBRACK";
break;
case 59:return "RBRACK";
break;
case 60:return "COLON"; 
break;
case 61:return "COMMA";
break;
case 62:return "INT";
break;
case 63:yy_.yytext = strip(1,2).replace(/\\"/g, '"'); return "STRING";
break;
case 64:return "WORD";
break;
case 65:return 5;
break;
case 66:
  var tokens = [];
  while (0 < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }
  if (tokens.length) {
    return tokens;
  }

break;
case 67:
  var tokens = [];
  while (_filter_indent_level >= _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }
  if (tokens.length) {
    return tokens;
  }

break;
case 68:/* eat blank lines */
break;
case 69:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;
  if (indentation > _indent_stack[0]) {
    _indent_stack.unshift(indentation);
    return "INDENT";
  }
  var tokens = [];
  while (indentation < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }
  if (tokens.length) return tokens;

break;
case 70:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (typeof _filter_indent_level === "undefined") {
    _filter_indent_level = indentation;
    return "FILTER_START";
  } else if (indentation < _filter_indent_level) {
    _filter_indent_level = undefined;
    this.popState();
    return "DEDENT";
  } 
  /* else ignore */

break;
case 71:/* ignore all other whitespace */
break;
}
},
rules: [/^(?:""")/,/^(?:""")/,/^(?:.+)/,/^(?:\n)/,/^(?:<.+(?=\n))/,/^(?:for\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:alias\b)/,/^(?:with\b)/,/^(?:include\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:(?=\n))/,/^(?:in\b)/,/^(?:is\b)/,/^(?:as\b)/,/^(?:not\b)/,/^(?:Hash\b)/,/^(?:List\b)/,/^(?:String\b)/,/^(?:Integer\b)/,/^(?:Number\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:%)/,/^(?:=)/,/^(?:((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)))/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:(?=\n))/,/^(?:(#[a-zA-Z][a-zA-Z0-9\-\:_]*))/,/^(?:(\.-?[_a-zA-Z]+[_a-zA-Z0-9\-]*(?=["."\s\n])))/,/^(?:\()/,/^(?:\))/,/^(?:\s)/,/^(?:\n)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z][a-zA-Z0-9\-_]*(?==)))/,/^(?:(\*[a-zA-Z][a-zA-Z0-9\-]*(?==)))/,/^(?::(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:@\{)/,/^(?:\})/,/^(?:@(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254})\s?(?=\())/,/^(?:\)(?!\)))/,/^(?:\s)/,/^(?:\n)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:(\+|-)?(0|[1-9][0-9]*))/,/^(?:(('(\\'|[^"'"])*')|("(\\"|[^'"'])*")))/,/^(?:([^\s\n\"@"][^\s\n\"@"]*))/,/^(?:$)/,/^(?:\s*$)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"comment":{"rules":[1,2,3,65,68,71],"inclusive":true},"tag":{"rules":[33,34,35,36,45,64,65,68,71],"inclusive":true},"tagargs":{"rules":[37,38,39,40,41,42,43,63,65,68,71],"inclusive":true},"filter":{"rules":[45,64,65,67,68,70,71],"inclusive":true},"expr":{"rules":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,54,55,56,57,58,59,60,61,62,63,65,68,71],"inclusive":true},"name":{"rules":[46,54,55,56,57,58,59,60,61,62,63,65,68,71],"inclusive":true},"fn":{"rules":[11,12,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,68,71],"inclusive":true},"INITIAL":{"rules":[0,4,5,6,7,8,9,10,31,32,44,45,47,64,65,66,68,69,71],"inclusive":true}}
};
_indent_stack = [0];
_filter_indent_level = undefined;;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = manana_parser;
exports.Parser = manana_parser.Parser;
exports.parse = function () { return manana_parser.parse.apply(manana_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}