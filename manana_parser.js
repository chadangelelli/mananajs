/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var manana_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"prog_list":4,"EOF":5,"stmt":6,"block":7,"INDENT":8,"stmt_list":9,"DEDENT":10,"html_stmt":11,"void_tag_stmt":12,"tag_stmt":13,"filter_stmt":14,"alias_stmt":15,"include_stmt":16,"with_stmt":17,"if_stmt":18,"for_stmt":19,"name":20,"fn":21,"HTML":22,"i_html":23,"I_HTML_START":24,"i_html_text":25,"I_HTML_END":26,"i_html_text_el":27,"I_HTML_TEXT":28,"void_tag":29,"END_TAG":30,"tag_attrs":31,"VOID_TAG":32,"tag":33,"text":34,"TAG":35,"tag_attr":36,"tag_attr_args":37,"TAG_ID":38,"TAG_SRC":39,"TAG_SRC_I_STRING":40,"string":41,"tag_classes":42,"TAG_ATTR":43,"EQ":44,"TAG_DATA_ATTR":45,"LPAREN":46,"tag_attr_arg_list":47,"RPAREN":48,"LBRACE":49,"tag_attr_arg_list_alt":50,"RBRACE":51,"tag_attr_arg":52,"COMMA":53,"tag_attr_arg_alt":54,"COLON":55,"TAG_CLASS":56,"FILTER":57,"FILTER_START":58,"word_list":59,"word":60,"WORD":61,"SPACE":62,"path_or_fn":63,"path":64,"WITH":65,"AS":66,"ID":67,"END_EXPR":68,"FOR":69,"IN":70,"IF":71,"ev":72,"ELSE":73,"NOT":74,"COND":75,"IS":76,"TYPE":77,"EXISTS":78,"INT":79,"BOOL":80,"ALIAS":81,"INCLUDE":82,"id":83,"DOT":84,"meths":85,"LBRACK":86,"RBRACK":87,"meth":88,"meth_args":89,"meth_arg":90,"FN":91,"fn_args":92,"fn_arg":93,"hash":94,"hash_data":95,"hash_pair":96,"hash_val":97,"START_NAME":98,"STRING":99,"i_string":100,"I_STRING_D":101,"i_string_text":102,"END_I_STRING_D":103,"I_STRING_S":104,"END_I_STRING_S":105,"i_string_text_el":106,"I_STRING_TEXT":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",10:"DEDENT",22:"HTML",24:"I_HTML_START",26:"I_HTML_END",28:"I_HTML_TEXT",30:"END_TAG",32:"VOID_TAG",35:"TAG",38:"TAG_ID",39:"TAG_SRC",40:"TAG_SRC_I_STRING",43:"TAG_ATTR",44:"EQ",45:"TAG_DATA_ATTR",46:"LPAREN",48:"RPAREN",49:"LBRACE",51:"RBRACE",53:"COMMA",55:"COLON",56:"TAG_CLASS",57:"FILTER",58:"FILTER_START",61:"WORD",62:"SPACE",65:"WITH",66:"AS",67:"ID",68:"END_EXPR",69:"FOR",70:"IN",71:"IF",73:"ELSE",74:"NOT",75:"COND",76:"IS",77:"TYPE",78:"EXISTS",79:"INT",80:"BOOL",81:"ALIAS",82:"INCLUDE",84:"DOT",86:"LBRACK",87:"RBRACK",91:"FN",98:"START_NAME",99:"STRING",101:"I_STRING_D",103:"END_I_STRING_D",104:"I_STRING_S",105:"END_I_STRING_S",107:"I_STRING_TEXT"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,3],[9,2],[9,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,1],[11,1],[23,3],[25,2],[25,1],[27,1],[27,1],[12,2],[12,3],[29,1],[13,2],[13,3],[13,3],[13,3],[13,4],[13,4],[33,1],[31,2],[31,1],[31,1],[36,1],[36,1],[36,2],[36,1],[36,3],[36,3],[37,3],[37,3],[47,2],[47,1],[52,3],[52,4],[52,3],[52,4],[50,2],[50,1],[54,3],[54,4],[54,3],[54,4],[42,2],[42,1],[14,4],[34,1],[59,1],[59,2],[60,1],[60,1],[60,1],[60,1],[60,1],[63,1],[63,1],[17,6],[19,6],[18,4],[18,7],[18,5],[18,8],[18,6],[18,9],[18,6],[18,9],[18,7],[18,10],[18,5],[18,8],[72,1],[72,1],[72,1],[72,1],[72,1],[15,5],[16,3],[16,3],[64,1],[64,3],[64,3],[83,1],[83,4],[83,6],[83,6],[83,4],[83,6],[83,6],[83,5],[83,5],[85,1],[85,3],[88,3],[88,4],[89,3],[89,1],[90,1],[90,1],[90,1],[21,3],[21,4],[92,3],[92,1],[93,1],[93,1],[93,1],[93,1],[93,1],[94,3],[94,4],[95,3],[95,1],[96,3],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[20,3],[41,1],[41,1],[100,3],[100,3],[102,2],[102,1],[106,1],[106,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0-1]; 
break;
case 6: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = [$$[$0]]; 
break;
case 19: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 21: 
      var body = [$$[$0-2]];
      body.push.apply(body, $$[$0-1]);
      body.push($$[$0]);
      this.$ = new MananaStringNode(body, new Loc(_$[$0-2], _$[$0])); 
    
break;
case 22: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 23: this.$ = [$$[$0]]; 
break;
case 26: this.$ = new VoidTagNode($$[$0-1], null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 27: this.$ = new VoidTagNode($$[$0-2], $$[$0-1],   new Loc(_$[$0-2], _$[$0-1])); 
break;
case 28: this.$ = $$[$0]; 
break;
case 29: this.$ = new TagNode($$[$0-1], null, null, null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 30: this.$ = new TagNode($$[$0-2], null, $$[$0-1],   null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 31: this.$ = new TagNode($$[$0-2], null, null, $$[$0],   new Loc(_$[$0-2], _$[$0])); 
break;
case 32: this.$ = new TagNode($$[$0-2], $$[$0-1],   null, null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 33: this.$ = new TagNode($$[$0-3], $$[$0-2],   $$[$0-1],   null, new Loc(_$[$0-3], _$[$0-1])); 
break;
case 34: this.$ = new TagNode($$[$0-3], $$[$0-2],   null, $$[$0],   new Loc(_$[$0-3], _$[$0])); 
break;
case 35: this.$ = $$[$0]; 
break;
case 36: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 37: this.$ = [$$[$0]]; 
break;
case 38: this.$ = $$[$0]; 
break;
case 39: this.$ = ['id', $$[$0]]; 
break;
case 40: this.$ = ['src', new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])) ]; 
break;
case 41: this.$ = ['src', $$[$0]]; 
break;
case 42: this.$ = ['class', $$[$0].join(" ")]; 
break;
case 43: this.$ = ['attr', $$[$0-2], $$[$0]]; 
break;
case 44: this.$ = ['data', $$[$0-2], $$[$0]]; 
break;
case 45: this.$ = $$[$0-1]; 
break;
case 46: this.$ = $$[$0-1]; 
break;
case 47: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 48: this.$ = [$$[$0]]; 
break;
case 49: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 50: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 51: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 52: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 53: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 54: this.$ = [$$[$0]]; 
break;
case 55: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 56: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 57: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 58: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 59: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 60: this.$ = [$$[$0]]; 
break;
case 61: this.$ = new FilterNode($$[$0-3], $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 62: this.$ = new TextNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 63: this.$ = [$$[$0]]; 
break;
case 64: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 72: this.$ = new WithNode($$[$0-4], $$[$0-2], $$[$0], new Loc(_$[$0-5], _$[$0])); 
break;
case 73: this.$ = new ForNode($$[$0-4], $$[$0-2], $$[$0] , new Loc(_$[$0-5], _$[$0])) ; 
break;
case 74: this.$ = new IfNode("true", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-3], _$[$0])); 
break;
case 75: this.$ = new IfNode("true", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-6], _$[$0])); 
break;
case 76: this.$ = new IfNode("false", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-4], _$[$0])); 
break;
case 77: this.$ = new IfNode("false", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-7], _$[$0])); 
break;
case 78: this.$ = new IfNode($$[$0-3], $$[$0-4], $$[$0-2], $$[$0], null, new Loc(_$[$0-5], _$[$0])); 
break;
case 79: this.$ = new IfNode($$[$0-6], $$[$0-7], $$[$0-5], $$[$0-3], $$[$0], new Loc(_$[$0-8], _$[$0])); 
break;
case 80: this.$ = new IfNode($$[$0-3], $$[$0-4], $$[$0-2], $$[$0], null, new Loc(_$[$0-5], _$[$0])); 
break;
case 81: this.$ = new IfNode($$[$0-6], $$[$0-7], $$[$0-5], $$[$0-3], null, new Loc(_$[$0-8], _$[$0])); 
break;
case 82: this.$ = new IfNode("is not", $$[$0-5], $$[$0-2], $$[$0], null, new Loc(_$[$0-6], _$[$0])); 
break;
case 83: this.$ = new IfNode("is not", $$[$0-8], $$[$0-5], $$[$0-3], $$[$0], new Loc(_$[$0-9], _$[$0])); 
break;
case 84: this.$ = new IfNode("exists", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-4], _$[$0])); 
break;
case 85: this.$ = new IfNode("exists", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-7], _$[$0])); 
break;
case 91: this.$ = new AliasNode($$[$0-3], $$[$0-1], new Loc(_$[$0-4], _$[$0])); 
break;
case 92: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 93: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 94: this.$ = new PathNode(null, $$[$0]  , null, new Loc(_$[$0], _$[$0])); 
break;
case 95: this.$ = new PathNode($$[$0-2]  , $$[$0]  , null, new Loc(_$[$0-2], _$[$0])); 
break;
case 96: this.$ = new PathNode($$[$0-2]  , null, $$[$0]  , new Loc(_$[$0-2], _$[$0])); 
break;
case 97: this.$ = new IdNode($$[$0], null, null, new Loc(_$[$0], _$[$0])); 
break;
case 98: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 99: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 100: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 101: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 102: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 103: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 104: this.$ = new IdNode($$[$0-4], 0   , $$[$0-1]  , new Loc(_$[$0-4], _$[$0])); 
break;
case 105: this.$ = new IdNode($$[$0-4], $$[$0-2]  , '*' , new Loc(_$[$0-4], _$[$0])); 
break;
case 106: this.$ = new MethodChainNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 107: this.$ = $$[$0-2]; this.$.chain.push($$[$0])                        ; 
break;
case 108: this.$ = new MethodNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 109: this.$ = new MethodNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 110: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 111: this.$ = [$$[$0]]; 
break;
case 115: this.$ = new FunctionNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 116: this.$ = new FunctionNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 117: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 118: this.$ = [$$[$0]]; 
break;
case 124: this.$ = new MananaHash($$[$0-1]); console.log(this.$); 
break;
case 125: this.$ = new MananaHash($$[$0-2]); console.log(this.$); 
break;
case 126: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 127: this.$ = [$$[$0]]; 
break;
case 128: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 135: this.$ = $$[$0-1]; 
break;
case 136: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 138: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 139: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 140: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 141: this.$ = [$$[$0]]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,16],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:[1,17],23:18,24:[1,29],29:19,32:[1,30],33:20,35:[1,31],57:[1,21],65:[1,24],69:[1,26],71:[1,25],81:[1,22],82:[1,23],91:[1,28],98:[1,27]},{1:[3]},{5:[1,32],6:33,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:[1,17],23:18,24:[1,29],29:19,32:[1,30],33:20,35:[1,31],57:[1,21],65:[1,24],69:[1,26],71:[1,25],81:[1,22],82:[1,23],91:[1,28],98:[1,27]},{5:[2,3],22:[2,3],24:[2,3],32:[2,3],35:[2,3],57:[2,3],65:[2,3],69:[2,3],71:[2,3],81:[2,3],82:[2,3],91:[2,3],98:[2,3]},{5:[2,4],22:[2,4],24:[2,4],32:[2,4],35:[2,4],57:[2,4],65:[2,4],69:[2,4],71:[2,4],81:[2,4],82:[2,4],91:[2,4],98:[2,4]},{5:[2,8],10:[2,8],22:[2,8],24:[2,8],32:[2,8],35:[2,8],57:[2,8],65:[2,8],69:[2,8],71:[2,8],81:[2,8],82:[2,8],91:[2,8],98:[2,8]},{5:[2,9],10:[2,9],22:[2,9],24:[2,9],32:[2,9],35:[2,9],57:[2,9],65:[2,9],69:[2,9],71:[2,9],81:[2,9],82:[2,9],91:[2,9],98:[2,9]},{5:[2,10],10:[2,10],22:[2,10],24:[2,10],32:[2,10],35:[2,10],57:[2,10],65:[2,10],69:[2,10],71:[2,10],81:[2,10],82:[2,10],91:[2,10],98:[2,10]},{5:[2,11],10:[2,11],22:[2,11],24:[2,11],32:[2,11],35:[2,11],57:[2,11],65:[2,11],69:[2,11],71:[2,11],81:[2,11],82:[2,11],91:[2,11],98:[2,11]},{5:[2,12],10:[2,12],22:[2,12],24:[2,12],32:[2,12],35:[2,12],57:[2,12],65:[2,12],69:[2,12],71:[2,12],81:[2,12],82:[2,12],91:[2,12],98:[2,12]},{5:[2,13],10:[2,13],22:[2,13],24:[2,13],32:[2,13],35:[2,13],57:[2,13],65:[2,13],69:[2,13],71:[2,13],81:[2,13],82:[2,13],91:[2,13],98:[2,13]},{5:[2,14],10:[2,14],22:[2,14],24:[2,14],32:[2,14],35:[2,14],57:[2,14],65:[2,14],69:[2,14],71:[2,14],81:[2,14],82:[2,14],91:[2,14],98:[2,14]},{5:[2,15],10:[2,15],22:[2,15],24:[2,15],32:[2,15],35:[2,15],57:[2,15],65:[2,15],69:[2,15],71:[2,15],81:[2,15],82:[2,15],91:[2,15],98:[2,15]},{5:[2,16],10:[2,16],22:[2,16],24:[2,16],32:[2,16],35:[2,16],57:[2,16],65:[2,16],69:[2,16],71:[2,16],81:[2,16],82:[2,16],91:[2,16],98:[2,16]},{5:[2,17],10:[2,17],22:[2,17],24:[2,17],32:[2,17],35:[2,17],57:[2,17],65:[2,17],69:[2,17],71:[2,17],81:[2,17],82:[2,17],91:[2,17],98:[2,17]},{5:[2,18],10:[2,18],22:[2,18],24:[2,18],32:[2,18],35:[2,18],57:[2,18],65:[2,18],69:[2,18],71:[2,18],81:[2,18],82:[2,18],91:[2,18],98:[2,18]},{6:35,9:34,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:[1,17],23:18,24:[1,29],29:19,32:[1,30],33:20,35:[1,31],57:[1,21],65:[1,24],69:[1,26],71:[1,25],81:[1,22],82:[1,23],91:[1,28],98:[1,27]},{5:[2,19],10:[2,19],22:[2,19],24:[2,19],32:[2,19],35:[2,19],57:[2,19],65:[2,19],69:[2,19],71:[2,19],81:[2,19],82:[2,19],91:[2,19],98:[2,19]},{5:[2,20],10:[2,20],22:[2,20],24:[2,20],32:[2,20],35:[2,20],57:[2,20],65:[2,20],69:[2,20],71:[2,20],81:[2,20],82:[2,20],91:[2,20],98:[2,20]},{30:[1,36],31:37,36:38,37:39,38:[1,40],39:[1,41],40:[1,42],42:43,43:[1,44],45:[1,45],46:[1,46],49:[1,47],56:[1,48]},{20:55,21:56,30:[1,49],31:51,34:50,36:38,37:39,38:[1,40],39:[1,41],40:[1,42],41:57,42:43,43:[1,44],45:[1,45],46:[1,46],49:[1,47],56:[1,48],59:52,60:53,61:[1,54],62:[1,58],91:[1,28],98:[1,27],99:[1,59],100:60,101:[1,61],104:[1,62]},{58:[1,63]},{21:66,63:64,64:65,67:[1,68],83:67,91:[1,28]},{41:69,64:70,67:[1,68],83:67,99:[1,59],100:60,101:[1,61],104:[1,62]},{21:66,63:71,64:65,67:[1,68],83:67,91:[1,28]},{21:79,41:75,64:78,67:[1,68],72:72,74:[1,73],78:[1,74],79:[1,76],80:[1,77],83:67,91:[1,28],99:[1,59],100:60,101:[1,61],104:[1,62]},{67:[1,80]},{64:81,67:[1,68],83:67},{46:[1,82]},{20:86,25:83,27:84,28:[1,85],98:[1,27]},{30:[2,28],38:[2,28],39:[2,28],40:[2,28],43:[2,28],45:[2,28],46:[2,28],49:[2,28],56:[2,28]},{30:[2,35],38:[2,35],39:[2,35],40:[2,35],43:[2,35],45:[2,35],46:[2,35],49:[2,35],56:[2,35],61:[2,35],62:[2,35],91:[2,35],98:[2,35],99:[2,35],101:[2,35],104:[2,35]},{1:[2,1]},{5:[2,2],22:[2,2],24:[2,2],32:[2,2],35:[2,2],57:[2,2],65:[2,2],69:[2,2],71:[2,2],81:[2,2],82:[2,2],91:[2,2],98:[2,2]},{6:88,10:[1,87],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:[1,17],23:18,24:[1,29],29:19,32:[1,30],33:20,35:[1,31],57:[1,21],65:[1,24],69:[1,26],71:[1,25],81:[1,22],82:[1,23],91:[1,28],98:[1,27]},{10:[2,7],22:[2,7],24:[2,7],32:[2,7],35:[2,7],57:[2,7],65:[2,7],69:[2,7],71:[2,7],81:[2,7],82:[2,7],91:[2,7],98:[2,7]},{5:[2,26],10:[2,26],22:[2,26],24:[2,26],32:[2,26],35:[2,26],57:[2,26],65:[2,26],69:[2,26],71:[2,26],81:[2,26],82:[2,26],91:[2,26],98:[2,26]},{30:[1,89],36:90,38:[1,40],39:[1,41],40:[1,42],42:43,43:[1,44],45:[1,45],56:[1,48]},{30:[2,37],38:[2,37],39:[2,37],40:[2,37],43:[2,37],45:[2,37],56:[2,37],61:[2,37],62:[2,37],91:[2,37],98:[2,37],99:[2,37],101:[2,37],104:[2,37]},{30:[2,38],38:[2,38],39:[2,38],40:[2,38],43:[2,38],45:[2,38],56:[2,38],61:[2,38],62:[2,38],91:[2,38],98:[2,38],99:[2,38],101:[2,38],104:[2,38]},{30:[2,39],38:[2,39],39:[2,39],40:[2,39],43:[2,39],45:[2,39],56:[2,39],61:[2,39],62:[2,39],91:[2,39],98:[2,39],99:[2,39],101:[2,39],104:[2,39]},{30:[2,40],38:[2,40],39:[2,40],40:[2,40],43:[2,40],45:[2,40],56:[2,40],61:[2,40],62:[2,40],91:[2,40],98:[2,40],99:[2,40],101:[2,40],104:[2,40]},{41:91,99:[1,59],100:60,101:[1,61],104:[1,62]},{30:[2,42],38:[2,42],39:[2,42],40:[2,42],43:[2,42],45:[2,42],56:[1,92],61:[2,42],62:[2,42],91:[2,42],98:[2,42],99:[2,42],101:[2,42],104:[2,42]},{44:[1,93]},{44:[1,94]},{43:[1,97],45:[1,98],47:95,52:96},{43:[1,101],45:[1,102],50:99,54:100},{30:[2,60],38:[2,60],39:[2,60],40:[2,60],43:[2,60],45:[2,60],56:[2,60],61:[2,60],62:[2,60],91:[2,60],98:[2,60],99:[2,60],101:[2,60],104:[2,60]},{5:[2,29],7:103,8:[1,16],10:[2,29],22:[2,29],24:[2,29],32:[2,29],35:[2,29],57:[2,29],65:[2,29],69:[2,29],71:[2,29],81:[2,29],82:[2,29],91:[2,29],98:[2,29]},{30:[1,104]},{20:55,21:56,30:[1,105],34:106,36:90,38:[1,40],39:[1,41],40:[1,42],41:57,42:43,43:[1,44],45:[1,45],56:[1,48],59:52,60:53,61:[1,54],62:[1,58],91:[1,28],98:[1,27],99:[1,59],100:60,101:[1,61],104:[1,62]},{10:[2,62],20:55,21:56,30:[2,62],41:57,60:107,61:[1,54],62:[1,58],91:[1,28],98:[1,27],99:[1,59],100:60,101:[1,61],104:[1,62]},{10:[2,63],30:[2,63],61:[2,63],62:[2,63],91:[2,63],98:[2,63],99:[2,63],101:[2,63],104:[2,63]},{10:[2,65],30:[2,65],61:[2,65],62:[2,65],91:[2,65],98:[2,65],99:[2,65],101:[2,65],104:[2,65]},{10:[2,66],30:[2,66],61:[2,66],62:[2,66],91:[2,66],98:[2,66],99:[2,66],101:[2,66],104:[2,66]},{10:[2,67],30:[2,67],61:[2,67],62:[2,67],91:[2,67],98:[2,67],99:[2,67],101:[2,67],104:[2,67]},{10:[2,68],30:[2,68],61:[2,68],62:[2,68],91:[2,68],98:[2,68],99:[2,68],101:[2,68],104:[2,68]},{10:[2,69],30:[2,69],61:[2,69],62:[2,69],91:[2,69],98:[2,69],99:[2,69],101:[2,69],104:[2,69]},{10:[2,136],30:[2,136],38:[2,136],39:[2,136],40:[2,136],43:[2,136],45:[2,136],48:[2,136],51:[2,136],53:[2,136],56:[2,136],61:[2,136],62:[2,136],68:[2,136],75:[2,136],76:[2,136],91:[2,136],98:[2,136],99:[2,136],101:[2,136],104:[2,136]},{10:[2,137],30:[2,137],38:[2,137],39:[2,137],40:[2,137],43:[2,137],45:[2,137],48:[2,137],51:[2,137],53:[2,137],56:[2,137],61:[2,137],62:[2,137],68:[2,137],75:[2,137],76:[2,137],91:[2,137],98:[2,137],99:[2,137],101:[2,137],104:[2,137]},{20:110,98:[1,27],102:108,106:109,107:[1,111]},{20:110,98:[1,27],102:112,106:109,107:[1,111]},{20:55,21:56,34:113,41:57,59:52,60:53,61:[1,54],62:[1,58],91:[1,28],98:[1,27],99:[1,59],100:60,101:[1,61],104:[1,62]},{66:[1,114]},{66:[2,70],84:[1,115]},{66:[2,71]},{48:[2,94],51:[2,94],53:[2,94],55:[2,94],66:[2,94],68:[2,94],75:[2,94],76:[2,94],84:[2,94],87:[2,94]},{48:[2,97],51:[2,97],53:[2,97],55:[2,97],66:[2,97],68:[2,97],75:[2,97],76:[2,97],84:[2,97],86:[1,116],87:[2,97]},{68:[1,117]},{68:[1,118],84:[1,115]},{66:[1,119]},{68:[1,120],75:[1,121],76:[1,122]},{21:79,41:75,64:78,67:[1,68],72:123,79:[1,76],80:[1,77],83:67,91:[1,28],99:[1,59],100:60,101:[1,61],104:[1,62]},{21:79,41:75,64:78,67:[1,68],72:124,79:[1,76],80:[1,77],83:67,91:[1,28],99:[1,59],100:60,101:[1,61],104:[1,62]},{68:[2,86],75:[2,86],76:[2,86]},{68:[2,87],75:[2,87],76:[2,87]},{68:[2,88],75:[2,88],76:[2,88]},{68:[2,89],75:[2,89],76:[2,89],84:[1,115]},{68:[2,90],75:[2,90],76:[2,90]},{70:[1,125]},{51:[1,126],84:[1,115]},{21:133,41:132,48:[1,127],49:[1,135],64:130,67:[1,68],79:[1,131],83:67,91:[1,28],92:128,93:129,94:134,99:[1,59],100:60,101:[1,61],104:[1,62]},{20:86,26:[1,136],27:137,28:[1,85],98:[1,27]},{26:[2,23],28:[2,23],98:[2,23]},{26:[2,24],28:[2,24],98:[2,24]},{26:[2,25],28:[2,25],98:[2,25]},{5:[2,5],10:[2,5],22:[2,5],24:[2,5],32:[2,5],35:[2,5],57:[2,5],65:[2,5],69:[2,5],71:[2,5],73:[2,5],81:[2,5],82:[2,5],91:[2,5],98:[2,5]},{10:[2,6],22:[2,6],24:[2,6],32:[2,6],35:[2,6],57:[2,6],65:[2,6],69:[2,6],71:[2,6],81:[2,6],82:[2,6],91:[2,6],98:[2,6]},{5:[2,27],10:[2,27],22:[2,27],24:[2,27],32:[2,27],35:[2,27],57:[2,27],65:[2,27],69:[2,27],71:[2,27],81:[2,27],82:[2,27],91:[2,27],98:[2,27]},{30:[2,36],38:[2,36],39:[2,36],40:[2,36],43:[2,36],45:[2,36],56:[2,36],61:[2,36],62:[2,36],91:[2,36],98:[2,36],99:[2,36],101:[2,36],104:[2,36]},{30:[2,41],38:[2,41],39:[2,41],40:[2,41],43:[2,41],45:[2,41],56:[2,41],61:[2,41],62:[2,41],91:[2,41],98:[2,41],99:[2,41],101:[2,41],104:[2,41]},{30:[2,59],38:[2,59],39:[2,59],40:[2,59],43:[2,59],45:[2,59],56:[2,59],61:[2,59],62:[2,59],91:[2,59],98:[2,59],99:[2,59],101:[2,59],104:[2,59]},{41:138,99:[1,59],100:60,101:[1,61],104:[1,62]},{41:139,99:[1,59],100:60,101:[1,61],104:[1,62]},{43:[1,97],45:[1,98],48:[1,140],52:141},{43:[2,48],45:[2,48],48:[2,48]},{44:[1,142]},{44:[1,143]},{43:[1,101],45:[1,102],51:[1,144],54:145},{43:[2,54],45:[2,54],51:[2,54]},{55:[1,146]},{55:[1,147]},{5:[2,31],10:[2,31],22:[2,31],24:[2,31],32:[2,31],35:[2,31],57:[2,31],65:[2,31],69:[2,31],71:[2,31],81:[2,31],82:[2,31],91:[2,31],98:[2,31]},{5:[2,30],10:[2,30],22:[2,30],24:[2,30],32:[2,30],35:[2,30],57:[2,30],65:[2,30],69:[2,30],71:[2,30],81:[2,30],82:[2,30],91:[2,30],98:[2,30]},{5:[2,32],7:148,8:[1,16],10:[2,32],22:[2,32],24:[2,32],32:[2,32],35:[2,32],57:[2,32],65:[2,32],69:[2,32],71:[2,32],81:[2,32],82:[2,32],91:[2,32],98:[2,32]},{30:[1,149]},{10:[2,64],30:[2,64],61:[2,64],62:[2,64],91:[2,64],98:[2,64],99:[2,64],101:[2,64],104:[2,64]},{20:110,98:[1,27],103:[1,150],106:151,107:[1,111]},{98:[2,141],103:[2,141],105:[2,141],107:[2,141]},{98:[2,142],103:[2,142],105:[2,142],107:[2,142]},{98:[2,143],103:[2,143],105:[2,143],107:[2,143]},{20:110,98:[1,27],105:[1,152],106:151,107:[1,111]},{10:[1,153]},{67:[1,154]},{67:[1,157],83:155,85:156,88:158},{55:[1,161],64:160,67:[1,68],79:[1,159],83:67},{5:[2,92],10:[2,92],22:[2,92],24:[2,92],32:[2,92],35:[2,92],57:[2,92],65:[2,92],69:[2,92],71:[2,92],81:[2,92],82:[2,92],91:[2,92],98:[2,92]},{5:[2,93],10:[2,93],22:[2,93],24:[2,93],32:[2,93],35:[2,93],57:[2,93],65:[2,93],69:[2,93],71:[2,93],81:[2,93],82:[2,93],91:[2,93],98:[2,93]},{67:[1,162]},{7:163,8:[1,16]},{21:79,41:75,64:78,67:[1,68],72:164,79:[1,76],80:[1,77],83:67,91:[1,28],99:[1,59],100:60,101:[1,61],104:[1,62]},{74:[1,166],77:[1,165]},{68:[1,167]},{68:[1,168]},{64:169,67:[1,68],83:67},{5:[2,135],10:[2,135],22:[2,135],24:[2,135],26:[2,135],28:[2,135],30:[2,135],32:[2,135],35:[2,135],57:[2,135],61:[2,135],62:[2,135],65:[2,135],69:[2,135],71:[2,135],81:[2,135],82:[2,135],91:[2,135],98:[2,135],99:[2,135],101:[2,135],103:[2,135],104:[2,135],105:[2,135],107:[2,135]},{5:[2,115],10:[2,115],22:[2,115],24:[2,115],30:[2,115],32:[2,115],35:[2,115],48:[2,115],51:[2,115],53:[2,115],57:[2,115],61:[2,115],62:[2,115],65:[2,115],66:[2,115],68:[2,115],69:[2,115],71:[2,115],75:[2,115],76:[2,115],81:[2,115],82:[2,115],91:[2,115],98:[2,115],99:[2,115],101:[2,115],104:[2,115]},{48:[1,170],53:[1,171]},{48:[2,118],53:[2,118]},{48:[2,119],53:[2,119],84:[1,115]},{48:[2,120],53:[2,120]},{48:[2,121],53:[2,121]},{48:[2,122],53:[2,122]},{48:[2,123],53:[2,123]},{67:[1,174],95:172,96:173},{5:[2,21],10:[2,21],22:[2,21],24:[2,21],32:[2,21],35:[2,21],57:[2,21],65:[2,21],69:[2,21],71:[2,21],81:[2,21],82:[2,21],91:[2,21],98:[2,21]},{26:[2,22],28:[2,22],98:[2,22]},{30:[2,43],38:[2,43],39:[2,43],40:[2,43],43:[2,43],45:[2,43],56:[2,43],61:[2,43],62:[2,43],91:[2,43],98:[2,43],99:[2,43],101:[2,43],104:[2,43]},{30:[2,44],38:[2,44],39:[2,44],40:[2,44],43:[2,44],45:[2,44],56:[2,44],61:[2,44],62:[2,44],91:[2,44],98:[2,44],99:[2,44],101:[2,44],104:[2,44]},{30:[2,45],38:[2,45],39:[2,45],40:[2,45],43:[2,45],45:[2,45],56:[2,45],61:[2,45],62:[2,45],91:[2,45],98:[2,45],99:[2,45],101:[2,45],104:[2,45]},{43:[2,47],45:[2,47],48:[2,47]},{41:175,99:[1,59],100:60,101:[1,61],104:[1,62]},{41:176,99:[1,59],100:60,101:[1,61],104:[1,62]},{30:[2,46],38:[2,46],39:[2,46],40:[2,46],43:[2,46],45:[2,46],56:[2,46],61:[2,46],62:[2,46],91:[2,46],98:[2,46],99:[2,46],101:[2,46],104:[2,46]},{43:[2,53],45:[2,53],51:[2,53]},{41:177,99:[1,59],100:60,101:[1,61],104:[1,62]},{41:178,99:[1,59],100:60,101:[1,61],104:[1,62]},{5:[2,34],10:[2,34],22:[2,34],24:[2,34],32:[2,34],35:[2,34],57:[2,34],65:[2,34],69:[2,34],71:[2,34],81:[2,34],82:[2,34],91:[2,34],98:[2,34]},{5:[2,33],10:[2,33],22:[2,33],24:[2,33],32:[2,33],35:[2,33],57:[2,33],65:[2,33],69:[2,33],71:[2,33],81:[2,33],82:[2,33],91:[2,33],98:[2,33]},{10:[2,138],30:[2,138],38:[2,138],39:[2,138],40:[2,138],43:[2,138],45:[2,138],48:[2,138],51:[2,138],53:[2,138],56:[2,138],61:[2,138],62:[2,138],68:[2,138],75:[2,138],76:[2,138],91:[2,138],98:[2,138],99:[2,138],101:[2,138],104:[2,138]},{98:[2,140],103:[2,140],105:[2,140],107:[2,140]},{10:[2,139],30:[2,139],38:[2,139],39:[2,139],40:[2,139],43:[2,139],45:[2,139],48:[2,139],51:[2,139],53:[2,139],56:[2,139],61:[2,139],62:[2,139],68:[2,139],75:[2,139],76:[2,139],91:[2,139],98:[2,139],99:[2,139],101:[2,139],104:[2,139]},{5:[2,61],10:[2,61],22:[2,61],24:[2,61],32:[2,61],35:[2,61],57:[2,61],65:[2,61],69:[2,61],71:[2,61],81:[2,61],82:[2,61],91:[2,61],98:[2,61]},{68:[1,179]},{48:[2,95],51:[2,95],53:[2,95],55:[2,95],66:[2,95],68:[2,95],75:[2,95],76:[2,95],84:[2,95],87:[2,95]},{48:[2,96],51:[2,96],53:[2,96],55:[2,96],66:[2,96],68:[2,96],75:[2,96],76:[2,96],84:[1,180],87:[2,96]},{46:[1,181],48:[2,97],51:[2,97],53:[2,97],55:[2,97],66:[2,97],68:[2,97],75:[2,97],76:[2,97],84:[2,97],86:[1,116],87:[2,97]},{48:[2,106],51:[2,106],53:[2,106],55:[2,106],66:[2,106],68:[2,106],75:[2,106],76:[2,106],84:[2,106],87:[2,106]},{55:[1,183],87:[1,182]},{55:[1,185],84:[1,115],87:[1,184]},{79:[1,186]},{68:[1,187]},{5:[2,74],10:[2,74],22:[2,74],24:[2,74],32:[2,74],35:[2,74],57:[2,74],65:[2,74],69:[2,74],71:[2,74],73:[1,188],81:[2,74],82:[2,74],91:[2,74],98:[2,74]},{68:[1,189]},{68:[1,190]},{77:[1,191]},{7:192,8:[1,16]},{7:193,8:[1,16]},{68:[1,194],84:[1,115]},{5:[2,116],10:[2,116],22:[2,116],24:[2,116],30:[2,116],32:[2,116],35:[2,116],48:[2,116],51:[2,116],53:[2,116],57:[2,116],61:[2,116],62:[2,116],65:[2,116],66:[2,116],68:[2,116],69:[2,116],71:[2,116],75:[2,116],76:[2,116],81:[2,116],82:[2,116],91:[2,116],98:[2,116],99:[2,116],101:[2,116],104:[2,116]},{21:133,41:132,49:[1,135],64:130,67:[1,68],79:[1,131],83:67,91:[1,28],93:195,94:134,99:[1,59],100:60,101:[1,61],104:[1,62]},{51:[1,196],53:[1,197]},{51:[2,127],53:[2,127]},{55:[1,198]},{43:[2,49],45:[2,49],48:[2,49],53:[1,199]},{43:[2,51],45:[2,51],48:[2,51],53:[1,200]},{43:[2,55],45:[2,55],51:[2,55],53:[1,201]},{43:[2,57],45:[2,57],51:[2,57],53:[1,202]},{5:[2,91],10:[2,91],22:[2,91],24:[2,91],32:[2,91],35:[2,91],57:[2,91],65:[2,91],69:[2,91],71:[2,91],81:[2,91],82:[2,91],91:[2,91],98:[2,91]},{67:[1,204],88:203},{41:210,48:[1,205],64:208,67:[1,68],79:[1,209],83:67,89:206,90:207,99:[1,59],100:60,101:[1,61],104:[1,62]},{48:[2,98],51:[2,98],53:[2,98],55:[2,98],66:[2,98],68:[2,98],75:[2,98],76:[2,98],84:[2,98],87:[2,98]},{64:212,67:[1,68],79:[1,211],83:67,87:[1,213]},{48:[2,101],51:[2,101],53:[2,101],55:[2,101],66:[2,101],68:[2,101],75:[2,101],76:[2,101],84:[2,101],87:[2,101]},{64:215,67:[1,68],79:[1,214],83:67},{87:[1,216]},{7:217,8:[1,16]},{68:[1,218]},{7:219,8:[1,16]},{7:220,8:[1,16]},{68:[1,221]},{5:[2,76],10:[2,76],22:[2,76],24:[2,76],32:[2,76],35:[2,76],57:[2,76],65:[2,76],69:[2,76],71:[2,76],73:[1,222],81:[2,76],82:[2,76],91:[2,76],98:[2,76]},{5:[2,84],10:[2,84],22:[2,84],24:[2,84],32:[2,84],35:[2,84],57:[2,84],65:[2,84],69:[2,84],71:[2,84],73:[1,223],81:[2,84],82:[2,84],91:[2,84],98:[2,84]},{7:224,8:[1,16]},{48:[2,117],53:[2,117]},{48:[2,124],51:[2,124],53:[2,124]},{51:[1,225],67:[1,174],96:226},{21:231,41:230,49:[1,135],64:233,67:[1,68],79:[1,228],80:[1,229],83:67,91:[1,28],94:232,97:227,99:[1,59],100:60,101:[1,61],104:[1,62]},{43:[2,50],45:[2,50],48:[2,50]},{43:[2,52],45:[2,52],48:[2,52]},{43:[2,56],45:[2,56],51:[2,56]},{43:[2,58],45:[2,58],51:[2,58]},{48:[2,107],51:[2,107],53:[2,107],55:[2,107],66:[2,107],68:[2,107],75:[2,107],76:[2,107],84:[2,107],87:[2,107]},{46:[1,181]},{48:[2,108],51:[2,108],53:[2,108],55:[2,108],66:[2,108],68:[2,108],75:[2,108],76:[2,108],84:[2,108],87:[2,108]},{48:[1,234],53:[1,235]},{48:[2,111],53:[2,111]},{48:[2,112],53:[2,112],84:[1,115]},{48:[2,113],53:[2,113]},{48:[2,114],53:[2,114]},{87:[1,236]},{84:[1,115],87:[1,237]},{48:[2,105],51:[2,105],53:[2,105],55:[2,105],66:[2,105],68:[2,105],75:[2,105],76:[2,105],84:[2,105],87:[2,105]},{87:[1,238]},{84:[1,115],87:[1,239]},{48:[2,104],51:[2,104],53:[2,104],55:[2,104],66:[2,104],68:[2,104],75:[2,104],76:[2,104],84:[2,104],87:[2,104]},{5:[2,72],10:[2,72],22:[2,72],24:[2,72],32:[2,72],35:[2,72],57:[2,72],65:[2,72],69:[2,72],71:[2,72],81:[2,72],82:[2,72],91:[2,72],98:[2,72]},{7:240,8:[1,16]},{5:[2,78],10:[2,78],22:[2,78],24:[2,78],32:[2,78],35:[2,78],57:[2,78],65:[2,78],69:[2,78],71:[2,78],73:[1,241],81:[2,78],82:[2,78],91:[2,78],98:[2,78]},{5:[2,80],10:[2,80],22:[2,80],24:[2,80],32:[2,80],35:[2,80],57:[2,80],65:[2,80],69:[2,80],71:[2,80],73:[1,242],81:[2,80],82:[2,80],91:[2,80],98:[2,80]},{7:243,8:[1,16]},{68:[1,244]},{68:[1,245]},{5:[2,73],10:[2,73],22:[2,73],24:[2,73],32:[2,73],35:[2,73],57:[2,73],65:[2,73],69:[2,73],71:[2,73],81:[2,73],82:[2,73],91:[2,73],98:[2,73]},{48:[2,125],51:[2,125],53:[2,125]},{51:[2,126],53:[2,126]},{51:[2,128],53:[2,128]},{51:[2,129],53:[2,129]},{51:[2,130],53:[2,130]},{51:[2,131],53:[2,131]},{51:[2,132],53:[2,132]},{51:[2,133],53:[2,133]},{51:[2,134],53:[2,134],84:[1,115]},{48:[2,109],51:[2,109],53:[2,109],55:[2,109],66:[2,109],68:[2,109],75:[2,109],76:[2,109],84:[2,109],87:[2,109]},{41:210,64:208,67:[1,68],79:[1,209],83:67,90:246,99:[1,59],100:60,101:[1,61],104:[1,62]},{48:[2,99],51:[2,99],53:[2,99],55:[2,99],66:[2,99],68:[2,99],75:[2,99],76:[2,99],84:[2,99],87:[2,99]},{48:[2,100],51:[2,100],53:[2,100],55:[2,100],66:[2,100],68:[2,100],75:[2,100],76:[2,100],84:[2,100],87:[2,100]},{48:[2,102],51:[2,102],53:[2,102],55:[2,102],66:[2,102],68:[2,102],75:[2,102],76:[2,102],84:[2,102],87:[2,102]},{48:[2,103],51:[2,103],53:[2,103],55:[2,103],66:[2,103],68:[2,103],75:[2,103],76:[2,103],84:[2,103],87:[2,103]},{5:[2,75],10:[2,75],22:[2,75],24:[2,75],32:[2,75],35:[2,75],57:[2,75],65:[2,75],69:[2,75],71:[2,75],81:[2,75],82:[2,75],91:[2,75],98:[2,75]},{68:[1,247]},{68:[1,248]},{5:[2,82],10:[2,82],22:[2,82],24:[2,82],32:[2,82],35:[2,82],57:[2,82],65:[2,82],69:[2,82],71:[2,82],73:[1,249],81:[2,82],82:[2,82],91:[2,82],98:[2,82]},{7:250,8:[1,16]},{7:251,8:[1,16]},{48:[2,110],53:[2,110]},{7:252,8:[1,16]},{7:253,8:[1,16]},{68:[1,254]},{5:[2,77],10:[2,77],22:[2,77],24:[2,77],32:[2,77],35:[2,77],57:[2,77],65:[2,77],69:[2,77],71:[2,77],81:[2,77],82:[2,77],91:[2,77],98:[2,77]},{5:[2,85],10:[2,85],22:[2,85],24:[2,85],32:[2,85],35:[2,85],57:[2,85],65:[2,85],69:[2,85],71:[2,85],81:[2,85],82:[2,85],91:[2,85],98:[2,85]},{5:[2,79],10:[2,79],22:[2,79],24:[2,79],32:[2,79],35:[2,79],57:[2,79],65:[2,79],69:[2,79],71:[2,79],81:[2,79],82:[2,79],91:[2,79],98:[2,79]},{5:[2,81],10:[2,81],22:[2,81],24:[2,81],32:[2,81],35:[2,81],57:[2,81],65:[2,81],69:[2,81],71:[2,81],81:[2,81],82:[2,81],91:[2,81],98:[2,81]},{7:255,8:[1,16]},{5:[2,83],10:[2,83],22:[2,83],24:[2,83],32:[2,83],35:[2,83],57:[2,83],65:[2,83],69:[2,83],71:[2,83],81:[2,83],82:[2,83],91:[2,83],98:[2,83]}],
defaultActions: {32:[2,1],66:[2,71]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* tracing/debugging functions */

function Loc(start, end) {
  this.start = { line: start.first_line, column: start.first_column };
  this.end = { line: end.last_line, column: end.last_column };
}

/* Manana data types */

function MananaHash(data, loc) {
  var hash = {}, i = 0;

  while (data[i]) {
    hash[data[i][0]] = data[i][1];
    i++;
  }

  return hash;
}

/* AST nodes */

function VoidTagNode(tag, attrs, loc) {
  this.type = "VoidTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
}

function TagNode(tag, attrs, text, block, loc) {
  this.type = "Tag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = text ? [text] : block;
}

function TextNode(words, loc) {
  this.type = "Text";
  this.loc = loc;

  var w = words, t = [], s = [], i = 0; 

  while (typeof w[i] !== "undefined") {
    if (typeof w[i] === "string") {
      s.push(w[i]);
    } else {
      if (s.length) {
        t.push(s.join(' '));
        s = [];
      }
      t.push(w[i]);
    }
    i++;
  }
  if (s.length) {
    t.push(s.join(' '));
  }

  this.body = t;
}

function NameNode(path, loc) {
  this.type = "Name";
  this.loc = loc;
  this.body = path;
}

function WithNode(path, id, body, loc) {
  this.type = "With";
  this.loc = loc;
  this.path = path;
  this.id = id;
  this.body = body;
}

function IdNode(id, start, end, loc) {
  this.type = "Id";
  this.loc = loc;
  this.id = id;
  this.start = start;
  this.end = end;
}

function PathNode(path_node, component, methods, loc) {
  var k, c;

  if (path_node === null) {
    this.type = "Path";
    this.loc = loc;
    this.methods = null;
    this.components = [];
  } else {
    for (k in path_node) {
      if (path_node.hasOwnProperty(k)) {
        this[k] = path_node[k];
      }
    }

    if (loc && path_node.loc) {
      if (loc.end.line > path_node.loc.end.line || loc.end.column > path_node.loc.end.column) {
        this.loc.end = loc.end;
      }
    }
  }

  if (component) {
    c = [component.id];
    if (component.start !== null) {
      c.push(component.start);
    }
    if (component.end !== null) {
      c.push(component.end);
    }
    this.components.push(c);
  }

  if (methods !== null) {
    this.methods = methods;
  }
}

function MethodNode(name, args, loc) {
  this.type = "Method";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function MethodChainNode(method, loc) {
  this.type = "MethodChain";
  this.loc = loc;
  this.chain = [method];
}

function FunctionNode(name, args, loc) {
  this.type = "Function";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function ForNode(id, path, body, loc) {
  this.type = "For";
  this.loc = loc;
  this.id = id;
  this.path = path;
  this.body = body;
}

function IfNode(cond, v1, v2, body, else_body, loc) {
  this.type = "If";
  this.loc = loc;
  this.condition = cond;
  this.value_1 = v1;
  this.value_2 = v2;
  this.body = body;
  this.else_body = else_body;
}

function AliasNode(path, id, loc) {
  this.type = "Alias";
  this.loc = loc;
  this.path = path;
  this.id = id;
}

function IncludeNode(path, loc) {
  this.type = "Include";
  this.loc = loc;
  this.path = path;
}

function FilterNode(filter, body, loc) {
  this.type = "Filter";
  this.loc = loc;
  this.body = [body];
}

function MananaStringNode(body, loc) {
  this.type = "MananaString";
  this.loc = loc;
  if (typeof body === "string") {
    console.log('>>');
    console.log('|' + body + '|');
    console.log('>>');
    this.body = [body];
  } else {
    this.body = body;
  }
}

/* expose AST constructors to parser */

parser.ast = {};
parser.ast.Loc = Loc;
parser.ast.MananaStringNode = MananaStringNode;
parser.ast.VoidTagNode = VoidTagNode;
parser.ast.TagNode = TagNode;
parser.ast.TextNode = TextNode;
parser.ast.NameNode = NameNode;
parser.ast.WithNode = WithNode;
parser.ast.IdNode = IdNode;
parser.ast.PathNode = PathNode;
parser.ast.MethodNode = MethodNode;
parser.ast.MethodChainNode = MethodChainNode;
parser.ast.FunctionNode = FunctionNode;
parser.ast.ForNode = ForNode;
parser.ast.IfNode = IfNode;
parser.ast.AliasNode = AliasNode;
parser.ast.IncludeNode = IncludeNode;
parser.ast.FilterNode = FilterNode;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

  function strip(start, end) {
    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.pushState("comment"); /* ignore */ 
break;
case 1:this.popState(); /* ignore */ 
break;
case 2:/* ignore */
break;
case 3:/* ignore */
break;
case 4:this.pushState("expr"); return "FOR";
break;
case 5:this.pushState("expr"); return "IF";
break;
case 6:this.pushState("expr"); return "ELSE";
break;
case 7:this.pushState("expr"); return "ALIAS";
break;
case 8:this.pushState("expr"); return "WITH";
break;
case 9:this.pushState("expr"); return "INCLUDE";
break;
case 10:return "BOOL";
break;
case 11:return "BOOL";
break;
case 12:this.popState(); return "END_EXPR";
break;
case 13:return "IN";
break;
case 14:return "IS";
break;
case 15:return "AS";
break;
case 16:return "NOT";
break;
case 17:return "TYPE";
break;
case 18:return "TYPE";
break;
case 19:return "TYPE";
break;
case 20:return "TYPE";
break;
case 21:return "TYPE";
break;
case 22:return "COND";
break;
case 23:return "COND";
break;
case 24:return "COND";
break;
case 25:return "COND";
break;
case 26:return "COND";
break;
case 27:return "COND";
break;
case 28:return "COND";
break;
case 29:return "COND";
break;
case 30:return "EXISTS";
break;
case 31:this.pushState("tag");                    return "VOID_TAG";
break;
case 32:this.pushState("tag");                    return "TAG";
break;
case 33:this.popState();                          return "END_TAG";
break;
case 34:yy_.yytext = yy_.yytext.slice(1);                 return "TAG_ID";
break;
case 35:yy_.yytext = yy_.yytext.slice(1);                 return "TAG_CLASS";
break;
case 36:
                                            yy_.yytext = yy_.yytext.replace("->", '');
                                            yy_.yytext = yy_.yytext.replace(/\s*/, '')
                                            yy_.yytext = yy_.yytext.replace(/"|'/g, '');
                                            return "TAG_SRC";
                                         
break;
case 37:this.pushState("i_string_d"); return ["TAG_SRC_I_STRING", "I_STRING_D"];
break;
case 38:this.pushState("i_string_d"); return "I_STRING_D";
break;
case 39:this.pushState("i_string_d"); return "I_STRING_D";                                      
break;
case 40:this.pushState("name");       return "START_NAME";
break;
case 41:this.popState();              return "END_I_STRING_D"; // "
break;
case 42:return "I_STRING_TEXT";
break;
case 43:this.pushState("i_string_s"); return ["TAG_SRC_I_STRING", "I_STRING_S"];
break;
case 44:this.pushState("i_string_s"); return "I_STRING_S";
break;
case 45:this.pushState("i_string_s"); return "I_STRING_S";                                      
break;
case 46:this.pushState("name");       return "START_NAME";
break;
case 47:this.popState();              return "END_I_STRING_S"; // "
break;
case 48:return "I_STRING_TEXT";
break;
case 49:this.pushState("i_html"); return "I_HTML_START";
break;
case 50:this.pushState("name");   return "START_NAME";
break;
case 51:this.popState();          return "I_HTML_END";
break;
case 52:return "I_HTML_TEXT";
break;
case 53:return "HTML";
break;
case 54:this.pushState("tagargs"); return "LPAREN";
break;
case 55:this.popState();           return "RPAREN";
break;
case 56:this.pushState("tagargs"); return "LBRACE";
break;
case 57:this.popState();           return "RBRACE";
break;
case 58:return "COLON";
break;
case 59:return "EQ";
break;
case 60:return "COMMA";
break;
case 61:return "TAG_ATTR";
break;
case 62:yy_.yytext = "data-" + yy_.yytext.slice(1); return "TAG_DATA_ATTR";
break;
case 63:/* ignore */
break;
case 64:/* ignore */
break;
case 65:this.pushState("filter"); yy_.yytext = yy_.yytext.slice(1); return "FILTER";
break;
case 66:this.pushState("name"); return "START_NAME";
break;
case 67:this.popState(); return "RBRACE"
break;
case 68:this.pushState("fn"); yy_.yytext = yy_.yytext.slice(1); return "FN";
break;
case 69:this.popState(); return "RPAREN";
break;
case 70:/* ignore */
break;
case 71:/* ignore */
break;
case 72:return "LBRACE";
break;
case 73:return "RBRACE";
break;
case 74:return "COMMA";
break;
case 75:return "ID";
break;
case 76:return "DOT";
break;
case 77:return "LPAREN";
break;
case 78:return "RPAREN";
break;
case 79:return "LBRACK";
break;
case 80:return "RBRACK";
break;
case 81:return "COLON"; 
break;
case 82:return "COMMA";
break;
case 83:return "INT";
break;
case 84:yy_.yytext = strip(1,2).replace(/\\"/g, '"'); return "STRING";
break;
case 85:return "STRING"; // Do not strip quotes
break;
case 86:return "WORD";
break;
case 87:
  var tokens = [];
  while (0 < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }

  if (tokens.length) {
    tokens.push("EOF");
    return tokens;
  } else {
    return "EOF";
  }

break;
case 88:
  var tokens = [];
  while (_filter_indent_level >= _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }

  if (tokens.length) {
    tokens.push("EOF");
    return tokens;
  } else {
    return "EOF";
  }

break;
case 89:/* eat blank lines */
break;
case 90:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (indentation > _indent_stack[0]) {
    _indent_stack.unshift(indentation);
    return "INDENT";
  }

  var tokens = [];
  while (indentation < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }

  if (tokens.length) {
    return tokens;
  }

break;
case 91:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (typeof _filter_indent_level === "undefined") {
    _filter_indent_level = indentation;
    return "FILTER_START";
  } else if (indentation < _filter_indent_level) {
    _filter_indent_level = undefined;
    this.popState();
    return "DEDENT";
  } 
  /* else ignore */

break;
case 92:/* ignore all other whitespace */
break;
}
},
rules: [/^(?:""")/,/^(?:""")/,/^(?:.+)/,/^(?:\n)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:alias\b)/,/^(?:with\b)/,/^(?:include\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:(?=\n))/,/^(?:in\b)/,/^(?:is\b)/,/^(?:as\b)/,/^(?:not\b)/,/^(?:Hash\b)/,/^(?:List\b)/,/^(?:String\b)/,/^(?:Integer\b)/,/^(?:Number\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?:>)/,/^(?:<)/,/^(?:%)/,/^(?:exists\b)/,/^(?:((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)))/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:(?=\n))/,/^(?:(#[a-zA-Z][a-zA-Z0-9\-\:_]*))/,/^(?:(\.-?[_a-zA-Z]+[_a-zA-Z0-9\-]*(?=["."\s\n])))/,/^(?:->\s*(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:->\s*(i"(?=.*?@\{)))/,/^(?:(i"(?=.*?@\{)))/,/^(?:(i"(?=.*?@\{)))/,/^(?:@\{)/,/^(?:")/,/^(?:[^"@"'"']*)/,/^(?:->\s*(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:@\{)/,/^(?:')/,/^(?:[^"@""'"]*)/,/^(?:(<(?=.*?@\{)))/,/^(?:@\{)/,/^(?:>(?=\s*\n))/,/^(?:.)/,/^(?:<.*(?=\n))/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z][a-zA-Z0-9\-_]*(?=\s*["="":"])))/,/^(?:(\*[a-zA-Z][a-zA-Z0-9\-]*(?=["="":"])))/,/^(?:\s)/,/^(?:\n)/,/^(?::(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:@\{)/,/^(?:\})/,/^(?:@(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254})\s?(?=\())/,/^(?:\)(?!\)))/,/^(?:\s)/,/^(?:\n)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:(\+|-)?(0|[1-9][0-9]*))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:([^\s\n"@"][^\s\n]*))/,/^(?:\s*$)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"comment":{"rules":[1,2,3,89,92],"inclusive":true},"tag":{"rules":[33,34,35,36,37,39,43,45,54,56,66,68,85,86,89,92],"inclusive":true},"tagargs":{"rules":[38,44,55,57,58,59,60,61,62,63,64,84,89,92],"inclusive":true},"filter":{"rules":[39,45,66,85,86,88,89,91,92],"inclusive":true},"expr":{"rules":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,38,44,68,75,76,77,78,79,80,81,82,83,84,89,92],"inclusive":true},"name":{"rules":[38,44,67,75,76,77,78,79,80,81,82,83,84,89,92],"inclusive":true},"fn":{"rules":[10,11,38,44,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,89,92],"inclusive":true},"i_string_d":{"rules":[40,41,42,89,92],"inclusive":true},"i_string_s":{"rules":[46,47,48,89,92],"inclusive":true},"i_html":{"rules":[50,51,52,89,92],"inclusive":true},"INITIAL":{"rules":[0,4,5,6,7,8,9,31,32,39,45,49,53,65,66,68,85,86,87,89,90,92],"inclusive":true}}
};
_indent_stack = [0];
_filter_indent_level = undefined;;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = manana_parser;
exports.Parser = manana_parser.Parser;
exports.parse = function () { return manana_parser.parse.apply(manana_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}