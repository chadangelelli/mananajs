/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var manana_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"prog_list":4,"EOF":5,"stmt":6,"block":7,"INDENT":8,"stmt_list":9,"DEDENT":10,"void_tag_stmt":11,"tag_stmt":12,"filter_stmt":13,"alias_stmt":14,"with_stmt":15,"if_stmt":16,"for_stmt":17,"void_tag":18,"END_TAG":19,"tag_attrs":20,"VOID_TAG":21,"tag":22,"text":23,"TAG":24,"tag_attr":25,"tag_attr_args":26,"TAG_ID":27,"tag_classes":28,"TAG_ATTR":29,"EQ":30,"string":31,"TAG_DATA_ATTR":32,"LPAREN":33,"tag_attr_arg_list":34,"RPAREN":35,"tag_attr_arg":36,"STRING":37,"COMMA":38,"TAG_CLASS":39,"FILTER":40,"FILTER_START":41,"word_list":42,"word":43,"WORD":44,"name":45,"SPACE":46,"WITH":47,"path":48,"AS":49,"ID":50,"END_EXPR":51,"FOR":52,"IN":53,"IF":54,"ELSE":55,"ALIAS":56,"id":57,"DOT":58,"meths":59,"LBRACK":60,"INT":61,"RBRACK":62,"COLON":63,"meth":64,"meth_args":65,"meth_arg":66,"START_NAME":67,"RBRACE":68,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",10:"DEDENT",19:"END_TAG",21:"VOID_TAG",24:"TAG",27:"TAG_ID",29:"TAG_ATTR",30:"EQ",31:"string",32:"TAG_DATA_ATTR",33:"LPAREN",35:"RPAREN",37:"STRING",38:"COMMA",39:"TAG_CLASS",40:"FILTER",41:"FILTER_START",44:"WORD",46:"SPACE",47:"WITH",49:"AS",50:"ID",51:"END_EXPR",52:"FOR",53:"IN",54:"IF",55:"ELSE",56:"ALIAS",58:"DOT",60:"LBRACK",61:"INT",62:"RBRACK",63:"COLON",67:"START_NAME",68:"RBRACE"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,3],[9,2],[9,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,2],[11,3],[18,1],[12,2],[12,3],[12,3],[12,3],[12,4],[12,4],[22,1],[20,2],[20,1],[20,1],[25,1],[25,1],[25,3],[25,3],[26,3],[34,2],[34,1],[36,3],[36,4],[36,3],[36,4],[28,2],[28,1],[13,4],[23,1],[42,1],[42,2],[43,1],[43,1],[43,1],[15,6],[17,6],[16,4],[16,7],[14,5],[48,1],[48,3],[48,3],[57,1],[57,4],[57,6],[57,6],[57,4],[57,6],[57,6],[57,5],[57,5],[59,1],[59,3],[64,3],[64,4],[65,3],[65,1],[66,1],[66,1],[66,1],[45,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0-1]; 
break;
case 6: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = [$$[$0]]; 
break;
case 15: this.$ = new VoidTagNode($$[$0-1], null, new Location(_$[$0-1], _$[$0-1])); 
break;
case 16: this.$ = new VoidTagNode($$[$0-2], $$[$0-1],   new Location(_$[$0-2], _$[$0-1])); 
break;
case 17: this.$ = $$[$0]; 
break;
case 18: this.$ = new TagNode($$[$0-1], null, null, null, new Location(_$[$0-1], _$[$0-1])); 
break;
case 19: this.$ = new TagNode($$[$0-2], null, $$[$0-1],   null, new Location(_$[$0-2], _$[$0-1])); 
break;
case 20: this.$ = new TagNode($$[$0-2], null, null, $$[$0],   new Location(_$[$0-2], _$[$0])); 
break;
case 21: this.$ = new TagNode($$[$0-2], $$[$0-1],   null, null, new Location(_$[$0-2], _$[$0-1])); 
break;
case 22: this.$ = new TagNode($$[$0-3], $$[$0-2],   $$[$0-1],   null, new Location(_$[$0-3], _$[$0-1])); 
break;
case 23: this.$ = new TagNode($$[$0-3], $$[$0-2],   null, $$[$0],   new Location(_$[$0-3], _$[$0])); 
break;
case 24: this.$ = $$[$0]; 
break;
case 25: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 26: this.$ = [$$[$0]]; 
break;
case 27: this.$ = $$[$0]; 
break;
case 28: this.$ = ['id', $$[$0]]; 
break;
case 29: this.$ = ['class', $$[$0].join(" ")]; 
break;
case 30: this.$ = ['attr', $$[$0-2], $$[$0]]; 
break;
case 31: this.$ = ['data', $$[$0-2], $$[$0]]; 
break;
case 32: this.$ = $$[$0-1]; 
break;
case 33: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 34: this.$ = [$$[$0]]; 
break;
case 35: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 36: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 37: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 38: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 39: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 40: this.$ = [$$[$0]]; 
break;
case 41: this.$ = new FilterNode($$[$0-3], $$[$0-1], new Location(_$[$0-3], _$[$0-1])); 
break;
case 42: this.$ = new TextNode($$[$0], new Location(_$[$0], _$[$0])); 
break;
case 43: this.$ = [$$[$0]]; 
break;
case 44: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 48: this.$ = new WithNode($$[$0-4], $$[$0-2], $$[$0], new Location(_$[$0-5], _$[$0])); 
break;
case 49: this.$ = new ForNode($$[$0-4], $$[$0-2], $$[$0] , new Location(_$[$0-5], _$[$0])) ; 
break;
case 50: this.$ = new IfNode($$[$0-2], $$[$0], null, new Location(_$[$0-3], _$[$0])); 
break;
case 51: this.$ = new IfNode($$[$0-5], $$[$0-3], $$[$0]  , new Location(_$[$0-6], _$[$0])); 
break;
case 52: this.$ = new AliasNode($$[$0-3], $$[$0-1], new Location(_$[$0-4], _$[$0])); 
break;
case 53: this.$ = new PathNode($$[$0], new Location(_$[$0], _$[$0])); 
break;
case 54: this.$ = updatePathNode($$[$0-2], $$[$0], null, new Location(_$[$0-2], _$[$0]));  
break;
case 55: this.$ = updatePathNode($$[$0-2], null, $$[$0], new Location(_$[$0-2], _$[$0])); 
break;
case 56: this.$ = new IdNode($$[$0], null, null, new Location(_$[$0], _$[$0])); 
break;
case 57: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Location(_$[$0-3], _$[$0])); 
break;
case 58: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Location(_$[$0-5], _$[$0])); 
break;
case 59: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Location(_$[$0-5], _$[$0])); 
break;
case 60: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Location(_$[$0-3], _$[$0])); 
break;
case 61: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Location(_$[$0-5], _$[$0])); 
break;
case 62: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Location(_$[$0-5], _$[$0])); 
break;
case 63: this.$ = new IdNode($$[$0-4], 0   , $$[$0-1]  , new Location(_$[$0-4], _$[$0])); 
break;
case 64: this.$ = new IdNode($$[$0-4], $$[$0-2]  , '*' , new Location(_$[$0-4], _$[$0])); 
break;
case 65: this.$ = new MethodChainNode($$[$0], new Location(_$[$0], _$[$0])); 
break;
case 66: this.$ = $$[$0-2]; this.$.chain.push($$[$0])                        ; 
break;
case 67: this.$ = new MethodNode($$[$0-2], null, new Location(_$[$0-2], _$[$0])); 
break;
case 68: this.$ = new MethodNode($$[$0-3], $$[$0-1]  , new Location(_$[$0-3], _$[$0])); 
break;
case 69: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 70: this.$ = [$$[$0]]; 
break;
case 74: this.$ = $$[$0-1]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,12],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:13,21:[1,20],22:14,24:[1,21],40:[1,15],47:[1,17],52:[1,19],54:[1,18],56:[1,16]},{1:[3]},{5:[1,22],6:23,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:13,21:[1,20],22:14,24:[1,21],40:[1,15],47:[1,17],52:[1,19],54:[1,18],56:[1,16]},{5:[2,3],21:[2,3],24:[2,3],40:[2,3],47:[2,3],52:[2,3],54:[2,3],56:[2,3]},{5:[2,4],21:[2,4],24:[2,4],40:[2,4],47:[2,4],52:[2,4],54:[2,4],56:[2,4]},{5:[2,8],10:[2,8],21:[2,8],24:[2,8],40:[2,8],47:[2,8],52:[2,8],54:[2,8],56:[2,8]},{5:[2,9],10:[2,9],21:[2,9],24:[2,9],40:[2,9],47:[2,9],52:[2,9],54:[2,9],56:[2,9]},{5:[2,10],10:[2,10],21:[2,10],24:[2,10],40:[2,10],47:[2,10],52:[2,10],54:[2,10],56:[2,10]},{5:[2,11],10:[2,11],21:[2,11],24:[2,11],40:[2,11],47:[2,11],52:[2,11],54:[2,11],56:[2,11]},{5:[2,12],10:[2,12],21:[2,12],24:[2,12],40:[2,12],47:[2,12],52:[2,12],54:[2,12],56:[2,12]},{5:[2,13],10:[2,13],21:[2,13],24:[2,13],40:[2,13],47:[2,13],52:[2,13],54:[2,13],56:[2,13]},{5:[2,14],10:[2,14],21:[2,14],24:[2,14],40:[2,14],47:[2,14],52:[2,14],54:[2,14],56:[2,14]},{6:25,9:24,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:13,21:[1,20],22:14,24:[1,21],40:[1,15],47:[1,17],52:[1,19],54:[1,18],56:[1,16]},{19:[1,26],20:27,25:28,26:29,27:[1,30],28:31,29:[1,32],32:[1,33],33:[1,34],39:[1,35]},{19:[1,36],20:38,23:37,25:28,26:29,27:[1,30],28:31,29:[1,32],32:[1,33],33:[1,34],39:[1,35],42:39,43:40,44:[1,41],45:42,46:[1,43],67:[1,44]},{41:[1,45]},{50:[1,46]},{48:47,50:[1,49],57:48},{48:50,50:[1,49],57:48},{50:[1,51]},{19:[2,17],27:[2,17],29:[2,17],32:[2,17],33:[2,17],39:[2,17]},{19:[2,24],27:[2,24],29:[2,24],32:[2,24],33:[2,24],39:[2,24],44:[2,24],46:[2,24],67:[2,24]},{1:[2,1]},{5:[2,2],21:[2,2],24:[2,2],40:[2,2],47:[2,2],52:[2,2],54:[2,2],56:[2,2]},{6:53,10:[1,52],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:13,21:[1,20],22:14,24:[1,21],40:[1,15],47:[1,17],52:[1,19],54:[1,18],56:[1,16]},{10:[2,7],21:[2,7],24:[2,7],40:[2,7],47:[2,7],52:[2,7],54:[2,7],56:[2,7]},{5:[2,15],10:[2,15],21:[2,15],24:[2,15],40:[2,15],47:[2,15],52:[2,15],54:[2,15],56:[2,15]},{19:[1,54],25:55,27:[1,30],28:31,29:[1,32],32:[1,33],39:[1,35]},{19:[2,26],27:[2,26],29:[2,26],32:[2,26],39:[2,26],44:[2,26],46:[2,26],67:[2,26]},{19:[2,27],27:[2,27],29:[2,27],32:[2,27],39:[2,27],44:[2,27],46:[2,27],67:[2,27]},{19:[2,28],27:[2,28],29:[2,28],32:[2,28],39:[2,28],44:[2,28],46:[2,28],67:[2,28]},{19:[2,29],27:[2,29],29:[2,29],32:[2,29],39:[1,56],44:[2,29],46:[2,29],67:[2,29]},{30:[1,57]},{30:[1,58]},{29:[1,61],32:[1,62],34:59,36:60},{19:[2,40],27:[2,40],29:[2,40],32:[2,40],39:[2,40],44:[2,40],46:[2,40],67:[2,40]},{5:[2,18],7:63,8:[1,12],10:[2,18],21:[2,18],24:[2,18],40:[2,18],47:[2,18],52:[2,18],54:[2,18],56:[2,18]},{19:[1,64]},{19:[1,65],23:66,25:55,27:[1,30],28:31,29:[1,32],32:[1,33],39:[1,35],42:39,43:40,44:[1,41],45:42,46:[1,43],67:[1,44]},{10:[2,42],19:[2,42],43:67,44:[1,41],45:42,46:[1,43],67:[1,44]},{10:[2,43],19:[2,43],44:[2,43],46:[2,43],67:[2,43]},{10:[2,45],19:[2,45],44:[2,45],46:[2,45],67:[2,45]},{10:[2,46],19:[2,46],44:[2,46],46:[2,46],67:[2,46]},{10:[2,47],19:[2,47],44:[2,47],46:[2,47],67:[2,47]},{48:68,50:[1,49],57:48},{23:69,42:39,43:40,44:[1,41],45:42,46:[1,43],67:[1,44]},{30:[1,70]},{49:[1,71],58:[1,72]},{35:[2,53],38:[2,53],49:[2,53],51:[2,53],58:[2,53],62:[2,53],63:[2,53],68:[2,53]},{35:[2,56],38:[2,56],49:[2,56],51:[2,56],58:[2,56],60:[1,73],62:[2,56],63:[2,56],68:[2,56]},{51:[1,74],58:[1,72]},{53:[1,75]},{5:[2,5],10:[2,5],21:[2,5],24:[2,5],40:[2,5],47:[2,5],52:[2,5],54:[2,5],55:[2,5],56:[2,5]},{10:[2,6],21:[2,6],24:[2,6],40:[2,6],47:[2,6],52:[2,6],54:[2,6],56:[2,6]},{5:[2,16],10:[2,16],21:[2,16],24:[2,16],40:[2,16],47:[2,16],52:[2,16],54:[2,16],56:[2,16]},{19:[2,25],27:[2,25],29:[2,25],32:[2,25],39:[2,25],44:[2,25],46:[2,25],67:[2,25]},{19:[2,39],27:[2,39],29:[2,39],32:[2,39],39:[2,39],44:[2,39],46:[2,39],67:[2,39]},{31:[1,76]},{31:[1,77]},{29:[1,61],32:[1,62],35:[1,78],36:79},{29:[2,34],32:[2,34],35:[2,34]},{30:[1,80]},{30:[1,81]},{5:[2,20],10:[2,20],21:[2,20],24:[2,20],40:[2,20],47:[2,20],52:[2,20],54:[2,20],56:[2,20]},{5:[2,19],10:[2,19],21:[2,19],24:[2,19],40:[2,19],47:[2,19],52:[2,19],54:[2,19],56:[2,19]},{5:[2,21],7:82,8:[1,12],10:[2,21],21:[2,21],24:[2,21],40:[2,21],47:[2,21],52:[2,21],54:[2,21],56:[2,21]},{19:[1,83]},{10:[2,44],19:[2,44],44:[2,44],46:[2,44],67:[2,44]},{58:[1,72],68:[1,84]},{10:[1,85]},{48:86,50:[1,49],57:48},{50:[1,87]},{50:[1,90],57:88,59:89,64:91},{48:93,50:[1,49],57:48,61:[1,92],63:[1,94]},{7:95,8:[1,12]},{48:96,50:[1,49],57:48},{19:[2,30],27:[2,30],29:[2,30],32:[2,30],39:[2,30],44:[2,30],46:[2,30],67:[2,30]},{19:[2,31],27:[2,31],29:[2,31],32:[2,31],39:[2,31],44:[2,31],46:[2,31],67:[2,31]},{19:[2,32],27:[2,32],29:[2,32],32:[2,32],39:[2,32],44:[2,32],46:[2,32],67:[2,32]},{29:[2,33],32:[2,33],35:[2,33]},{37:[1,97]},{37:[1,98]},{5:[2,23],10:[2,23],21:[2,23],24:[2,23],40:[2,23],47:[2,23],52:[2,23],54:[2,23],56:[2,23]},{5:[2,22],10:[2,22],21:[2,22],24:[2,22],40:[2,22],47:[2,22],52:[2,22],54:[2,22],56:[2,22]},{10:[2,74],19:[2,74],44:[2,74],46:[2,74],67:[2,74]},{5:[2,41],10:[2,41],21:[2,41],24:[2,41],40:[2,41],47:[2,41],52:[2,41],54:[2,41],56:[2,41]},{51:[1,99],58:[1,72]},{51:[1,100]},{35:[2,54],38:[2,54],49:[2,54],51:[2,54],58:[2,54],62:[2,54],63:[2,54],68:[2,54]},{35:[2,55],38:[2,55],49:[2,55],51:[2,55],58:[1,101],62:[2,55],63:[2,55],68:[2,55]},{33:[1,102],35:[2,56],38:[2,56],49:[2,56],51:[2,56],58:[2,56],60:[1,73],62:[2,56],63:[2,56],68:[2,56]},{35:[2,65],38:[2,65],49:[2,65],51:[2,65],58:[2,65],62:[2,65],63:[2,65],68:[2,65]},{62:[1,103],63:[1,104]},{58:[1,72],62:[1,105],63:[1,106]},{61:[1,107]},{5:[2,50],10:[2,50],21:[2,50],24:[2,50],40:[2,50],47:[2,50],52:[2,50],54:[2,50],55:[1,108],56:[2,50]},{51:[1,109],58:[1,72]},{29:[2,35],32:[2,35],35:[2,35],38:[1,110]},{29:[2,37],32:[2,37],35:[2,37],38:[1,111]},{5:[2,52],10:[2,52],21:[2,52],24:[2,52],40:[2,52],47:[2,52],52:[2,52],54:[2,52],56:[2,52]},{7:112,8:[1,12]},{50:[1,114],64:113},{35:[1,115],37:[1,120],48:118,50:[1,49],57:48,61:[1,119],65:116,66:117},{35:[2,57],38:[2,57],49:[2,57],51:[2,57],58:[2,57],62:[2,57],63:[2,57],68:[2,57]},{48:122,50:[1,49],57:48,61:[1,121],62:[1,123]},{35:[2,60],38:[2,60],49:[2,60],51:[2,60],58:[2,60],62:[2,60],63:[2,60],68:[2,60]},{48:125,50:[1,49],57:48,61:[1,124]},{62:[1,126]},{51:[1,127]},{7:128,8:[1,12]},{29:[2,36],32:[2,36],35:[2,36]},{29:[2,38],32:[2,38],35:[2,38]},{5:[2,48],10:[2,48],21:[2,48],24:[2,48],40:[2,48],47:[2,48],52:[2,48],54:[2,48],56:[2,48]},{35:[2,66],38:[2,66],49:[2,66],51:[2,66],58:[2,66],62:[2,66],63:[2,66],68:[2,66]},{33:[1,102]},{35:[2,67],38:[2,67],49:[2,67],51:[2,67],58:[2,67],62:[2,67],63:[2,67],68:[2,67]},{35:[1,129],38:[1,130]},{35:[2,70],38:[2,70]},{35:[2,71],38:[2,71],58:[1,72]},{35:[2,72],38:[2,72]},{35:[2,73],38:[2,73]},{62:[1,131]},{58:[1,72],62:[1,132]},{35:[2,64],38:[2,64],49:[2,64],51:[2,64],58:[2,64],62:[2,64],63:[2,64],68:[2,64]},{62:[1,133]},{58:[1,72],62:[1,134]},{35:[2,63],38:[2,63],49:[2,63],51:[2,63],58:[2,63],62:[2,63],63:[2,63],68:[2,63]},{7:135,8:[1,12]},{5:[2,49],10:[2,49],21:[2,49],24:[2,49],40:[2,49],47:[2,49],52:[2,49],54:[2,49],56:[2,49]},{35:[2,68],38:[2,68],49:[2,68],51:[2,68],58:[2,68],62:[2,68],63:[2,68],68:[2,68]},{37:[1,120],48:118,50:[1,49],57:48,61:[1,119],66:136},{35:[2,58],38:[2,58],49:[2,58],51:[2,58],58:[2,58],62:[2,58],63:[2,58],68:[2,58]},{35:[2,59],38:[2,59],49:[2,59],51:[2,59],58:[2,59],62:[2,59],63:[2,59],68:[2,59]},{35:[2,61],38:[2,61],49:[2,61],51:[2,61],58:[2,61],62:[2,61],63:[2,61],68:[2,61]},{35:[2,62],38:[2,62],49:[2,62],51:[2,62],58:[2,62],62:[2,62],63:[2,62],68:[2,62]},{5:[2,51],10:[2,51],21:[2,51],24:[2,51],40:[2,51],47:[2,51],52:[2,51],54:[2,51],56:[2,51]},{35:[2,69],38:[2,69]}],
defaultActions: {22:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function Location(start, end) {
  this.start = { line: start.first_line, column: start.first_column };
  this.end = { line: end.last_line, column: end.last_column };
}

/* AST nodes */

function VoidTagNode(tag, attrs, loc) {
  this.type = "VoidTag";
  this.tag = tag;
  this.attrs = attrs;
  this.loc = loc;
}

function TagNode(tag, attrs, text, block, loc) {
  this.type = "Tag";
  this.tag = tag;
  this.attrs = attrs;
  this.body = text ? [text] : block;
  this.loc = loc;
}

function TextNode(words, loc) {
  this.type = "Text";
  this.loc = loc;

  var w = words, t = [], s = [], i = 0; 

  while (typeof w[i] !== "undefined") {
    if (typeof w[i] === "string") {
      s.push(w[i]);
    } else {
      if (s.length) {
        t.push(s.join(' '));
        s = [];
      }
      t.push(w[i]);
    }
    i++;
  }
  if (s.length) {
    t.push(s.join(' '));
  }

  this.body = t;
}

function NameNode(path, loc) {
  this.type = "Name";
  this.body = path;
  this.loc = loc;
}

function WithNode(path, id, body, loc) {
  this.type = "With";
  this.path = path;
  this.id = id;
  this.body = body;
  this.loc = loc;
}

function IdNode(id, start, end, loc) {
  this.type = "Id";
  this.id = id;
  this.start = start;
  this.end = end;
  this.loc = loc;
}

function PathNode(component, loc) {
  this.type = "Path";
  this.components = [ createPathComponent(component) ];
  this.methods = [];
  this.loc = loc;
}

function createPathComponent(c) {
  var comp = [c.id];
  if (c.start !== null) comp.push(c.start);
  if (c.end !== null) comp.push(c.end);
  return comp;
}

function updatePathNode(node, component, methods, loc) {
  if (component !== null) {
    node.components.push(createPathComponent(component));
  }
  if (methods !== null) {
    node.methods = methods;
  }
  if (loc.end.line > node.loc.end.line || loc.end.column > node.loc.end.column) {
    node.loc.end = loc.end;
  }
  return node;
}

function MethodNode(name, args, loc) {
  this.type = "Method";
  this.name = name;
  this.args = args;
  this.loc = loc;
}

function MethodChainNode(method, loc) {
  this.type = "MethodChain";
  this.chain = [method];
  this.loc = loc;
}

function ForNode(id, path, body, loc) {
  this.type = "For";
  this.id = id;
  this.path = path;
  this.body = body;
  this.loc = loc;
}

function IfNode(path, body, else_body, loc) {
  this.type = "If";
  this.path = path;
  this.body = body;
  this.else_body = else_body;
  this.loc = loc;
}

function AliasNode(id, path, loc) {
  this.type = "Alias";
  this.id = id;
  this.path = path;
  this.loc = loc;
}

function FilterNode(filter, body, loc) {
  this.type = "Filter";
  this.body = [body];
  this.loc = loc;
}

/* expose AST constructors to parser */

parser.ast = {};
parser.ast.Location = Location;
parser.ast.TagNode = TagNode;
parser.ast.VoidTagNode = VoidTagNode;
parser.ast.TextNode = TextNode;
parser.ast.NameNode = NameNode;
parser.ast.WithNode = WithNode;
parser.ast.IdNode = IdNode;
parser.ast.PathNode = PathNode;
parser.ast.createPathComponent = createPathComponent;
parser.ast.updatePathNode = updatePathNode;
parser.ast.MethodNode = MethodNode;
parser.ast.MethodChainNode = MethodChainNode;
parser.ast.ForNode = ForNode;
parser.ast.IfNode = IfNode;
parser.ast.AliasNode = AliasNode;
parser.ast.FilterNode = FilterNode;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

  function strip(start, end) {
    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.pushState("comment"); /* ignore */ 
break;
case 1:this.popState(); /* ignore */ 
break;
case 2:/* ignore */
break;
case 3:/* ignore */
break;
case 4:this.pushState("expr"); return "FOR";
break;
case 5:this.pushState("expr"); return "IF";
break;
case 6:this.pushState("expr"); return "ELSE";
break;
case 7:this.pushState("expr"); return "ALIAS";
break;
case 8:this.pushState("expr"); return "WITH";
break;
case 9:this.popState(); return "END_EXPR";
break;
case 10:return "IN";
break;
case 11:return "EQ";
break;
case 12:return "AS";
break;
case 13:this.pushState("tag"); return "VOID_TAG";
break;
case 14:this.pushState("tag"); return "TAG";
break;
case 15:this.popState(); return "END_TAG";
break;
case 16:yy_.yytext = yy_.yytext.slice(1); return "TAG_ID";
break;
case 17:yy_.yytext = yy_.yytext.slice(1); return "TAG_CLASS";
break;
case 18:this.pushState("tagargs"); return "LPAREN";
break;
case 19:this.popState(); return "RPAREN";
break;
case 20:/* ignore */
break;
case 21:/* ignore */
break;
case 22:return "EQ";
break;
case 23:return "COMMA";
break;
case 24:return "TAG_ATTR";
break;
case 25:yy_.yytext = "data-" + yy_.yytext.slice(1); return "TAG_DATA_ATTR";
break;
case 26:this.pushState("filter"); yy_.yytext = yy_.yytext.slice(1); return "FILTER";
break;
case 27:this.pushState("name"); return "START_NAME";
break;
case 28:this.popState(); return "RBRACE"
break;
case 29:return "ID";
break;
case 30:return "DOT";
break;
case 31:return "LPAREN";
break;
case 32:return "RPAREN";
break;
case 33:return "LBRACK";
break;
case 34:return "RBRACK";
break;
case 35:return "COLON"; 
break;
case 36:return "COMMA";
break;
case 37:return "INT";
break;
case 38:yy_.yytext = strip(1,2).replace(/\\"/g, '"'); return "STRING";
break;
case 39:return "WORD";
break;
case 40:return 5;
break;
case 41:
  var tokens = [];
  while (0 < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }
  if (tokens.length) {
    return tokens;
  }

break;
case 42:
  var tokens = [];
  while (_filter_indent_level >= _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }
  if (tokens.length) {
    return tokens;
  }

break;
case 43:/* eat blank lines */
break;
case 44:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;
  if (indentation > _indent_stack[0]) {
    _indent_stack.unshift(indentation);
    return "INDENT";
  }
  var tokens = [];
  while (indentation < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }
  if (tokens.length) return tokens;

break;
case 45:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (typeof _filter_indent_level === "undefined") {
    _filter_indent_level = indentation;
    return "FILTER_START";
  } else if (indentation < _filter_indent_level) {
    _filter_indent_level = undefined;
    this.popState();
    return "DEDENT";
  } 
  /* else ignore */

break;
case 46:/* ignore all other whitespace */
break;
}
},
rules: [/^(?:""")/,/^(?:""")/,/^(?:.+)/,/^(?:\n)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:alias\b)/,/^(?:with\b)/,/^(?:(?=\n))/,/^(?:in\b)/,/^(?:=)/,/^(?:as\b)/,/^(?:((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)))/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:(?=\n))/,/^(?:(#[a-zA-Z][a-zA-Z0-9\-\:_]*))/,/^(?:(\.-?[_a-zA-Z]+[_a-zA-Z0-9\-]*(?=["."\s\n])))/,/^(?:\()/,/^(?:\))/,/^(?:\s)/,/^(?:\n)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z][a-zA-Z0-9\-_]*(?==)))/,/^(?:(\*[a-zA-Z][a-zA-Z0-9\-]*(?==)))/,/^(?::(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\{)/,/^(?:\})/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:(\+|-)?(0|[1-9][0-9]*))/,/^(?:(('(\\'|[^"'"])*')|("(\\"|[^'"'])*")))/,/^(?:([^\s\n\{][^\s\n\{]*))/,/^(?:$)/,/^(?:\s*$)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"comment":{"rules":[1,2,3,40,43,46],"inclusive":true},"tag":{"rules":[15,16,17,18,27,39,40,43,46],"inclusive":true},"tagargs":{"rules":[19,20,21,22,23,24,25,38,40,43,46],"inclusive":true},"filter":{"rules":[27,39,40,42,43,45,46],"inclusive":true},"expr":{"rules":[9,10,11,12,29,30,31,32,33,34,35,36,37,38,40,43,46],"inclusive":true},"name":{"rules":[28,29,30,31,32,33,34,35,36,37,38,40,43,46],"inclusive":true},"INITIAL":{"rules":[0,4,5,6,7,8,13,14,26,27,39,40,41,43,44,46],"inclusive":true}}
};
_indent_stack = [0];
_filter_indent_level = undefined;;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = manana_parser;
exports.Parser = manana_parser.Parser;
exports.parse = function () { return manana_parser.parse.apply(manana_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}