/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var manana_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"prog_list":4,"EOF":5,"stmt":6,"block":7,"INDENT":8,"stmt_list":9,"DEDENT":10,"html_stmt":11,"void_tag_stmt":12,"tag_stmt":13,"filter_stmt":14,"alias_stmt":15,"include_stmt":16,"with_stmt":17,"if_stmt":18,"for_stmt":19,"name":20,"fn":21,"HTML":22,"void_tag":23,"END_TAG":24,"tag_attrs":25,"VOID_TAG":26,"tag":27,"text":28,"TAG":29,"tag_attr":30,"tag_attr_args":31,"TAG_ID":32,"TAG_SRC":33,"tag_classes":34,"TAG_ATTR":35,"EQ":36,"string":37,"TAG_DATA_ATTR":38,"LPAREN":39,"tag_attr_arg_list":40,"RPAREN":41,"LBRACE":42,"tag_attr_arg_list_alt":43,"RBRACE":44,"tag_attr_arg":45,"COMMA":46,"tag_attr_arg_alt":47,"COLON":48,"TAG_CLASS":49,"FILTER":50,"FILTER_START":51,"word_list":52,"word":53,"WORD":54,"SPACE":55,"WITH":56,"path_or_fn":57,"AS":58,"ID":59,"END_EXPR":60,"path":61,"FOR":62,"IN":63,"IF":64,"ev":65,"ELSE":66,"NOT":67,"COND":68,"IS":69,"TYPE":70,"EXISTS":71,"INT":72,"BOOL":73,"ALIAS":74,"INCLUDE":75,"id":76,"DOT":77,"meths":78,"LBRACK":79,"RBRACK":80,"meth":81,"meth_args":82,"meth_arg":83,"FN":84,"fn_args":85,"fn_arg":86,"hash":87,"hash_data":88,"hash_pair":89,"hash_val":90,"START_NAME":91,"STRING":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",10:"DEDENT",22:"HTML",24:"END_TAG",26:"VOID_TAG",29:"TAG",32:"TAG_ID",33:"TAG_SRC",35:"TAG_ATTR",36:"EQ",38:"TAG_DATA_ATTR",39:"LPAREN",41:"RPAREN",42:"LBRACE",44:"RBRACE",46:"COMMA",48:"COLON",49:"TAG_CLASS",50:"FILTER",51:"FILTER_START",54:"WORD",55:"SPACE",56:"WITH",58:"AS",59:"ID",60:"END_EXPR",62:"FOR",63:"IN",64:"IF",66:"ELSE",67:"NOT",68:"COND",69:"IS",70:"TYPE",71:"EXISTS",72:"INT",73:"BOOL",74:"ALIAS",75:"INCLUDE",77:"DOT",79:"LBRACK",80:"RBRACK",84:"FN",91:"START_NAME",92:"STRING"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,3],[9,2],[9,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,1],[12,2],[12,3],[23,1],[13,2],[13,3],[13,3],[13,3],[13,4],[13,4],[27,1],[25,2],[25,1],[25,1],[30,1],[30,1],[30,1],[30,3],[30,3],[31,3],[31,3],[40,2],[40,1],[45,3],[45,4],[45,3],[45,4],[43,2],[43,1],[47,3],[47,4],[47,3],[47,4],[34,2],[34,1],[14,4],[28,1],[52,1],[52,2],[53,1],[53,1],[53,1],[53,1],[53,1],[17,6],[57,1],[57,1],[19,6],[18,4],[18,7],[18,5],[18,8],[18,6],[18,9],[18,6],[18,9],[18,7],[18,10],[18,5],[18,8],[65,1],[65,1],[65,1],[65,1],[65,1],[15,5],[16,3],[16,3],[61,1],[61,3],[61,3],[76,1],[76,4],[76,6],[76,6],[76,4],[76,6],[76,6],[76,5],[76,5],[78,1],[78,3],[81,3],[81,4],[82,3],[82,1],[83,1],[83,1],[83,1],[21,3],[21,4],[85,3],[85,1],[86,1],[86,1],[86,1],[86,1],[86,1],[87,3],[87,4],[88,3],[88,1],[89,3],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[20,3],[37,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0-1]; 
break;
case 6: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = [$$[$0]]; 
break;
case 19: this.$ = new HtmlNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 20: this.$ = new VoidTagNode($$[$0-1], null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 21: this.$ = new VoidTagNode($$[$0-2], $$[$0-1],   new Loc(_$[$0-2], _$[$0-1])); 
break;
case 22: this.$ = $$[$0]; 
break;
case 23: this.$ = new TagNode($$[$0-1], null, null, null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 24: this.$ = new TagNode($$[$0-2], null, $$[$0-1],   null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 25: this.$ = new TagNode($$[$0-2], null, null, $$[$0],   new Loc(_$[$0-2], _$[$0])); 
break;
case 26: this.$ = new TagNode($$[$0-2], $$[$0-1],   null, null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 27: this.$ = new TagNode($$[$0-3], $$[$0-2],   $$[$0-1],   null, new Loc(_$[$0-3], _$[$0-1])); 
break;
case 28: this.$ = new TagNode($$[$0-3], $$[$0-2],   null, $$[$0],   new Loc(_$[$0-3], _$[$0])); 
break;
case 29: this.$ = $$[$0]; 
break;
case 30: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 31: this.$ = [$$[$0]]; 
break;
case 32: this.$ = $$[$0]; 
break;
case 33: this.$ = ['id', $$[$0]]; 
break;
case 34: this.$ = ['src', $$[$0]]; 
break;
case 35: this.$ = ['class', $$[$0].join(" ")]; 
break;
case 36: this.$ = ['attr', $$[$0-2], $$[$0]]; 
break;
case 37: this.$ = ['data', $$[$0-2], $$[$0]]; 
break;
case 38: this.$ = $$[$0-1]; 
break;
case 39: this.$ = $$[$0-1]; 
break;
case 40: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 41: this.$ = [$$[$0]]; 
break;
case 42: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 43: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 44: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 45: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 46: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 47: this.$ = [$$[$0]]; 
break;
case 48: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 49: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 50: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 51: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 52: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 53: this.$ = [$$[$0]]; 
break;
case 54: this.$ = new FilterNode($$[$0-3], $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 55: this.$ = new TextNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 56: this.$ = [$$[$0]]; 
break;
case 57: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 63: this.$ = new WithNode($$[$0-4], $$[$0-2], $$[$0], new Loc(_$[$0-5], _$[$0])); 
break;
case 66: this.$ = new ForNode($$[$0-4], $$[$0-2], $$[$0] , new Loc(_$[$0-5], _$[$0])) ; 
break;
case 67: this.$ = new IfNode("true", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-3], _$[$0])); 
break;
case 68: this.$ = new IfNode("true", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-6], _$[$0])); 
break;
case 69: this.$ = new IfNode("false", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-4], _$[$0])); 
break;
case 70: this.$ = new IfNode("false", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-7], _$[$0])); 
break;
case 71: this.$ = new IfNode($$[$0-3], $$[$0-4], $$[$0-2], $$[$0], null, new Loc(_$[$0-5], _$[$0])); 
break;
case 72: this.$ = new IfNode($$[$0-6], $$[$0-7], $$[$0-5], $$[$0-3], $$[$0], new Loc(_$[$0-8], _$[$0])); 
break;
case 73: this.$ = new IfNode($$[$0-3], $$[$0-4], $$[$0-2], $$[$0], null, new Loc(_$[$0-5], _$[$0])); 
break;
case 74: this.$ = new IfNode($$[$0-6], $$[$0-7], $$[$0-5], $$[$0-3], null, new Loc(_$[$0-8], _$[$0])); 
break;
case 75: this.$ = new IfNode("is not", $$[$0-5], $$[$0-2], $$[$0], null, new Loc(_$[$0-6], _$[$0])); 
break;
case 76: this.$ = new IfNode("is not", $$[$0-8], $$[$0-5], $$[$0-3], $$[$0], new Loc(_$[$0-9], _$[$0])); 
break;
case 77: this.$ = new IfNode("exists", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-4], _$[$0])); 
break;
case 78: this.$ = new IfNode("exists", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-7], _$[$0])); 
break;
case 84: this.$ = new AliasNode($$[$0-3], $$[$0-1], new Loc(_$[$0-4], _$[$0])); 
break;
case 85: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 86: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 87: this.$ = new PathNode(null, $$[$0]  , null, new Loc(_$[$0], _$[$0])); 
break;
case 88: this.$ = new PathNode($$[$0-2]  , $$[$0]  , null, new Loc(_$[$0-2], _$[$0])); 
break;
case 89: this.$ = new PathNode($$[$0-2]  , null, $$[$0]  , new Loc(_$[$0-2], _$[$0])); 
break;
case 90: this.$ = new IdNode($$[$0], null, null, new Loc(_$[$0], _$[$0])); 
break;
case 91: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 92: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 93: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 94: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 95: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 96: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 97: this.$ = new IdNode($$[$0-4], 0   , $$[$0-1]  , new Loc(_$[$0-4], _$[$0])); 
break;
case 98: this.$ = new IdNode($$[$0-4], $$[$0-2]  , '*' , new Loc(_$[$0-4], _$[$0])); 
break;
case 99: this.$ = new MethodChainNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 100: this.$ = $$[$0-2]; this.$.chain.push($$[$0])                        ; 
break;
case 101: this.$ = new MethodNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 102: this.$ = new MethodNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 103: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 104: this.$ = [$$[$0]]; 
break;
case 108: this.$ = new FunctionNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 109: this.$ = new FunctionNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 110: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 111: this.$ = [$$[$0]]; 
break;
case 117: this.$ = new MananaHash($$[$0-1]); console.log(this.$); 
break;
case 118: this.$ = new MananaHash($$[$0-2]); console.log(this.$); 
break;
case 119: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 120: this.$ = [$$[$0]]; 
break;
case 121: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 128: this.$ = $$[$0-1]; 
break;
case 129: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,16],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:[1,17],23:18,26:[1,28],27:19,29:[1,29],50:[1,20],56:[1,23],62:[1,25],64:[1,24],74:[1,21],75:[1,22],84:[1,27],91:[1,26]},{1:[3]},{5:[1,30],6:31,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:[1,17],23:18,26:[1,28],27:19,29:[1,29],50:[1,20],56:[1,23],62:[1,25],64:[1,24],74:[1,21],75:[1,22],84:[1,27],91:[1,26]},{5:[2,3],22:[2,3],26:[2,3],29:[2,3],50:[2,3],56:[2,3],62:[2,3],64:[2,3],74:[2,3],75:[2,3],84:[2,3],91:[2,3]},{5:[2,4],22:[2,4],26:[2,4],29:[2,4],50:[2,4],56:[2,4],62:[2,4],64:[2,4],74:[2,4],75:[2,4],84:[2,4],91:[2,4]},{5:[2,8],10:[2,8],22:[2,8],26:[2,8],29:[2,8],50:[2,8],56:[2,8],62:[2,8],64:[2,8],74:[2,8],75:[2,8],84:[2,8],91:[2,8]},{5:[2,9],10:[2,9],22:[2,9],26:[2,9],29:[2,9],50:[2,9],56:[2,9],62:[2,9],64:[2,9],74:[2,9],75:[2,9],84:[2,9],91:[2,9]},{5:[2,10],10:[2,10],22:[2,10],26:[2,10],29:[2,10],50:[2,10],56:[2,10],62:[2,10],64:[2,10],74:[2,10],75:[2,10],84:[2,10],91:[2,10]},{5:[2,11],10:[2,11],22:[2,11],26:[2,11],29:[2,11],50:[2,11],56:[2,11],62:[2,11],64:[2,11],74:[2,11],75:[2,11],84:[2,11],91:[2,11]},{5:[2,12],10:[2,12],22:[2,12],26:[2,12],29:[2,12],50:[2,12],56:[2,12],62:[2,12],64:[2,12],74:[2,12],75:[2,12],84:[2,12],91:[2,12]},{5:[2,13],10:[2,13],22:[2,13],26:[2,13],29:[2,13],50:[2,13],56:[2,13],62:[2,13],64:[2,13],74:[2,13],75:[2,13],84:[2,13],91:[2,13]},{5:[2,14],10:[2,14],22:[2,14],26:[2,14],29:[2,14],50:[2,14],56:[2,14],62:[2,14],64:[2,14],74:[2,14],75:[2,14],84:[2,14],91:[2,14]},{5:[2,15],10:[2,15],22:[2,15],26:[2,15],29:[2,15],50:[2,15],56:[2,15],62:[2,15],64:[2,15],74:[2,15],75:[2,15],84:[2,15],91:[2,15]},{5:[2,16],10:[2,16],22:[2,16],26:[2,16],29:[2,16],50:[2,16],56:[2,16],62:[2,16],64:[2,16],74:[2,16],75:[2,16],84:[2,16],91:[2,16]},{5:[2,17],10:[2,17],22:[2,17],26:[2,17],29:[2,17],50:[2,17],56:[2,17],62:[2,17],64:[2,17],74:[2,17],75:[2,17],84:[2,17],91:[2,17]},{5:[2,18],10:[2,18],22:[2,18],26:[2,18],29:[2,18],50:[2,18],56:[2,18],62:[2,18],64:[2,18],74:[2,18],75:[2,18],84:[2,18],91:[2,18]},{6:33,9:32,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:[1,17],23:18,26:[1,28],27:19,29:[1,29],50:[1,20],56:[1,23],62:[1,25],64:[1,24],74:[1,21],75:[1,22],84:[1,27],91:[1,26]},{5:[2,19],10:[2,19],22:[2,19],26:[2,19],29:[2,19],50:[2,19],56:[2,19],62:[2,19],64:[2,19],74:[2,19],75:[2,19],84:[2,19],91:[2,19]},{24:[1,34],25:35,30:36,31:37,32:[1,38],33:[1,39],34:40,35:[1,41],38:[1,42],39:[1,43],42:[1,44],49:[1,45]},{20:52,21:53,24:[1,46],25:48,28:47,30:36,31:37,32:[1,38],33:[1,39],34:40,35:[1,41],37:54,38:[1,42],39:[1,43],42:[1,44],49:[1,45],52:49,53:50,54:[1,51],55:[1,55],84:[1,27],91:[1,26],92:[1,56]},{51:[1,57]},{59:[1,60],61:58,76:59},{37:61,59:[1,60],61:62,76:59,92:[1,56]},{21:65,57:63,59:[1,60],61:64,76:59,84:[1,27]},{21:73,37:69,59:[1,60],61:72,65:66,67:[1,67],71:[1,68],72:[1,70],73:[1,71],76:59,84:[1,27],92:[1,56]},{59:[1,74]},{59:[1,60],61:75,76:59},{39:[1,76]},{24:[2,22],32:[2,22],33:[2,22],35:[2,22],38:[2,22],39:[2,22],42:[2,22],49:[2,22]},{24:[2,29],32:[2,29],33:[2,29],35:[2,29],38:[2,29],39:[2,29],42:[2,29],49:[2,29],54:[2,29],55:[2,29],84:[2,29],91:[2,29],92:[2,29]},{1:[2,1]},{5:[2,2],22:[2,2],26:[2,2],29:[2,2],50:[2,2],56:[2,2],62:[2,2],64:[2,2],74:[2,2],75:[2,2],84:[2,2],91:[2,2]},{6:78,10:[1,77],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:[1,17],23:18,26:[1,28],27:19,29:[1,29],50:[1,20],56:[1,23],62:[1,25],64:[1,24],74:[1,21],75:[1,22],84:[1,27],91:[1,26]},{10:[2,7],22:[2,7],26:[2,7],29:[2,7],50:[2,7],56:[2,7],62:[2,7],64:[2,7],74:[2,7],75:[2,7],84:[2,7],91:[2,7]},{5:[2,20],10:[2,20],22:[2,20],26:[2,20],29:[2,20],50:[2,20],56:[2,20],62:[2,20],64:[2,20],74:[2,20],75:[2,20],84:[2,20],91:[2,20]},{24:[1,79],30:80,32:[1,38],33:[1,39],34:40,35:[1,41],38:[1,42],49:[1,45]},{24:[2,31],32:[2,31],33:[2,31],35:[2,31],38:[2,31],49:[2,31],54:[2,31],55:[2,31],84:[2,31],91:[2,31],92:[2,31]},{24:[2,32],32:[2,32],33:[2,32],35:[2,32],38:[2,32],49:[2,32],54:[2,32],55:[2,32],84:[2,32],91:[2,32],92:[2,32]},{24:[2,33],32:[2,33],33:[2,33],35:[2,33],38:[2,33],49:[2,33],54:[2,33],55:[2,33],84:[2,33],91:[2,33],92:[2,33]},{24:[2,34],32:[2,34],33:[2,34],35:[2,34],38:[2,34],49:[2,34],54:[2,34],55:[2,34],84:[2,34],91:[2,34],92:[2,34]},{24:[2,35],32:[2,35],33:[2,35],35:[2,35],38:[2,35],49:[1,81],54:[2,35],55:[2,35],84:[2,35],91:[2,35],92:[2,35]},{36:[1,82]},{36:[1,83]},{35:[1,86],38:[1,87],40:84,45:85},{35:[1,90],38:[1,91],43:88,47:89},{24:[2,53],32:[2,53],33:[2,53],35:[2,53],38:[2,53],49:[2,53],54:[2,53],55:[2,53],84:[2,53],91:[2,53],92:[2,53]},{5:[2,23],7:92,8:[1,16],10:[2,23],22:[2,23],26:[2,23],29:[2,23],50:[2,23],56:[2,23],62:[2,23],64:[2,23],74:[2,23],75:[2,23],84:[2,23],91:[2,23]},{24:[1,93]},{20:52,21:53,24:[1,94],28:95,30:80,32:[1,38],33:[1,39],34:40,35:[1,41],37:54,38:[1,42],49:[1,45],52:49,53:50,54:[1,51],55:[1,55],84:[1,27],91:[1,26],92:[1,56]},{10:[2,55],20:52,21:53,24:[2,55],37:54,53:96,54:[1,51],55:[1,55],84:[1,27],91:[1,26],92:[1,56]},{10:[2,56],24:[2,56],54:[2,56],55:[2,56],84:[2,56],91:[2,56],92:[2,56]},{10:[2,58],24:[2,58],54:[2,58],55:[2,58],84:[2,58],91:[2,58],92:[2,58]},{10:[2,59],24:[2,59],54:[2,59],55:[2,59],84:[2,59],91:[2,59],92:[2,59]},{10:[2,60],24:[2,60],54:[2,60],55:[2,60],84:[2,60],91:[2,60],92:[2,60]},{10:[2,61],24:[2,61],54:[2,61],55:[2,61],84:[2,61],91:[2,61],92:[2,61]},{10:[2,62],24:[2,62],54:[2,62],55:[2,62],84:[2,62],91:[2,62],92:[2,62]},{10:[2,129],24:[2,129],32:[2,129],33:[2,129],35:[2,129],38:[2,129],41:[2,129],44:[2,129],46:[2,129],49:[2,129],54:[2,129],55:[2,129],60:[2,129],68:[2,129],69:[2,129],84:[2,129],91:[2,129],92:[2,129]},{20:52,21:53,28:97,37:54,52:49,53:50,54:[1,51],55:[1,55],84:[1,27],91:[1,26],92:[1,56]},{58:[1,98],77:[1,99]},{41:[2,87],44:[2,87],46:[2,87],48:[2,87],58:[2,87],60:[2,87],68:[2,87],69:[2,87],77:[2,87],80:[2,87]},{41:[2,90],44:[2,90],46:[2,90],48:[2,90],58:[2,90],60:[2,90],68:[2,90],69:[2,90],77:[2,90],79:[1,100],80:[2,90]},{60:[1,101]},{60:[1,102],77:[1,99]},{58:[1,103]},{58:[2,64],77:[1,99]},{58:[2,65]},{60:[1,104],68:[1,105],69:[1,106]},{21:73,37:69,59:[1,60],61:72,65:107,72:[1,70],73:[1,71],76:59,84:[1,27],92:[1,56]},{21:73,37:69,59:[1,60],61:72,65:108,72:[1,70],73:[1,71],76:59,84:[1,27],92:[1,56]},{60:[2,79],68:[2,79],69:[2,79]},{60:[2,80],68:[2,80],69:[2,80]},{60:[2,81],68:[2,81],69:[2,81]},{60:[2,82],68:[2,82],69:[2,82],77:[1,99]},{60:[2,83],68:[2,83],69:[2,83]},{63:[1,109]},{44:[1,110],77:[1,99]},{21:117,37:116,41:[1,111],42:[1,119],59:[1,60],61:114,72:[1,115],76:59,84:[1,27],85:112,86:113,87:118,92:[1,56]},{5:[2,5],10:[2,5],22:[2,5],26:[2,5],29:[2,5],50:[2,5],56:[2,5],62:[2,5],64:[2,5],66:[2,5],74:[2,5],75:[2,5],84:[2,5],91:[2,5]},{10:[2,6],22:[2,6],26:[2,6],29:[2,6],50:[2,6],56:[2,6],62:[2,6],64:[2,6],74:[2,6],75:[2,6],84:[2,6],91:[2,6]},{5:[2,21],10:[2,21],22:[2,21],26:[2,21],29:[2,21],50:[2,21],56:[2,21],62:[2,21],64:[2,21],74:[2,21],75:[2,21],84:[2,21],91:[2,21]},{24:[2,30],32:[2,30],33:[2,30],35:[2,30],38:[2,30],49:[2,30],54:[2,30],55:[2,30],84:[2,30],91:[2,30],92:[2,30]},{24:[2,52],32:[2,52],33:[2,52],35:[2,52],38:[2,52],49:[2,52],54:[2,52],55:[2,52],84:[2,52],91:[2,52],92:[2,52]},{37:120,92:[1,56]},{37:121,92:[1,56]},{35:[1,86],38:[1,87],41:[1,122],45:123},{35:[2,41],38:[2,41],41:[2,41]},{36:[1,124]},{36:[1,125]},{35:[1,90],38:[1,91],44:[1,126],47:127},{35:[2,47],38:[2,47],44:[2,47]},{48:[1,128]},{48:[1,129]},{5:[2,25],10:[2,25],22:[2,25],26:[2,25],29:[2,25],50:[2,25],56:[2,25],62:[2,25],64:[2,25],74:[2,25],75:[2,25],84:[2,25],91:[2,25]},{5:[2,24],10:[2,24],22:[2,24],26:[2,24],29:[2,24],50:[2,24],56:[2,24],62:[2,24],64:[2,24],74:[2,24],75:[2,24],84:[2,24],91:[2,24]},{5:[2,26],7:130,8:[1,16],10:[2,26],22:[2,26],26:[2,26],29:[2,26],50:[2,26],56:[2,26],62:[2,26],64:[2,26],74:[2,26],75:[2,26],84:[2,26],91:[2,26]},{24:[1,131]},{10:[2,57],24:[2,57],54:[2,57],55:[2,57],84:[2,57],91:[2,57],92:[2,57]},{10:[1,132]},{59:[1,133]},{59:[1,136],76:134,78:135,81:137},{48:[1,140],59:[1,60],61:139,72:[1,138],76:59},{5:[2,85],10:[2,85],22:[2,85],26:[2,85],29:[2,85],50:[2,85],56:[2,85],62:[2,85],64:[2,85],74:[2,85],75:[2,85],84:[2,85],91:[2,85]},{5:[2,86],10:[2,86],22:[2,86],26:[2,86],29:[2,86],50:[2,86],56:[2,86],62:[2,86],64:[2,86],74:[2,86],75:[2,86],84:[2,86],91:[2,86]},{59:[1,141]},{7:142,8:[1,16]},{21:73,37:69,59:[1,60],61:72,65:143,72:[1,70],73:[1,71],76:59,84:[1,27],92:[1,56]},{67:[1,145],70:[1,144]},{60:[1,146]},{60:[1,147]},{59:[1,60],61:148,76:59},{5:[2,128],10:[2,128],22:[2,128],24:[2,128],26:[2,128],29:[2,128],50:[2,128],54:[2,128],55:[2,128],56:[2,128],62:[2,128],64:[2,128],74:[2,128],75:[2,128],84:[2,128],91:[2,128],92:[2,128]},{5:[2,108],10:[2,108],22:[2,108],24:[2,108],26:[2,108],29:[2,108],41:[2,108],44:[2,108],46:[2,108],50:[2,108],54:[2,108],55:[2,108],56:[2,108],58:[2,108],60:[2,108],62:[2,108],64:[2,108],68:[2,108],69:[2,108],74:[2,108],75:[2,108],84:[2,108],91:[2,108],92:[2,108]},{41:[1,149],46:[1,150]},{41:[2,111],46:[2,111]},{41:[2,112],46:[2,112],77:[1,99]},{41:[2,113],46:[2,113]},{41:[2,114],46:[2,114]},{41:[2,115],46:[2,115]},{41:[2,116],46:[2,116]},{59:[1,153],88:151,89:152},{24:[2,36],32:[2,36],33:[2,36],35:[2,36],38:[2,36],49:[2,36],54:[2,36],55:[2,36],84:[2,36],91:[2,36],92:[2,36]},{24:[2,37],32:[2,37],33:[2,37],35:[2,37],38:[2,37],49:[2,37],54:[2,37],55:[2,37],84:[2,37],91:[2,37],92:[2,37]},{24:[2,38],32:[2,38],33:[2,38],35:[2,38],38:[2,38],49:[2,38],54:[2,38],55:[2,38],84:[2,38],91:[2,38],92:[2,38]},{35:[2,40],38:[2,40],41:[2,40]},{37:154,92:[1,56]},{37:155,92:[1,56]},{24:[2,39],32:[2,39],33:[2,39],35:[2,39],38:[2,39],49:[2,39],54:[2,39],55:[2,39],84:[2,39],91:[2,39],92:[2,39]},{35:[2,46],38:[2,46],44:[2,46]},{37:156,92:[1,56]},{37:157,92:[1,56]},{5:[2,28],10:[2,28],22:[2,28],26:[2,28],29:[2,28],50:[2,28],56:[2,28],62:[2,28],64:[2,28],74:[2,28],75:[2,28],84:[2,28],91:[2,28]},{5:[2,27],10:[2,27],22:[2,27],26:[2,27],29:[2,27],50:[2,27],56:[2,27],62:[2,27],64:[2,27],74:[2,27],75:[2,27],84:[2,27],91:[2,27]},{5:[2,54],10:[2,54],22:[2,54],26:[2,54],29:[2,54],50:[2,54],56:[2,54],62:[2,54],64:[2,54],74:[2,54],75:[2,54],84:[2,54],91:[2,54]},{60:[1,158]},{41:[2,88],44:[2,88],46:[2,88],48:[2,88],58:[2,88],60:[2,88],68:[2,88],69:[2,88],77:[2,88],80:[2,88]},{41:[2,89],44:[2,89],46:[2,89],48:[2,89],58:[2,89],60:[2,89],68:[2,89],69:[2,89],77:[1,159],80:[2,89]},{39:[1,160],41:[2,90],44:[2,90],46:[2,90],48:[2,90],58:[2,90],60:[2,90],68:[2,90],69:[2,90],77:[2,90],79:[1,100],80:[2,90]},{41:[2,99],44:[2,99],46:[2,99],48:[2,99],58:[2,99],60:[2,99],68:[2,99],69:[2,99],77:[2,99],80:[2,99]},{48:[1,162],80:[1,161]},{48:[1,164],77:[1,99],80:[1,163]},{72:[1,165]},{60:[1,166]},{5:[2,67],10:[2,67],22:[2,67],26:[2,67],29:[2,67],50:[2,67],56:[2,67],62:[2,67],64:[2,67],66:[1,167],74:[2,67],75:[2,67],84:[2,67],91:[2,67]},{60:[1,168]},{60:[1,169]},{70:[1,170]},{7:171,8:[1,16]},{7:172,8:[1,16]},{60:[1,173],77:[1,99]},{5:[2,109],10:[2,109],22:[2,109],24:[2,109],26:[2,109],29:[2,109],41:[2,109],44:[2,109],46:[2,109],50:[2,109],54:[2,109],55:[2,109],56:[2,109],58:[2,109],60:[2,109],62:[2,109],64:[2,109],68:[2,109],69:[2,109],74:[2,109],75:[2,109],84:[2,109],91:[2,109],92:[2,109]},{21:117,37:116,42:[1,119],59:[1,60],61:114,72:[1,115],76:59,84:[1,27],86:174,87:118,92:[1,56]},{44:[1,175],46:[1,176]},{44:[2,120],46:[2,120]},{48:[1,177]},{35:[2,42],38:[2,42],41:[2,42],46:[1,178]},{35:[2,44],38:[2,44],41:[2,44],46:[1,179]},{35:[2,48],38:[2,48],44:[2,48],46:[1,180]},{35:[2,50],38:[2,50],44:[2,50],46:[1,181]},{5:[2,84],10:[2,84],22:[2,84],26:[2,84],29:[2,84],50:[2,84],56:[2,84],62:[2,84],64:[2,84],74:[2,84],75:[2,84],84:[2,84],91:[2,84]},{59:[1,183],81:182},{37:189,41:[1,184],59:[1,60],61:187,72:[1,188],76:59,82:185,83:186,92:[1,56]},{41:[2,91],44:[2,91],46:[2,91],48:[2,91],58:[2,91],60:[2,91],68:[2,91],69:[2,91],77:[2,91],80:[2,91]},{59:[1,60],61:191,72:[1,190],76:59,80:[1,192]},{41:[2,94],44:[2,94],46:[2,94],48:[2,94],58:[2,94],60:[2,94],68:[2,94],69:[2,94],77:[2,94],80:[2,94]},{59:[1,60],61:194,72:[1,193],76:59},{80:[1,195]},{7:196,8:[1,16]},{60:[1,197]},{7:198,8:[1,16]},{7:199,8:[1,16]},{60:[1,200]},{5:[2,69],10:[2,69],22:[2,69],26:[2,69],29:[2,69],50:[2,69],56:[2,69],62:[2,69],64:[2,69],66:[1,201],74:[2,69],75:[2,69],84:[2,69],91:[2,69]},{5:[2,77],10:[2,77],22:[2,77],26:[2,77],29:[2,77],50:[2,77],56:[2,77],62:[2,77],64:[2,77],66:[1,202],74:[2,77],75:[2,77],84:[2,77],91:[2,77]},{7:203,8:[1,16]},{41:[2,110],46:[2,110]},{41:[2,117],44:[2,117],46:[2,117]},{44:[1,204],59:[1,153],89:205},{21:210,37:209,42:[1,119],59:[1,60],61:212,72:[1,207],73:[1,208],76:59,84:[1,27],87:211,90:206,92:[1,56]},{35:[2,43],38:[2,43],41:[2,43]},{35:[2,45],38:[2,45],41:[2,45]},{35:[2,49],38:[2,49],44:[2,49]},{35:[2,51],38:[2,51],44:[2,51]},{41:[2,100],44:[2,100],46:[2,100],48:[2,100],58:[2,100],60:[2,100],68:[2,100],69:[2,100],77:[2,100],80:[2,100]},{39:[1,160]},{41:[2,101],44:[2,101],46:[2,101],48:[2,101],58:[2,101],60:[2,101],68:[2,101],69:[2,101],77:[2,101],80:[2,101]},{41:[1,213],46:[1,214]},{41:[2,104],46:[2,104]},{41:[2,105],46:[2,105],77:[1,99]},{41:[2,106],46:[2,106]},{41:[2,107],46:[2,107]},{80:[1,215]},{77:[1,99],80:[1,216]},{41:[2,98],44:[2,98],46:[2,98],48:[2,98],58:[2,98],60:[2,98],68:[2,98],69:[2,98],77:[2,98],80:[2,98]},{80:[1,217]},{77:[1,99],80:[1,218]},{41:[2,97],44:[2,97],46:[2,97],48:[2,97],58:[2,97],60:[2,97],68:[2,97],69:[2,97],77:[2,97],80:[2,97]},{5:[2,63],10:[2,63],22:[2,63],26:[2,63],29:[2,63],50:[2,63],56:[2,63],62:[2,63],64:[2,63],74:[2,63],75:[2,63],84:[2,63],91:[2,63]},{7:219,8:[1,16]},{5:[2,71],10:[2,71],22:[2,71],26:[2,71],29:[2,71],50:[2,71],56:[2,71],62:[2,71],64:[2,71],66:[1,220],74:[2,71],75:[2,71],84:[2,71],91:[2,71]},{5:[2,73],10:[2,73],22:[2,73],26:[2,73],29:[2,73],50:[2,73],56:[2,73],62:[2,73],64:[2,73],66:[1,221],74:[2,73],75:[2,73],84:[2,73],91:[2,73]},{7:222,8:[1,16]},{60:[1,223]},{60:[1,224]},{5:[2,66],10:[2,66],22:[2,66],26:[2,66],29:[2,66],50:[2,66],56:[2,66],62:[2,66],64:[2,66],74:[2,66],75:[2,66],84:[2,66],91:[2,66]},{41:[2,118],44:[2,118],46:[2,118]},{44:[2,119],46:[2,119]},{44:[2,121],46:[2,121]},{44:[2,122],46:[2,122]},{44:[2,123],46:[2,123]},{44:[2,124],46:[2,124]},{44:[2,125],46:[2,125]},{44:[2,126],46:[2,126]},{44:[2,127],46:[2,127],77:[1,99]},{41:[2,102],44:[2,102],46:[2,102],48:[2,102],58:[2,102],60:[2,102],68:[2,102],69:[2,102],77:[2,102],80:[2,102]},{37:189,59:[1,60],61:187,72:[1,188],76:59,83:225,92:[1,56]},{41:[2,92],44:[2,92],46:[2,92],48:[2,92],58:[2,92],60:[2,92],68:[2,92],69:[2,92],77:[2,92],80:[2,92]},{41:[2,93],44:[2,93],46:[2,93],48:[2,93],58:[2,93],60:[2,93],68:[2,93],69:[2,93],77:[2,93],80:[2,93]},{41:[2,95],44:[2,95],46:[2,95],48:[2,95],58:[2,95],60:[2,95],68:[2,95],69:[2,95],77:[2,95],80:[2,95]},{41:[2,96],44:[2,96],46:[2,96],48:[2,96],58:[2,96],60:[2,96],68:[2,96],69:[2,96],77:[2,96],80:[2,96]},{5:[2,68],10:[2,68],22:[2,68],26:[2,68],29:[2,68],50:[2,68],56:[2,68],62:[2,68],64:[2,68],74:[2,68],75:[2,68],84:[2,68],91:[2,68]},{60:[1,226]},{60:[1,227]},{5:[2,75],10:[2,75],22:[2,75],26:[2,75],29:[2,75],50:[2,75],56:[2,75],62:[2,75],64:[2,75],66:[1,228],74:[2,75],75:[2,75],84:[2,75],91:[2,75]},{7:229,8:[1,16]},{7:230,8:[1,16]},{41:[2,103],46:[2,103]},{7:231,8:[1,16]},{7:232,8:[1,16]},{60:[1,233]},{5:[2,70],10:[2,70],22:[2,70],26:[2,70],29:[2,70],50:[2,70],56:[2,70],62:[2,70],64:[2,70],74:[2,70],75:[2,70],84:[2,70],91:[2,70]},{5:[2,78],10:[2,78],22:[2,78],26:[2,78],29:[2,78],50:[2,78],56:[2,78],62:[2,78],64:[2,78],74:[2,78],75:[2,78],84:[2,78],91:[2,78]},{5:[2,72],10:[2,72],22:[2,72],26:[2,72],29:[2,72],50:[2,72],56:[2,72],62:[2,72],64:[2,72],74:[2,72],75:[2,72],84:[2,72],91:[2,72]},{5:[2,74],10:[2,74],22:[2,74],26:[2,74],29:[2,74],50:[2,74],56:[2,74],62:[2,74],64:[2,74],74:[2,74],75:[2,74],84:[2,74],91:[2,74]},{7:234,8:[1,16]},{5:[2,76],10:[2,76],22:[2,76],26:[2,76],29:[2,76],50:[2,76],56:[2,76],62:[2,76],64:[2,76],74:[2,76],75:[2,76],84:[2,76],91:[2,76]}],
defaultActions: {30:[2,1],65:[2,65]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* tracing/debugging functions */

function Loc(start, end) {
  this.start = { line: start.first_line, column: start.first_column };
  this.end = { line: end.last_line, column: end.last_column };
}

/* Manana data types */

function MananaHash(data, loc) {
  var hash = {}, i = 0;

  while (data[i]) {
    hash[data[i][0]] = data[i][1];
    i++;
  }

  return hash;
}

/* AST nodes */

function HtmlNode(text, loc) {
  this.type = "HTML";
  this.loc = loc;
  this.body = text;
}

function VoidTagNode(tag, attrs, loc) {
  this.type = "VoidTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
}

function TagNode(tag, attrs, text, block, loc) {
  this.type = "Tag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = text ? [text] : block;
}

function TextNode(words, loc) {
  this.type = "Text";
  this.loc = loc;

  var w = words, t = [], s = [], i = 0; 

  while (typeof w[i] !== "undefined") {
    if (typeof w[i] === "string") {
      s.push(w[i]);
    } else {
      if (s.length) {
        t.push(s.join(' '));
        s = [];
      }
      t.push(w[i]);
    }
    i++;
  }
  if (s.length) {
    t.push(s.join(' '));
  }

  this.body = t;
}

function NameNode(path, loc) {
  this.type = "Name";
  this.loc = loc;
  this.body = path;
}

function WithNode(path, id, body, loc) {
  this.type = "With";
  this.loc = loc;
  this.path = path;
  this.id = id;
  this.body = body;
}

function IdNode(id, start, end, loc) {
  this.type = "Id";
  this.loc = loc;
  this.id = id;
  this.start = start;
  this.end = end;
}

function PathNode(path_node, component, methods, loc) {
  var k, c;

  if (path_node === null) {
    this.type = "Path";
    this.loc = loc;
    this.methods = null;
    this.components = [];
  } else {
    for (k in path_node) {
      if (path_node.hasOwnProperty(k)) {
        this[k] = path_node[k];
      }
    }

    if (loc && path_node.loc) {
      if (loc.end.line > path_node.loc.end.line || loc.end.column > path_node.loc.end.column) {
        this.loc.end = loc.end;
      }
    }
  }

  if (component) {
    c = [component.id];
    if (component.start !== null) {
      c.push(component.start);
    }
    if (component.end !== null) {
      c.push(component.end);
    }
    this.components.push(c);
  }

  if (methods !== null) {
    this.methods = methods;
  }
}

function MethodNode(name, args, loc) {
  this.type = "Method";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function MethodChainNode(method, loc) {
  this.type = "MethodChain";
  this.loc = loc;
  this.chain = [method];
}

function FunctionNode(name, args, loc) {
  this.type = "Function";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function ForNode(id, path, body, loc) {
  this.type = "For";
  this.loc = loc;
  this.id = id;
  this.path = path;
  this.body = body;
}

function IfNode(cond, v1, v2, body, else_body, loc) {
  this.type = "If";
  this.loc = loc;
  this.condition = cond;
  this.value_1 = v1;
  this.value_2 = v2;
  this.body = body;
  this.else_body = else_body;
}

function AliasNode(path, id, loc) {
  this.type = "Alias";
  this.loc = loc;
  this.path = path;
  this.id = id;
}

function IncludeNode(path, loc) {
  this.type = "Include";
  this.loc = loc;
  this.path = path;
}

function FilterNode(filter, body, loc) {
  this.type = "Filter";
  this.loc = loc;
  this.body = [body];
}

function MananaStringNode(string, loc) {
  this.type = "MananaString";
  this.loc = loc;

  if (string.indexOf("@{") > -1) {
    this.string = string.split(/(@\{.*?\})/g);
  } else {
    this.string = string;
  }
}

/* expose AST constructors to parser */

parser.ast = {};
parser.ast.Loc = Loc;
parser.ast.MananaStringNode = MananaStringNode;
parser.ast.HtmlNode = HtmlNode;
parser.ast.VoidTagNode = VoidTagNode;
parser.ast.TagNode = TagNode;
parser.ast.TextNode = TextNode;
parser.ast.NameNode = NameNode;
parser.ast.WithNode = WithNode;
parser.ast.IdNode = IdNode;
parser.ast.PathNode = PathNode;
parser.ast.MethodNode = MethodNode;
parser.ast.MethodChainNode = MethodChainNode;
parser.ast.FunctionNode = FunctionNode;
parser.ast.ForNode = ForNode;
parser.ast.IfNode = IfNode;
parser.ast.AliasNode = AliasNode;
parser.ast.IncludeNode = IncludeNode;
parser.ast.FilterNode = FilterNode;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

  function strip(start, end) {
    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.pushState("comment"); /* ignore */ 
break;
case 1:this.popState(); /* ignore */ 
break;
case 2:/* ignore */
break;
case 3:/* ignore */
break;
case 4:return 22;
break;
case 5:this.pushState("expr"); return "FOR";
break;
case 6:this.pushState("expr"); return "IF";
break;
case 7:this.pushState("expr"); return "ELSE";
break;
case 8:this.pushState("expr"); return "ALIAS";
break;
case 9:this.pushState("expr"); return "WITH";
break;
case 10:this.pushState("expr"); return "INCLUDE";
break;
case 11:return "BOOL";
break;
case 12:return "BOOL";
break;
case 13:this.popState(); return "END_EXPR";
break;
case 14:return "IN";
break;
case 15:return "IS";
break;
case 16:return "AS";
break;
case 17:return "NOT";
break;
case 18:return "TYPE";
break;
case 19:return "TYPE";
break;
case 20:return "TYPE";
break;
case 21:return "TYPE";
break;
case 22:return "TYPE";
break;
case 23:return "COND";
break;
case 24:return "COND";
break;
case 25:return "COND";
break;
case 26:return "COND";
break;
case 27:return "COND";
break;
case 28:return "COND";
break;
case 29:return "COND";
break;
case 30:return "COND";
break;
case 31:return "EXISTS";
break;
case 32:this.pushState("tag");     return "VOID_TAG";
break;
case 33:this.pushState("tag");     return "TAG";
break;
case 34:this.popState();           return "END_TAG";
break;
case 35:yy_.yytext = yy_.yytext.slice(1);  return "TAG_ID";
break;
case 36:yy_.yytext = yy_.yytext.slice(1);  return "TAG_CLASS";
break;
case 37:yy_.yytext = strip(2,2).replace(/\\"/g, '"'); return "TAG_SRC";
break;
case 38:this.pushState("tagargs"); return "LPAREN";
break;
case 39:this.popState();           return "RPAREN";
break;
case 40:this.pushState("tagargs"); return "LBRACE";
break;
case 41:this.popState();           return "RBRACE";
break;
case 42:return "COLON";
break;
case 43:return "EQ";
break;
case 44:return "COMMA";
break;
case 45:return "TAG_ATTR";
break;
case 46:yy_.yytext = "data-" + yy_.yytext.slice(1); return "TAG_DATA_ATTR";
break;
case 47:/* ignore */
break;
case 48:/* ignore */
break;
case 49:this.pushState("filter"); yy_.yytext = yy_.yytext.slice(1); return "FILTER";
break;
case 50:this.pushState("name"); return "START_NAME";
break;
case 51:this.popState(); return "RBRACE"
break;
case 52:this.pushState("fn"); yy_.yytext = yy_.yytext.slice(1); return "FN";
break;
case 53:this.popState(); return "RPAREN";
break;
case 54:/* ignore */
break;
case 55:/* ignore */
break;
case 56:return "LBRACE";
break;
case 57:return "RBRACE";
break;
case 58:return "COMMA";
break;
case 59:return "ID";
break;
case 60:return "DOT";
break;
case 61:return "LPAREN";
break;
case 62:return "RPAREN";
break;
case 63:return "LBRACK";
break;
case 64:return "RBRACK";
break;
case 65:return "COLON"; 
break;
case 66:return "COMMA";
break;
case 67:return "INT";
break;
case 68:yy_.yytext = strip(1,2).replace(/\\"/g, '"'); return "STRING";
break;
case 69:return "STRING"; // Do not strip quotes
break;
case 70:return "WORD";
break;
case 71:
  var tokens = [];
  while (0 < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }

  if (tokens.length) {
    tokens.push("EOF");
    return tokens;
  } else {
    return "EOF";
  }

break;
case 72:
  var tokens = [];
  while (_filter_indent_level >= _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }

  if (tokens.length) {
    tokens.push("EOF");
    return tokens;
  } else {
    return "EOF";
  }

break;
case 73:/* eat blank lines */
break;
case 74:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (indentation > _indent_stack[0]) {
    _indent_stack.unshift(indentation);
    return "INDENT";
  }

  var tokens = [];
  while (indentation < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }

  if (tokens.length) {
    return tokens;
  }

break;
case 75:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (typeof _filter_indent_level === "undefined") {
    _filter_indent_level = indentation;
    return "FILTER_START";
  } else if (indentation < _filter_indent_level) {
    _filter_indent_level = undefined;
    this.popState();
    return "DEDENT";
  } 
  /* else ignore */

break;
case 76:/* ignore all other whitespace */
break;
}
},
rules: [/^(?:""")/,/^(?:""")/,/^(?:.+)/,/^(?:\n)/,/^(?:<.+(?=\n))/,/^(?:for\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:alias\b)/,/^(?:with\b)/,/^(?:include\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:(?=\n))/,/^(?:in\b)/,/^(?:is\b)/,/^(?:as\b)/,/^(?:not\b)/,/^(?:Hash\b)/,/^(?:List\b)/,/^(?:String\b)/,/^(?:Integer\b)/,/^(?:Number\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?:>)/,/^(?:<)/,/^(?:%)/,/^(?:exists\b)/,/^(?:((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)))/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:(?=\n))/,/^(?:(#[a-zA-Z][a-zA-Z0-9\-\:_]*))/,/^(?:(\.-?[_a-zA-Z]+[_a-zA-Z0-9\-]*(?=["."\s\n])))/,/^(?:@\s*(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z][a-zA-Z0-9\-_]*(?=\s*["="":"])))/,/^(?:(\*[a-zA-Z][a-zA-Z0-9\-]*(?=["="":"])))/,/^(?:\s)/,/^(?:\n)/,/^(?::(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:@\{)/,/^(?:\})/,/^(?:@(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254})\s?(?=\())/,/^(?:\)(?!\)))/,/^(?:\s)/,/^(?:\n)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:(\+|-)?(0|[1-9][0-9]*))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:([^\s\n"@"][^\s\n]*))/,/^(?:\s*$)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"comment":{"rules":[1,2,3,73,76],"inclusive":true},"tag":{"rules":[34,35,36,37,38,40,50,52,69,70,73,76],"inclusive":true},"tagargs":{"rules":[39,41,42,43,44,45,46,47,48,68,73,76],"inclusive":true},"filter":{"rules":[50,69,70,72,73,75,76],"inclusive":true},"expr":{"rules":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,52,59,60,61,62,63,64,65,66,67,68,73,76],"inclusive":true},"name":{"rules":[51,59,60,61,62,63,64,65,66,67,68,73,76],"inclusive":true},"fn":{"rules":[11,12,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,73,76],"inclusive":true},"INITIAL":{"rules":[0,4,5,6,7,8,9,10,32,33,49,50,52,69,70,71,73,74,76],"inclusive":true}}
};
_indent_stack = [0];
_filter_indent_level = undefined;;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = manana_parser;
exports.Parser = manana_parser.Parser;
exports.parse = function () { return manana_parser.parse.apply(manana_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}