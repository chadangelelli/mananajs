/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var manana_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"prog_list":4,"EOF":5,"stmt":6,"block":7,"INDENT":8,"stmt_list":9,"DEDENT":10,"html_stmt":11,"void_tag_stmt":12,"pre_stmt":13,"tag_stmt":14,"filter_stmt":15,"alias_stmt":16,"include_stmt":17,"with_stmt":18,"if_stmt":19,"for_stmt":20,"name":21,"fn":22,"HTML":23,"i_html":24,"I_HTML_START":25,"i_html_text":26,"I_HTML_END":27,"i_html_text_el":28,"I_HTML_TEXT":29,"void_tag":30,"END_TAG":31,"tag_attrs":32,"VOID_TAG":33,"tag":34,"text":35,"PRE":36,"PRE_START":37,"pre_text":38,"PRE_TEXT":39,"TAG":40,"tag_attr":41,"tag_attr_args":42,"TAG_ID":43,"TAG_SRC":44,"TAG_SRC_I_STRING":45,"string":46,"tag_classes":47,"TAG_ATTR":48,"EQ":49,"TAG_DATA_ATTR":50,"LPAREN":51,"tag_attr_arg_list":52,"RPAREN":53,"LBRACE":54,"tag_attr_arg_list_alt":55,"RBRACE":56,"tag_attr_arg":57,"COMMA":58,"tag_attr_arg_alt":59,"COLON":60,"TAG_CLASS":61,"FILTER":62,"FILTER_START":63,"word_list":64,"word":65,"WORD":66,"SPACE":67,"path_or_fn":68,"path":69,"WITH":70,"AS":71,"ID":72,"END_EXPR":73,"FOR":74,"IN":75,"IF":76,"ev":77,"ELSE":78,"NOT":79,"COND":80,"IS":81,"TYPE":82,"EXISTS":83,"INT":84,"BOOL":85,"ALIAS":86,"INCLUDE":87,"id":88,"DOT":89,"meths":90,"LBRACK":91,"RBRACK":92,"meth":93,"meth_args":94,"meth_arg":95,"FN":96,"fn_args":97,"fn_arg":98,"hash":99,"hash_data":100,"hash_pair":101,"hash_val":102,"START_NAME":103,"STRING":104,"i_string":105,"I_STRING_D":106,"i_string_text":107,"END_I_STRING_D":108,"I_STRING_S":109,"END_I_STRING_S":110,"i_string_text_el":111,"I_STRING_TEXT":112,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",10:"DEDENT",23:"HTML",25:"I_HTML_START",27:"I_HTML_END",29:"I_HTML_TEXT",31:"END_TAG",33:"VOID_TAG",36:"PRE",37:"PRE_START",39:"PRE_TEXT",40:"TAG",43:"TAG_ID",44:"TAG_SRC",45:"TAG_SRC_I_STRING",48:"TAG_ATTR",49:"EQ",50:"TAG_DATA_ATTR",51:"LPAREN",53:"RPAREN",54:"LBRACE",56:"RBRACE",58:"COMMA",60:"COLON",61:"TAG_CLASS",62:"FILTER",63:"FILTER_START",66:"WORD",67:"SPACE",70:"WITH",71:"AS",72:"ID",73:"END_EXPR",74:"FOR",75:"IN",76:"IF",78:"ELSE",79:"NOT",80:"COND",81:"IS",82:"TYPE",83:"EXISTS",84:"INT",85:"BOOL",86:"ALIAS",87:"INCLUDE",89:"DOT",91:"LBRACK",92:"RBRACK",96:"FN",103:"START_NAME",104:"STRING",106:"I_STRING_D",108:"END_I_STRING_D",109:"I_STRING_S",110:"END_I_STRING_S",112:"I_STRING_TEXT"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,3],[9,2],[9,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,1],[11,1],[24,3],[26,2],[26,1],[28,1],[28,1],[12,2],[12,3],[30,1],[14,2],[14,3],[14,3],[14,3],[14,4],[14,4],[13,4],[38,2],[38,1],[34,1],[32,2],[32,1],[32,1],[41,1],[41,1],[41,2],[41,1],[41,3],[41,3],[42,3],[42,3],[52,2],[52,1],[57,3],[57,4],[57,3],[57,4],[55,2],[55,1],[59,3],[59,4],[59,3],[59,4],[47,2],[47,1],[15,4],[35,1],[64,1],[64,2],[65,1],[65,1],[65,1],[65,1],[65,1],[68,1],[68,1],[18,6],[20,6],[19,4],[19,7],[19,5],[19,8],[19,6],[19,9],[19,6],[19,9],[19,7],[19,10],[19,5],[19,8],[77,1],[77,1],[77,1],[77,1],[77,1],[16,5],[17,3],[17,3],[69,1],[69,3],[69,3],[88,1],[88,4],[88,6],[88,6],[88,4],[88,6],[88,6],[88,5],[88,5],[90,1],[90,3],[93,3],[93,4],[94,3],[94,1],[95,1],[95,1],[95,1],[22,3],[22,4],[97,3],[97,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,3],[98,3],[98,3],[98,3],[98,3],[99,3],[99,4],[100,3],[100,1],[101,3],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[21,3],[46,1],[46,1],[105,3],[105,3],[107,2],[107,1],[111,1],[111,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0-1]; 
break;
case 6: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = [$$[$0]]; 
break;
case 20: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 22: 
      var body = [$$[$0-2]];
      body.push.apply(body, $$[$0-1]);
      body.push($$[$0]);
      this.$ = new MananaStringNode(body, new Loc(_$[$0-2], _$[$0])); 
    
break;
case 23: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 24: this.$ = [$$[$0]]; 
break;
case 27: this.$ = new VoidTagNode($$[$0-1], null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 28: this.$ = new VoidTagNode($$[$0-2], $$[$0-1],   new Loc(_$[$0-2], _$[$0-1])); 
break;
case 29: this.$ = $$[$0]; 
break;
case 30: this.$ = new TagNode($$[$0-1], null, null, null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 31: this.$ = new TagNode($$[$0-2], null, $$[$0-1],   null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 32: this.$ = new TagNode($$[$0-2], null, null, $$[$0],   new Loc(_$[$0-2], _$[$0])); 
break;
case 33: this.$ = new TagNode($$[$0-2], $$[$0-1],   null, null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 34: this.$ = new TagNode($$[$0-3], $$[$0-2],   $$[$0-1],   null, new Loc(_$[$0-3], _$[$0-1])); 
break;
case 35: this.$ = new TagNode($$[$0-3], $$[$0-2],   null, $$[$0],   new Loc(_$[$0-3], _$[$0])); 
break;
case 36: this.$ = new PreNode($$[$0-2], $$[$0-1], new Loc(_$[$0-3], _$[$0])); 
break;
case 37: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 38: this.$ = [$$[$0]]; 
break;
case 39: this.$ = $$[$0]; 
break;
case 40: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 41: this.$ = [$$[$0]]; 
break;
case 42: this.$ = $$[$0]; 
break;
case 43: this.$ = ['id', $$[$0]]; 
break;
case 44: this.$ = ['src', new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])) ]; 
break;
case 45: this.$ = ['src', $$[$0]]; 
break;
case 46: this.$ = ['class', $$[$0].join(" ")]; 
break;
case 47: this.$ = ['attr', $$[$0-2], $$[$0]]; 
break;
case 48: this.$ = ['data', $$[$0-2], $$[$0]]; 
break;
case 49: this.$ = $$[$0-1]; 
break;
case 50: this.$ = $$[$0-1]; 
break;
case 51: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 52: this.$ = [$$[$0]]; 
break;
case 53: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 54: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 55: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 56: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 57: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 58: this.$ = [$$[$0]]; 
break;
case 59: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 60: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 61: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 62: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 63: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 64: this.$ = [$$[$0]]; 
break;
case 65: this.$ = new FilterNode($$[$0-3], $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 66: this.$ = new TextNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 67: this.$ = [$$[$0]]; 
break;
case 68: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 76: this.$ = new WithNode($$[$0-4], $$[$0-2], $$[$0], new Loc(_$[$0-5], _$[$0])); 
break;
case 77: this.$ = new ForNode($$[$0-4], $$[$0-2], $$[$0] , new Loc(_$[$0-5], _$[$0])) ; 
break;
case 78: this.$ = new IfNode("true", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-3], _$[$0])); 
break;
case 79: this.$ = new IfNode("true", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-6], _$[$0])); 
break;
case 80: this.$ = new IfNode("false", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-4], _$[$0])); 
break;
case 81: this.$ = new IfNode("false", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-7], _$[$0])); 
break;
case 82: this.$ = new IfNode($$[$0-3], $$[$0-4], $$[$0-2], $$[$0], null, new Loc(_$[$0-5], _$[$0])); 
break;
case 83: this.$ = new IfNode($$[$0-6], $$[$0-7], $$[$0-5], $$[$0-3], $$[$0], new Loc(_$[$0-8], _$[$0])); 
break;
case 84: this.$ = new IfNode($$[$0-3], $$[$0-4], $$[$0-2], $$[$0], null, new Loc(_$[$0-5], _$[$0])); 
break;
case 85: this.$ = new IfNode($$[$0-6], $$[$0-7], $$[$0-5], $$[$0-3], null, new Loc(_$[$0-8], _$[$0])); 
break;
case 86: this.$ = new IfNode("is not", $$[$0-5], $$[$0-2], $$[$0], null, new Loc(_$[$0-6], _$[$0])); 
break;
case 87: this.$ = new IfNode("is not", $$[$0-8], $$[$0-5], $$[$0-3], $$[$0], new Loc(_$[$0-9], _$[$0])); 
break;
case 88: this.$ = new IfNode("exists", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-4], _$[$0])); 
break;
case 89: this.$ = new IfNode("exists", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-7], _$[$0])); 
break;
case 95: this.$ = new AliasNode($$[$0-3], $$[$0-1], new Loc(_$[$0-4], _$[$0])); 
break;
case 96: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 97: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 98: this.$ = new PathNode(null, $$[$0]  , null, new Loc(_$[$0], _$[$0])); 
break;
case 99: this.$ = new PathNode($$[$0-2]  , $$[$0]  , null, new Loc(_$[$0-2], _$[$0])); 
break;
case 100: this.$ = new PathNode($$[$0-2]  , null, $$[$0]  , new Loc(_$[$0-2], _$[$0])); 
break;
case 101: this.$ = new IdNode($$[$0], null, null, new Loc(_$[$0], _$[$0])); 
break;
case 102: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 103: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 104: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 105: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 106: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 107: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 108: this.$ = new IdNode($$[$0-4], 0   , $$[$0-1]  , new Loc(_$[$0-4], _$[$0])); 
break;
case 109: this.$ = new IdNode($$[$0-4], $$[$0-2]  , '*' , new Loc(_$[$0-4], _$[$0])); 
break;
case 110: this.$ = new MethodChainNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 111: this.$ = $$[$0-2]; this.$.chain.push($$[$0])                        ; 
break;
case 112: this.$ = new MethodNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 113: this.$ = new MethodNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 114: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 115: this.$ = [$$[$0]]; 
break;
case 119: this.$ = new FunctionNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 120: this.$ = new FunctionNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 121: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 122: this.$ = [$$[$0]]; 
break;
case 128: this.$ = $$[$0]; 
break;
case 129: this.$ = $$[$0]; 
break;
case 130: this.$ = $$[$0]; 
break;
case 131: this.$ = $$[$0]; 
break;
case 132: this.$ = $$[$0]; 
break;
case 133: this.$ = new MananaHash($$[$0-1]); 
break;
case 134: this.$ = new MananaHash($$[$0-2]); 
break;
case 135: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 136: this.$ = [$$[$0]]; 
break;
case 137: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 144: this.$ = $$[$0-1]; 
break;
case 145: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 147: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 148: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 149: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 150: this.$ = [$$[$0]]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,17],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:[1,18],24:19,25:[1,31],30:20,33:[1,32],34:22,36:[1,21],40:[1,33],62:[1,23],70:[1,26],74:[1,28],76:[1,27],86:[1,24],87:[1,25],96:[1,30],103:[1,29]},{1:[3]},{5:[1,34],6:35,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:[1,18],24:19,25:[1,31],30:20,33:[1,32],34:22,36:[1,21],40:[1,33],62:[1,23],70:[1,26],74:[1,28],76:[1,27],86:[1,24],87:[1,25],96:[1,30],103:[1,29]},{5:[2,3],23:[2,3],25:[2,3],33:[2,3],36:[2,3],40:[2,3],62:[2,3],70:[2,3],74:[2,3],76:[2,3],86:[2,3],87:[2,3],96:[2,3],103:[2,3]},{5:[2,4],23:[2,4],25:[2,4],33:[2,4],36:[2,4],40:[2,4],62:[2,4],70:[2,4],74:[2,4],76:[2,4],86:[2,4],87:[2,4],96:[2,4],103:[2,4]},{5:[2,8],10:[2,8],23:[2,8],25:[2,8],33:[2,8],36:[2,8],40:[2,8],62:[2,8],70:[2,8],74:[2,8],76:[2,8],86:[2,8],87:[2,8],96:[2,8],103:[2,8]},{5:[2,9],10:[2,9],23:[2,9],25:[2,9],33:[2,9],36:[2,9],40:[2,9],62:[2,9],70:[2,9],74:[2,9],76:[2,9],86:[2,9],87:[2,9],96:[2,9],103:[2,9]},{5:[2,10],10:[2,10],23:[2,10],25:[2,10],33:[2,10],36:[2,10],40:[2,10],62:[2,10],70:[2,10],74:[2,10],76:[2,10],86:[2,10],87:[2,10],96:[2,10],103:[2,10]},{5:[2,11],10:[2,11],23:[2,11],25:[2,11],33:[2,11],36:[2,11],40:[2,11],62:[2,11],70:[2,11],74:[2,11],76:[2,11],86:[2,11],87:[2,11],96:[2,11],103:[2,11]},{5:[2,12],10:[2,12],23:[2,12],25:[2,12],33:[2,12],36:[2,12],40:[2,12],62:[2,12],70:[2,12],74:[2,12],76:[2,12],86:[2,12],87:[2,12],96:[2,12],103:[2,12]},{5:[2,13],10:[2,13],23:[2,13],25:[2,13],33:[2,13],36:[2,13],40:[2,13],62:[2,13],70:[2,13],74:[2,13],76:[2,13],86:[2,13],87:[2,13],96:[2,13],103:[2,13]},{5:[2,14],10:[2,14],23:[2,14],25:[2,14],33:[2,14],36:[2,14],40:[2,14],62:[2,14],70:[2,14],74:[2,14],76:[2,14],86:[2,14],87:[2,14],96:[2,14],103:[2,14]},{5:[2,15],10:[2,15],23:[2,15],25:[2,15],33:[2,15],36:[2,15],40:[2,15],62:[2,15],70:[2,15],74:[2,15],76:[2,15],86:[2,15],87:[2,15],96:[2,15],103:[2,15]},{5:[2,16],10:[2,16],23:[2,16],25:[2,16],33:[2,16],36:[2,16],40:[2,16],62:[2,16],70:[2,16],74:[2,16],76:[2,16],86:[2,16],87:[2,16],96:[2,16],103:[2,16]},{5:[2,17],10:[2,17],23:[2,17],25:[2,17],33:[2,17],36:[2,17],40:[2,17],62:[2,17],70:[2,17],74:[2,17],76:[2,17],86:[2,17],87:[2,17],96:[2,17],103:[2,17]},{5:[2,18],10:[2,18],23:[2,18],25:[2,18],33:[2,18],36:[2,18],40:[2,18],62:[2,18],70:[2,18],74:[2,18],76:[2,18],86:[2,18],87:[2,18],96:[2,18],103:[2,18]},{5:[2,19],10:[2,19],23:[2,19],25:[2,19],33:[2,19],36:[2,19],40:[2,19],62:[2,19],70:[2,19],74:[2,19],76:[2,19],86:[2,19],87:[2,19],96:[2,19],103:[2,19]},{6:37,9:36,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:[1,18],24:19,25:[1,31],30:20,33:[1,32],34:22,36:[1,21],40:[1,33],62:[1,23],70:[1,26],74:[1,28],76:[1,27],86:[1,24],87:[1,25],96:[1,30],103:[1,29]},{5:[2,20],10:[2,20],23:[2,20],25:[2,20],33:[2,20],36:[2,20],40:[2,20],62:[2,20],70:[2,20],74:[2,20],76:[2,20],86:[2,20],87:[2,20],96:[2,20],103:[2,20]},{5:[2,21],10:[2,21],23:[2,21],25:[2,21],33:[2,21],36:[2,21],40:[2,21],62:[2,21],70:[2,21],74:[2,21],76:[2,21],86:[2,21],87:[2,21],96:[2,21],103:[2,21]},{31:[1,38],32:39,41:40,42:41,43:[1,42],44:[1,43],45:[1,44],47:45,48:[1,46],50:[1,47],51:[1,48],54:[1,49],61:[1,50]},{37:[1,51]},{21:58,22:59,31:[1,52],32:54,35:53,41:40,42:41,43:[1,42],44:[1,43],45:[1,44],46:60,47:45,48:[1,46],50:[1,47],51:[1,48],54:[1,49],61:[1,50],64:55,65:56,66:[1,57],67:[1,61],96:[1,30],103:[1,29],104:[1,62],105:63,106:[1,64],109:[1,65]},{63:[1,66]},{22:69,68:67,69:68,72:[1,71],88:70,96:[1,30]},{46:72,69:73,72:[1,71],88:70,104:[1,62],105:63,106:[1,64],109:[1,65]},{22:69,68:74,69:68,72:[1,71],88:70,96:[1,30]},{22:82,46:78,69:81,72:[1,71],77:75,79:[1,76],83:[1,77],84:[1,79],85:[1,80],88:70,96:[1,30],104:[1,62],105:63,106:[1,64],109:[1,65]},{72:[1,83]},{69:84,72:[1,71],88:70},{51:[1,85]},{21:89,26:86,28:87,29:[1,88],103:[1,29]},{31:[2,29],43:[2,29],44:[2,29],45:[2,29],48:[2,29],50:[2,29],51:[2,29],54:[2,29],61:[2,29]},{31:[2,39],43:[2,39],44:[2,39],45:[2,39],48:[2,39],50:[2,39],51:[2,39],54:[2,39],61:[2,39],66:[2,39],67:[2,39],96:[2,39],103:[2,39],104:[2,39],106:[2,39],109:[2,39]},{1:[2,1]},{5:[2,2],23:[2,2],25:[2,2],33:[2,2],36:[2,2],40:[2,2],62:[2,2],70:[2,2],74:[2,2],76:[2,2],86:[2,2],87:[2,2],96:[2,2],103:[2,2]},{6:91,10:[1,90],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:[1,18],24:19,25:[1,31],30:20,33:[1,32],34:22,36:[1,21],40:[1,33],62:[1,23],70:[1,26],74:[1,28],76:[1,27],86:[1,24],87:[1,25],96:[1,30],103:[1,29]},{10:[2,7],23:[2,7],25:[2,7],33:[2,7],36:[2,7],40:[2,7],62:[2,7],70:[2,7],74:[2,7],76:[2,7],86:[2,7],87:[2,7],96:[2,7],103:[2,7]},{5:[2,27],10:[2,27],23:[2,27],25:[2,27],33:[2,27],36:[2,27],40:[2,27],62:[2,27],70:[2,27],74:[2,27],76:[2,27],86:[2,27],87:[2,27],96:[2,27],103:[2,27]},{31:[1,92],41:93,43:[1,42],44:[1,43],45:[1,44],47:45,48:[1,46],50:[1,47],61:[1,50]},{31:[2,41],43:[2,41],44:[2,41],45:[2,41],48:[2,41],50:[2,41],61:[2,41],66:[2,41],67:[2,41],96:[2,41],103:[2,41],104:[2,41],106:[2,41],109:[2,41]},{31:[2,42],43:[2,42],44:[2,42],45:[2,42],48:[2,42],50:[2,42],61:[2,42],66:[2,42],67:[2,42],96:[2,42],103:[2,42],104:[2,42],106:[2,42],109:[2,42]},{31:[2,43],43:[2,43],44:[2,43],45:[2,43],48:[2,43],50:[2,43],61:[2,43],66:[2,43],67:[2,43],96:[2,43],103:[2,43],104:[2,43],106:[2,43],109:[2,43]},{31:[2,44],43:[2,44],44:[2,44],45:[2,44],48:[2,44],50:[2,44],61:[2,44],66:[2,44],67:[2,44],96:[2,44],103:[2,44],104:[2,44],106:[2,44],109:[2,44]},{46:94,104:[1,62],105:63,106:[1,64],109:[1,65]},{31:[2,46],43:[2,46],44:[2,46],45:[2,46],48:[2,46],50:[2,46],61:[1,95],66:[2,46],67:[2,46],96:[2,46],103:[2,46],104:[2,46],106:[2,46],109:[2,46]},{49:[1,96]},{49:[1,97]},{48:[1,100],50:[1,101],52:98,57:99},{48:[1,104],50:[1,105],55:102,59:103},{31:[2,64],43:[2,64],44:[2,64],45:[2,64],48:[2,64],50:[2,64],61:[2,64],66:[2,64],67:[2,64],96:[2,64],103:[2,64],104:[2,64],106:[2,64],109:[2,64]},{38:106,39:[1,107]},{5:[2,30],7:108,8:[1,17],10:[2,30],23:[2,30],25:[2,30],33:[2,30],36:[2,30],40:[2,30],62:[2,30],70:[2,30],74:[2,30],76:[2,30],86:[2,30],87:[2,30],96:[2,30],103:[2,30]},{31:[1,109]},{21:58,22:59,31:[1,110],35:111,41:93,43:[1,42],44:[1,43],45:[1,44],46:60,47:45,48:[1,46],50:[1,47],61:[1,50],64:55,65:56,66:[1,57],67:[1,61],96:[1,30],103:[1,29],104:[1,62],105:63,106:[1,64],109:[1,65]},{10:[2,66],21:58,22:59,31:[2,66],46:60,65:112,66:[1,57],67:[1,61],96:[1,30],103:[1,29],104:[1,62],105:63,106:[1,64],109:[1,65]},{10:[2,67],31:[2,67],66:[2,67],67:[2,67],96:[2,67],103:[2,67],104:[2,67],106:[2,67],109:[2,67]},{10:[2,69],31:[2,69],66:[2,69],67:[2,69],96:[2,69],103:[2,69],104:[2,69],106:[2,69],109:[2,69]},{10:[2,70],31:[2,70],66:[2,70],67:[2,70],96:[2,70],103:[2,70],104:[2,70],106:[2,70],109:[2,70]},{10:[2,71],31:[2,71],66:[2,71],67:[2,71],96:[2,71],103:[2,71],104:[2,71],106:[2,71],109:[2,71]},{10:[2,72],31:[2,72],66:[2,72],67:[2,72],96:[2,72],103:[2,72],104:[2,72],106:[2,72],109:[2,72]},{10:[2,73],31:[2,73],66:[2,73],67:[2,73],96:[2,73],103:[2,73],104:[2,73],106:[2,73],109:[2,73]},{10:[2,145],31:[2,145],43:[2,145],44:[2,145],45:[2,145],48:[2,145],50:[2,145],53:[2,145],56:[2,145],58:[2,145],61:[2,145],66:[2,145],67:[2,145],73:[2,145],80:[2,145],81:[2,145],96:[2,145],103:[2,145],104:[2,145],106:[2,145],109:[2,145]},{10:[2,146],31:[2,146],43:[2,146],44:[2,146],45:[2,146],48:[2,146],50:[2,146],53:[2,146],56:[2,146],58:[2,146],61:[2,146],66:[2,146],67:[2,146],73:[2,146],80:[2,146],81:[2,146],96:[2,146],103:[2,146],104:[2,146],106:[2,146],109:[2,146]},{21:115,103:[1,29],107:113,111:114,112:[1,116]},{21:115,103:[1,29],107:117,111:114,112:[1,116]},{21:58,22:59,35:118,46:60,64:55,65:56,66:[1,57],67:[1,61],96:[1,30],103:[1,29],104:[1,62],105:63,106:[1,64],109:[1,65]},{71:[1,119]},{71:[2,74],89:[1,120]},{71:[2,75]},{53:[2,98],56:[2,98],58:[2,98],60:[2,98],71:[2,98],73:[2,98],80:[2,98],81:[2,98],89:[2,98],92:[2,98]},{53:[2,101],56:[2,101],58:[2,101],60:[2,101],71:[2,101],73:[2,101],80:[2,101],81:[2,101],89:[2,101],91:[1,121],92:[2,101]},{73:[1,122]},{73:[1,123],89:[1,120]},{71:[1,124]},{73:[1,125],80:[1,126],81:[1,127]},{22:82,46:78,69:81,72:[1,71],77:128,84:[1,79],85:[1,80],88:70,96:[1,30],104:[1,62],105:63,106:[1,64],109:[1,65]},{22:82,46:78,69:81,72:[1,71],77:129,84:[1,79],85:[1,80],88:70,96:[1,30],104:[1,62],105:63,106:[1,64],109:[1,65]},{73:[2,90],80:[2,90],81:[2,90]},{73:[2,91],80:[2,91],81:[2,91]},{73:[2,92],80:[2,92],81:[2,92]},{73:[2,93],80:[2,93],81:[2,93],89:[1,120]},{73:[2,94],80:[2,94],81:[2,94]},{75:[1,130]},{56:[1,131],89:[1,120]},{22:138,46:137,53:[1,132],54:[1,141],69:135,72:[1,140],84:[1,136],88:70,96:[1,30],97:133,98:134,99:139,104:[1,62],105:63,106:[1,64],109:[1,65]},{21:89,27:[1,142],28:143,29:[1,88],103:[1,29]},{27:[2,24],29:[2,24],103:[2,24]},{27:[2,25],29:[2,25],103:[2,25]},{27:[2,26],29:[2,26],103:[2,26]},{5:[2,5],10:[2,5],23:[2,5],25:[2,5],33:[2,5],36:[2,5],40:[2,5],62:[2,5],70:[2,5],74:[2,5],76:[2,5],78:[2,5],86:[2,5],87:[2,5],96:[2,5],103:[2,5]},{10:[2,6],23:[2,6],25:[2,6],33:[2,6],36:[2,6],40:[2,6],62:[2,6],70:[2,6],74:[2,6],76:[2,6],86:[2,6],87:[2,6],96:[2,6],103:[2,6]},{5:[2,28],10:[2,28],23:[2,28],25:[2,28],33:[2,28],36:[2,28],40:[2,28],62:[2,28],70:[2,28],74:[2,28],76:[2,28],86:[2,28],87:[2,28],96:[2,28],103:[2,28]},{31:[2,40],43:[2,40],44:[2,40],45:[2,40],48:[2,40],50:[2,40],61:[2,40],66:[2,40],67:[2,40],96:[2,40],103:[2,40],104:[2,40],106:[2,40],109:[2,40]},{31:[2,45],43:[2,45],44:[2,45],45:[2,45],48:[2,45],50:[2,45],61:[2,45],66:[2,45],67:[2,45],96:[2,45],103:[2,45],104:[2,45],106:[2,45],109:[2,45]},{31:[2,63],43:[2,63],44:[2,63],45:[2,63],48:[2,63],50:[2,63],61:[2,63],66:[2,63],67:[2,63],96:[2,63],103:[2,63],104:[2,63],106:[2,63],109:[2,63]},{46:144,104:[1,62],105:63,106:[1,64],109:[1,65]},{46:145,104:[1,62],105:63,106:[1,64],109:[1,65]},{48:[1,100],50:[1,101],53:[1,146],57:147},{48:[2,52],50:[2,52],53:[2,52]},{49:[1,148]},{49:[1,149]},{48:[1,104],50:[1,105],56:[1,150],59:151},{48:[2,58],50:[2,58],56:[2,58]},{60:[1,152]},{60:[1,153]},{10:[1,154],39:[1,155]},{10:[2,38],39:[2,38]},{5:[2,32],10:[2,32],23:[2,32],25:[2,32],33:[2,32],36:[2,32],40:[2,32],62:[2,32],70:[2,32],74:[2,32],76:[2,32],86:[2,32],87:[2,32],96:[2,32],103:[2,32]},{5:[2,31],10:[2,31],23:[2,31],25:[2,31],33:[2,31],36:[2,31],40:[2,31],62:[2,31],70:[2,31],74:[2,31],76:[2,31],86:[2,31],87:[2,31],96:[2,31],103:[2,31]},{5:[2,33],7:156,8:[1,17],10:[2,33],23:[2,33],25:[2,33],33:[2,33],36:[2,33],40:[2,33],62:[2,33],70:[2,33],74:[2,33],76:[2,33],86:[2,33],87:[2,33],96:[2,33],103:[2,33]},{31:[1,157]},{10:[2,68],31:[2,68],66:[2,68],67:[2,68],96:[2,68],103:[2,68],104:[2,68],106:[2,68],109:[2,68]},{21:115,103:[1,29],108:[1,158],111:159,112:[1,116]},{103:[2,150],108:[2,150],110:[2,150],112:[2,150]},{103:[2,151],108:[2,151],110:[2,151],112:[2,151]},{103:[2,152],108:[2,152],110:[2,152],112:[2,152]},{21:115,103:[1,29],110:[1,160],111:159,112:[1,116]},{10:[1,161]},{72:[1,162]},{72:[1,165],88:163,90:164,93:166},{60:[1,169],69:168,72:[1,71],84:[1,167],88:70},{5:[2,96],10:[2,96],23:[2,96],25:[2,96],33:[2,96],36:[2,96],40:[2,96],62:[2,96],70:[2,96],74:[2,96],76:[2,96],86:[2,96],87:[2,96],96:[2,96],103:[2,96]},{5:[2,97],10:[2,97],23:[2,97],25:[2,97],33:[2,97],36:[2,97],40:[2,97],62:[2,97],70:[2,97],74:[2,97],76:[2,97],86:[2,97],87:[2,97],96:[2,97],103:[2,97]},{72:[1,170]},{7:171,8:[1,17]},{22:82,46:78,69:81,72:[1,71],77:172,84:[1,79],85:[1,80],88:70,96:[1,30],104:[1,62],105:63,106:[1,64],109:[1,65]},{79:[1,174],82:[1,173]},{73:[1,175]},{73:[1,176]},{69:177,72:[1,71],88:70},{5:[2,144],10:[2,144],23:[2,144],25:[2,144],27:[2,144],29:[2,144],31:[2,144],33:[2,144],36:[2,144],40:[2,144],62:[2,144],66:[2,144],67:[2,144],70:[2,144],74:[2,144],76:[2,144],86:[2,144],87:[2,144],96:[2,144],103:[2,144],104:[2,144],106:[2,144],108:[2,144],109:[2,144],110:[2,144],112:[2,144]},{5:[2,119],10:[2,119],23:[2,119],25:[2,119],31:[2,119],33:[2,119],36:[2,119],40:[2,119],53:[2,119],56:[2,119],58:[2,119],62:[2,119],66:[2,119],67:[2,119],70:[2,119],71:[2,119],73:[2,119],74:[2,119],76:[2,119],80:[2,119],81:[2,119],86:[2,119],87:[2,119],96:[2,119],103:[2,119],104:[2,119],106:[2,119],109:[2,119]},{53:[1,178],58:[1,179]},{53:[2,122],58:[2,122]},{53:[2,123],58:[2,123],89:[1,120]},{53:[2,124],58:[2,124]},{53:[2,125],58:[2,125]},{53:[2,126],58:[2,126]},{53:[2,127],58:[2,127]},{49:[1,180],53:[2,101],58:[2,101],89:[2,101],91:[1,121]},{72:[1,183],100:181,101:182},{5:[2,22],10:[2,22],23:[2,22],25:[2,22],33:[2,22],36:[2,22],40:[2,22],62:[2,22],70:[2,22],74:[2,22],76:[2,22],86:[2,22],87:[2,22],96:[2,22],103:[2,22]},{27:[2,23],29:[2,23],103:[2,23]},{31:[2,47],43:[2,47],44:[2,47],45:[2,47],48:[2,47],50:[2,47],61:[2,47],66:[2,47],67:[2,47],96:[2,47],103:[2,47],104:[2,47],106:[2,47],109:[2,47]},{31:[2,48],43:[2,48],44:[2,48],45:[2,48],48:[2,48],50:[2,48],61:[2,48],66:[2,48],67:[2,48],96:[2,48],103:[2,48],104:[2,48],106:[2,48],109:[2,48]},{31:[2,49],43:[2,49],44:[2,49],45:[2,49],48:[2,49],50:[2,49],61:[2,49],66:[2,49],67:[2,49],96:[2,49],103:[2,49],104:[2,49],106:[2,49],109:[2,49]},{48:[2,51],50:[2,51],53:[2,51]},{46:184,104:[1,62],105:63,106:[1,64],109:[1,65]},{46:185,104:[1,62],105:63,106:[1,64],109:[1,65]},{31:[2,50],43:[2,50],44:[2,50],45:[2,50],48:[2,50],50:[2,50],61:[2,50],66:[2,50],67:[2,50],96:[2,50],103:[2,50],104:[2,50],106:[2,50],109:[2,50]},{48:[2,57],50:[2,57],56:[2,57]},{46:186,104:[1,62],105:63,106:[1,64],109:[1,65]},{46:187,104:[1,62],105:63,106:[1,64],109:[1,65]},{5:[2,36],10:[2,36],23:[2,36],25:[2,36],33:[2,36],36:[2,36],40:[2,36],62:[2,36],70:[2,36],74:[2,36],76:[2,36],86:[2,36],87:[2,36],96:[2,36],103:[2,36]},{10:[2,37],39:[2,37]},{5:[2,35],10:[2,35],23:[2,35],25:[2,35],33:[2,35],36:[2,35],40:[2,35],62:[2,35],70:[2,35],74:[2,35],76:[2,35],86:[2,35],87:[2,35],96:[2,35],103:[2,35]},{5:[2,34],10:[2,34],23:[2,34],25:[2,34],33:[2,34],36:[2,34],40:[2,34],62:[2,34],70:[2,34],74:[2,34],76:[2,34],86:[2,34],87:[2,34],96:[2,34],103:[2,34]},{10:[2,147],31:[2,147],43:[2,147],44:[2,147],45:[2,147],48:[2,147],50:[2,147],53:[2,147],56:[2,147],58:[2,147],61:[2,147],66:[2,147],67:[2,147],73:[2,147],80:[2,147],81:[2,147],96:[2,147],103:[2,147],104:[2,147],106:[2,147],109:[2,147]},{103:[2,149],108:[2,149],110:[2,149],112:[2,149]},{10:[2,148],31:[2,148],43:[2,148],44:[2,148],45:[2,148],48:[2,148],50:[2,148],53:[2,148],56:[2,148],58:[2,148],61:[2,148],66:[2,148],67:[2,148],73:[2,148],80:[2,148],81:[2,148],96:[2,148],103:[2,148],104:[2,148],106:[2,148],109:[2,148]},{5:[2,65],10:[2,65],23:[2,65],25:[2,65],33:[2,65],36:[2,65],40:[2,65],62:[2,65],70:[2,65],74:[2,65],76:[2,65],86:[2,65],87:[2,65],96:[2,65],103:[2,65]},{73:[1,188]},{53:[2,99],56:[2,99],58:[2,99],60:[2,99],71:[2,99],73:[2,99],80:[2,99],81:[2,99],89:[2,99],92:[2,99]},{53:[2,100],56:[2,100],58:[2,100],60:[2,100],71:[2,100],73:[2,100],80:[2,100],81:[2,100],89:[1,189],92:[2,100]},{51:[1,190],53:[2,101],56:[2,101],58:[2,101],60:[2,101],71:[2,101],73:[2,101],80:[2,101],81:[2,101],89:[2,101],91:[1,121],92:[2,101]},{53:[2,110],56:[2,110],58:[2,110],60:[2,110],71:[2,110],73:[2,110],80:[2,110],81:[2,110],89:[2,110],92:[2,110]},{60:[1,192],92:[1,191]},{60:[1,194],89:[1,120],92:[1,193]},{84:[1,195]},{73:[1,196]},{5:[2,78],10:[2,78],23:[2,78],25:[2,78],33:[2,78],36:[2,78],40:[2,78],62:[2,78],70:[2,78],74:[2,78],76:[2,78],78:[1,197],86:[2,78],87:[2,78],96:[2,78],103:[2,78]},{73:[1,198]},{73:[1,199]},{82:[1,200]},{7:201,8:[1,17]},{7:202,8:[1,17]},{73:[1,203],89:[1,120]},{5:[2,120],10:[2,120],23:[2,120],25:[2,120],31:[2,120],33:[2,120],36:[2,120],40:[2,120],53:[2,120],56:[2,120],58:[2,120],62:[2,120],66:[2,120],67:[2,120],70:[2,120],71:[2,120],73:[2,120],74:[2,120],76:[2,120],80:[2,120],81:[2,120],86:[2,120],87:[2,120],96:[2,120],103:[2,120],104:[2,120],106:[2,120],109:[2,120]},{22:138,46:137,54:[1,141],69:135,72:[1,140],84:[1,136],88:70,96:[1,30],98:204,99:139,104:[1,62],105:63,106:[1,64],109:[1,65]},{22:208,46:207,54:[1,141],69:205,72:[1,71],84:[1,206],88:70,96:[1,30],99:209,104:[1,62],105:63,106:[1,64],109:[1,65]},{56:[1,210],58:[1,211]},{56:[2,136],58:[2,136]},{60:[1,212]},{48:[2,53],50:[2,53],53:[2,53],58:[1,213]},{48:[2,55],50:[2,55],53:[2,55],58:[1,214]},{48:[2,59],50:[2,59],56:[2,59],58:[1,215]},{48:[2,61],50:[2,61],56:[2,61],58:[1,216]},{5:[2,95],10:[2,95],23:[2,95],25:[2,95],33:[2,95],36:[2,95],40:[2,95],62:[2,95],70:[2,95],74:[2,95],76:[2,95],86:[2,95],87:[2,95],96:[2,95],103:[2,95]},{72:[1,218],93:217},{46:224,53:[1,219],69:222,72:[1,71],84:[1,223],88:70,94:220,95:221,104:[1,62],105:63,106:[1,64],109:[1,65]},{53:[2,102],56:[2,102],58:[2,102],60:[2,102],71:[2,102],73:[2,102],80:[2,102],81:[2,102],89:[2,102],92:[2,102]},{69:226,72:[1,71],84:[1,225],88:70,92:[1,227]},{53:[2,105],56:[2,105],58:[2,105],60:[2,105],71:[2,105],73:[2,105],80:[2,105],81:[2,105],89:[2,105],92:[2,105]},{69:229,72:[1,71],84:[1,228],88:70},{92:[1,230]},{7:231,8:[1,17]},{73:[1,232]},{7:233,8:[1,17]},{7:234,8:[1,17]},{73:[1,235]},{5:[2,80],10:[2,80],23:[2,80],25:[2,80],33:[2,80],36:[2,80],40:[2,80],62:[2,80],70:[2,80],74:[2,80],76:[2,80],78:[1,236],86:[2,80],87:[2,80],96:[2,80],103:[2,80]},{5:[2,88],10:[2,88],23:[2,88],25:[2,88],33:[2,88],36:[2,88],40:[2,88],62:[2,88],70:[2,88],74:[2,88],76:[2,88],78:[1,237],86:[2,88],87:[2,88],96:[2,88],103:[2,88]},{7:238,8:[1,17]},{53:[2,121],58:[2,121]},{53:[2,128],58:[2,128],89:[1,120]},{53:[2,129],58:[2,129]},{53:[2,130],58:[2,130]},{53:[2,131],58:[2,131]},{53:[2,132],58:[2,132]},{53:[2,133],56:[2,133],58:[2,133]},{56:[1,239],72:[1,183],101:240},{22:245,46:244,54:[1,141],69:247,72:[1,71],84:[1,242],85:[1,243],88:70,96:[1,30],99:246,102:241,104:[1,62],105:63,106:[1,64],109:[1,65]},{48:[2,54],50:[2,54],53:[2,54]},{48:[2,56],50:[2,56],53:[2,56]},{48:[2,60],50:[2,60],56:[2,60]},{48:[2,62],50:[2,62],56:[2,62]},{53:[2,111],56:[2,111],58:[2,111],60:[2,111],71:[2,111],73:[2,111],80:[2,111],81:[2,111],89:[2,111],92:[2,111]},{51:[1,190]},{53:[2,112],56:[2,112],58:[2,112],60:[2,112],71:[2,112],73:[2,112],80:[2,112],81:[2,112],89:[2,112],92:[2,112]},{53:[1,248],58:[1,249]},{53:[2,115],58:[2,115]},{53:[2,116],58:[2,116],89:[1,120]},{53:[2,117],58:[2,117]},{53:[2,118],58:[2,118]},{92:[1,250]},{89:[1,120],92:[1,251]},{53:[2,109],56:[2,109],58:[2,109],60:[2,109],71:[2,109],73:[2,109],80:[2,109],81:[2,109],89:[2,109],92:[2,109]},{92:[1,252]},{89:[1,120],92:[1,253]},{53:[2,108],56:[2,108],58:[2,108],60:[2,108],71:[2,108],73:[2,108],80:[2,108],81:[2,108],89:[2,108],92:[2,108]},{5:[2,76],10:[2,76],23:[2,76],25:[2,76],33:[2,76],36:[2,76],40:[2,76],62:[2,76],70:[2,76],74:[2,76],76:[2,76],86:[2,76],87:[2,76],96:[2,76],103:[2,76]},{7:254,8:[1,17]},{5:[2,82],10:[2,82],23:[2,82],25:[2,82],33:[2,82],36:[2,82],40:[2,82],62:[2,82],70:[2,82],74:[2,82],76:[2,82],78:[1,255],86:[2,82],87:[2,82],96:[2,82],103:[2,82]},{5:[2,84],10:[2,84],23:[2,84],25:[2,84],33:[2,84],36:[2,84],40:[2,84],62:[2,84],70:[2,84],74:[2,84],76:[2,84],78:[1,256],86:[2,84],87:[2,84],96:[2,84],103:[2,84]},{7:257,8:[1,17]},{73:[1,258]},{73:[1,259]},{5:[2,77],10:[2,77],23:[2,77],25:[2,77],33:[2,77],36:[2,77],40:[2,77],62:[2,77],70:[2,77],74:[2,77],76:[2,77],86:[2,77],87:[2,77],96:[2,77],103:[2,77]},{53:[2,134],56:[2,134],58:[2,134]},{56:[2,135],58:[2,135]},{56:[2,137],58:[2,137]},{56:[2,138],58:[2,138]},{56:[2,139],58:[2,139]},{56:[2,140],58:[2,140]},{56:[2,141],58:[2,141]},{56:[2,142],58:[2,142]},{56:[2,143],58:[2,143],89:[1,120]},{53:[2,113],56:[2,113],58:[2,113],60:[2,113],71:[2,113],73:[2,113],80:[2,113],81:[2,113],89:[2,113],92:[2,113]},{46:224,69:222,72:[1,71],84:[1,223],88:70,95:260,104:[1,62],105:63,106:[1,64],109:[1,65]},{53:[2,103],56:[2,103],58:[2,103],60:[2,103],71:[2,103],73:[2,103],80:[2,103],81:[2,103],89:[2,103],92:[2,103]},{53:[2,104],56:[2,104],58:[2,104],60:[2,104],71:[2,104],73:[2,104],80:[2,104],81:[2,104],89:[2,104],92:[2,104]},{53:[2,106],56:[2,106],58:[2,106],60:[2,106],71:[2,106],73:[2,106],80:[2,106],81:[2,106],89:[2,106],92:[2,106]},{53:[2,107],56:[2,107],58:[2,107],60:[2,107],71:[2,107],73:[2,107],80:[2,107],81:[2,107],89:[2,107],92:[2,107]},{5:[2,79],10:[2,79],23:[2,79],25:[2,79],33:[2,79],36:[2,79],40:[2,79],62:[2,79],70:[2,79],74:[2,79],76:[2,79],86:[2,79],87:[2,79],96:[2,79],103:[2,79]},{73:[1,261]},{73:[1,262]},{5:[2,86],10:[2,86],23:[2,86],25:[2,86],33:[2,86],36:[2,86],40:[2,86],62:[2,86],70:[2,86],74:[2,86],76:[2,86],78:[1,263],86:[2,86],87:[2,86],96:[2,86],103:[2,86]},{7:264,8:[1,17]},{7:265,8:[1,17]},{53:[2,114],58:[2,114]},{7:266,8:[1,17]},{7:267,8:[1,17]},{73:[1,268]},{5:[2,81],10:[2,81],23:[2,81],25:[2,81],33:[2,81],36:[2,81],40:[2,81],62:[2,81],70:[2,81],74:[2,81],76:[2,81],86:[2,81],87:[2,81],96:[2,81],103:[2,81]},{5:[2,89],10:[2,89],23:[2,89],25:[2,89],33:[2,89],36:[2,89],40:[2,89],62:[2,89],70:[2,89],74:[2,89],76:[2,89],86:[2,89],87:[2,89],96:[2,89],103:[2,89]},{5:[2,83],10:[2,83],23:[2,83],25:[2,83],33:[2,83],36:[2,83],40:[2,83],62:[2,83],70:[2,83],74:[2,83],76:[2,83],86:[2,83],87:[2,83],96:[2,83],103:[2,83]},{5:[2,85],10:[2,85],23:[2,85],25:[2,85],33:[2,85],36:[2,85],40:[2,85],62:[2,85],70:[2,85],74:[2,85],76:[2,85],86:[2,85],87:[2,85],96:[2,85],103:[2,85]},{7:269,8:[1,17]},{5:[2,87],10:[2,87],23:[2,87],25:[2,87],33:[2,87],36:[2,87],40:[2,87],62:[2,87],70:[2,87],74:[2,87],76:[2,87],86:[2,87],87:[2,87],96:[2,87],103:[2,87]}],
defaultActions: {34:[2,1],69:[2,75]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* tracing/debugging functions */

function Loc(start, end) {
  this.start = { line: start.first_line, column: start.first_column };
  this.end = { line: end.last_line, column: end.last_column };
}

/* Manana data types */

function MananaHash(data, loc) {
  var hash = {}, i = 0;

  while (data[i]) {
    hash[data[i][0]] = data[i][1];
    i++;
  }

  return hash;
}

/* AST nodes */

function VoidTagNode(tag, attrs, loc) {
  this.type = "VoidTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
}

function TagNode(tag, attrs, text, block, loc) {
  this.type = "Tag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = text ? [text] : block;
}

function PreNode(depth, text, loc) {
  this.type = "PreTag";
  this.depth = depth;
  this.text = text;
  this.loc = loc;
}

function TextNode(words, loc) {
  this.type = "Text";
  this.loc = loc;

  var w = words, t = [], s = [], i = 0; 

  while (typeof w[i] !== "undefined") {
    if (typeof w[i] === "string") {
      s.push(w[i]);
    } else {
      if (s.length) {
        t.push(s.join(' '));
        s = [];
      }
      t.push(w[i]);
    }
    i++;
  }
  if (s.length) {
    t.push(s.join(' '));
  }

  this.body = t;
}

function NameNode(path, loc) {
  this.type = "Name";
  this.loc = loc;
  this.body = path;
}

function WithNode(path, id, body, loc) {
  this.type = "With";
  this.loc = loc;
  this.path = path;
  this.id = id;
  this.body = body;
}

function IdNode(id, start, end, loc) {
  this.type = "Id";
  this.loc = loc;
  this.id = id;
  this.start = start;
  this.end = end;
}

function PathNode(path_node, component, methods, loc) {
  var k, c;

  if (path_node === null) {
    this.type = "Path";
    this.loc = loc;
    this.methods = null;
    this.components = [];
  } else {
    for (k in path_node) {
      if (path_node.hasOwnProperty(k)) {
        this[k] = path_node[k];
      }
    }

    if (loc && path_node.loc) {
      if (loc.end.line > path_node.loc.end.line || loc.end.column > path_node.loc.end.column) {
        this.loc.end = loc.end;
      }
    }
  }

  if (component) {
    c = [component.id];
    if (component.start !== null) {
      c.push(component.start);
    }
    if (component.end !== null) {
      c.push(component.end);
    }
    this.components.push(c);
  }

  if (methods !== null) {
    this.methods = methods;
  }
}

function MethodNode(name, args, loc) {
  this.type = "Method";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function MethodChainNode(method, loc) {
  this.type = "MethodChain";
  this.loc = loc;
  this.chain = [method];
}

function FunctionNode(name, args, loc) {
  this.type = "Function";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function ForNode(id, path, body, loc) {
  this.type = "For";
  this.loc = loc;
  this.id = id;
  this.path = path;
  this.body = body;
}

function IfNode(cond, v1, v2, body, else_body, loc) {
  this.type = "If";
  this.loc = loc;
  this.condition = cond;
  this.value_1 = v1;
  this.value_2 = v2;
  this.body = body;
  this.else_body = else_body;
}

function AliasNode(path, id, loc) {
  this.type = "Alias";
  this.loc = loc;
  this.path = path;
  this.id = id;
}

function IncludeNode(path, loc) {
  this.type = "Include";
  this.loc = loc;
  this.path = path;
}

function FilterNode(filter, body, loc) {
  this.type = "Filter";
  this.loc = loc;
  this.body = [body];
}

function MananaStringNode(body, loc) {
  this.type = "MananaString";
  this.loc = loc;
  if (typeof body === "string") {
    this.body = [body];
  } else {
    this.body = body;
  }
}

/* expose AST constructors to parser */

parser.ast = {};
parser.ast.Loc = Loc;
parser.ast.MananaStringNode = MananaStringNode;
parser.ast.VoidTagNode = VoidTagNode;
parser.ast.TagNode = TagNode;
parser.ast.PreNode = PreNode;
parser.ast.TextNode = TextNode;
parser.ast.NameNode = NameNode;
parser.ast.WithNode = WithNode;
parser.ast.IdNode = IdNode;
parser.ast.PathNode = PathNode;
parser.ast.MethodNode = MethodNode;
parser.ast.MethodChainNode = MethodChainNode;
parser.ast.FunctionNode = FunctionNode;
parser.ast.ForNode = ForNode;
parser.ast.IfNode = IfNode;
parser.ast.AliasNode = AliasNode;
parser.ast.IncludeNode = IncludeNode;
parser.ast.FilterNode = FilterNode;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

  function strip(start, end) {
    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.pushState("comment"); /* ignore */ 
break;
case 1:this.popState(); /* ignore */ 
break;
case 2:/* ignore */
break;
case 3:/* ignore */
break;
case 4:this.pushState("expr"); return "FOR";
break;
case 5:this.pushState("expr"); return "IF";
break;
case 6:this.pushState("expr"); return "ELSE";
break;
case 7:this.pushState("expr"); return "ALIAS";
break;
case 8:this.pushState("expr"); return "WITH";
break;
case 9:this.pushState("expr"); return "INCLUDE";
break;
case 10:return "BOOL";
break;
case 11:return "BOOL";
break;
case 12:this.popState(); return "END_EXPR";
break;
case 13:return "IN";
break;
case 14:return "IS";
break;
case 15:return "AS";
break;
case 16:return "NOT";
break;
case 17:return "TYPE";
break;
case 18:return "TYPE";
break;
case 19:return "TYPE";
break;
case 20:return "TYPE";
break;
case 21:return "TYPE";
break;
case 22:return "COND";
break;
case 23:return "COND";
break;
case 24:return "COND";
break;
case 25:return "COND";
break;
case 26:return "COND";
break;
case 27:return "COND";
break;
case 28:return "COND";
break;
case 29:return "COND";
break;
case 30:return "EXISTS";
break;
case 31:this.pushState("pre");    return "PRE";
break;
case 32:this.pushState("tag");    return "VOID_TAG";
break;
case 33:this.pushState("tag");    return "TAG";
break;
case 34:this.popState();          return "END_TAG";
break;
case 35:yy_.yytext = yy_.yytext.slice(1); return "TAG_ID";
break;
case 36:yy_.yytext = yy_.yytext.slice(1); return "TAG_CLASS";
break;
case 37:
                                            yy_.yytext = yy_.yytext.replace("->", '');
                                            yy_.yytext = yy_.yytext.replace(/\s*/, '')
                                            yy_.yytext = yy_.yytext.slice(1, -1)
                                            return "TAG_SRC";
                                         
break;
case 38:this.pushState("i_string_d"); return ["TAG_SRC_I_STRING", "I_STRING_D"];
break;
case 39:this.pushState("i_string_d"); return "I_STRING_D";
break;
case 40:this.pushState("i_string_d"); return "I_STRING_D";                                      
break;
case 41:this.pushState("name");       return "START_NAME";
break;
case 42:this.popState();              return "END_I_STRING_D"; // "
break;
case 43:return "I_STRING_TEXT";
break;
case 44:this.pushState("i_string_s"); return ["TAG_SRC_I_STRING", "I_STRING_S"];
break;
case 45:this.pushState("i_string_s"); return "I_STRING_S";
break;
case 46:this.pushState("i_string_s"); return "I_STRING_S";                                      
break;
case 47:this.pushState("name");       return "START_NAME";
break;
case 48:this.popState();              return "END_I_STRING_S"; // "
break;
case 49:return "I_STRING_TEXT";
break;
case 50:this.pushState("i_html"); return "I_HTML_START";
break;
case 51:this.pushState("name");   return "START_NAME";
break;
case 52:this.popState();          return "I_HTML_END";
break;
case 53:return "I_HTML_TEXT";
break;
case 54:return "HTML";
break;
case 55:this.pushState("tagargs"); return "LPAREN";
break;
case 56:this.popState();           return "RPAREN";
break;
case 57:this.pushState("tagargs"); return "LBRACE";
break;
case 58:this.popState();           return "RBRACE";
break;
case 59:return "COLON";
break;
case 60:return "EQ";
break;
case 61:return "COMMA";
break;
case 62:return "TAG_ATTR";
break;
case 63:yy_.yytext = "data-" + yy_.yytext.slice(1); return "TAG_DATA_ATTR";
break;
case 64:/* ignore */
break;
case 65:/* ignore */
break;
case 66:this.pushState("filter"); yy_.yytext = yy_.yytext.slice(1); return "FILTER";
break;
case 67:this.pushState("name"); return "START_NAME";
break;
case 68:this.popState(); return "RBRACE"
break;
case 69:this.pushState("fn"); yy_.yytext = yy_.yytext.slice(1); return "FN";
break;
case 70:this.popState(); return "RPAREN";
break;
case 71:/* ignore */
break;
case 72:/* ignore */
break;
case 73:return "LBRACE";
break;
case 74:return "RBRACE";
break;
case 75:return "COMMA";
break;
case 76:return "EQ";
break;
case 77:return "ID";
break;
case 78:return "DOT";
break;
case 79:return "LPAREN";
break;
case 80:return "RPAREN";
break;
case 81:return "LBRACK";
break;
case 82:return "RBRACK";
break;
case 83:return "COLON"; 
break;
case 84:return "COMMA";
break;
case 85:return "INT";
break;
case 86:yy_.yytext = strip(1,2).replace(/\\"/g, '"'); return "STRING";
break;
case 87:return "STRING"; // Do not strip quotes
break;
case 88:return "WORD";
break;
case 89:
  var tokens = [];
  while (0 < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }

  if (tokens.length) {
    tokens.push("EOF");
    return tokens;
  } else {
    return "EOF";
  }

break;
case 90:
  var tokens = [];
  while (_filter_indent_level >= _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }

  if (tokens.length) {
    tokens.push("EOF");
    return tokens;
  } else {
    return "EOF";
  }

break;
case 91:/* eat blank lines */
break;
case 92:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (indentation > _indent_stack[0]) {
    _indent_stack.unshift(indentation);
    return "INDENT";
  }

  var tokens = [];
  while (indentation < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }

  if (tokens.length) {
    return tokens;
  }

break;
case 93:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (_pre_indent_level === 0) {
    _pre_indent_level = indentation;
    yy_.yytext = indentation;
    return "PRE_START";

  } else if (indentation < _pre_indent_level) {
    _pre_indent_level = 0;
    this.popState();
    return "DEDENT";
  }

break;
case 94:
  this.popState();
  var tokens = ["EOF"];

  if (_indent_stack.length === 1) {
    return ["DEDENT", "EOF"];
  }
    
  while (0 < _indent_stack[0]) {
    _indent_stack.shift();
    tokens.unshift("DEDENT");
  }

  tokens.unshift("DEDENT");
  console.log(tokens);

  return tokens;
  /*
  //return ["DEDENT", "DEDENT", "EOF"];
  var tokens = [];
  while (0 < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }

  console.log('---');
  console.log(tokens);
  console.log('---');
  if (tokens.length) {
    tokens.push("DEDENT");
    //tokens.push("EOF");
    return tokens;
  } else {
    return "DEDENT";
  }
  */

break;
case 95:return "PRE_TEXT";
break;
case 96:return "PRE_TEXT";
break;
case 97:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (_filter_indent_level === 0) {
    _filter_indent_level = indentation;
    return "FILTER_START";
  } else if (indentation < _filter_indent_level) {
    _filter_indent_level = 0;
    this.popState();
    return "DEDENT";
  } 
  /* else ignore */

break;
case 98:/* ignore all other whitespace */
break;
}
},
rules: [/^(?:""")/,/^(?:""")/,/^(?:.+)/,/^(?:\n)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:alias\b)/,/^(?:with\b)/,/^(?:include\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:(?=\n))/,/^(?:in\b)/,/^(?:is\b)/,/^(?:as\b)/,/^(?:not\b)/,/^(?:Hash\b)/,/^(?:List\b)/,/^(?:String\b)/,/^(?:Integer\b)/,/^(?:Number\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?:>)/,/^(?:<)/,/^(?:%)/,/^(?:exists\b)/,/^(?:pre\b)/,/^(?:((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)))/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:(?=\n))/,/^(?:(#[a-zA-Z][a-zA-Z0-9\-\:_]*))/,/^(?:(\.-?[_a-zA-Z]+[_a-zA-Z0-9\-]*(?=["."\s\n])))/,/^(?:->\s*(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:->\s*(i"(?=.*?@\{)))/,/^(?:(i"(?=.*?@\{)))/,/^(?:(i"(?=.*?@\{)))/,/^(?:@\{)/,/^(?:")/,/^(?:[^"@"'"']*)/,/^(?:->\s*(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:@\{)/,/^(?:')/,/^(?:[^"@""'"]*)/,/^(?:(<(?=.*?@\{)))/,/^(?:@\{)/,/^(?:>(?=\s*\n))/,/^(?:.)/,/^(?:<.*(?=\n))/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z][a-zA-Z0-9\-_]*(?=\s*["="":"])))/,/^(?:(\*[a-zA-Z][a-zA-Z0-9\-]*(?=["="":"])))/,/^(?:\s)/,/^(?:\n)/,/^(?::(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:@\{)/,/^(?:\})/,/^(?:@(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254})\s?(?=\())/,/^(?:\)(?!\)))/,/^(?:\s)/,/^(?:\n)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:=)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:(\+|-)?(0|[1-9][0-9]*))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:([^\s\n"@"][^\s\n]*))/,/^(?:\s*$)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[^ ][^\n\r]*)/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"comment":{"rules":[1,2,3,91,98],"inclusive":true},"tag":{"rules":[34,35,36,37,38,40,44,46,55,57,67,69,87,88,91,98],"inclusive":true},"tagargs":{"rules":[39,45,56,58,59,60,61,62,63,64,65,86,91,98],"inclusive":true},"filter":{"rules":[40,46,67,87,88,90,91,97,98],"inclusive":true},"expr":{"rules":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,39,45,69,77,78,79,80,81,82,83,84,85,86,91,98],"inclusive":true},"name":{"rules":[39,45,68,77,78,79,80,81,82,83,84,85,86,91,98],"inclusive":true},"fn":{"rules":[10,11,39,45,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,91,98],"inclusive":true},"i_string_d":{"rules":[41,42,43,91,98],"inclusive":true},"i_string_s":{"rules":[47,48,49,91,98],"inclusive":true},"i_html":{"rules":[51,52,53,91,98],"inclusive":true},"pre":{"rules":[91,93,94,95,96,98],"inclusive":true},"INITIAL":{"rules":[0,4,5,6,7,8,9,31,32,33,40,46,50,54,66,67,69,87,88,89,91,92,98],"inclusive":true}}
};
_indent_stack = [0];
_pre_indent_level = 0;
_filter_indent_level = 0;;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = manana_parser;
exports.Parser = manana_parser.Parser;
exports.parse = function () { return manana_parser.parse.apply(manana_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}