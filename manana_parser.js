/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var manana_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"prog_list":4,"EOF":5,"stmt":6,"block":7,"INDENT":8,"stmt_list":9,"DEDENT":10,"html_stmt":11,"void_tag_stmt":12,"code_tag_stmt":13,"tag_stmt":14,"filter_stmt":15,"alias_stmt":16,"include_stmt":17,"with_stmt":18,"if_stmt":19,"for_stmt":20,"name":21,"fn":22,"HTML":23,"i_html":24,"I_HTML_START":25,"i_html_text":26,"I_HTML_END":27,"i_html_text_el":28,"I_HTML_TEXT":29,"void_tag":30,"END_TAG":31,"tag_attrs":32,"VOID_TAG":33,"CODE_TAG":34,"END_CODE_TAG":35,"code":36,"line":37,"LINE":38,"BLANK_LINE":39,"tag":40,"text":41,"TAG":42,"tag_attr":43,"tag_attr_args":44,"TAG_ID":45,"TAG_SRC":46,"TAG_SRC_I_STRING":47,"string":48,"tag_classes":49,"TAG_ATTR":50,"EQ":51,"TAG_DATA_ATTR":52,"LPAREN":53,"tag_attr_arg_list":54,"RPAREN":55,"LBRACE":56,"tag_attr_arg_list_alt":57,"RBRACE":58,"tag_attr_arg":59,"COMMA":60,"tag_attr_arg_alt":61,"COLON":62,"TAG_CLASS":63,"FILTER":64,"FILTER_START":65,"word_list":66,"word":67,"WORD":68,"SPACE":69,"path_or_fn":70,"path":71,"WITH":72,"AS":73,"ID":74,"END_EXPR":75,"FOR":76,"IN":77,"IF":78,"ev":79,"ELSE":80,"NOT":81,"COND":82,"IS":83,"TYPE":84,"EXISTS":85,"INT":86,"BOOL":87,"ALIAS":88,"INCLUDE":89,"id":90,"DOT":91,"meths":92,"LBRACK":93,"RBRACK":94,"meth":95,"meth_args":96,"meth_arg":97,"FN":98,"fn_args":99,"fn_arg":100,"hash":101,"hash_data":102,"hash_pair":103,"hash_val":104,"START_NAME":105,"STRING":106,"i_string":107,"I_STRING_D":108,"i_string_text":109,"END_I_STRING_D":110,"I_STRING_S":111,"END_I_STRING_S":112,"i_string_text_el":113,"I_STRING_TEXT":114,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",10:"DEDENT",23:"HTML",25:"I_HTML_START",27:"I_HTML_END",29:"I_HTML_TEXT",31:"END_TAG",33:"VOID_TAG",34:"CODE_TAG",35:"END_CODE_TAG",38:"LINE",39:"BLANK_LINE",42:"TAG",45:"TAG_ID",46:"TAG_SRC",47:"TAG_SRC_I_STRING",50:"TAG_ATTR",51:"EQ",52:"TAG_DATA_ATTR",53:"LPAREN",55:"RPAREN",56:"LBRACE",58:"RBRACE",60:"COMMA",62:"COLON",63:"TAG_CLASS",64:"FILTER",65:"FILTER_START",68:"WORD",69:"SPACE",72:"WITH",73:"AS",74:"ID",75:"END_EXPR",76:"FOR",77:"IN",78:"IF",80:"ELSE",81:"NOT",82:"COND",83:"IS",84:"TYPE",85:"EXISTS",86:"INT",87:"BOOL",88:"ALIAS",89:"INCLUDE",91:"DOT",93:"LBRACK",94:"RBRACK",98:"FN",105:"START_NAME",106:"STRING",108:"I_STRING_D",110:"END_I_STRING_D",111:"I_STRING_S",112:"END_I_STRING_S",114:"I_STRING_TEXT"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,3],[9,2],[9,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,1],[11,1],[24,3],[26,2],[26,1],[28,1],[28,1],[12,2],[12,3],[30,1],[13,4],[13,5],[36,2],[36,1],[37,2],[37,1],[14,2],[14,3],[14,3],[14,3],[14,4],[14,4],[40,1],[32,2],[32,1],[32,1],[43,1],[43,1],[43,2],[43,1],[43,3],[43,3],[44,3],[44,3],[54,2],[54,1],[59,3],[59,4],[59,3],[59,4],[57,2],[57,1],[61,3],[61,4],[61,3],[61,4],[49,2],[49,1],[15,4],[41,1],[66,1],[66,2],[67,1],[67,1],[67,1],[67,1],[67,1],[70,1],[70,1],[18,6],[20,6],[19,4],[19,7],[19,5],[19,8],[19,6],[19,9],[19,6],[19,9],[19,7],[19,10],[19,5],[19,8],[79,1],[79,1],[79,1],[79,1],[79,1],[16,5],[17,3],[17,3],[71,1],[71,3],[71,3],[90,1],[90,4],[90,6],[90,6],[90,4],[90,6],[90,6],[90,5],[90,5],[92,1],[92,3],[95,3],[95,4],[96,3],[96,1],[97,1],[97,1],[97,1],[22,3],[22,4],[99,3],[99,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,3],[100,3],[100,3],[100,3],[100,3],[101,3],[101,4],[102,3],[102,1],[103,3],[104,1],[104,1],[104,1],[104,1],[104,1],[104,1],[21,3],[48,1],[48,1],[107,3],[107,3],[109,2],[109,1],[113,1],[113,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0-1]; 
break;
case 6: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = [$$[$0]]; 
break;
case 20: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 22: 
      var body = [$$[$0-2]];
      body.push.apply(body, $$[$0-1]);
      body.push($$[$0]);
      this.$ = new MananaStringNode(body, new Loc(_$[$0-2], _$[$0])); 
    
break;
case 23: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 24: this.$ = [$$[$0]]; 
break;
case 27: this.$ = new VoidTagNode($$[$0-1], null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 28: this.$ = new VoidTagNode($$[$0-2], $$[$0-1],   new Loc(_$[$0-2], _$[$0-1])); 
break;
case 29: this.$ = $$[$0]; 
break;
case 30: this.$ = new CodeTagNode($$[$0-3], null, $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 31: this.$ = new CodeTagNode($$[$0-4], $$[$0-3],   $$[$0-1], new Loc(_$[$0-4], _$[$0-1])); 
break;
case 32: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 33: this.$ = [$$[$0]]; 
break;
case 34: this.$ = $$[$0-1] + $$[$0] 
break;
case 35: this.$ = ''; 
break;
case 36: this.$ = new TagNode($$[$0-1], null, null, null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 37: this.$ = new TagNode($$[$0-2], null, $$[$0-1],   null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 38: this.$ = new TagNode($$[$0-2], null, null, $$[$0],   new Loc(_$[$0-2], _$[$0])); 
break;
case 39: this.$ = new TagNode($$[$0-2], $$[$0-1],   null, null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 40: this.$ = new TagNode($$[$0-3], $$[$0-2],   $$[$0-1],   null, new Loc(_$[$0-3], _$[$0-1])); 
break;
case 41: this.$ = new TagNode($$[$0-3], $$[$0-2],   null, $$[$0],   new Loc(_$[$0-3], _$[$0])); 
break;
case 42: this.$ = $$[$0]; 
break;
case 43: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 44: this.$ = [$$[$0]]; 
break;
case 45: this.$ = $$[$0]; 
break;
case 46: this.$ = ['id', $$[$0]]; 
break;
case 47: this.$ = ['src', new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])) ]; 
break;
case 48: this.$ = ['src', $$[$0]]; 
break;
case 49: this.$ = ['class', $$[$0].join(" ")]; 
break;
case 50: this.$ = ['attr', $$[$0-2], $$[$0]]; 
break;
case 51: this.$ = ['data', $$[$0-2], $$[$0]]; 
break;
case 52: this.$ = $$[$0-1]; 
break;
case 53: this.$ = $$[$0-1]; 
break;
case 54: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 55: this.$ = [$$[$0]]; 
break;
case 56: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 57: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 58: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 59: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 60: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 61: this.$ = [$$[$0]]; 
break;
case 62: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 63: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 64: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 65: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 66: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 67: this.$ = [$$[$0]]; 
break;
case 68: this.$ = new FilterNode($$[$0-3], $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 69: this.$ = new TextNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 70: this.$ = [$$[$0]]; 
break;
case 71: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 79: this.$ = new WithNode($$[$0-4], $$[$0-2], $$[$0], new Loc(_$[$0-5], _$[$0])); 
break;
case 80: this.$ = new ForNode($$[$0-4], $$[$0-2], $$[$0] , new Loc(_$[$0-5], _$[$0])) ; 
break;
case 81: this.$ = new IfNode("true", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-3], _$[$0])); 
break;
case 82: this.$ = new IfNode("true", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-6], _$[$0])); 
break;
case 83: this.$ = new IfNode("false", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-4], _$[$0])); 
break;
case 84: this.$ = new IfNode("false", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-7], _$[$0])); 
break;
case 85: this.$ = new IfNode($$[$0-3], $$[$0-4], $$[$0-2], $$[$0], null, new Loc(_$[$0-5], _$[$0])); 
break;
case 86: this.$ = new IfNode($$[$0-6], $$[$0-7], $$[$0-5], $$[$0-3], $$[$0], new Loc(_$[$0-8], _$[$0])); 
break;
case 87: this.$ = new IfNode($$[$0-3], $$[$0-4], $$[$0-2], $$[$0], null, new Loc(_$[$0-5], _$[$0])); 
break;
case 88: this.$ = new IfNode($$[$0-6], $$[$0-7], $$[$0-5], $$[$0-3], null, new Loc(_$[$0-8], _$[$0])); 
break;
case 89: this.$ = new IfNode("is not", $$[$0-5], $$[$0-2], $$[$0], null, new Loc(_$[$0-6], _$[$0])); 
break;
case 90: this.$ = new IfNode("is not", $$[$0-8], $$[$0-5], $$[$0-3], $$[$0], new Loc(_$[$0-9], _$[$0])); 
break;
case 91: this.$ = new IfNode("exists", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-4], _$[$0])); 
break;
case 92: this.$ = new IfNode("exists", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-7], _$[$0])); 
break;
case 98: this.$ = new AliasNode($$[$0-3], $$[$0-1], new Loc(_$[$0-4], _$[$0])); 
break;
case 99: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 100: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 101: this.$ = new PathNode(null, $$[$0]  , null, new Loc(_$[$0], _$[$0])); 
break;
case 102: this.$ = new PathNode($$[$0-2]  , $$[$0]  , null, new Loc(_$[$0-2], _$[$0])); 
break;
case 103: this.$ = new PathNode($$[$0-2]  , null, $$[$0]  , new Loc(_$[$0-2], _$[$0])); 
break;
case 104: this.$ = new IdNode($$[$0], null, null, new Loc(_$[$0], _$[$0])); 
break;
case 105: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 106: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 107: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 108: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 109: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 110: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 111: this.$ = new IdNode($$[$0-4], 0   , $$[$0-1]  , new Loc(_$[$0-4], _$[$0])); 
break;
case 112: this.$ = new IdNode($$[$0-4], $$[$0-2]  , '*' , new Loc(_$[$0-4], _$[$0])); 
break;
case 113: this.$ = new MethodChainNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 114: this.$ = $$[$0-2]; this.$.chain.push($$[$0])                        ; 
break;
case 115: this.$ = new MethodNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 116: this.$ = new MethodNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 117: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 118: this.$ = [$$[$0]]; 
break;
case 122: this.$ = new FunctionNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 123: this.$ = new FunctionNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 124: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 125: this.$ = [$$[$0]]; 
break;
case 131: this.$ = $$[$0]; 
break;
case 132: this.$ = $$[$0]; 
break;
case 133: this.$ = $$[$0]; 
break;
case 134: this.$ = $$[$0]; 
break;
case 135: this.$ = $$[$0]; 
break;
case 136: this.$ = new MananaHash($$[$0-1]); 
break;
case 137: this.$ = new MananaHash($$[$0-2]); 
break;
case 138: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 139: this.$ = [$$[$0]]; 
break;
case 140: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 147: this.$ = $$[$0-1]; 
break;
case 148: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 150: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 151: this.$ = new MananaStringNode($$[$0-1], new Loc(_$[$0-2], _$[$0])); 
break;
case 152: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 153: this.$ = [$$[$0]]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,17],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:[1,18],24:19,25:[1,31],30:20,33:[1,32],34:[1,21],40:22,42:[1,33],64:[1,23],72:[1,26],76:[1,28],78:[1,27],88:[1,24],89:[1,25],98:[1,30],105:[1,29]},{1:[3]},{5:[1,34],6:35,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:[1,18],24:19,25:[1,31],30:20,33:[1,32],34:[1,21],40:22,42:[1,33],64:[1,23],72:[1,26],76:[1,28],78:[1,27],88:[1,24],89:[1,25],98:[1,30],105:[1,29]},{5:[2,3],23:[2,3],25:[2,3],33:[2,3],34:[2,3],42:[2,3],64:[2,3],72:[2,3],76:[2,3],78:[2,3],88:[2,3],89:[2,3],98:[2,3],105:[2,3]},{5:[2,4],23:[2,4],25:[2,4],33:[2,4],34:[2,4],42:[2,4],64:[2,4],72:[2,4],76:[2,4],78:[2,4],88:[2,4],89:[2,4],98:[2,4],105:[2,4]},{5:[2,8],10:[2,8],23:[2,8],25:[2,8],33:[2,8],34:[2,8],42:[2,8],64:[2,8],72:[2,8],76:[2,8],78:[2,8],88:[2,8],89:[2,8],98:[2,8],105:[2,8]},{5:[2,9],10:[2,9],23:[2,9],25:[2,9],33:[2,9],34:[2,9],42:[2,9],64:[2,9],72:[2,9],76:[2,9],78:[2,9],88:[2,9],89:[2,9],98:[2,9],105:[2,9]},{5:[2,10],10:[2,10],23:[2,10],25:[2,10],33:[2,10],34:[2,10],42:[2,10],64:[2,10],72:[2,10],76:[2,10],78:[2,10],88:[2,10],89:[2,10],98:[2,10],105:[2,10]},{5:[2,11],10:[2,11],23:[2,11],25:[2,11],33:[2,11],34:[2,11],42:[2,11],64:[2,11],72:[2,11],76:[2,11],78:[2,11],88:[2,11],89:[2,11],98:[2,11],105:[2,11]},{5:[2,12],10:[2,12],23:[2,12],25:[2,12],33:[2,12],34:[2,12],42:[2,12],64:[2,12],72:[2,12],76:[2,12],78:[2,12],88:[2,12],89:[2,12],98:[2,12],105:[2,12]},{5:[2,13],10:[2,13],23:[2,13],25:[2,13],33:[2,13],34:[2,13],42:[2,13],64:[2,13],72:[2,13],76:[2,13],78:[2,13],88:[2,13],89:[2,13],98:[2,13],105:[2,13]},{5:[2,14],10:[2,14],23:[2,14],25:[2,14],33:[2,14],34:[2,14],42:[2,14],64:[2,14],72:[2,14],76:[2,14],78:[2,14],88:[2,14],89:[2,14],98:[2,14],105:[2,14]},{5:[2,15],10:[2,15],23:[2,15],25:[2,15],33:[2,15],34:[2,15],42:[2,15],64:[2,15],72:[2,15],76:[2,15],78:[2,15],88:[2,15],89:[2,15],98:[2,15],105:[2,15]},{5:[2,16],10:[2,16],23:[2,16],25:[2,16],33:[2,16],34:[2,16],42:[2,16],64:[2,16],72:[2,16],76:[2,16],78:[2,16],88:[2,16],89:[2,16],98:[2,16],105:[2,16]},{5:[2,17],10:[2,17],23:[2,17],25:[2,17],33:[2,17],34:[2,17],42:[2,17],64:[2,17],72:[2,17],76:[2,17],78:[2,17],88:[2,17],89:[2,17],98:[2,17],105:[2,17]},{5:[2,18],10:[2,18],23:[2,18],25:[2,18],33:[2,18],34:[2,18],42:[2,18],64:[2,18],72:[2,18],76:[2,18],78:[2,18],88:[2,18],89:[2,18],98:[2,18],105:[2,18]},{5:[2,19],10:[2,19],23:[2,19],25:[2,19],33:[2,19],34:[2,19],42:[2,19],64:[2,19],72:[2,19],76:[2,19],78:[2,19],88:[2,19],89:[2,19],98:[2,19],105:[2,19]},{6:37,9:36,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:[1,18],24:19,25:[1,31],30:20,33:[1,32],34:[1,21],40:22,42:[1,33],64:[1,23],72:[1,26],76:[1,28],78:[1,27],88:[1,24],89:[1,25],98:[1,30],105:[1,29]},{5:[2,20],10:[2,20],23:[2,20],25:[2,20],33:[2,20],34:[2,20],42:[2,20],64:[2,20],72:[2,20],76:[2,20],78:[2,20],88:[2,20],89:[2,20],98:[2,20],105:[2,20]},{5:[2,21],10:[2,21],23:[2,21],25:[2,21],33:[2,21],34:[2,21],42:[2,21],64:[2,21],72:[2,21],76:[2,21],78:[2,21],88:[2,21],89:[2,21],98:[2,21],105:[2,21]},{31:[1,38],32:39,43:40,44:41,45:[1,42],46:[1,43],47:[1,44],49:45,50:[1,46],52:[1,47],53:[1,48],56:[1,49],63:[1,50]},{32:52,35:[1,51],43:40,44:41,45:[1,42],46:[1,43],47:[1,44],49:45,50:[1,46],52:[1,47],53:[1,48],56:[1,49],63:[1,50]},{21:59,22:60,31:[1,53],32:55,41:54,43:40,44:41,45:[1,42],46:[1,43],47:[1,44],48:61,49:45,50:[1,46],52:[1,47],53:[1,48],56:[1,49],63:[1,50],66:56,67:57,68:[1,58],69:[1,62],98:[1,30],105:[1,29],106:[1,63],107:64,108:[1,65],111:[1,66]},{65:[1,67]},{22:70,70:68,71:69,74:[1,72],90:71,98:[1,30]},{48:73,71:74,74:[1,72],90:71,106:[1,63],107:64,108:[1,65],111:[1,66]},{22:70,70:75,71:69,74:[1,72],90:71,98:[1,30]},{22:83,48:79,71:82,74:[1,72],79:76,81:[1,77],85:[1,78],86:[1,80],87:[1,81],90:71,98:[1,30],106:[1,63],107:64,108:[1,65],111:[1,66]},{74:[1,84]},{71:85,74:[1,72],90:71},{53:[1,86]},{21:90,26:87,28:88,29:[1,89],105:[1,29]},{31:[2,29],45:[2,29],46:[2,29],47:[2,29],50:[2,29],52:[2,29],53:[2,29],56:[2,29],63:[2,29]},{31:[2,42],45:[2,42],46:[2,42],47:[2,42],50:[2,42],52:[2,42],53:[2,42],56:[2,42],63:[2,42],68:[2,42],69:[2,42],98:[2,42],105:[2,42],106:[2,42],108:[2,42],111:[2,42]},{1:[2,1]},{5:[2,2],23:[2,2],25:[2,2],33:[2,2],34:[2,2],42:[2,2],64:[2,2],72:[2,2],76:[2,2],78:[2,2],88:[2,2],89:[2,2],98:[2,2],105:[2,2]},{6:92,10:[1,91],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:[1,18],24:19,25:[1,31],30:20,33:[1,32],34:[1,21],40:22,42:[1,33],64:[1,23],72:[1,26],76:[1,28],78:[1,27],88:[1,24],89:[1,25],98:[1,30],105:[1,29]},{10:[2,7],23:[2,7],25:[2,7],33:[2,7],34:[2,7],42:[2,7],64:[2,7],72:[2,7],76:[2,7],78:[2,7],88:[2,7],89:[2,7],98:[2,7],105:[2,7]},{5:[2,27],10:[2,27],23:[2,27],25:[2,27],33:[2,27],34:[2,27],42:[2,27],64:[2,27],72:[2,27],76:[2,27],78:[2,27],88:[2,27],89:[2,27],98:[2,27],105:[2,27]},{31:[1,93],43:94,45:[1,42],46:[1,43],47:[1,44],49:45,50:[1,46],52:[1,47],63:[1,50]},{31:[2,44],35:[2,44],45:[2,44],46:[2,44],47:[2,44],50:[2,44],52:[2,44],63:[2,44],68:[2,44],69:[2,44],98:[2,44],105:[2,44],106:[2,44],108:[2,44],111:[2,44]},{31:[2,45],35:[2,45],45:[2,45],46:[2,45],47:[2,45],50:[2,45],52:[2,45],63:[2,45],68:[2,45],69:[2,45],98:[2,45],105:[2,45],106:[2,45],108:[2,45],111:[2,45]},{31:[2,46],35:[2,46],45:[2,46],46:[2,46],47:[2,46],50:[2,46],52:[2,46],63:[2,46],68:[2,46],69:[2,46],98:[2,46],105:[2,46],106:[2,46],108:[2,46],111:[2,46]},{31:[2,47],35:[2,47],45:[2,47],46:[2,47],47:[2,47],50:[2,47],52:[2,47],63:[2,47],68:[2,47],69:[2,47],98:[2,47],105:[2,47],106:[2,47],108:[2,47],111:[2,47]},{48:95,106:[1,63],107:64,108:[1,65],111:[1,66]},{31:[2,49],35:[2,49],45:[2,49],46:[2,49],47:[2,49],50:[2,49],52:[2,49],63:[1,96],68:[2,49],69:[2,49],98:[2,49],105:[2,49],106:[2,49],108:[2,49],111:[2,49]},{51:[1,97]},{51:[1,98]},{50:[1,101],52:[1,102],54:99,59:100},{50:[1,105],52:[1,106],57:103,61:104},{31:[2,67],35:[2,67],45:[2,67],46:[2,67],47:[2,67],50:[2,67],52:[2,67],63:[2,67],68:[2,67],69:[2,67],98:[2,67],105:[2,67],106:[2,67],108:[2,67],111:[2,67]},{8:[1,109],36:107,37:108,39:[1,110]},{35:[1,111],43:94,45:[1,42],46:[1,43],47:[1,44],49:45,50:[1,46],52:[1,47],63:[1,50]},{5:[2,36],7:112,8:[1,17],10:[2,36],23:[2,36],25:[2,36],33:[2,36],34:[2,36],42:[2,36],64:[2,36],72:[2,36],76:[2,36],78:[2,36],88:[2,36],89:[2,36],98:[2,36],105:[2,36]},{31:[1,113]},{21:59,22:60,31:[1,114],41:115,43:94,45:[1,42],46:[1,43],47:[1,44],48:61,49:45,50:[1,46],52:[1,47],63:[1,50],66:56,67:57,68:[1,58],69:[1,62],98:[1,30],105:[1,29],106:[1,63],107:64,108:[1,65],111:[1,66]},{10:[2,69],21:59,22:60,31:[2,69],48:61,67:116,68:[1,58],69:[1,62],98:[1,30],105:[1,29],106:[1,63],107:64,108:[1,65],111:[1,66]},{10:[2,70],31:[2,70],68:[2,70],69:[2,70],98:[2,70],105:[2,70],106:[2,70],108:[2,70],111:[2,70]},{10:[2,72],31:[2,72],68:[2,72],69:[2,72],98:[2,72],105:[2,72],106:[2,72],108:[2,72],111:[2,72]},{10:[2,73],31:[2,73],68:[2,73],69:[2,73],98:[2,73],105:[2,73],106:[2,73],108:[2,73],111:[2,73]},{10:[2,74],31:[2,74],68:[2,74],69:[2,74],98:[2,74],105:[2,74],106:[2,74],108:[2,74],111:[2,74]},{10:[2,75],31:[2,75],68:[2,75],69:[2,75],98:[2,75],105:[2,75],106:[2,75],108:[2,75],111:[2,75]},{10:[2,76],31:[2,76],68:[2,76],69:[2,76],98:[2,76],105:[2,76],106:[2,76],108:[2,76],111:[2,76]},{10:[2,148],31:[2,148],35:[2,148],45:[2,148],46:[2,148],47:[2,148],50:[2,148],52:[2,148],55:[2,148],58:[2,148],60:[2,148],63:[2,148],68:[2,148],69:[2,148],75:[2,148],82:[2,148],83:[2,148],98:[2,148],105:[2,148],106:[2,148],108:[2,148],111:[2,148]},{10:[2,149],31:[2,149],35:[2,149],45:[2,149],46:[2,149],47:[2,149],50:[2,149],52:[2,149],55:[2,149],58:[2,149],60:[2,149],63:[2,149],68:[2,149],69:[2,149],75:[2,149],82:[2,149],83:[2,149],98:[2,149],105:[2,149],106:[2,149],108:[2,149],111:[2,149]},{21:119,105:[1,29],109:117,113:118,114:[1,120]},{21:119,105:[1,29],109:121,113:118,114:[1,120]},{21:59,22:60,41:122,48:61,66:56,67:57,68:[1,58],69:[1,62],98:[1,30],105:[1,29],106:[1,63],107:64,108:[1,65],111:[1,66]},{73:[1,123]},{73:[2,77],91:[1,124]},{73:[2,78]},{55:[2,101],58:[2,101],60:[2,101],62:[2,101],73:[2,101],75:[2,101],82:[2,101],83:[2,101],91:[2,101],94:[2,101]},{55:[2,104],58:[2,104],60:[2,104],62:[2,104],73:[2,104],75:[2,104],82:[2,104],83:[2,104],91:[2,104],93:[1,125],94:[2,104]},{75:[1,126]},{75:[1,127],91:[1,124]},{73:[1,128]},{75:[1,129],82:[1,130],83:[1,131]},{22:83,48:79,71:82,74:[1,72],79:132,86:[1,80],87:[1,81],90:71,98:[1,30],106:[1,63],107:64,108:[1,65],111:[1,66]},{22:83,48:79,71:82,74:[1,72],79:133,86:[1,80],87:[1,81],90:71,98:[1,30],106:[1,63],107:64,108:[1,65],111:[1,66]},{75:[2,93],82:[2,93],83:[2,93]},{75:[2,94],82:[2,94],83:[2,94]},{75:[2,95],82:[2,95],83:[2,95]},{75:[2,96],82:[2,96],83:[2,96],91:[1,124]},{75:[2,97],82:[2,97],83:[2,97]},{77:[1,134]},{58:[1,135],91:[1,124]},{22:142,48:141,55:[1,136],56:[1,145],71:139,74:[1,144],86:[1,140],90:71,98:[1,30],99:137,100:138,101:143,106:[1,63],107:64,108:[1,65],111:[1,66]},{21:90,27:[1,146],28:147,29:[1,89],105:[1,29]},{27:[2,24],29:[2,24],105:[2,24]},{27:[2,25],29:[2,25],105:[2,25]},{27:[2,26],29:[2,26],105:[2,26]},{5:[2,5],10:[2,5],23:[2,5],25:[2,5],33:[2,5],34:[2,5],42:[2,5],64:[2,5],72:[2,5],76:[2,5],78:[2,5],80:[2,5],88:[2,5],89:[2,5],98:[2,5],105:[2,5]},{10:[2,6],23:[2,6],25:[2,6],33:[2,6],34:[2,6],42:[2,6],64:[2,6],72:[2,6],76:[2,6],78:[2,6],88:[2,6],89:[2,6],98:[2,6],105:[2,6]},{5:[2,28],10:[2,28],23:[2,28],25:[2,28],33:[2,28],34:[2,28],42:[2,28],64:[2,28],72:[2,28],76:[2,28],78:[2,28],88:[2,28],89:[2,28],98:[2,28],105:[2,28]},{31:[2,43],35:[2,43],45:[2,43],46:[2,43],47:[2,43],50:[2,43],52:[2,43],63:[2,43],68:[2,43],69:[2,43],98:[2,43],105:[2,43],106:[2,43],108:[2,43],111:[2,43]},{31:[2,48],35:[2,48],45:[2,48],46:[2,48],47:[2,48],50:[2,48],52:[2,48],63:[2,48],68:[2,48],69:[2,48],98:[2,48],105:[2,48],106:[2,48],108:[2,48],111:[2,48]},{31:[2,66],35:[2,66],45:[2,66],46:[2,66],47:[2,66],50:[2,66],52:[2,66],63:[2,66],68:[2,66],69:[2,66],98:[2,66],105:[2,66],106:[2,66],108:[2,66],111:[2,66]},{48:148,106:[1,63],107:64,108:[1,65],111:[1,66]},{48:149,106:[1,63],107:64,108:[1,65],111:[1,66]},{50:[1,101],52:[1,102],55:[1,150],59:151},{50:[2,55],52:[2,55],55:[2,55]},{51:[1,152]},{51:[1,153]},{50:[1,105],52:[1,106],58:[1,154],61:155},{50:[2,61],52:[2,61],58:[2,61]},{62:[1,156]},{62:[1,157]},{8:[1,109],10:[1,158],37:159,39:[1,110]},{8:[2,33],10:[2,33],39:[2,33]},{38:[1,160]},{8:[2,35],10:[2,35],39:[2,35]},{8:[1,109],36:161,37:108,39:[1,110]},{5:[2,38],10:[2,38],23:[2,38],25:[2,38],33:[2,38],34:[2,38],42:[2,38],64:[2,38],72:[2,38],76:[2,38],78:[2,38],88:[2,38],89:[2,38],98:[2,38],105:[2,38]},{5:[2,37],10:[2,37],23:[2,37],25:[2,37],33:[2,37],34:[2,37],42:[2,37],64:[2,37],72:[2,37],76:[2,37],78:[2,37],88:[2,37],89:[2,37],98:[2,37],105:[2,37]},{5:[2,39],7:162,8:[1,17],10:[2,39],23:[2,39],25:[2,39],33:[2,39],34:[2,39],42:[2,39],64:[2,39],72:[2,39],76:[2,39],78:[2,39],88:[2,39],89:[2,39],98:[2,39],105:[2,39]},{31:[1,163]},{10:[2,71],31:[2,71],68:[2,71],69:[2,71],98:[2,71],105:[2,71],106:[2,71],108:[2,71],111:[2,71]},{21:119,105:[1,29],110:[1,164],113:165,114:[1,120]},{105:[2,153],110:[2,153],112:[2,153],114:[2,153]},{105:[2,154],110:[2,154],112:[2,154],114:[2,154]},{105:[2,155],110:[2,155],112:[2,155],114:[2,155]},{21:119,105:[1,29],112:[1,166],113:165,114:[1,120]},{10:[1,167]},{74:[1,168]},{74:[1,171],90:169,92:170,95:172},{62:[1,175],71:174,74:[1,72],86:[1,173],90:71},{5:[2,99],10:[2,99],23:[2,99],25:[2,99],33:[2,99],34:[2,99],42:[2,99],64:[2,99],72:[2,99],76:[2,99],78:[2,99],88:[2,99],89:[2,99],98:[2,99],105:[2,99]},{5:[2,100],10:[2,100],23:[2,100],25:[2,100],33:[2,100],34:[2,100],42:[2,100],64:[2,100],72:[2,100],76:[2,100],78:[2,100],88:[2,100],89:[2,100],98:[2,100],105:[2,100]},{74:[1,176]},{7:177,8:[1,17]},{22:83,48:79,71:82,74:[1,72],79:178,86:[1,80],87:[1,81],90:71,98:[1,30],106:[1,63],107:64,108:[1,65],111:[1,66]},{81:[1,180],84:[1,179]},{75:[1,181]},{75:[1,182]},{71:183,74:[1,72],90:71},{5:[2,147],10:[2,147],23:[2,147],25:[2,147],27:[2,147],29:[2,147],31:[2,147],33:[2,147],34:[2,147],42:[2,147],64:[2,147],68:[2,147],69:[2,147],72:[2,147],76:[2,147],78:[2,147],88:[2,147],89:[2,147],98:[2,147],105:[2,147],106:[2,147],108:[2,147],110:[2,147],111:[2,147],112:[2,147],114:[2,147]},{5:[2,122],10:[2,122],23:[2,122],25:[2,122],31:[2,122],33:[2,122],34:[2,122],42:[2,122],55:[2,122],58:[2,122],60:[2,122],64:[2,122],68:[2,122],69:[2,122],72:[2,122],73:[2,122],75:[2,122],76:[2,122],78:[2,122],82:[2,122],83:[2,122],88:[2,122],89:[2,122],98:[2,122],105:[2,122],106:[2,122],108:[2,122],111:[2,122]},{55:[1,184],60:[1,185]},{55:[2,125],60:[2,125]},{55:[2,126],60:[2,126],91:[1,124]},{55:[2,127],60:[2,127]},{55:[2,128],60:[2,128]},{55:[2,129],60:[2,129]},{55:[2,130],60:[2,130]},{51:[1,186],55:[2,104],60:[2,104],91:[2,104],93:[1,125]},{74:[1,189],102:187,103:188},{5:[2,22],10:[2,22],23:[2,22],25:[2,22],33:[2,22],34:[2,22],42:[2,22],64:[2,22],72:[2,22],76:[2,22],78:[2,22],88:[2,22],89:[2,22],98:[2,22],105:[2,22]},{27:[2,23],29:[2,23],105:[2,23]},{31:[2,50],35:[2,50],45:[2,50],46:[2,50],47:[2,50],50:[2,50],52:[2,50],63:[2,50],68:[2,50],69:[2,50],98:[2,50],105:[2,50],106:[2,50],108:[2,50],111:[2,50]},{31:[2,51],35:[2,51],45:[2,51],46:[2,51],47:[2,51],50:[2,51],52:[2,51],63:[2,51],68:[2,51],69:[2,51],98:[2,51],105:[2,51],106:[2,51],108:[2,51],111:[2,51]},{31:[2,52],35:[2,52],45:[2,52],46:[2,52],47:[2,52],50:[2,52],52:[2,52],63:[2,52],68:[2,52],69:[2,52],98:[2,52],105:[2,52],106:[2,52],108:[2,52],111:[2,52]},{50:[2,54],52:[2,54],55:[2,54]},{48:190,106:[1,63],107:64,108:[1,65],111:[1,66]},{48:191,106:[1,63],107:64,108:[1,65],111:[1,66]},{31:[2,53],35:[2,53],45:[2,53],46:[2,53],47:[2,53],50:[2,53],52:[2,53],63:[2,53],68:[2,53],69:[2,53],98:[2,53],105:[2,53],106:[2,53],108:[2,53],111:[2,53]},{50:[2,60],52:[2,60],58:[2,60]},{48:192,106:[1,63],107:64,108:[1,65],111:[1,66]},{48:193,106:[1,63],107:64,108:[1,65],111:[1,66]},{5:[2,30],10:[2,30],23:[2,30],25:[2,30],33:[2,30],34:[2,30],42:[2,30],64:[2,30],72:[2,30],76:[2,30],78:[2,30],88:[2,30],89:[2,30],98:[2,30],105:[2,30]},{8:[2,32],10:[2,32],39:[2,32]},{8:[2,34],10:[2,34],39:[2,34]},{8:[1,109],10:[1,194],37:159,39:[1,110]},{5:[2,41],10:[2,41],23:[2,41],25:[2,41],33:[2,41],34:[2,41],42:[2,41],64:[2,41],72:[2,41],76:[2,41],78:[2,41],88:[2,41],89:[2,41],98:[2,41],105:[2,41]},{5:[2,40],10:[2,40],23:[2,40],25:[2,40],33:[2,40],34:[2,40],42:[2,40],64:[2,40],72:[2,40],76:[2,40],78:[2,40],88:[2,40],89:[2,40],98:[2,40],105:[2,40]},{10:[2,150],31:[2,150],35:[2,150],45:[2,150],46:[2,150],47:[2,150],50:[2,150],52:[2,150],55:[2,150],58:[2,150],60:[2,150],63:[2,150],68:[2,150],69:[2,150],75:[2,150],82:[2,150],83:[2,150],98:[2,150],105:[2,150],106:[2,150],108:[2,150],111:[2,150]},{105:[2,152],110:[2,152],112:[2,152],114:[2,152]},{10:[2,151],31:[2,151],35:[2,151],45:[2,151],46:[2,151],47:[2,151],50:[2,151],52:[2,151],55:[2,151],58:[2,151],60:[2,151],63:[2,151],68:[2,151],69:[2,151],75:[2,151],82:[2,151],83:[2,151],98:[2,151],105:[2,151],106:[2,151],108:[2,151],111:[2,151]},{5:[2,68],10:[2,68],23:[2,68],25:[2,68],33:[2,68],34:[2,68],42:[2,68],64:[2,68],72:[2,68],76:[2,68],78:[2,68],88:[2,68],89:[2,68],98:[2,68],105:[2,68]},{75:[1,195]},{55:[2,102],58:[2,102],60:[2,102],62:[2,102],73:[2,102],75:[2,102],82:[2,102],83:[2,102],91:[2,102],94:[2,102]},{55:[2,103],58:[2,103],60:[2,103],62:[2,103],73:[2,103],75:[2,103],82:[2,103],83:[2,103],91:[1,196],94:[2,103]},{53:[1,197],55:[2,104],58:[2,104],60:[2,104],62:[2,104],73:[2,104],75:[2,104],82:[2,104],83:[2,104],91:[2,104],93:[1,125],94:[2,104]},{55:[2,113],58:[2,113],60:[2,113],62:[2,113],73:[2,113],75:[2,113],82:[2,113],83:[2,113],91:[2,113],94:[2,113]},{62:[1,199],94:[1,198]},{62:[1,201],91:[1,124],94:[1,200]},{86:[1,202]},{75:[1,203]},{5:[2,81],10:[2,81],23:[2,81],25:[2,81],33:[2,81],34:[2,81],42:[2,81],64:[2,81],72:[2,81],76:[2,81],78:[2,81],80:[1,204],88:[2,81],89:[2,81],98:[2,81],105:[2,81]},{75:[1,205]},{75:[1,206]},{84:[1,207]},{7:208,8:[1,17]},{7:209,8:[1,17]},{75:[1,210],91:[1,124]},{5:[2,123],10:[2,123],23:[2,123],25:[2,123],31:[2,123],33:[2,123],34:[2,123],42:[2,123],55:[2,123],58:[2,123],60:[2,123],64:[2,123],68:[2,123],69:[2,123],72:[2,123],73:[2,123],75:[2,123],76:[2,123],78:[2,123],82:[2,123],83:[2,123],88:[2,123],89:[2,123],98:[2,123],105:[2,123],106:[2,123],108:[2,123],111:[2,123]},{22:142,48:141,56:[1,145],71:139,74:[1,144],86:[1,140],90:71,98:[1,30],100:211,101:143,106:[1,63],107:64,108:[1,65],111:[1,66]},{22:215,48:214,56:[1,145],71:212,74:[1,72],86:[1,213],90:71,98:[1,30],101:216,106:[1,63],107:64,108:[1,65],111:[1,66]},{58:[1,217],60:[1,218]},{58:[2,139],60:[2,139]},{62:[1,219]},{50:[2,56],52:[2,56],55:[2,56],60:[1,220]},{50:[2,58],52:[2,58],55:[2,58],60:[1,221]},{50:[2,62],52:[2,62],58:[2,62],60:[1,222]},{50:[2,64],52:[2,64],58:[2,64],60:[1,223]},{5:[2,31],10:[2,31],23:[2,31],25:[2,31],33:[2,31],34:[2,31],42:[2,31],64:[2,31],72:[2,31],76:[2,31],78:[2,31],88:[2,31],89:[2,31],98:[2,31],105:[2,31]},{5:[2,98],10:[2,98],23:[2,98],25:[2,98],33:[2,98],34:[2,98],42:[2,98],64:[2,98],72:[2,98],76:[2,98],78:[2,98],88:[2,98],89:[2,98],98:[2,98],105:[2,98]},{74:[1,225],95:224},{48:231,55:[1,226],71:229,74:[1,72],86:[1,230],90:71,96:227,97:228,106:[1,63],107:64,108:[1,65],111:[1,66]},{55:[2,105],58:[2,105],60:[2,105],62:[2,105],73:[2,105],75:[2,105],82:[2,105],83:[2,105],91:[2,105],94:[2,105]},{71:233,74:[1,72],86:[1,232],90:71,94:[1,234]},{55:[2,108],58:[2,108],60:[2,108],62:[2,108],73:[2,108],75:[2,108],82:[2,108],83:[2,108],91:[2,108],94:[2,108]},{71:236,74:[1,72],86:[1,235],90:71},{94:[1,237]},{7:238,8:[1,17]},{75:[1,239]},{7:240,8:[1,17]},{7:241,8:[1,17]},{75:[1,242]},{5:[2,83],10:[2,83],23:[2,83],25:[2,83],33:[2,83],34:[2,83],42:[2,83],64:[2,83],72:[2,83],76:[2,83],78:[2,83],80:[1,243],88:[2,83],89:[2,83],98:[2,83],105:[2,83]},{5:[2,91],10:[2,91],23:[2,91],25:[2,91],33:[2,91],34:[2,91],42:[2,91],64:[2,91],72:[2,91],76:[2,91],78:[2,91],80:[1,244],88:[2,91],89:[2,91],98:[2,91],105:[2,91]},{7:245,8:[1,17]},{55:[2,124],60:[2,124]},{55:[2,131],60:[2,131],91:[1,124]},{55:[2,132],60:[2,132]},{55:[2,133],60:[2,133]},{55:[2,134],60:[2,134]},{55:[2,135],60:[2,135]},{55:[2,136],58:[2,136],60:[2,136]},{58:[1,246],74:[1,189],103:247},{22:252,48:251,56:[1,145],71:254,74:[1,72],86:[1,249],87:[1,250],90:71,98:[1,30],101:253,104:248,106:[1,63],107:64,108:[1,65],111:[1,66]},{50:[2,57],52:[2,57],55:[2,57]},{50:[2,59],52:[2,59],55:[2,59]},{50:[2,63],52:[2,63],58:[2,63]},{50:[2,65],52:[2,65],58:[2,65]},{55:[2,114],58:[2,114],60:[2,114],62:[2,114],73:[2,114],75:[2,114],82:[2,114],83:[2,114],91:[2,114],94:[2,114]},{53:[1,197]},{55:[2,115],58:[2,115],60:[2,115],62:[2,115],73:[2,115],75:[2,115],82:[2,115],83:[2,115],91:[2,115],94:[2,115]},{55:[1,255],60:[1,256]},{55:[2,118],60:[2,118]},{55:[2,119],60:[2,119],91:[1,124]},{55:[2,120],60:[2,120]},{55:[2,121],60:[2,121]},{94:[1,257]},{91:[1,124],94:[1,258]},{55:[2,112],58:[2,112],60:[2,112],62:[2,112],73:[2,112],75:[2,112],82:[2,112],83:[2,112],91:[2,112],94:[2,112]},{94:[1,259]},{91:[1,124],94:[1,260]},{55:[2,111],58:[2,111],60:[2,111],62:[2,111],73:[2,111],75:[2,111],82:[2,111],83:[2,111],91:[2,111],94:[2,111]},{5:[2,79],10:[2,79],23:[2,79],25:[2,79],33:[2,79],34:[2,79],42:[2,79],64:[2,79],72:[2,79],76:[2,79],78:[2,79],88:[2,79],89:[2,79],98:[2,79],105:[2,79]},{7:261,8:[1,17]},{5:[2,85],10:[2,85],23:[2,85],25:[2,85],33:[2,85],34:[2,85],42:[2,85],64:[2,85],72:[2,85],76:[2,85],78:[2,85],80:[1,262],88:[2,85],89:[2,85],98:[2,85],105:[2,85]},{5:[2,87],10:[2,87],23:[2,87],25:[2,87],33:[2,87],34:[2,87],42:[2,87],64:[2,87],72:[2,87],76:[2,87],78:[2,87],80:[1,263],88:[2,87],89:[2,87],98:[2,87],105:[2,87]},{7:264,8:[1,17]},{75:[1,265]},{75:[1,266]},{5:[2,80],10:[2,80],23:[2,80],25:[2,80],33:[2,80],34:[2,80],42:[2,80],64:[2,80],72:[2,80],76:[2,80],78:[2,80],88:[2,80],89:[2,80],98:[2,80],105:[2,80]},{55:[2,137],58:[2,137],60:[2,137]},{58:[2,138],60:[2,138]},{58:[2,140],60:[2,140]},{58:[2,141],60:[2,141]},{58:[2,142],60:[2,142]},{58:[2,143],60:[2,143]},{58:[2,144],60:[2,144]},{58:[2,145],60:[2,145]},{58:[2,146],60:[2,146],91:[1,124]},{55:[2,116],58:[2,116],60:[2,116],62:[2,116],73:[2,116],75:[2,116],82:[2,116],83:[2,116],91:[2,116],94:[2,116]},{48:231,71:229,74:[1,72],86:[1,230],90:71,97:267,106:[1,63],107:64,108:[1,65],111:[1,66]},{55:[2,106],58:[2,106],60:[2,106],62:[2,106],73:[2,106],75:[2,106],82:[2,106],83:[2,106],91:[2,106],94:[2,106]},{55:[2,107],58:[2,107],60:[2,107],62:[2,107],73:[2,107],75:[2,107],82:[2,107],83:[2,107],91:[2,107],94:[2,107]},{55:[2,109],58:[2,109],60:[2,109],62:[2,109],73:[2,109],75:[2,109],82:[2,109],83:[2,109],91:[2,109],94:[2,109]},{55:[2,110],58:[2,110],60:[2,110],62:[2,110],73:[2,110],75:[2,110],82:[2,110],83:[2,110],91:[2,110],94:[2,110]},{5:[2,82],10:[2,82],23:[2,82],25:[2,82],33:[2,82],34:[2,82],42:[2,82],64:[2,82],72:[2,82],76:[2,82],78:[2,82],88:[2,82],89:[2,82],98:[2,82],105:[2,82]},{75:[1,268]},{75:[1,269]},{5:[2,89],10:[2,89],23:[2,89],25:[2,89],33:[2,89],34:[2,89],42:[2,89],64:[2,89],72:[2,89],76:[2,89],78:[2,89],80:[1,270],88:[2,89],89:[2,89],98:[2,89],105:[2,89]},{7:271,8:[1,17]},{7:272,8:[1,17]},{55:[2,117],60:[2,117]},{7:273,8:[1,17]},{7:274,8:[1,17]},{75:[1,275]},{5:[2,84],10:[2,84],23:[2,84],25:[2,84],33:[2,84],34:[2,84],42:[2,84],64:[2,84],72:[2,84],76:[2,84],78:[2,84],88:[2,84],89:[2,84],98:[2,84],105:[2,84]},{5:[2,92],10:[2,92],23:[2,92],25:[2,92],33:[2,92],34:[2,92],42:[2,92],64:[2,92],72:[2,92],76:[2,92],78:[2,92],88:[2,92],89:[2,92],98:[2,92],105:[2,92]},{5:[2,86],10:[2,86],23:[2,86],25:[2,86],33:[2,86],34:[2,86],42:[2,86],64:[2,86],72:[2,86],76:[2,86],78:[2,86],88:[2,86],89:[2,86],98:[2,86],105:[2,86]},{5:[2,88],10:[2,88],23:[2,88],25:[2,88],33:[2,88],34:[2,88],42:[2,88],64:[2,88],72:[2,88],76:[2,88],78:[2,88],88:[2,88],89:[2,88],98:[2,88],105:[2,88]},{7:276,8:[1,17]},{5:[2,90],10:[2,90],23:[2,90],25:[2,90],33:[2,90],34:[2,90],42:[2,90],64:[2,90],72:[2,90],76:[2,90],78:[2,90],88:[2,90],89:[2,90],98:[2,90],105:[2,90]}],
defaultActions: {34:[2,1],70:[2,78]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* tracing/debugging functions */

function Loc(start, end) {
  this.start = { line: start.first_line, column: start.first_column };
  this.end = { line: end.last_line, column: end.last_column };
}

/* Manana data types */

function MananaHash(data, loc) {
  var hash = {}, i = 0;

  while (data[i]) {
    hash[data[i][0]] = data[i][1];
    i++;
  }

  return hash;
}

/* AST nodes */

function VoidTagNode(tag, attrs, loc) {
  this.type = "VoidTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
}

function CodeTagNode(tag, attrs, code, loc) {
  this.type = "CodeTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = code;
}

function TagNode(tag, attrs, text, block, loc) {
  this.type = "Tag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = text ? [text] : block;
}

function TextNode(words, loc) {
  this.type = "Text";
  this.loc = loc;

  var w = words, t = [], s = [], i = 0; 

  while (typeof w[i] !== "undefined") {
    if (typeof w[i] === "string") {
      s.push(w[i]);
    } else {
      if (s.length) {
        t.push(s.join(' '));
        s = [];
      }
      t.push(w[i]);
    }
    i++;
  }
  if (s.length) {
    t.push(s.join(' '));
  }

  this.body = t;
}

function NameNode(path, loc) {
  this.type = "Name";
  this.loc = loc;
  this.body = path;
}

function WithNode(path, id, body, loc) {
  this.type = "With";
  this.loc = loc;
  this.path = path;
  this.id = id;
  this.body = body;
}

function IdNode(id, start, end, loc) {
  this.type = "Id";
  this.loc = loc;
  this.id = id;
  this.start = start;
  this.end = end;
}

function PathNode(path_node, component, methods, loc) {
  var k, c;

  if (path_node === null) {
    this.type = "Path";
    this.loc = loc;
    this.methods = null;
    this.components = [];
  } else {
    for (k in path_node) {
      if (path_node.hasOwnProperty(k)) {
        this[k] = path_node[k];
      }
    }

    if (loc && path_node.loc) {
      if (loc.end.line > path_node.loc.end.line || loc.end.column > path_node.loc.end.column) {
        this.loc.end = loc.end;
      }
    }
  }

  if (component) {
    c = [component.id];
    if (component.start !== null) {
      c.push(component.start);
    }
    if (component.end !== null) {
      c.push(component.end);
    }
    this.components.push(c);
  }

  if (methods !== null) {
    this.methods = methods;
  }
}

function MethodNode(name, args, loc) {
  this.type = "Method";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function MethodChainNode(method, loc) {
  this.type = "MethodChain";
  this.loc = loc;
  this.chain = [method];
}

function FunctionNode(name, args, loc) {
  this.type = "Function";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function ForNode(id, path, body, loc) {
  this.type = "For";
  this.loc = loc;
  this.id = id;
  this.path = path;
  this.body = body;
}

function IfNode(cond, v1, v2, body, else_body, loc) {
  this.type = "If";
  this.loc = loc;
  this.condition = cond;
  this.value_1 = v1;
  this.value_2 = v2;
  this.body = body;
  this.else_body = else_body;
}

function AliasNode(path, id, loc) {
  this.type = "Alias";
  this.loc = loc;
  this.path = path;
  this.id = id;
}

function IncludeNode(path, loc) {
  this.type = "Include";
  this.loc = loc;
  this.path = path;
}

function FilterNode(filter, body, loc) {
  this.type = "Filter";
  this.loc = loc;
  this.body = [body];
}

function MananaStringNode(body, loc) {
  this.type = "MananaString";
  this.loc = loc;
  if (typeof body === "string") {
    this.body = [body];
  } else {
    this.body = body;
  }
}

/* expose AST constructors to parser */

parser.ast = {};
parser.ast.Loc = Loc;
parser.ast.MananaStringNode = MananaStringNode;
parser.ast.VoidTagNode = VoidTagNode;
parser.ast.CodeTagNode = CodeTagNode;
parser.ast.TagNode = TagNode;
parser.ast.TextNode = TextNode;
parser.ast.NameNode = NameNode;
parser.ast.WithNode = WithNode;
parser.ast.IdNode = IdNode;
parser.ast.PathNode = PathNode;
parser.ast.MethodNode = MethodNode;
parser.ast.MethodChainNode = MethodChainNode;
parser.ast.FunctionNode = FunctionNode;
parser.ast.ForNode = ForNode;
parser.ast.IfNode = IfNode;
parser.ast.AliasNode = AliasNode;
parser.ast.IncludeNode = IncludeNode;
parser.ast.FilterNode = FilterNode;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

  function strip(start, end) {
    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.pushState("comment"); /* ignore */ 
break;
case 1:this.popState(); /* ignore */ 
break;
case 2:/* ignore */
break;
case 3:/* ignore */
break;
case 4:this.pushState("expr"); return "FOR";
break;
case 5:this.pushState("expr"); return "IF";
break;
case 6:this.pushState("expr"); return "ELSE";
break;
case 7:this.pushState("expr"); return "ALIAS";
break;
case 8:this.pushState("expr"); return "WITH";
break;
case 9:this.pushState("expr"); return "INCLUDE";
break;
case 10:return "BOOL";
break;
case 11:return "BOOL";
break;
case 12:this.popState(); return "END_EXPR";
break;
case 13:return "IN";
break;
case 14:return "IS";
break;
case 15:return "AS";
break;
case 16:return "NOT";
break;
case 17:return "TYPE";
break;
case 18:return "TYPE";
break;
case 19:return "TYPE";
break;
case 20:return "TYPE";
break;
case 21:return "TYPE";
break;
case 22:return "COND";
break;
case 23:return "COND";
break;
case 24:return "COND";
break;
case 25:return "COND";
break;
case 26:return "COND";
break;
case 27:return "COND";
break;
case 28:return "COND";
break;
case 29:return "COND";
break;
case 30:return "EXISTS";
break;
case 31:this.pushState("tag");      return "VOID_TAG";
break;
case 32:this.pushState("code_tag"); return "CODE_TAG";
break;
case 33:this.pushState("tag");      return "TAG";
break;
case 34:this.popState();            return "END_TAG";
break;
case 35:yy_.yytext = yy_.yytext.slice(1);   return "TAG_ID";
break;
case 36:yy_.yytext = yy_.yytext.slice(1);   return "TAG_CLASS";
break;
case 37:this.popState(); this.pushState("code"); return "END_CODE_TAG";
break;
case 38:
                                            yy_.yytext = yy_.yytext.replace("->", '');
                                            yy_.yytext = yy_.yytext.replace(/\s*/, '')
                                            yy_.yytext = yy_.yytext.slice(1, -1)
                                            return "TAG_SRC";
                                         
break;
case 39:this.pushState("i_string_d"); return ["TAG_SRC_I_STRING", "I_STRING_D"];
break;
case 40:this.pushState("i_string_d"); return "I_STRING_D";
break;
case 41:this.pushState("i_string_d"); return "I_STRING_D";                                      
break;
case 42:this.pushState("name");       return "START_NAME";
break;
case 43:this.popState();              return "END_I_STRING_D";
break;
case 44:return "I_STRING_TEXT";
break;
case 45:this.pushState("i_string_s"); return ["TAG_SRC_I_STRING", "I_STRING_S"];
break;
case 46:this.pushState("i_string_s"); return "I_STRING_S";
break;
case 47:this.pushState("i_string_s"); return "I_STRING_S";                                      
break;
case 48:this.pushState("name");       return "START_NAME";
break;
case 49:this.popState();              return "END_I_STRING_S"; // "
break;
case 50:return "I_STRING_TEXT";
break;
case 51:this.pushState("i_html"); return "I_HTML_START";
break;
case 52:this.pushState("name");   return "START_NAME";
break;
case 53:this.popState();          return "I_HTML_END";
break;
case 54:return "I_HTML_TEXT";
break;
case 55:return "HTML";
break;
case 56:this.pushState("tagargs"); return "LPAREN";
break;
case 57:this.popState();           return "RPAREN";
break;
case 58:this.pushState("tagargs"); return "LBRACE";
break;
case 59:this.popState();           return "RBRACE";
break;
case 60:return "COLON";
break;
case 61:return "EQ";
break;
case 62:return "COMMA";
break;
case 63:return "TAG_ATTR";
break;
case 64:yy_.yytext = "data-" + yy_.yytext.slice(1); return "TAG_DATA_ATTR";
break;
case 65:/* ignore */
break;
case 66:/* ignore */
break;
case 67:this.pushState("filter"); yy_.yytext = yy_.yytext.slice(1); return "FILTER";
break;
case 68:this.pushState("name"); return "START_NAME";
break;
case 69:this.popState(); return "RBRACE"
break;
case 70:this.pushState("fn"); yy_.yytext = yy_.yytext.slice(1); return "FN";
break;
case 71:this.popState(); return "RPAREN";
break;
case 72:/* ignore */
break;
case 73:/* ignore */
break;
case 74:return "LBRACE";
break;
case 75:return "RBRACE";
break;
case 76:return "COMMA";
break;
case 77:return "EQ";
break;
case 78:return "ID";
break;
case 79:return "DOT";
break;
case 80:return "LPAREN";
break;
case 81:return "RPAREN";
break;
case 82:return "LBRACK";
break;
case 83:return "RBRACK";
break;
case 84:return "COLON"; 
break;
case 85:return "COMMA";
break;
case 86:return "INT";
break;
case 87:yy_.yytext = strip(1,2).replace(/\\"/g, '"'); return "STRING";
break;
case 88:return "STRING"; // Do not strip quotes
break;
case 89:return "WORD";
break;
case 90:
  var tokens = [];
  while (0 < indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  if (tokens.length) {
    tokens.push("EOF");
    return tokens;
  } else {
    return "EOF";
  }

break;
case 91:
  var tokens = [];
  while (filter_indent_level >= indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  if (tokens.length) {
    tokens.push("EOF");
    return tokens;
  } else {
    return "EOF";
  }

break;
case 92:/* eat blank lines */
break;
case 93:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (indentation > indent_stack[0]) {
    indent_stack.unshift(indentation);
    return "INDENT";
  }

  var tokens = [];
  while (indentation < indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  if (tokens.length) {
    return tokens;
  }

break;
case 94:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (filter_indent_level === 0) {
    filter_indent_level = indentation;
    return "FILTER_START";
  } else if (indentation < filter_indent_level) {
    filter_indent_level = 0;
    this.popState();
    return "DEDENT";
  } 
  /* else ignore */

break;
case 95:
  this.popState();

  var tokens = [];
  while (code_indent_level >= indent_stack[0]) {
    tokens.unshift("DEDENT");
    indent_stack.shift();
  }

  code_indent_level = 0;

  tokens.shift();
  tokens.push("EOF");

  return tokens;

break;
case 96:yy_.yytext = ''; return "BLANK_LINE";
break;
case 97:
  var indent_level = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (code_indent_level === 0) {
    code_indent_level = indent_level;
    indent_stack.unshift(indent_level);
    yy_.yytext = yy_.yytext.slice(code_indent_level + 1);
    return "INDENT";

  } else if (indent_level < code_indent_level) {
    this.popState();
    code_indent_level = 0;
    indent_stack.shift();
    yy_.yytext = yy_.yytext.slice(code_indent_level + 1);
    return "DEDENT";

  } else if (code_indent_level > 0) {
    yy_.yytext = yy_.yytext.slice(code_indent_level + 1);
    return "INDENT";
  }

break;
case 98:return "LINE";
break;
case 99:/* ignore all other whitespace */
break;
}
},
rules: [/^(?:""")/,/^(?:""")/,/^(?:.+)/,/^(?:\n)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:alias\b)/,/^(?:with\b)/,/^(?:include\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:(?=\n))/,/^(?:in\b)/,/^(?:is\b)/,/^(?:as\b)/,/^(?:not\b)/,/^(?:Hash\b)/,/^(?:List\b)/,/^(?:String\b)/,/^(?:Integer\b)/,/^(?:Number\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?:>)/,/^(?:<)/,/^(?:%)/,/^(?:exists\b)/,/^(?:((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)))/,/^(?:pre|code\b)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:(?=\n))/,/^(?:(#[a-zA-Z][a-zA-Z0-9\-\:_]*))/,/^(?:(\.-?[_a-zA-Z]+[_a-zA-Z0-9\-]*(?=["."\s\n])))/,/^(?:(?=\n))/,/^(?:->\s*(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:->\s*(i"(?=.*?@\{)))/,/^(?:(i"(?=.*?@\{)))/,/^(?:(i"(?=.*?@\{)))/,/^(?:@\{)/,/^(?:")/,/^(?:[^"@"'"']*)/,/^(?:->\s*(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:(i'(?=.*?@\{)))/,/^(?:@\{)/,/^(?:')/,/^(?:[^"@""'"]*)/,/^(?:(<(?=.*?@\{)))/,/^(?:@\{)/,/^(?:>(?=\s*\n))/,/^(?:.)/,/^(?:<.*(?=\n))/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z][a-zA-Z0-9\-_]*(?=\s*["="":"])))/,/^(?:(\*[a-zA-Z][a-zA-Z0-9\-]*(?=["="":"])))/,/^(?:\s)/,/^(?:\n)/,/^(?::(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:@\{)/,/^(?:\})/,/^(?:@(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254})\s?(?=\())/,/^(?:\)(?!\)))/,/^(?:\s)/,/^(?:\n)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:=)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:(\+|-)?(0|[1-9][0-9]*))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:(('(\\'|[^"'"]|")*')|("(\\"|[^'"']|')*")))/,/^(?:([^\s\n"@"][^\s\n]*))/,/^(?:\s*$)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:.*)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"comment":{"rules":[1,2,3,92,99],"inclusive":true},"tag":{"rules":[34,35,36,38,39,41,45,47,56,58,68,70,88,89,92,99],"inclusive":true},"tagargs":{"rules":[40,46,57,59,60,61,62,63,64,65,66,87,92,99],"inclusive":true},"filter":{"rules":[41,47,68,88,89,91,92,94,99],"inclusive":true},"expr":{"rules":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,40,46,70,78,79,80,81,82,83,84,85,86,87,99],"inclusive":true},"name":{"rules":[40,46,69,78,79,80,81,82,83,84,85,86,87,99],"inclusive":true},"fn":{"rules":[10,11,40,46,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,92,99],"inclusive":true},"i_string_d":{"rules":[42,43,44,99],"inclusive":true},"i_string_s":{"rules":[48,49,50,99],"inclusive":true},"i_html":{"rules":[52,53,54,92,99],"inclusive":true},"code_tag":{"rules":[35,36,37,99],"inclusive":true},"code":{"rules":[95,96,97,98,99],"inclusive":true},"INITIAL":{"rules":[0,4,5,6,7,8,9,31,32,33,41,47,51,55,67,68,70,88,89,90,92,93,99],"inclusive":true}}
};
indent_stack = [0];
filter_indent_level = 0;
code_indent_level = 0;;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = manana_parser;
exports.Parser = manana_parser.Parser;
exports.parse = function () { return manana_parser.parse.apply(manana_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}