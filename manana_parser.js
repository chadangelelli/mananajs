/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var manana_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"prog_list":4,"EOF":5,"stmt":6,"block":7,"INDENT":8,"stmt_list":9,"DEDENT":10,"html_stmt":11,"void_tag_stmt":12,"tag_stmt":13,"filter_stmt":14,"alias_stmt":15,"include_stmt":16,"with_stmt":17,"if_stmt":18,"for_stmt":19,"name":20,"fn":21,"HTML":22,"void_tag":23,"END_TAG":24,"tag_attrs":25,"VOID_TAG":26,"tag":27,"text":28,"TAG":29,"tag_attr":30,"tag_attr_args":31,"TAG_ID":32,"tag_classes":33,"TAG_ATTR":34,"EQ":35,"string":36,"TAG_DATA_ATTR":37,"LPAREN":38,"tag_attr_arg_list":39,"RPAREN":40,"LBRACE":41,"tag_attr_arg_list_alt":42,"RBRACE":43,"tag_attr_arg":44,"COMMA":45,"tag_attr_arg_alt":46,"COLON":47,"TAG_CLASS":48,"FILTER":49,"FILTER_START":50,"word_list":51,"word":52,"WORD":53,"SPACE":54,"WITH":55,"path":56,"AS":57,"ID":58,"END_EXPR":59,"FOR":60,"IN":61,"IF":62,"ev":63,"ELSE":64,"NOT":65,"COND":66,"IS":67,"TYPE":68,"EXISTS":69,"INT":70,"BOOL":71,"ALIAS":72,"INCLUDE":73,"id":74,"DOT":75,"meths":76,"LBRACK":77,"RBRACK":78,"meth":79,"meth_args":80,"meth_arg":81,"FN":82,"fn_args":83,"fn_arg":84,"hash":85,"hash_data":86,"hash_pair":87,"hash_val":88,"START_NAME":89,"STRING":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",10:"DEDENT",22:"HTML",24:"END_TAG",26:"VOID_TAG",29:"TAG",32:"TAG_ID",34:"TAG_ATTR",35:"EQ",37:"TAG_DATA_ATTR",38:"LPAREN",40:"RPAREN",41:"LBRACE",43:"RBRACE",45:"COMMA",47:"COLON",48:"TAG_CLASS",49:"FILTER",50:"FILTER_START",53:"WORD",54:"SPACE",55:"WITH",57:"AS",58:"ID",59:"END_EXPR",60:"FOR",61:"IN",62:"IF",64:"ELSE",65:"NOT",66:"COND",67:"IS",68:"TYPE",69:"EXISTS",70:"INT",71:"BOOL",72:"ALIAS",73:"INCLUDE",75:"DOT",77:"LBRACK",78:"RBRACK",82:"FN",89:"START_NAME",90:"STRING"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,3],[9,2],[9,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,1],[12,2],[12,3],[23,1],[13,2],[13,3],[13,3],[13,3],[13,4],[13,4],[27,1],[25,2],[25,1],[25,1],[30,1],[30,1],[30,3],[30,3],[31,3],[31,3],[39,2],[39,1],[44,3],[44,4],[44,3],[44,4],[42,2],[42,1],[46,3],[46,4],[46,3],[46,4],[33,2],[33,1],[14,4],[28,1],[51,1],[51,2],[52,1],[52,1],[52,1],[52,1],[17,6],[19,6],[18,4],[18,7],[18,5],[18,8],[18,6],[18,9],[18,6],[18,9],[18,7],[18,10],[18,5],[18,8],[63,1],[63,1],[63,1],[63,1],[15,5],[16,3],[16,3],[56,1],[56,3],[56,3],[74,1],[74,4],[74,6],[74,6],[74,4],[74,6],[74,6],[74,5],[74,5],[76,1],[76,3],[79,3],[79,4],[80,3],[80,1],[81,1],[81,1],[81,1],[21,3],[21,4],[83,3],[83,1],[84,1],[84,1],[84,1],[84,1],[84,1],[85,3],[85,4],[86,3],[86,1],[87,3],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[20,3],[36,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0-1]; 
break;
case 6: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = [$$[$0]]; 
break;
case 19: this.$ = new HtmlNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 20: this.$ = new VoidTagNode($$[$0-1], null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 21: this.$ = new VoidTagNode($$[$0-2], $$[$0-1],   new Loc(_$[$0-2], _$[$0-1])); 
break;
case 22: this.$ = $$[$0]; 
break;
case 23: this.$ = new TagNode($$[$0-1], null, null, null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 24: this.$ = new TagNode($$[$0-2], null, $$[$0-1],   null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 25: this.$ = new TagNode($$[$0-2], null, null, $$[$0],   new Loc(_$[$0-2], _$[$0])); 
break;
case 26: this.$ = new TagNode($$[$0-2], $$[$0-1],   null, null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 27: this.$ = new TagNode($$[$0-3], $$[$0-2],   $$[$0-1],   null, new Loc(_$[$0-3], _$[$0-1])); 
break;
case 28: this.$ = new TagNode($$[$0-3], $$[$0-2],   null, $$[$0],   new Loc(_$[$0-3], _$[$0])); 
break;
case 29: this.$ = $$[$0]; 
break;
case 30: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 31: this.$ = [$$[$0]]; 
break;
case 32: this.$ = $$[$0]; 
break;
case 33: this.$ = ['id', $$[$0]]; 
break;
case 34: this.$ = ['class', $$[$0].join(" ")]; 
break;
case 35: this.$ = ['attr', $$[$0-2], $$[$0]]; 
break;
case 36: this.$ = ['data', $$[$0-2], $$[$0]]; 
break;
case 37: this.$ = $$[$0-1]; 
break;
case 38: this.$ = $$[$0-1]; 
break;
case 39: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 40: this.$ = [$$[$0]]; 
break;
case 41: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 42: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 43: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 44: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 45: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 46: this.$ = [$$[$0]]; 
break;
case 47: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 48: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 49: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 50: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 51: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 52: this.$ = [$$[$0]]; 
break;
case 53: this.$ = new FilterNode($$[$0-3], $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 54: this.$ = new TextNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 55: this.$ = [$$[$0]]; 
break;
case 56: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 61: this.$ = new WithNode($$[$0-4], $$[$0-2], $$[$0], new Loc(_$[$0-5], _$[$0])); 
break;
case 62: this.$ = new ForNode($$[$0-4], $$[$0-2], $$[$0] , new Loc(_$[$0-5], _$[$0])) ; 
break;
case 63: this.$ = new IfNode("true", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-3], _$[$0])); 
break;
case 64: this.$ = new IfNode("true", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-6], _$[$0])); 
break;
case 65: this.$ = new IfNode("false", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-4], _$[$0])); 
break;
case 66: this.$ = new IfNode("false", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-7], _$[$0])); 
break;
case 67: this.$ = new IfNode($$[$0-3], $$[$0-4], $$[$0-2], $$[$0], null, new Loc(_$[$0-5], _$[$0])); 
break;
case 68: this.$ = new IfNode($$[$0-6], $$[$0-7], $$[$0-5], $$[$0-3], $$[$0], new Loc(_$[$0-8], _$[$0])); 
break;
case 69: this.$ = new IfNode($$[$0-3], $$[$0-4], $$[$0-2], $$[$0], null, new Loc(_$[$0-5], _$[$0])); 
break;
case 70: this.$ = new IfNode($$[$0-6], $$[$0-7], $$[$0-5], $$[$0-3], null, new Loc(_$[$0-8], _$[$0])); 
break;
case 71: this.$ = new IfNode("is not", $$[$0-5], $$[$0-2], $$[$0], null, new Loc(_$[$0-6], _$[$0])); 
break;
case 72: this.$ = new IfNode("is not", $$[$0-8], $$[$0-5], $$[$0-3], $$[$0], new Loc(_$[$0-9], _$[$0])); 
break;
case 73: this.$ = new IfNode("exists", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-4], _$[$0])); 
break;
case 74: this.$ = new IfNode("exists", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-7], _$[$0])); 
break;
case 79: this.$ = new AliasNode($$[$0-3], $$[$0-1], new Loc(_$[$0-4], _$[$0])); 
break;
case 80: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 81: this.$ = new IncludeNode($$[$0-1], new Loc(_$[$0-2], _$[$0-1])); 
break;
case 82: this.$ = new PathNode(null, $$[$0]  , null, new Loc(_$[$0], _$[$0])); 
break;
case 83: this.$ = new PathNode($$[$0-2]  , $$[$0]  , null, new Loc(_$[$0-2], _$[$0])); 
break;
case 84: this.$ = new PathNode($$[$0-2]  , null, $$[$0]  , new Loc(_$[$0-2], _$[$0])); 
break;
case 85: this.$ = new IdNode($$[$0], null, null, new Loc(_$[$0], _$[$0])); 
break;
case 86: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 87: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 88: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 89: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 90: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 91: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 92: this.$ = new IdNode($$[$0-4], 0   , $$[$0-1]  , new Loc(_$[$0-4], _$[$0])); 
break;
case 93: this.$ = new IdNode($$[$0-4], $$[$0-2]  , '*' , new Loc(_$[$0-4], _$[$0])); 
break;
case 94: this.$ = new MethodChainNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 95: this.$ = $$[$0-2]; this.$.chain.push($$[$0])                        ; 
break;
case 96: this.$ = new MethodNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 97: this.$ = new MethodNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 98: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 99: this.$ = [$$[$0]]; 
break;
case 103: this.$ = new FunctionNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 104: this.$ = new FunctionNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 105: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 106: this.$ = [$$[$0]]; 
break;
case 112: this.$ = new MananaHash($$[$0-1]); console.log(this.$); 
break;
case 113: this.$ = new MananaHash($$[$0-2]); console.log(this.$); 
break;
case 114: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 115: this.$ = [$$[$0]]; 
break;
case 116: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 123: this.$ = $$[$0-1]; 
break;
case 124: this.$ = new MananaStringNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,16],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:[1,17],23:18,26:[1,28],27:19,29:[1,29],49:[1,20],55:[1,23],60:[1,25],62:[1,24],72:[1,21],73:[1,22],82:[1,27],89:[1,26]},{1:[3]},{5:[1,30],6:31,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:[1,17],23:18,26:[1,28],27:19,29:[1,29],49:[1,20],55:[1,23],60:[1,25],62:[1,24],72:[1,21],73:[1,22],82:[1,27],89:[1,26]},{5:[2,3],22:[2,3],26:[2,3],29:[2,3],49:[2,3],55:[2,3],60:[2,3],62:[2,3],72:[2,3],73:[2,3],82:[2,3],89:[2,3]},{5:[2,4],22:[2,4],26:[2,4],29:[2,4],49:[2,4],55:[2,4],60:[2,4],62:[2,4],72:[2,4],73:[2,4],82:[2,4],89:[2,4]},{5:[2,8],10:[2,8],22:[2,8],26:[2,8],29:[2,8],49:[2,8],55:[2,8],60:[2,8],62:[2,8],72:[2,8],73:[2,8],82:[2,8],89:[2,8]},{5:[2,9],10:[2,9],22:[2,9],26:[2,9],29:[2,9],49:[2,9],55:[2,9],60:[2,9],62:[2,9],72:[2,9],73:[2,9],82:[2,9],89:[2,9]},{5:[2,10],10:[2,10],22:[2,10],26:[2,10],29:[2,10],49:[2,10],55:[2,10],60:[2,10],62:[2,10],72:[2,10],73:[2,10],82:[2,10],89:[2,10]},{5:[2,11],10:[2,11],22:[2,11],26:[2,11],29:[2,11],49:[2,11],55:[2,11],60:[2,11],62:[2,11],72:[2,11],73:[2,11],82:[2,11],89:[2,11]},{5:[2,12],10:[2,12],22:[2,12],26:[2,12],29:[2,12],49:[2,12],55:[2,12],60:[2,12],62:[2,12],72:[2,12],73:[2,12],82:[2,12],89:[2,12]},{5:[2,13],10:[2,13],22:[2,13],26:[2,13],29:[2,13],49:[2,13],55:[2,13],60:[2,13],62:[2,13],72:[2,13],73:[2,13],82:[2,13],89:[2,13]},{5:[2,14],10:[2,14],22:[2,14],26:[2,14],29:[2,14],49:[2,14],55:[2,14],60:[2,14],62:[2,14],72:[2,14],73:[2,14],82:[2,14],89:[2,14]},{5:[2,15],10:[2,15],22:[2,15],26:[2,15],29:[2,15],49:[2,15],55:[2,15],60:[2,15],62:[2,15],72:[2,15],73:[2,15],82:[2,15],89:[2,15]},{5:[2,16],10:[2,16],22:[2,16],26:[2,16],29:[2,16],49:[2,16],55:[2,16],60:[2,16],62:[2,16],72:[2,16],73:[2,16],82:[2,16],89:[2,16]},{5:[2,17],10:[2,17],22:[2,17],26:[2,17],29:[2,17],49:[2,17],55:[2,17],60:[2,17],62:[2,17],72:[2,17],73:[2,17],82:[2,17],89:[2,17]},{5:[2,18],10:[2,18],22:[2,18],26:[2,18],29:[2,18],49:[2,18],55:[2,18],60:[2,18],62:[2,18],72:[2,18],73:[2,18],82:[2,18],89:[2,18]},{6:33,9:32,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:[1,17],23:18,26:[1,28],27:19,29:[1,29],49:[1,20],55:[1,23],60:[1,25],62:[1,24],72:[1,21],73:[1,22],82:[1,27],89:[1,26]},{5:[2,19],10:[2,19],22:[2,19],26:[2,19],29:[2,19],49:[2,19],55:[2,19],60:[2,19],62:[2,19],72:[2,19],73:[2,19],82:[2,19],89:[2,19]},{24:[1,34],25:35,30:36,31:37,32:[1,38],33:39,34:[1,40],37:[1,41],38:[1,42],41:[1,43],48:[1,44]},{20:51,24:[1,45],25:47,28:46,30:36,31:37,32:[1,38],33:39,34:[1,40],36:52,37:[1,41],38:[1,42],41:[1,43],48:[1,44],51:48,52:49,53:[1,50],54:[1,53],89:[1,26],90:[1,54]},{50:[1,55]},{56:56,58:[1,58],74:57},{36:59,56:60,58:[1,58],74:57,90:[1,54]},{56:61,58:[1,58],74:57},{36:65,56:68,58:[1,58],63:62,65:[1,63],69:[1,64],70:[1,66],71:[1,67],74:57,90:[1,54]},{58:[1,69]},{56:70,58:[1,58],74:57},{38:[1,71]},{24:[2,22],32:[2,22],34:[2,22],37:[2,22],38:[2,22],41:[2,22],48:[2,22]},{24:[2,29],32:[2,29],34:[2,29],37:[2,29],38:[2,29],41:[2,29],48:[2,29],53:[2,29],54:[2,29],89:[2,29],90:[2,29]},{1:[2,1]},{5:[2,2],22:[2,2],26:[2,2],29:[2,2],49:[2,2],55:[2,2],60:[2,2],62:[2,2],72:[2,2],73:[2,2],82:[2,2],89:[2,2]},{6:73,10:[1,72],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:[1,17],23:18,26:[1,28],27:19,29:[1,29],49:[1,20],55:[1,23],60:[1,25],62:[1,24],72:[1,21],73:[1,22],82:[1,27],89:[1,26]},{10:[2,7],22:[2,7],26:[2,7],29:[2,7],49:[2,7],55:[2,7],60:[2,7],62:[2,7],72:[2,7],73:[2,7],82:[2,7],89:[2,7]},{5:[2,20],10:[2,20],22:[2,20],26:[2,20],29:[2,20],49:[2,20],55:[2,20],60:[2,20],62:[2,20],72:[2,20],73:[2,20],82:[2,20],89:[2,20]},{24:[1,74],30:75,32:[1,38],33:39,34:[1,40],37:[1,41],48:[1,44]},{24:[2,31],32:[2,31],34:[2,31],37:[2,31],48:[2,31],53:[2,31],54:[2,31],89:[2,31],90:[2,31]},{24:[2,32],32:[2,32],34:[2,32],37:[2,32],48:[2,32],53:[2,32],54:[2,32],89:[2,32],90:[2,32]},{24:[2,33],32:[2,33],34:[2,33],37:[2,33],48:[2,33],53:[2,33],54:[2,33],89:[2,33],90:[2,33]},{24:[2,34],32:[2,34],34:[2,34],37:[2,34],48:[1,76],53:[2,34],54:[2,34],89:[2,34],90:[2,34]},{35:[1,77]},{35:[1,78]},{34:[1,81],37:[1,82],39:79,44:80},{34:[1,85],37:[1,86],42:83,46:84},{24:[2,52],32:[2,52],34:[2,52],37:[2,52],48:[2,52],53:[2,52],54:[2,52],89:[2,52],90:[2,52]},{5:[2,23],7:87,8:[1,16],10:[2,23],22:[2,23],26:[2,23],29:[2,23],49:[2,23],55:[2,23],60:[2,23],62:[2,23],72:[2,23],73:[2,23],82:[2,23],89:[2,23]},{24:[1,88]},{20:51,24:[1,89],28:90,30:75,32:[1,38],33:39,34:[1,40],36:52,37:[1,41],48:[1,44],51:48,52:49,53:[1,50],54:[1,53],89:[1,26],90:[1,54]},{10:[2,54],20:51,24:[2,54],36:52,52:91,53:[1,50],54:[1,53],89:[1,26],90:[1,54]},{10:[2,55],24:[2,55],53:[2,55],54:[2,55],89:[2,55],90:[2,55]},{10:[2,57],24:[2,57],53:[2,57],54:[2,57],89:[2,57],90:[2,57]},{10:[2,58],24:[2,58],53:[2,58],54:[2,58],89:[2,58],90:[2,58]},{10:[2,59],24:[2,59],53:[2,59],54:[2,59],89:[2,59],90:[2,59]},{10:[2,60],24:[2,60],53:[2,60],54:[2,60],89:[2,60],90:[2,60]},{10:[2,124],24:[2,124],32:[2,124],34:[2,124],37:[2,124],40:[2,124],43:[2,124],45:[2,124],48:[2,124],53:[2,124],54:[2,124],59:[2,124],66:[2,124],67:[2,124],89:[2,124],90:[2,124]},{20:51,28:92,36:52,51:48,52:49,53:[1,50],54:[1,53],89:[1,26],90:[1,54]},{57:[1,93],75:[1,94]},{40:[2,82],43:[2,82],45:[2,82],47:[2,82],57:[2,82],59:[2,82],66:[2,82],67:[2,82],75:[2,82],78:[2,82]},{40:[2,85],43:[2,85],45:[2,85],47:[2,85],57:[2,85],59:[2,85],66:[2,85],67:[2,85],75:[2,85],77:[1,95],78:[2,85]},{59:[1,96]},{59:[1,97],75:[1,94]},{57:[1,98],75:[1,94]},{59:[1,99],66:[1,100],67:[1,101]},{36:65,56:68,58:[1,58],63:102,70:[1,66],71:[1,67],74:57,90:[1,54]},{36:65,56:68,58:[1,58],63:103,70:[1,66],71:[1,67],74:57,90:[1,54]},{59:[2,75],66:[2,75],67:[2,75]},{59:[2,76],66:[2,76],67:[2,76]},{59:[2,77],66:[2,77],67:[2,77]},{59:[2,78],66:[2,78],67:[2,78],75:[1,94]},{61:[1,104]},{43:[1,105],75:[1,94]},{21:112,36:111,40:[1,106],41:[1,114],56:109,58:[1,58],70:[1,110],74:57,82:[1,27],83:107,84:108,85:113,90:[1,54]},{5:[2,5],10:[2,5],22:[2,5],26:[2,5],29:[2,5],49:[2,5],55:[2,5],60:[2,5],62:[2,5],64:[2,5],72:[2,5],73:[2,5],82:[2,5],89:[2,5]},{10:[2,6],22:[2,6],26:[2,6],29:[2,6],49:[2,6],55:[2,6],60:[2,6],62:[2,6],72:[2,6],73:[2,6],82:[2,6],89:[2,6]},{5:[2,21],10:[2,21],22:[2,21],26:[2,21],29:[2,21],49:[2,21],55:[2,21],60:[2,21],62:[2,21],72:[2,21],73:[2,21],82:[2,21],89:[2,21]},{24:[2,30],32:[2,30],34:[2,30],37:[2,30],48:[2,30],53:[2,30],54:[2,30],89:[2,30],90:[2,30]},{24:[2,51],32:[2,51],34:[2,51],37:[2,51],48:[2,51],53:[2,51],54:[2,51],89:[2,51],90:[2,51]},{36:115,90:[1,54]},{36:116,90:[1,54]},{34:[1,81],37:[1,82],40:[1,117],44:118},{34:[2,40],37:[2,40],40:[2,40]},{35:[1,119]},{35:[1,120]},{34:[1,85],37:[1,86],43:[1,121],46:122},{34:[2,46],37:[2,46],43:[2,46]},{47:[1,123]},{47:[1,124]},{5:[2,25],10:[2,25],22:[2,25],26:[2,25],29:[2,25],49:[2,25],55:[2,25],60:[2,25],62:[2,25],72:[2,25],73:[2,25],82:[2,25],89:[2,25]},{5:[2,24],10:[2,24],22:[2,24],26:[2,24],29:[2,24],49:[2,24],55:[2,24],60:[2,24],62:[2,24],72:[2,24],73:[2,24],82:[2,24],89:[2,24]},{5:[2,26],7:125,8:[1,16],10:[2,26],22:[2,26],26:[2,26],29:[2,26],49:[2,26],55:[2,26],60:[2,26],62:[2,26],72:[2,26],73:[2,26],82:[2,26],89:[2,26]},{24:[1,126]},{10:[2,56],24:[2,56],53:[2,56],54:[2,56],89:[2,56],90:[2,56]},{10:[1,127]},{58:[1,128]},{58:[1,131],74:129,76:130,79:132},{47:[1,135],56:134,58:[1,58],70:[1,133],74:57},{5:[2,80],10:[2,80],22:[2,80],26:[2,80],29:[2,80],49:[2,80],55:[2,80],60:[2,80],62:[2,80],72:[2,80],73:[2,80],82:[2,80],89:[2,80]},{5:[2,81],10:[2,81],22:[2,81],26:[2,81],29:[2,81],49:[2,81],55:[2,81],60:[2,81],62:[2,81],72:[2,81],73:[2,81],82:[2,81],89:[2,81]},{58:[1,136]},{7:137,8:[1,16]},{36:65,56:68,58:[1,58],63:138,70:[1,66],71:[1,67],74:57,90:[1,54]},{65:[1,140],68:[1,139]},{59:[1,141]},{59:[1,142]},{56:143,58:[1,58],74:57},{5:[2,123],10:[2,123],22:[2,123],24:[2,123],26:[2,123],29:[2,123],49:[2,123],53:[2,123],54:[2,123],55:[2,123],60:[2,123],62:[2,123],72:[2,123],73:[2,123],82:[2,123],89:[2,123],90:[2,123]},{5:[2,103],10:[2,103],22:[2,103],26:[2,103],29:[2,103],40:[2,103],43:[2,103],45:[2,103],49:[2,103],55:[2,103],60:[2,103],62:[2,103],72:[2,103],73:[2,103],82:[2,103],89:[2,103]},{40:[1,144],45:[1,145]},{40:[2,106],45:[2,106]},{40:[2,107],45:[2,107],75:[1,94]},{40:[2,108],45:[2,108]},{40:[2,109],45:[2,109]},{40:[2,110],45:[2,110]},{40:[2,111],45:[2,111]},{58:[1,148],86:146,87:147},{24:[2,35],32:[2,35],34:[2,35],37:[2,35],48:[2,35],53:[2,35],54:[2,35],89:[2,35],90:[2,35]},{24:[2,36],32:[2,36],34:[2,36],37:[2,36],48:[2,36],53:[2,36],54:[2,36],89:[2,36],90:[2,36]},{24:[2,37],32:[2,37],34:[2,37],37:[2,37],48:[2,37],53:[2,37],54:[2,37],89:[2,37],90:[2,37]},{34:[2,39],37:[2,39],40:[2,39]},{36:149,90:[1,54]},{36:150,90:[1,54]},{24:[2,38],32:[2,38],34:[2,38],37:[2,38],48:[2,38],53:[2,38],54:[2,38],89:[2,38],90:[2,38]},{34:[2,45],37:[2,45],43:[2,45]},{36:151,90:[1,54]},{36:152,90:[1,54]},{5:[2,28],10:[2,28],22:[2,28],26:[2,28],29:[2,28],49:[2,28],55:[2,28],60:[2,28],62:[2,28],72:[2,28],73:[2,28],82:[2,28],89:[2,28]},{5:[2,27],10:[2,27],22:[2,27],26:[2,27],29:[2,27],49:[2,27],55:[2,27],60:[2,27],62:[2,27],72:[2,27],73:[2,27],82:[2,27],89:[2,27]},{5:[2,53],10:[2,53],22:[2,53],26:[2,53],29:[2,53],49:[2,53],55:[2,53],60:[2,53],62:[2,53],72:[2,53],73:[2,53],82:[2,53],89:[2,53]},{59:[1,153]},{40:[2,83],43:[2,83],45:[2,83],47:[2,83],57:[2,83],59:[2,83],66:[2,83],67:[2,83],75:[2,83],78:[2,83]},{40:[2,84],43:[2,84],45:[2,84],47:[2,84],57:[2,84],59:[2,84],66:[2,84],67:[2,84],75:[1,154],78:[2,84]},{38:[1,155],40:[2,85],43:[2,85],45:[2,85],47:[2,85],57:[2,85],59:[2,85],66:[2,85],67:[2,85],75:[2,85],77:[1,95],78:[2,85]},{40:[2,94],43:[2,94],45:[2,94],47:[2,94],57:[2,94],59:[2,94],66:[2,94],67:[2,94],75:[2,94],78:[2,94]},{47:[1,157],78:[1,156]},{47:[1,159],75:[1,94],78:[1,158]},{70:[1,160]},{59:[1,161]},{5:[2,63],10:[2,63],22:[2,63],26:[2,63],29:[2,63],49:[2,63],55:[2,63],60:[2,63],62:[2,63],64:[1,162],72:[2,63],73:[2,63],82:[2,63],89:[2,63]},{59:[1,163]},{59:[1,164]},{68:[1,165]},{7:166,8:[1,16]},{7:167,8:[1,16]},{59:[1,168],75:[1,94]},{5:[2,104],10:[2,104],22:[2,104],26:[2,104],29:[2,104],40:[2,104],43:[2,104],45:[2,104],49:[2,104],55:[2,104],60:[2,104],62:[2,104],72:[2,104],73:[2,104],82:[2,104],89:[2,104]},{21:112,36:111,41:[1,114],56:109,58:[1,58],70:[1,110],74:57,82:[1,27],84:169,85:113,90:[1,54]},{43:[1,170],45:[1,171]},{43:[2,115],45:[2,115]},{47:[1,172]},{34:[2,41],37:[2,41],40:[2,41],45:[1,173]},{34:[2,43],37:[2,43],40:[2,43],45:[1,174]},{34:[2,47],37:[2,47],43:[2,47],45:[1,175]},{34:[2,49],37:[2,49],43:[2,49],45:[1,176]},{5:[2,79],10:[2,79],22:[2,79],26:[2,79],29:[2,79],49:[2,79],55:[2,79],60:[2,79],62:[2,79],72:[2,79],73:[2,79],82:[2,79],89:[2,79]},{58:[1,178],79:177},{36:184,40:[1,179],56:182,58:[1,58],70:[1,183],74:57,80:180,81:181,90:[1,54]},{40:[2,86],43:[2,86],45:[2,86],47:[2,86],57:[2,86],59:[2,86],66:[2,86],67:[2,86],75:[2,86],78:[2,86]},{56:186,58:[1,58],70:[1,185],74:57,78:[1,187]},{40:[2,89],43:[2,89],45:[2,89],47:[2,89],57:[2,89],59:[2,89],66:[2,89],67:[2,89],75:[2,89],78:[2,89]},{56:189,58:[1,58],70:[1,188],74:57},{78:[1,190]},{7:191,8:[1,16]},{59:[1,192]},{7:193,8:[1,16]},{7:194,8:[1,16]},{59:[1,195]},{5:[2,65],10:[2,65],22:[2,65],26:[2,65],29:[2,65],49:[2,65],55:[2,65],60:[2,65],62:[2,65],64:[1,196],72:[2,65],73:[2,65],82:[2,65],89:[2,65]},{5:[2,73],10:[2,73],22:[2,73],26:[2,73],29:[2,73],49:[2,73],55:[2,73],60:[2,73],62:[2,73],64:[1,197],72:[2,73],73:[2,73],82:[2,73],89:[2,73]},{7:198,8:[1,16]},{40:[2,105],45:[2,105]},{40:[2,112],43:[2,112],45:[2,112]},{43:[1,199],58:[1,148],87:200},{21:205,36:204,41:[1,114],56:207,58:[1,58],70:[1,202],71:[1,203],74:57,82:[1,27],85:206,88:201,90:[1,54]},{34:[2,42],37:[2,42],40:[2,42]},{34:[2,44],37:[2,44],40:[2,44]},{34:[2,48],37:[2,48],43:[2,48]},{34:[2,50],37:[2,50],43:[2,50]},{40:[2,95],43:[2,95],45:[2,95],47:[2,95],57:[2,95],59:[2,95],66:[2,95],67:[2,95],75:[2,95],78:[2,95]},{38:[1,155]},{40:[2,96],43:[2,96],45:[2,96],47:[2,96],57:[2,96],59:[2,96],66:[2,96],67:[2,96],75:[2,96],78:[2,96]},{40:[1,208],45:[1,209]},{40:[2,99],45:[2,99]},{40:[2,100],45:[2,100],75:[1,94]},{40:[2,101],45:[2,101]},{40:[2,102],45:[2,102]},{78:[1,210]},{75:[1,94],78:[1,211]},{40:[2,93],43:[2,93],45:[2,93],47:[2,93],57:[2,93],59:[2,93],66:[2,93],67:[2,93],75:[2,93],78:[2,93]},{78:[1,212]},{75:[1,94],78:[1,213]},{40:[2,92],43:[2,92],45:[2,92],47:[2,92],57:[2,92],59:[2,92],66:[2,92],67:[2,92],75:[2,92],78:[2,92]},{5:[2,61],10:[2,61],22:[2,61],26:[2,61],29:[2,61],49:[2,61],55:[2,61],60:[2,61],62:[2,61],72:[2,61],73:[2,61],82:[2,61],89:[2,61]},{7:214,8:[1,16]},{5:[2,67],10:[2,67],22:[2,67],26:[2,67],29:[2,67],49:[2,67],55:[2,67],60:[2,67],62:[2,67],64:[1,215],72:[2,67],73:[2,67],82:[2,67],89:[2,67]},{5:[2,69],10:[2,69],22:[2,69],26:[2,69],29:[2,69],49:[2,69],55:[2,69],60:[2,69],62:[2,69],64:[1,216],72:[2,69],73:[2,69],82:[2,69],89:[2,69]},{7:217,8:[1,16]},{59:[1,218]},{59:[1,219]},{5:[2,62],10:[2,62],22:[2,62],26:[2,62],29:[2,62],49:[2,62],55:[2,62],60:[2,62],62:[2,62],72:[2,62],73:[2,62],82:[2,62],89:[2,62]},{40:[2,113],43:[2,113],45:[2,113]},{43:[2,114],45:[2,114]},{43:[2,116],45:[2,116]},{43:[2,117],45:[2,117]},{43:[2,118],45:[2,118]},{43:[2,119],45:[2,119]},{43:[2,120],45:[2,120]},{43:[2,121],45:[2,121]},{43:[2,122],45:[2,122],75:[1,94]},{40:[2,97],43:[2,97],45:[2,97],47:[2,97],57:[2,97],59:[2,97],66:[2,97],67:[2,97],75:[2,97],78:[2,97]},{36:184,56:182,58:[1,58],70:[1,183],74:57,81:220,90:[1,54]},{40:[2,87],43:[2,87],45:[2,87],47:[2,87],57:[2,87],59:[2,87],66:[2,87],67:[2,87],75:[2,87],78:[2,87]},{40:[2,88],43:[2,88],45:[2,88],47:[2,88],57:[2,88],59:[2,88],66:[2,88],67:[2,88],75:[2,88],78:[2,88]},{40:[2,90],43:[2,90],45:[2,90],47:[2,90],57:[2,90],59:[2,90],66:[2,90],67:[2,90],75:[2,90],78:[2,90]},{40:[2,91],43:[2,91],45:[2,91],47:[2,91],57:[2,91],59:[2,91],66:[2,91],67:[2,91],75:[2,91],78:[2,91]},{5:[2,64],10:[2,64],22:[2,64],26:[2,64],29:[2,64],49:[2,64],55:[2,64],60:[2,64],62:[2,64],72:[2,64],73:[2,64],82:[2,64],89:[2,64]},{59:[1,221]},{59:[1,222]},{5:[2,71],10:[2,71],22:[2,71],26:[2,71],29:[2,71],49:[2,71],55:[2,71],60:[2,71],62:[2,71],64:[1,223],72:[2,71],73:[2,71],82:[2,71],89:[2,71]},{7:224,8:[1,16]},{7:225,8:[1,16]},{40:[2,98],45:[2,98]},{7:226,8:[1,16]},{7:227,8:[1,16]},{59:[1,228]},{5:[2,66],10:[2,66],22:[2,66],26:[2,66],29:[2,66],49:[2,66],55:[2,66],60:[2,66],62:[2,66],72:[2,66],73:[2,66],82:[2,66],89:[2,66]},{5:[2,74],10:[2,74],22:[2,74],26:[2,74],29:[2,74],49:[2,74],55:[2,74],60:[2,74],62:[2,74],72:[2,74],73:[2,74],82:[2,74],89:[2,74]},{5:[2,68],10:[2,68],22:[2,68],26:[2,68],29:[2,68],49:[2,68],55:[2,68],60:[2,68],62:[2,68],72:[2,68],73:[2,68],82:[2,68],89:[2,68]},{5:[2,70],10:[2,70],22:[2,70],26:[2,70],29:[2,70],49:[2,70],55:[2,70],60:[2,70],62:[2,70],72:[2,70],73:[2,70],82:[2,70],89:[2,70]},{7:229,8:[1,16]},{5:[2,72],10:[2,72],22:[2,72],26:[2,72],29:[2,72],49:[2,72],55:[2,72],60:[2,72],62:[2,72],72:[2,72],73:[2,72],82:[2,72],89:[2,72]}],
defaultActions: {30:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* tracing/debugging functions */

function Loc(start, end) {
  this.start = { line: start.first_line, column: start.first_column };
  this.end = { line: end.last_line, column: end.last_column };
}

/* Manana data types */

function MananaHash(data, loc) {
  var hash = {}, i = 0;

  while (data[i]) {
    hash[data[i][0]] = data[i][1];
    i++;
  }

  return hash;
}

/* AST nodes */

function HtmlNode(text, loc) {
  this.type = "HTML";
  this.loc = loc;
  this.body = text;
}

function VoidTagNode(tag, attrs, loc) {
  this.type = "VoidTag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
}

function TagNode(tag, attrs, text, block, loc) {
  this.type = "Tag";
  this.loc = loc;
  this.tag = tag;
  this.attrs = attrs;
  this.body = text ? [text] : block;
}

function TextNode(words, loc) {
  this.type = "Text";
  this.loc = loc;

  var w = words, t = [], s = [], i = 0; 

  while (typeof w[i] !== "undefined") {
    if (typeof w[i] === "string") {
      s.push(w[i]);
    } else {
      if (s.length) {
        t.push(s.join(' '));
        s = [];
      }
      t.push(w[i]);
    }
    i++;
  }
  if (s.length) {
    t.push(s.join(' '));
  }

  this.body = t;
}

function NameNode(path, loc) {
  this.type = "Name";
  this.loc = loc;
  this.body = path;
}

function WithNode(path, id, body, loc) {
  this.type = "With";
  this.loc = loc;
  this.path = path;
  this.id = id;
  this.body = body;
}

function IdNode(id, start, end, loc) {
  this.type = "Id";
  this.loc = loc;
  this.id = id;
  this.start = start;
  this.end = end;
}

function PathNode(path_node, component, methods, loc) {
  var k, c;

  if (path_node === null) {
    this.type = "Path";
    this.loc = loc;
    this.methods = null;
    this.components = [];
  } else {
    for (k in path_node) {
      if (path_node.hasOwnProperty(k)) {
        this[k] = path_node[k];
      }
    }

    if (loc && path_node.loc) {
      if (loc.end.line > path_node.loc.end.line || loc.end.column > path_node.loc.end.column) {
        this.loc.end = loc.end;
      }
    }
  }

  if (component) {
    c = [component.id];
    if (component.start !== null) {
      c.push(component.start);
    }
    if (component.end !== null) {
      c.push(component.end);
    }
    this.components.push(c);
  }

  if (methods !== null) {
    this.methods = methods;
  }
}

function MethodNode(name, args, loc) {
  this.type = "Method";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function MethodChainNode(method, loc) {
  this.type = "MethodChain";
  this.loc = loc;
  this.chain = [method];
}

function FunctionNode(name, args, loc) {
  this.type = "Function";
  this.loc = loc;
  this.name = name;
  this.args = args;
}

function ForNode(id, path, body, loc) {
  this.type = "For";
  this.loc = loc;
  this.id = id;
  this.path = path;
  this.body = body;
}

function IfNode(cond, v1, v2, body, else_body, loc) {
  this.type = "If";
  this.loc = loc;
  this.condition = cond;
  this.value_1 = v1;
  this.value_2 = v2;
  this.body = body;
  this.else_body = else_body;
}

function AliasNode(path, id, loc) {
  this.type = "Alias";
  this.loc = loc;
  this.path = path;
  this.id = id;
}

function IncludeNode(path, loc) {
  this.type = "Include";
  this.loc = loc;
  this.path = path;
}

function FilterNode(filter, body, loc) {
  this.type = "Filter";
  this.loc = loc;
  this.body = [body];
}

function MananaStringNode(string, loc) {
  this.type = "MananaString";
  this.loc = loc;

  if (string.indexOf("@{") > -1) {
    this.string = string.split(/(@\{.*?\})/g);
  } else {
    this.string = string;
  }
}

/* expose AST constructors to parser */

parser.ast = {};
parser.ast.Loc = Loc;
parser.ast.MananaStringNode = MananaStringNode;
parser.ast.HtmlNode = HtmlNode;
parser.ast.VoidTagNode = VoidTagNode;
parser.ast.TagNode = TagNode;
parser.ast.TextNode = TextNode;
parser.ast.NameNode = NameNode;
parser.ast.WithNode = WithNode;
parser.ast.IdNode = IdNode;
parser.ast.PathNode = PathNode;
parser.ast.MethodNode = MethodNode;
parser.ast.MethodChainNode = MethodChainNode;
parser.ast.FunctionNode = FunctionNode;
parser.ast.ForNode = ForNode;
parser.ast.IfNode = IfNode;
parser.ast.AliasNode = AliasNode;
parser.ast.IncludeNode = IncludeNode;
parser.ast.FilterNode = FilterNode;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

  function strip(start, end) {
    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.pushState("comment"); /* ignore */ 
break;
case 1:this.popState(); /* ignore */ 
break;
case 2:/* ignore */
break;
case 3:/* ignore */
break;
case 4:return 22;
break;
case 5:this.pushState("expr"); return "FOR";
break;
case 6:this.pushState("expr"); return "IF";
break;
case 7:this.pushState("expr"); return "ELSE";
break;
case 8:this.pushState("expr"); return "ALIAS";
break;
case 9:this.pushState("expr"); return "WITH";
break;
case 10:this.pushState("expr"); return "INCLUDE";
break;
case 11:return "BOOL";
break;
case 12:return "BOOL";
break;
case 13:this.popState(); return "END_EXPR";
break;
case 14:return "IN";
break;
case 15:return "IS";
break;
case 16:return "AS";
break;
case 17:return "NOT";
break;
case 18:return "TYPE";
break;
case 19:return "TYPE";
break;
case 20:return "TYPE";
break;
case 21:return "TYPE";
break;
case 22:return "TYPE";
break;
case 23:return "COND";
break;
case 24:return "COND";
break;
case 25:return "COND";
break;
case 26:return "COND";
break;
case 27:return "COND";
break;
case 28:return "COND";
break;
case 29:return "COND";
break;
case 30:return "COND";
break;
case 31:return "EXISTS";
break;
case 32:this.pushState("tag"); return "VOID_TAG";
break;
case 33:this.pushState("tag"); return "TAG";
break;
case 34:this.popState(); return "END_TAG";
break;
case 35:yy_.yytext = yy_.yytext.slice(1); return "TAG_ID";
break;
case 36:yy_.yytext = yy_.yytext.slice(1); return "TAG_CLASS";
break;
case 37:this.pushState("tagargs"); return "LPAREN";
break;
case 38:this.popState(); return "RPAREN";
break;
case 39:this.pushState("tagargs"); return "LBRACE";
break;
case 40:this.popState(); return "RBRACE";
break;
case 41:return "COLON";
break;
case 42:return "EQ";
break;
case 43:return "COMMA";
break;
case 44:return "TAG_ATTR";
break;
case 45:yy_.yytext = "data-" + yy_.yytext.slice(1); return "TAG_DATA_ATTR";
break;
case 46:/* ignore */
break;
case 47:/* ignore */
break;
case 48:this.pushState("filter"); yy_.yytext = yy_.yytext.slice(1); return "FILTER";
break;
case 49:this.pushState("name"); return "START_NAME";
break;
case 50:this.popState(); return "RBRACE"
break;
case 51:this.pushState("fn"); yy_.yytext = yy_.yytext.slice(1); return "FN";
break;
case 52:this.popState(); return "RPAREN";
break;
case 53:/* ignore */
break;
case 54:/* ignore */
break;
case 55:return "LBRACE";
break;
case 56:return "RBRACE";
break;
case 57:return "COMMA";
break;
case 58:return "ID";
break;
case 59:return "DOT";
break;
case 60:return "LPAREN";
break;
case 61:return "RPAREN";
break;
case 62:return "LBRACK";
break;
case 63:return "RBRACK";
break;
case 64:return "COLON"; 
break;
case 65:return "COMMA";
break;
case 66:return "INT";
break;
case 67:yy_.yytext = strip(1,2).replace(/\\"/g, '"'); return "STRING";
break;
case 68:return "STRING"; // Do not strip quotes
break;
case 69:return "WORD";
break;
case 70:return 5;
break;
case 71:
  var tokens = [];
  while (0 < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }
  if (tokens.length) {
    return tokens;
  }

break;
case 72:
  var tokens = [];
  while (_filter_indent_level >= _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }
  if (tokens.length) {
    return tokens;
  }

break;
case 73:/* eat blank lines */
break;
case 74:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;
  if (indentation > _indent_stack[0]) {
    _indent_stack.unshift(indentation);
    return "INDENT";
  }
  var tokens = [];
  while (indentation < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }
  if (tokens.length) return tokens;

break;
case 75:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (typeof _filter_indent_level === "undefined") {
    _filter_indent_level = indentation;
    return "FILTER_START";
  } else if (indentation < _filter_indent_level) {
    _filter_indent_level = undefined;
    this.popState();
    return "DEDENT";
  } 
  /* else ignore */

break;
case 76:/* ignore all other whitespace */
break;
}
},
rules: [/^(?:""")/,/^(?:""")/,/^(?:.+)/,/^(?:\n)/,/^(?:<.+(?=\n))/,/^(?:for\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:alias\b)/,/^(?:with\b)/,/^(?:include\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:(?=\n))/,/^(?:in\b)/,/^(?:is\b)/,/^(?:as\b)/,/^(?:not\b)/,/^(?:Hash\b)/,/^(?:List\b)/,/^(?:String\b)/,/^(?:Integer\b)/,/^(?:Number\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?:>)/,/^(?:<)/,/^(?:%)/,/^(?:exists\b)/,/^(?:((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)))/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:(?=\n))/,/^(?:(#[a-zA-Z][a-zA-Z0-9\-\:_]*))/,/^(?:(\.-?[_a-zA-Z]+[_a-zA-Z0-9\-]*(?=["."\s\n])))/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z][a-zA-Z0-9\-_]*(?=\s*["="":"])))/,/^(?:(\*[a-zA-Z][a-zA-Z0-9\-]*(?=["="":"])))/,/^(?:\s)/,/^(?:\n)/,/^(?::(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:@\{)/,/^(?:\})/,/^(?:@(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254})\s?(?=\())/,/^(?:\)(?!\)))/,/^(?:\s)/,/^(?:\n)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:(\+|-)?(0|[1-9][0-9]*))/,/^(?:(('(\\'|[^"'"])*')|("(\\"|[^'"'])*")))/,/^(?:(('(\\'|[^"'"])*')|("(\\"|[^'"'])*")))/,/^(?:([^\s\n"@"][^\s\n]*))/,/^(?:$)/,/^(?:\s*$)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"comment":{"rules":[1,2,3,70,73,76],"inclusive":true},"tag":{"rules":[34,35,36,37,39,49,68,69,70,73,76],"inclusive":true},"tagargs":{"rules":[38,40,41,42,43,44,45,46,47,67,70,73,76],"inclusive":true},"filter":{"rules":[49,69,70,72,73,75,76],"inclusive":true},"expr":{"rules":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,58,59,60,61,62,63,64,65,66,67,70,73,76],"inclusive":true},"name":{"rules":[50,58,59,60,61,62,63,64,65,66,67,70,73,76],"inclusive":true},"fn":{"rules":[11,12,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,73,76],"inclusive":true},"INITIAL":{"rules":[0,4,5,6,7,8,9,10,32,33,48,49,51,68,69,70,71,73,74,76],"inclusive":true}}
};
_indent_stack = [0];
_filter_indent_level = undefined;;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = manana_parser;
exports.Parser = manana_parser.Parser;
exports.parse = function () { return manana_parser.parse.apply(manana_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}