/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"prog_list":4,"EOF":5,"stmt":6,"block":7,"INDENT":8,"stmt_list":9,"DEDENT":10,"html_stmt":11,"void_tag_stmt":12,"tag_stmt":13,"filter_stmt":14,"alias_stmt":15,"with_stmt":16,"if_stmt":17,"for_stmt":18,"HTML":19,"void_tag":20,"END_TAG":21,"tag_attrs":22,"VOID_TAG":23,"tag":24,"text":25,"TAG":26,"tag_attr":27,"tag_attr_args":28,"TAG_ID":29,"tag_classes":30,"TAG_ATTR":31,"EQ":32,"string":33,"TAG_DATA_ATTR":34,"LPAREN":35,"tag_attr_arg_list":36,"RPAREN":37,"tag_attr_arg":38,"STRING":39,"COMMA":40,"TAG_CLASS":41,"FILTER":42,"FILTER_START":43,"word_list":44,"word":45,"WORD":46,"name":47,"SPACE":48,"WITH":49,"path":50,"AS":51,"ID":52,"END_EXPR":53,"FOR":54,"IN":55,"IF":56,"ev":57,"ELSE":58,"NOT":59,"COND":60,"IS":61,"TYPE":62,"INT":63,"BOOL":64,"ALIAS":65,"id":66,"DOT":67,"meths":68,"LBRACK":69,"RBRACK":70,"COLON":71,"meth":72,"meth_args":73,"meth_arg":74,"START_NAME":75,"RBRACE":76,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",10:"DEDENT",19:"HTML",21:"END_TAG",23:"VOID_TAG",26:"TAG",29:"TAG_ID",31:"TAG_ATTR",32:"EQ",33:"string",34:"TAG_DATA_ATTR",35:"LPAREN",37:"RPAREN",39:"STRING",40:"COMMA",41:"TAG_CLASS",42:"FILTER",43:"FILTER_START",46:"WORD",48:"SPACE",49:"WITH",51:"AS",52:"ID",53:"END_EXPR",54:"FOR",55:"IN",56:"IF",58:"ELSE",59:"NOT",60:"COND",61:"IS",62:"TYPE",63:"INT",64:"BOOL",65:"ALIAS",67:"DOT",69:"LBRACK",70:"RBRACK",71:"COLON",75:"START_NAME",76:"RBRACE"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,3],[9,2],[9,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,1],[12,2],[12,3],[20,1],[13,2],[13,3],[13,3],[13,3],[13,4],[13,4],[24,1],[22,2],[22,1],[22,1],[27,1],[27,1],[27,3],[27,3],[28,3],[36,2],[36,1],[38,3],[38,4],[38,3],[38,4],[30,2],[30,1],[14,4],[25,1],[44,1],[44,2],[45,1],[45,1],[45,1],[16,6],[18,6],[17,4],[17,7],[17,5],[17,8],[17,6],[17,9],[17,6],[17,9],[17,7],[17,10],[57,1],[57,1],[57,1],[57,1],[15,5],[50,1],[50,3],[50,3],[66,1],[66,4],[66,6],[66,6],[66,4],[66,6],[66,6],[66,5],[66,5],[68,1],[68,3],[72,3],[72,4],[73,3],[73,1],[74,1],[74,1],[74,1],[47,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0-1]; 
break;
case 6: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = [$$[$0]]; 
break;
case 16: this.$ = new HtmlNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 17: this.$ = new VoidTagNode($$[$0-1], null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 18: this.$ = new VoidTagNode($$[$0-2], $$[$0-1],   new Loc(_$[$0-2], _$[$0-1])); 
break;
case 19: this.$ = $$[$0]; 
break;
case 20: this.$ = new TagNode($$[$0-1], null, null, null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 21: this.$ = new TagNode($$[$0-2], null, $$[$0-1],   null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 22: this.$ = new TagNode($$[$0-2], null, null, $$[$0],   new Loc(_$[$0-2], _$[$0])); 
break;
case 23: this.$ = new TagNode($$[$0-2], $$[$0-1],   null, null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 24: this.$ = new TagNode($$[$0-3], $$[$0-2],   $$[$0-1],   null, new Loc(_$[$0-3], _$[$0-1])); 
break;
case 25: this.$ = new TagNode($$[$0-3], $$[$0-2],   null, $$[$0],   new Loc(_$[$0-3], _$[$0])); 
break;
case 26: this.$ = $$[$0]; 
break;
case 27: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 28: this.$ = [$$[$0]]; 
break;
case 29: this.$ = $$[$0]; 
break;
case 30: this.$ = ['id', $$[$0]]; 
break;
case 31: this.$ = ['class', $$[$0].join(" ")]; 
break;
case 32: this.$ = ['attr', $$[$0-2], $$[$0]]; 
break;
case 33: this.$ = ['data', $$[$0-2], $$[$0]]; 
break;
case 34: this.$ = $$[$0-1]; 
break;
case 35: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 36: this.$ = [$$[$0]]; 
break;
case 37: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 38: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 39: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 40: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 41: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 42: this.$ = [$$[$0]]; 
break;
case 43: this.$ = new FilterNode($$[$0-3], $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 44: this.$ = new TextNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 45: this.$ = [$$[$0]]; 
break;
case 46: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 50: this.$ = new WithNode($$[$0-4], $$[$0-2], $$[$0], new Loc(_$[$0-5], _$[$0])); 
break;
case 51: this.$ = new ForNode($$[$0-4], $$[$0-2], $$[$0] , new Loc(_$[$0-5], _$[$0])) ; 
break;
case 52: this.$ = new IfNode("true", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-3], _$[$0])); 
break;
case 53: this.$ = new IfNode("true", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-6], _$[$0])); 
break;
case 54: this.$ = new IfNode("false", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-4], _$[$0])); 
break;
case 55: this.$ = new IfNode("false", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-7], _$[$0])); 
break;
case 56: this.$ = new IfNode($$[$0-3], $$[$0-4], $$[$0-2], $$[$0], null, new Loc(_$[$0-5], _$[$0])); 
break;
case 57: this.$ = new IfNode($$[$0-6], $$[$0-7], $$[$0-5], $$[$0-3], $$[$0], new Loc(_$[$0-8], _$[$0])); 
break;
case 58: this.$ = new IfNode($$[$0-3], $$[$0-4], $$[$0-2], $$[$0], null, new Loc(_$[$0-5], _$[$0])); 
break;
case 59: this.$ = new IfNode($$[$0-6], $$[$0-7], $$[$0-5], $$[$0-3], null, new Loc(_$[$0-8], _$[$0])); 
break;
case 60: this.$ = new IfNode("is not", $$[$0-5], $$[$0-2], $$[$0], null, new Loc(_$[$0-6], _$[$0])); 
break;
case 61: this.$ = new IfNode("is not", $$[$0-8], $$[$0-5], $$[$0-3], $$[$0], new Loc(_$[$0-9], _$[$0])); 
break;
case 66: this.$ = new AliasNode($$[$0-3], $$[$0-1], new Loc(_$[$0-4], _$[$0])); 
break;
case 67: this.$ = new PathNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 68: this.$ = updatePathNode($$[$0-2], $$[$0], null, new Loc(_$[$0-2], _$[$0]));  
break;
case 69: this.$ = updatePathNode($$[$0-2], null, $$[$0], new Loc(_$[$0-2], _$[$0])); 
break;
case 70: this.$ = new IdNode($$[$0], null, null, new Loc(_$[$0], _$[$0])); 
break;
case 71: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 72: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 73: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 74: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 75: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 76: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 77: this.$ = new IdNode($$[$0-4], 0   , $$[$0-1]  , new Loc(_$[$0-4], _$[$0])); 
break;
case 78: this.$ = new IdNode($$[$0-4], $$[$0-2]  , '*' , new Loc(_$[$0-4], _$[$0])); 
break;
case 79: this.$ = new MethodChainNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 80: this.$ = $$[$0-2]; this.$.chain.push($$[$0])                        ; 
break;
case 81: this.$ = new MethodNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 82: this.$ = new MethodNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 83: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 84: this.$ = [$$[$0]]; 
break;
case 88: this.$ = $$[$0-1]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,13],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:[1,14],20:15,23:[1,22],24:16,26:[1,23],42:[1,17],49:[1,19],54:[1,21],56:[1,20],65:[1,18]},{1:[3]},{5:[1,24],6:25,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:[1,14],20:15,23:[1,22],24:16,26:[1,23],42:[1,17],49:[1,19],54:[1,21],56:[1,20],65:[1,18]},{5:[2,3],19:[2,3],23:[2,3],26:[2,3],42:[2,3],49:[2,3],54:[2,3],56:[2,3],65:[2,3]},{5:[2,4],19:[2,4],23:[2,4],26:[2,4],42:[2,4],49:[2,4],54:[2,4],56:[2,4],65:[2,4]},{5:[2,8],10:[2,8],19:[2,8],23:[2,8],26:[2,8],42:[2,8],49:[2,8],54:[2,8],56:[2,8],65:[2,8]},{5:[2,9],10:[2,9],19:[2,9],23:[2,9],26:[2,9],42:[2,9],49:[2,9],54:[2,9],56:[2,9],65:[2,9]},{5:[2,10],10:[2,10],19:[2,10],23:[2,10],26:[2,10],42:[2,10],49:[2,10],54:[2,10],56:[2,10],65:[2,10]},{5:[2,11],10:[2,11],19:[2,11],23:[2,11],26:[2,11],42:[2,11],49:[2,11],54:[2,11],56:[2,11],65:[2,11]},{5:[2,12],10:[2,12],19:[2,12],23:[2,12],26:[2,12],42:[2,12],49:[2,12],54:[2,12],56:[2,12],65:[2,12]},{5:[2,13],10:[2,13],19:[2,13],23:[2,13],26:[2,13],42:[2,13],49:[2,13],54:[2,13],56:[2,13],65:[2,13]},{5:[2,14],10:[2,14],19:[2,14],23:[2,14],26:[2,14],42:[2,14],49:[2,14],54:[2,14],56:[2,14],65:[2,14]},{5:[2,15],10:[2,15],19:[2,15],23:[2,15],26:[2,15],42:[2,15],49:[2,15],54:[2,15],56:[2,15],65:[2,15]},{6:27,9:26,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:[1,14],20:15,23:[1,22],24:16,26:[1,23],42:[1,17],49:[1,19],54:[1,21],56:[1,20],65:[1,18]},{5:[2,16],10:[2,16],19:[2,16],23:[2,16],26:[2,16],42:[2,16],49:[2,16],54:[2,16],56:[2,16],65:[2,16]},{21:[1,28],22:29,27:30,28:31,29:[1,32],30:33,31:[1,34],34:[1,35],35:[1,36],41:[1,37]},{21:[1,38],22:40,25:39,27:30,28:31,29:[1,32],30:33,31:[1,34],34:[1,35],35:[1,36],41:[1,37],44:41,45:42,46:[1,43],47:44,48:[1,45],75:[1,46]},{43:[1,47]},{52:[1,48]},{50:49,52:[1,51],66:50},{39:[1,54],50:57,52:[1,51],57:52,59:[1,53],63:[1,55],64:[1,56],66:50},{52:[1,58]},{21:[2,19],29:[2,19],31:[2,19],34:[2,19],35:[2,19],41:[2,19]},{21:[2,26],29:[2,26],31:[2,26],34:[2,26],35:[2,26],41:[2,26],46:[2,26],48:[2,26],75:[2,26]},{1:[2,1]},{5:[2,2],19:[2,2],23:[2,2],26:[2,2],42:[2,2],49:[2,2],54:[2,2],56:[2,2],65:[2,2]},{6:60,10:[1,59],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:[1,14],20:15,23:[1,22],24:16,26:[1,23],42:[1,17],49:[1,19],54:[1,21],56:[1,20],65:[1,18]},{10:[2,7],19:[2,7],23:[2,7],26:[2,7],42:[2,7],49:[2,7],54:[2,7],56:[2,7],65:[2,7]},{5:[2,17],10:[2,17],19:[2,17],23:[2,17],26:[2,17],42:[2,17],49:[2,17],54:[2,17],56:[2,17],65:[2,17]},{21:[1,61],27:62,29:[1,32],30:33,31:[1,34],34:[1,35],41:[1,37]},{21:[2,28],29:[2,28],31:[2,28],34:[2,28],41:[2,28],46:[2,28],48:[2,28],75:[2,28]},{21:[2,29],29:[2,29],31:[2,29],34:[2,29],41:[2,29],46:[2,29],48:[2,29],75:[2,29]},{21:[2,30],29:[2,30],31:[2,30],34:[2,30],41:[2,30],46:[2,30],48:[2,30],75:[2,30]},{21:[2,31],29:[2,31],31:[2,31],34:[2,31],41:[1,63],46:[2,31],48:[2,31],75:[2,31]},{32:[1,64]},{32:[1,65]},{31:[1,68],34:[1,69],36:66,38:67},{21:[2,42],29:[2,42],31:[2,42],34:[2,42],41:[2,42],46:[2,42],48:[2,42],75:[2,42]},{5:[2,20],7:70,8:[1,13],10:[2,20],19:[2,20],23:[2,20],26:[2,20],42:[2,20],49:[2,20],54:[2,20],56:[2,20],65:[2,20]},{21:[1,71]},{21:[1,72],25:73,27:62,29:[1,32],30:33,31:[1,34],34:[1,35],41:[1,37],44:41,45:42,46:[1,43],47:44,48:[1,45],75:[1,46]},{10:[2,44],21:[2,44],45:74,46:[1,43],47:44,48:[1,45],75:[1,46]},{10:[2,45],21:[2,45],46:[2,45],48:[2,45],75:[2,45]},{10:[2,47],21:[2,47],46:[2,47],48:[2,47],75:[2,47]},{10:[2,48],21:[2,48],46:[2,48],48:[2,48],75:[2,48]},{10:[2,49],21:[2,49],46:[2,49],48:[2,49],75:[2,49]},{50:75,52:[1,51],66:50},{25:76,44:41,45:42,46:[1,43],47:44,48:[1,45],75:[1,46]},{32:[1,77]},{51:[1,78],67:[1,79]},{37:[2,67],40:[2,67],51:[2,67],53:[2,67],60:[2,67],61:[2,67],67:[2,67],70:[2,67],71:[2,67],76:[2,67]},{37:[2,70],40:[2,70],51:[2,70],53:[2,70],60:[2,70],61:[2,70],67:[2,70],69:[1,80],70:[2,70],71:[2,70],76:[2,70]},{53:[1,81],60:[1,82],61:[1,83]},{39:[1,54],50:57,52:[1,51],57:84,63:[1,55],64:[1,56],66:50},{53:[2,62],60:[2,62],61:[2,62]},{53:[2,63],60:[2,63],61:[2,63]},{53:[2,64],60:[2,64],61:[2,64]},{53:[2,65],60:[2,65],61:[2,65],67:[1,79]},{55:[1,85]},{5:[2,5],10:[2,5],19:[2,5],23:[2,5],26:[2,5],42:[2,5],49:[2,5],54:[2,5],56:[2,5],58:[2,5],65:[2,5]},{10:[2,6],19:[2,6],23:[2,6],26:[2,6],42:[2,6],49:[2,6],54:[2,6],56:[2,6],65:[2,6]},{5:[2,18],10:[2,18],19:[2,18],23:[2,18],26:[2,18],42:[2,18],49:[2,18],54:[2,18],56:[2,18],65:[2,18]},{21:[2,27],29:[2,27],31:[2,27],34:[2,27],41:[2,27],46:[2,27],48:[2,27],75:[2,27]},{21:[2,41],29:[2,41],31:[2,41],34:[2,41],41:[2,41],46:[2,41],48:[2,41],75:[2,41]},{33:[1,86]},{33:[1,87]},{31:[1,68],34:[1,69],37:[1,88],38:89},{31:[2,36],34:[2,36],37:[2,36]},{32:[1,90]},{32:[1,91]},{5:[2,22],10:[2,22],19:[2,22],23:[2,22],26:[2,22],42:[2,22],49:[2,22],54:[2,22],56:[2,22],65:[2,22]},{5:[2,21],10:[2,21],19:[2,21],23:[2,21],26:[2,21],42:[2,21],49:[2,21],54:[2,21],56:[2,21],65:[2,21]},{5:[2,23],7:92,8:[1,13],10:[2,23],19:[2,23],23:[2,23],26:[2,23],42:[2,23],49:[2,23],54:[2,23],56:[2,23],65:[2,23]},{21:[1,93]},{10:[2,46],21:[2,46],46:[2,46],48:[2,46],75:[2,46]},{67:[1,79],76:[1,94]},{10:[1,95]},{50:96,52:[1,51],66:50},{52:[1,97]},{52:[1,100],66:98,68:99,72:101},{50:103,52:[1,51],63:[1,102],66:50,71:[1,104]},{7:105,8:[1,13]},{39:[1,54],50:57,52:[1,51],57:106,63:[1,55],64:[1,56],66:50},{59:[1,108],62:[1,107]},{53:[1,109]},{50:110,52:[1,51],66:50},{21:[2,32],29:[2,32],31:[2,32],34:[2,32],41:[2,32],46:[2,32],48:[2,32],75:[2,32]},{21:[2,33],29:[2,33],31:[2,33],34:[2,33],41:[2,33],46:[2,33],48:[2,33],75:[2,33]},{21:[2,34],29:[2,34],31:[2,34],34:[2,34],41:[2,34],46:[2,34],48:[2,34],75:[2,34]},{31:[2,35],34:[2,35],37:[2,35]},{39:[1,111]},{39:[1,112]},{5:[2,25],10:[2,25],19:[2,25],23:[2,25],26:[2,25],42:[2,25],49:[2,25],54:[2,25],56:[2,25],65:[2,25]},{5:[2,24],10:[2,24],19:[2,24],23:[2,24],26:[2,24],42:[2,24],49:[2,24],54:[2,24],56:[2,24],65:[2,24]},{10:[2,88],21:[2,88],46:[2,88],48:[2,88],75:[2,88]},{5:[2,43],10:[2,43],19:[2,43],23:[2,43],26:[2,43],42:[2,43],49:[2,43],54:[2,43],56:[2,43],65:[2,43]},{53:[1,113],67:[1,79]},{53:[1,114]},{37:[2,68],40:[2,68],51:[2,68],53:[2,68],60:[2,68],61:[2,68],67:[2,68],70:[2,68],71:[2,68],76:[2,68]},{37:[2,69],40:[2,69],51:[2,69],53:[2,69],60:[2,69],61:[2,69],67:[1,115],70:[2,69],71:[2,69],76:[2,69]},{35:[1,116],37:[2,70],40:[2,70],51:[2,70],53:[2,70],60:[2,70],61:[2,70],67:[2,70],69:[1,80],70:[2,70],71:[2,70],76:[2,70]},{37:[2,79],40:[2,79],51:[2,79],53:[2,79],60:[2,79],61:[2,79],67:[2,79],70:[2,79],71:[2,79],76:[2,79]},{70:[1,117],71:[1,118]},{67:[1,79],70:[1,119],71:[1,120]},{63:[1,121]},{5:[2,52],10:[2,52],19:[2,52],23:[2,52],26:[2,52],42:[2,52],49:[2,52],54:[2,52],56:[2,52],58:[1,122],65:[2,52]},{53:[1,123]},{53:[1,124]},{62:[1,125]},{7:126,8:[1,13]},{53:[1,127],67:[1,79]},{31:[2,37],34:[2,37],37:[2,37],40:[1,128]},{31:[2,39],34:[2,39],37:[2,39],40:[1,129]},{5:[2,66],10:[2,66],19:[2,66],23:[2,66],26:[2,66],42:[2,66],49:[2,66],54:[2,66],56:[2,66],65:[2,66]},{7:130,8:[1,13]},{52:[1,132],72:131},{37:[1,133],39:[1,138],50:136,52:[1,51],63:[1,137],66:50,73:134,74:135},{37:[2,71],40:[2,71],51:[2,71],53:[2,71],60:[2,71],61:[2,71],67:[2,71],70:[2,71],71:[2,71],76:[2,71]},{50:140,52:[1,51],63:[1,139],66:50,70:[1,141]},{37:[2,74],40:[2,74],51:[2,74],53:[2,74],60:[2,74],61:[2,74],67:[2,74],70:[2,74],71:[2,74],76:[2,74]},{50:143,52:[1,51],63:[1,142],66:50},{70:[1,144]},{53:[1,145]},{7:146,8:[1,13]},{7:147,8:[1,13]},{53:[1,148]},{5:[2,54],10:[2,54],19:[2,54],23:[2,54],26:[2,54],42:[2,54],49:[2,54],54:[2,54],56:[2,54],58:[1,149],65:[2,54]},{7:150,8:[1,13]},{31:[2,38],34:[2,38],37:[2,38]},{31:[2,40],34:[2,40],37:[2,40]},{5:[2,50],10:[2,50],19:[2,50],23:[2,50],26:[2,50],42:[2,50],49:[2,50],54:[2,50],56:[2,50],65:[2,50]},{37:[2,80],40:[2,80],51:[2,80],53:[2,80],60:[2,80],61:[2,80],67:[2,80],70:[2,80],71:[2,80],76:[2,80]},{35:[1,116]},{37:[2,81],40:[2,81],51:[2,81],53:[2,81],60:[2,81],61:[2,81],67:[2,81],70:[2,81],71:[2,81],76:[2,81]},{37:[1,151],40:[1,152]},{37:[2,84],40:[2,84]},{37:[2,85],40:[2,85],67:[1,79]},{37:[2,86],40:[2,86]},{37:[2,87],40:[2,87]},{70:[1,153]},{67:[1,79],70:[1,154]},{37:[2,78],40:[2,78],51:[2,78],53:[2,78],60:[2,78],61:[2,78],67:[2,78],70:[2,78],71:[2,78],76:[2,78]},{70:[1,155]},{67:[1,79],70:[1,156]},{37:[2,77],40:[2,77],51:[2,77],53:[2,77],60:[2,77],61:[2,77],67:[2,77],70:[2,77],71:[2,77],76:[2,77]},{7:157,8:[1,13]},{5:[2,56],10:[2,56],19:[2,56],23:[2,56],26:[2,56],42:[2,56],49:[2,56],54:[2,56],56:[2,56],58:[1,158],65:[2,56]},{5:[2,58],10:[2,58],19:[2,58],23:[2,58],26:[2,58],42:[2,58],49:[2,58],54:[2,58],56:[2,58],58:[1,159],65:[2,58]},{7:160,8:[1,13]},{53:[1,161]},{5:[2,51],10:[2,51],19:[2,51],23:[2,51],26:[2,51],42:[2,51],49:[2,51],54:[2,51],56:[2,51],65:[2,51]},{37:[2,82],40:[2,82],51:[2,82],53:[2,82],60:[2,82],61:[2,82],67:[2,82],70:[2,82],71:[2,82],76:[2,82]},{39:[1,138],50:136,52:[1,51],63:[1,137],66:50,74:162},{37:[2,72],40:[2,72],51:[2,72],53:[2,72],60:[2,72],61:[2,72],67:[2,72],70:[2,72],71:[2,72],76:[2,72]},{37:[2,73],40:[2,73],51:[2,73],53:[2,73],60:[2,73],61:[2,73],67:[2,73],70:[2,73],71:[2,73],76:[2,73]},{37:[2,75],40:[2,75],51:[2,75],53:[2,75],60:[2,75],61:[2,75],67:[2,75],70:[2,75],71:[2,75],76:[2,75]},{37:[2,76],40:[2,76],51:[2,76],53:[2,76],60:[2,76],61:[2,76],67:[2,76],70:[2,76],71:[2,76],76:[2,76]},{5:[2,53],10:[2,53],19:[2,53],23:[2,53],26:[2,53],42:[2,53],49:[2,53],54:[2,53],56:[2,53],65:[2,53]},{53:[1,163]},{53:[1,164]},{5:[2,60],10:[2,60],19:[2,60],23:[2,60],26:[2,60],42:[2,60],49:[2,60],54:[2,60],56:[2,60],58:[1,165],65:[2,60]},{7:166,8:[1,13]},{37:[2,83],40:[2,83]},{7:167,8:[1,13]},{7:168,8:[1,13]},{53:[1,169]},{5:[2,55],10:[2,55],19:[2,55],23:[2,55],26:[2,55],42:[2,55],49:[2,55],54:[2,55],56:[2,55],65:[2,55]},{5:[2,57],10:[2,57],19:[2,57],23:[2,57],26:[2,57],42:[2,57],49:[2,57],54:[2,57],56:[2,57],65:[2,57]},{5:[2,59],10:[2,59],19:[2,59],23:[2,59],26:[2,59],42:[2,59],49:[2,59],54:[2,59],56:[2,59],65:[2,59]},{7:170,8:[1,13]},{5:[2,61],10:[2,61],19:[2,61],23:[2,61],26:[2,61],42:[2,61],49:[2,61],54:[2,61],56:[2,61],65:[2,61]}],
defaultActions: {24:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function Loc(start, end) {
  this.start = { line: start.first_line, column: start.first_column };
  this.end = { line: end.last_line, column: end.last_column };
}

/* AST nodes */

function HtmlNode(text, loc) {
  this.type = "HTML";
  this.body = text;
  this.loc = loc;
}

function VoidTagNode(tag, attrs, loc) {
  this.type = "VoidTag";
  this.tag = tag;
  this.attrs = attrs;
  this.loc = loc;
}

function TagNode(tag, attrs, text, block, loc) {
  this.type = "Tag";
  this.tag = tag;
  this.attrs = attrs;
  this.body = text ? [text] : block;
  this.loc = loc;
}

function TextNode(words, loc) {
  this.type = "Text";
  this.loc = loc;

  var w = words, t = [], s = [], i = 0; 

  while (typeof w[i] !== "undefined") {
    if (typeof w[i] === "string") {
      s.push(w[i]);
    } else {
      if (s.length) {
        t.push(s.join(' '));
        s = [];
      }
      t.push(w[i]);
    }
    i++;
  }
  if (s.length) {
    t.push(s.join(' '));
  }

  this.body = t;
}

function NameNode(path, loc) {
  this.type = "Name";
  this.body = path;
  this.loc = loc;
}

function WithNode(path, id, body, loc) {
  this.type = "With";
  this.path = path;
  this.id = id;
  this.body = body;
  this.loc = loc;
}

function IdNode(id, start, end, loc) {
  this.type = "Id";
  this.id = id;
  this.start = start;
  this.end = end;
  this.loc = loc;
}

function PathNode(component, loc) {
  this.type = "Path";
  this.components = [ createPathComponent(component) ];
  this.methods = [];
  this.loc = loc;
}

function createPathComponent(c) {
  var comp = [c.id];
  if (c.start !== null) comp.push(c.start);
  if (c.end !== null) comp.push(c.end);
  return comp;
}

function updatePathNode(node, component, methods, loc) {
  if (component !== null) {
    node.components.push(createPathComponent(component));
  }
  if (methods !== null) {
    node.methods = methods;
  }
  if (loc.end.line > node.loc.end.line || loc.end.column > node.loc.end.column) {
    node.loc.end = loc.end;
  }
  return node;
}

function MethodNode(name, args, loc) {
  this.type = "Method";
  this.name = name;
  this.args = args;
  this.loc = loc;
}

function MethodChainNode(method, loc) {
  this.type = "MethodChain";
  this.chain = [method];
  this.loc = loc;
}

function ForNode(id, path, body, loc) {
  this.type = "For";
  this.id = id;
  this.path = path;
  this.body = body;
  this.loc = loc;
}

function IfNode(cond, v1, v2, body, else_body, loc) {
  this.type = "If";
  this.condition = cond;
  this.value_1 = v1;
  this.value_2 = v2;
  this.body = body;
  this.else_body = else_body;
  this.loc = loc;
}

function AliasNode(id, path, loc) {
  this.type = "Alias";
  this.id = id;
  this.path = path;
  this.loc = loc;
}

function FilterNode(filter, body, loc) {
  this.type = "Filter";
  this.body = [body];
  this.loc = loc;
}

/* expose AST constructors to parser */

parser.ast = {};
parser.ast.Loc = Loc;
parser.ast.HtmlNode = HtmlNode;
parser.ast.VoidTagNode = VoidTagNode;
parser.ast.TagNode = TagNode;
parser.ast.TextNode = TextNode;
parser.ast.NameNode = NameNode;
parser.ast.WithNode = WithNode;
parser.ast.IdNode = IdNode;
parser.ast.PathNode = PathNode;
parser.ast.createPathComponent = createPathComponent;
parser.ast.updatePathNode = updatePathNode;
parser.ast.MethodNode = MethodNode;
parser.ast.MethodChainNode = MethodChainNode;
parser.ast.ForNode = ForNode;
parser.ast.IfNode = IfNode;
parser.ast.AliasNode = AliasNode;
parser.ast.FilterNode = FilterNode;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

  function strip(start, end) {
    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.pushState("comment"); /* ignore */ 
break;
case 1:this.popState(); /* ignore */ 
break;
case 2:/* ignore */
break;
case 3:/* ignore */
break;
case 4:return 19;
break;
case 5:this.pushState("expr"); return "FOR";
break;
case 6:this.pushState("expr"); return "IF";
break;
case 7:this.pushState("expr"); return "ELSE";
break;
case 8:this.pushState("expr"); return "ALIAS";
break;
case 9:this.pushState("expr"); return "WITH";
break;
case 10:this.popState(); return "END_EXPR";
break;
case 11:return "IN";
break;
case 12:return "IS";
break;
case 13:return "AS";
break;
case 14:return "NOT";
break;
case 15:return "BOOL";
break;
case 16:return "BOOL";
break;
case 17:return "TYPE";
break;
case 18:return "TYPE";
break;
case 19:return "TYPE";
break;
case 20:return "TYPE";
break;
case 21:return "TYPE";
break;
case 22:return "COND";
break;
case 23:return "COND";
break;
case 24:return "COND";
break;
case 25:return "COND";
break;
case 26:return "COND";
break;
case 27:return "COND";
break;
case 28:return "COND";
break;
case 29:return "=";
break;
case 30:this.pushState("tag"); return "VOID_TAG";
break;
case 31:this.pushState("tag"); return "TAG";
break;
case 32:this.popState(); return "END_TAG";
break;
case 33:yy_.yytext = yy_.yytext.slice(1); return "TAG_ID";
break;
case 34:yy_.yytext = yy_.yytext.slice(1); return "TAG_CLASS";
break;
case 35:this.pushState("tagargs"); return "LPAREN";
break;
case 36:this.popState(); return "RPAREN";
break;
case 37:/* ignore */
break;
case 38:/* ignore */
break;
case 39:return "EQ";
break;
case 40:return "COMMA";
break;
case 41:return "TAG_ATTR";
break;
case 42:yy_.yytext = "data-" + yy_.yytext.slice(1); return "TAG_DATA_ATTR";
break;
case 43:this.pushState("filter"); yy_.yytext = yy_.yytext.slice(1); return "FILTER";
break;
case 44:this.pushState("name"); return "START_NAME";
break;
case 45:this.popState(); return "RBRACE"
break;
case 46:return "ID";
break;
case 47:return "DOT";
break;
case 48:return "LPAREN";
break;
case 49:return "RPAREN";
break;
case 50:return "LBRACK";
break;
case 51:return "RBRACK";
break;
case 52:return "COLON"; 
break;
case 53:return "COMMA";
break;
case 54:return "INT";
break;
case 55:yy_.yytext = strip(1,2).replace(/\\"/g, '"'); return "STRING";
break;
case 56:return "WORD";
break;
case 57:return 5;
break;
case 58:
  var tokens = [];
  while (0 < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }
  if (tokens.length) {
    return tokens;
  }

break;
case 59:
  var tokens = [];
  while (_filter_indent_level >= _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }
  if (tokens.length) {
    return tokens;
  }

break;
case 60:/* eat blank lines */
break;
case 61:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;
  if (indentation > _indent_stack[0]) {
    _indent_stack.unshift(indentation);
    return "INDENT";
  }
  var tokens = [];
  while (indentation < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }
  if (tokens.length) return tokens;

break;
case 62:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (typeof _filter_indent_level === "undefined") {
    _filter_indent_level = indentation;
    return "FILTER_START";
  } else if (indentation < _filter_indent_level) {
    _filter_indent_level = undefined;
    this.popState();
    return "DEDENT";
  } 
  /* else ignore */

break;
case 63:/* ignore all other whitespace */
break;
}
},
rules: [/^(?:""")/,/^(?:""")/,/^(?:.+)/,/^(?:\n)/,/^(?:<.+(?=\n))/,/^(?:for\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:alias\b)/,/^(?:with\b)/,/^(?:(?=\n))/,/^(?:in\b)/,/^(?:is\b)/,/^(?:as\b)/,/^(?:not\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:Hash\b)/,/^(?:List\b)/,/^(?:String\b)/,/^(?:Integer\b)/,/^(?:Number\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:%)/,/^(?:=)/,/^(?:((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)))/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:(?=\n))/,/^(?:(#[a-zA-Z][a-zA-Z0-9\-\:_]*))/,/^(?:(\.-?[_a-zA-Z]+[_a-zA-Z0-9\-]*(?=["."\s\n])))/,/^(?:\()/,/^(?:\))/,/^(?:\s)/,/^(?:\n)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z][a-zA-Z0-9\-_]*(?==)))/,/^(?:(\*[a-zA-Z][a-zA-Z0-9\-]*(?==)))/,/^(?::(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:@\{)/,/^(?:\})/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:(\+|-)?(0|[1-9][0-9]*))/,/^(?:(('(\\'|[^"'"])*')|("(\\"|[^'"'])*")))/,/^(?:([^\s\n\{][^\s\n\{]*))/,/^(?:$)/,/^(?:\s*$)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"comment":{"rules":[1,2,3,57,60,63],"inclusive":true},"tag":{"rules":[32,33,34,35,44,56,57,60,63],"inclusive":true},"tagargs":{"rules":[36,37,38,39,40,41,42,55,57,60,63],"inclusive":true},"filter":{"rules":[44,56,57,59,60,62,63],"inclusive":true},"expr":{"rules":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,46,47,48,49,50,51,52,53,54,55,57,60,63],"inclusive":true},"name":{"rules":[45,46,47,48,49,50,51,52,53,54,55,57,60,63],"inclusive":true},"INITIAL":{"rules":[0,4,5,6,7,8,9,30,31,43,44,56,57,58,60,61,63],"inclusive":true}}
};
_indent_stack = [0];
_filter_indent_level = undefined;;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}