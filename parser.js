/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"prog_list":4,"EOF":5,"stmt":6,"block":7,"INDENT":8,"stmt_list":9,"DEDENT":10,"html_stmt":11,"void_tag_stmt":12,"tag_stmt":13,"filter_stmt":14,"alias_stmt":15,"with_stmt":16,"if_stmt":17,"for_stmt":18,"name":19,"HTML":20,"void_tag":21,"END_TAG":22,"tag_attrs":23,"VOID_TAG":24,"tag":25,"text":26,"TAG":27,"tag_attr":28,"tag_attr_args":29,"TAG_ID":30,"tag_classes":31,"TAG_ATTR":32,"EQ":33,"STRING":34,"TAG_DATA_ATTR":35,"LPAREN":36,"tag_attr_arg_list":37,"RPAREN":38,"tag_attr_arg":39,"COMMA":40,"TAG_CLASS":41,"FILTER":42,"FILTER_START":43,"word_list":44,"word":45,"WORD":46,"SPACE":47,"WITH":48,"path":49,"AS":50,"ID":51,"END_EXPR":52,"FOR":53,"IN":54,"IF":55,"ev":56,"ELSE":57,"NOT":58,"COND":59,"IS":60,"TYPE":61,"INT":62,"BOOL":63,"ALIAS":64,"id":65,"DOT":66,"meths":67,"LBRACK":68,"RBRACK":69,"COLON":70,"meth":71,"meth_args":72,"meth_arg":73,"START_NAME":74,"RBRACE":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"INDENT",10:"DEDENT",20:"HTML",22:"END_TAG",24:"VOID_TAG",27:"TAG",30:"TAG_ID",32:"TAG_ATTR",33:"EQ",34:"STRING",35:"TAG_DATA_ATTR",36:"LPAREN",38:"RPAREN",40:"COMMA",41:"TAG_CLASS",42:"FILTER",43:"FILTER_START",46:"WORD",47:"SPACE",48:"WITH",50:"AS",51:"ID",52:"END_EXPR",53:"FOR",54:"IN",55:"IF",57:"ELSE",58:"NOT",59:"COND",60:"IS",61:"TYPE",62:"INT",63:"BOOL",64:"ALIAS",66:"DOT",68:"LBRACK",69:"RBRACK",70:"COLON",74:"START_NAME",75:"RBRACE"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[7,3],[9,2],[9,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,1],[12,2],[12,3],[21,1],[13,2],[13,3],[13,3],[13,3],[13,4],[13,4],[25,1],[23,2],[23,1],[23,1],[28,1],[28,1],[28,3],[28,3],[29,3],[37,2],[37,1],[39,3],[39,4],[39,3],[39,4],[31,2],[31,1],[14,4],[26,1],[44,1],[44,2],[45,1],[45,1],[45,1],[16,6],[18,6],[17,4],[17,7],[17,5],[17,8],[17,6],[17,9],[17,6],[17,9],[17,7],[17,10],[56,1],[56,1],[56,1],[56,1],[15,5],[49,1],[49,3],[49,3],[65,1],[65,4],[65,6],[65,6],[65,4],[65,6],[65,6],[65,5],[65,5],[67,1],[67,3],[71,3],[71,4],[72,3],[72,1],[73,1],[73,1],[73,1],[19,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0-1]; 
break;
case 6: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7: this.$ = [$$[$0]]; 
break;
case 17: this.$ = new HtmlNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 18: this.$ = new VoidTagNode($$[$0-1], null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 19: this.$ = new VoidTagNode($$[$0-2], $$[$0-1],   new Loc(_$[$0-2], _$[$0-1])); 
break;
case 20: this.$ = $$[$0]; 
break;
case 21: this.$ = new TagNode($$[$0-1], null, null, null, new Loc(_$[$0-1], _$[$0-1])); 
break;
case 22: this.$ = new TagNode($$[$0-2], null, $$[$0-1],   null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 23: this.$ = new TagNode($$[$0-2], null, null, $$[$0],   new Loc(_$[$0-2], _$[$0])); 
break;
case 24: this.$ = new TagNode($$[$0-2], $$[$0-1],   null, null, new Loc(_$[$0-2], _$[$0-1])); 
break;
case 25: this.$ = new TagNode($$[$0-3], $$[$0-2],   $$[$0-1],   null, new Loc(_$[$0-3], _$[$0-1])); 
break;
case 26: this.$ = new TagNode($$[$0-3], $$[$0-2],   null, $$[$0],   new Loc(_$[$0-3], _$[$0])); 
break;
case 27: this.$ = $$[$0]; 
break;
case 28: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 29: this.$ = [$$[$0]]; 
break;
case 30: this.$ = $$[$0]; 
break;
case 31: this.$ = ['id', $$[$0]]; 
break;
case 32: this.$ = ['class', $$[$0].join(" ")]; 
break;
case 33: this.$ = ['attr', $$[$0-2], $$[$0]]; 
break;
case 34: this.$ = ['data', $$[$0-2], $$[$0]]; 
break;
case 35: this.$ = $$[$0-1]; 
break;
case 36: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 37: this.$ = [$$[$0]]; 
break;
case 38: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 39: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 40: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 41: this.$ = [$$[$0-3], $$[$0-1]]; 
break;
case 42: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 43: this.$ = [$$[$0]]; 
break;
case 44: this.$ = new FilterNode($$[$0-3], $$[$0-1], new Loc(_$[$0-3], _$[$0-1])); 
break;
case 45: this.$ = new TextNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 46: this.$ = [$$[$0]]; 
break;
case 47: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 51: this.$ = new WithNode($$[$0-4], $$[$0-2], $$[$0], new Loc(_$[$0-5], _$[$0])); 
break;
case 52: this.$ = new ForNode($$[$0-4], $$[$0-2], $$[$0] , new Loc(_$[$0-5], _$[$0])) ; 
break;
case 53: this.$ = new IfNode("true", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-3], _$[$0])); 
break;
case 54: this.$ = new IfNode("true", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-6], _$[$0])); 
break;
case 55: this.$ = new IfNode("false", $$[$0-2], null, $$[$0], null, new Loc(_$[$0-4], _$[$0])); 
break;
case 56: this.$ = new IfNode("false", $$[$0-5], null, $$[$0-3], $$[$0], new Loc(_$[$0-7], _$[$0])); 
break;
case 57: this.$ = new IfNode($$[$0-3], $$[$0-4], $$[$0-2], $$[$0], null, new Loc(_$[$0-5], _$[$0])); 
break;
case 58: this.$ = new IfNode($$[$0-6], $$[$0-7], $$[$0-5], $$[$0-3], $$[$0], new Loc(_$[$0-8], _$[$0])); 
break;
case 59: this.$ = new IfNode($$[$0-3], $$[$0-4], $$[$0-2], $$[$0], null, new Loc(_$[$0-5], _$[$0])); 
break;
case 60: this.$ = new IfNode($$[$0-6], $$[$0-7], $$[$0-5], $$[$0-3], null, new Loc(_$[$0-8], _$[$0])); 
break;
case 61: this.$ = new IfNode("is not", $$[$0-5], $$[$0-2], $$[$0], null, new Loc(_$[$0-6], _$[$0])); 
break;
case 62: this.$ = new IfNode("is not", $$[$0-8], $$[$0-5], $$[$0-3], $$[$0], new Loc(_$[$0-9], _$[$0])); 
break;
case 67: this.$ = new AliasNode($$[$0-3], $$[$0-1], new Loc(_$[$0-4], _$[$0])); 
break;
case 68: this.$ = new PathNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 69: this.$ = updatePathNode($$[$0-2], $$[$0], null, new Loc(_$[$0-2], _$[$0]));  
break;
case 70: this.$ = updatePathNode($$[$0-2], null, $$[$0], new Loc(_$[$0-2], _$[$0])); 
break;
case 71: this.$ = new IdNode($$[$0], null, null, new Loc(_$[$0], _$[$0])); 
break;
case 72: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 73: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 74: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 75: this.$ = new IdNode($$[$0-3], $$[$0-1]  , null, new Loc(_$[$0-3], _$[$0])); 
break;
case 76: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 77: this.$ = new IdNode($$[$0-5], $$[$0-3]  , $$[$0-1]  , new Loc(_$[$0-5], _$[$0])); 
break;
case 78: this.$ = new IdNode($$[$0-4], 0   , $$[$0-1]  , new Loc(_$[$0-4], _$[$0])); 
break;
case 79: this.$ = new IdNode($$[$0-4], $$[$0-2]  , '*' , new Loc(_$[$0-4], _$[$0])); 
break;
case 80: this.$ = new MethodChainNode($$[$0], new Loc(_$[$0], _$[$0])); 
break;
case 81: this.$ = $$[$0-2]; this.$.chain.push($$[$0])                        ; 
break;
case 82: this.$ = new MethodNode($$[$0-2], null, new Loc(_$[$0-2], _$[$0])); 
break;
case 83: this.$ = new MethodNode($$[$0-3], $$[$0-1]  , new Loc(_$[$0-3], _$[$0])); 
break;
case 84: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 85: this.$ = [$$[$0]]; 
break;
case 89: this.$ = $$[$0-1]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,14],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:[1,15],21:16,24:[1,24],25:17,27:[1,25],42:[1,18],48:[1,20],53:[1,22],55:[1,21],64:[1,19],74:[1,23]},{1:[3]},{5:[1,26],6:27,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:[1,15],21:16,24:[1,24],25:17,27:[1,25],42:[1,18],48:[1,20],53:[1,22],55:[1,21],64:[1,19],74:[1,23]},{5:[2,3],20:[2,3],24:[2,3],27:[2,3],42:[2,3],48:[2,3],53:[2,3],55:[2,3],64:[2,3],74:[2,3]},{5:[2,4],20:[2,4],24:[2,4],27:[2,4],42:[2,4],48:[2,4],53:[2,4],55:[2,4],64:[2,4],74:[2,4]},{5:[2,8],10:[2,8],20:[2,8],24:[2,8],27:[2,8],42:[2,8],48:[2,8],53:[2,8],55:[2,8],64:[2,8],74:[2,8]},{5:[2,9],10:[2,9],20:[2,9],24:[2,9],27:[2,9],42:[2,9],48:[2,9],53:[2,9],55:[2,9],64:[2,9],74:[2,9]},{5:[2,10],10:[2,10],20:[2,10],24:[2,10],27:[2,10],42:[2,10],48:[2,10],53:[2,10],55:[2,10],64:[2,10],74:[2,10]},{5:[2,11],10:[2,11],20:[2,11],24:[2,11],27:[2,11],42:[2,11],48:[2,11],53:[2,11],55:[2,11],64:[2,11],74:[2,11]},{5:[2,12],10:[2,12],20:[2,12],24:[2,12],27:[2,12],42:[2,12],48:[2,12],53:[2,12],55:[2,12],64:[2,12],74:[2,12]},{5:[2,13],10:[2,13],20:[2,13],24:[2,13],27:[2,13],42:[2,13],48:[2,13],53:[2,13],55:[2,13],64:[2,13],74:[2,13]},{5:[2,14],10:[2,14],20:[2,14],24:[2,14],27:[2,14],42:[2,14],48:[2,14],53:[2,14],55:[2,14],64:[2,14],74:[2,14]},{5:[2,15],10:[2,15],20:[2,15],24:[2,15],27:[2,15],42:[2,15],48:[2,15],53:[2,15],55:[2,15],64:[2,15],74:[2,15]},{5:[2,16],10:[2,16],20:[2,16],24:[2,16],27:[2,16],42:[2,16],48:[2,16],53:[2,16],55:[2,16],64:[2,16],74:[2,16]},{6:29,9:28,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:[1,15],21:16,24:[1,24],25:17,27:[1,25],42:[1,18],48:[1,20],53:[1,22],55:[1,21],64:[1,19],74:[1,23]},{5:[2,17],10:[2,17],20:[2,17],24:[2,17],27:[2,17],42:[2,17],48:[2,17],53:[2,17],55:[2,17],64:[2,17],74:[2,17]},{22:[1,30],23:31,28:32,29:33,30:[1,34],31:35,32:[1,36],35:[1,37],36:[1,38],41:[1,39]},{19:46,22:[1,40],23:42,26:41,28:32,29:33,30:[1,34],31:35,32:[1,36],35:[1,37],36:[1,38],41:[1,39],44:43,45:44,46:[1,45],47:[1,47],74:[1,23]},{43:[1,48]},{51:[1,49]},{49:50,51:[1,52],65:51},{34:[1,55],49:58,51:[1,52],56:53,58:[1,54],62:[1,56],63:[1,57],65:51},{51:[1,59]},{49:60,51:[1,52],65:51},{22:[2,20],30:[2,20],32:[2,20],35:[2,20],36:[2,20],41:[2,20]},{22:[2,27],30:[2,27],32:[2,27],35:[2,27],36:[2,27],41:[2,27],46:[2,27],47:[2,27],74:[2,27]},{1:[2,1]},{5:[2,2],20:[2,2],24:[2,2],27:[2,2],42:[2,2],48:[2,2],53:[2,2],55:[2,2],64:[2,2],74:[2,2]},{6:62,10:[1,61],11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:[1,15],21:16,24:[1,24],25:17,27:[1,25],42:[1,18],48:[1,20],53:[1,22],55:[1,21],64:[1,19],74:[1,23]},{10:[2,7],20:[2,7],24:[2,7],27:[2,7],42:[2,7],48:[2,7],53:[2,7],55:[2,7],64:[2,7],74:[2,7]},{5:[2,18],10:[2,18],20:[2,18],24:[2,18],27:[2,18],42:[2,18],48:[2,18],53:[2,18],55:[2,18],64:[2,18],74:[2,18]},{22:[1,63],28:64,30:[1,34],31:35,32:[1,36],35:[1,37],41:[1,39]},{22:[2,29],30:[2,29],32:[2,29],35:[2,29],41:[2,29],46:[2,29],47:[2,29],74:[2,29]},{22:[2,30],30:[2,30],32:[2,30],35:[2,30],41:[2,30],46:[2,30],47:[2,30],74:[2,30]},{22:[2,31],30:[2,31],32:[2,31],35:[2,31],41:[2,31],46:[2,31],47:[2,31],74:[2,31]},{22:[2,32],30:[2,32],32:[2,32],35:[2,32],41:[1,65],46:[2,32],47:[2,32],74:[2,32]},{33:[1,66]},{33:[1,67]},{32:[1,70],35:[1,71],37:68,39:69},{22:[2,43],30:[2,43],32:[2,43],35:[2,43],41:[2,43],46:[2,43],47:[2,43],74:[2,43]},{5:[2,21],7:72,8:[1,14],10:[2,21],20:[2,21],24:[2,21],27:[2,21],42:[2,21],48:[2,21],53:[2,21],55:[2,21],64:[2,21],74:[2,21]},{22:[1,73]},{19:46,22:[1,74],26:75,28:64,30:[1,34],31:35,32:[1,36],35:[1,37],41:[1,39],44:43,45:44,46:[1,45],47:[1,47],74:[1,23]},{10:[2,45],19:46,22:[2,45],45:76,46:[1,45],47:[1,47],74:[1,23]},{10:[2,46],22:[2,46],46:[2,46],47:[2,46],74:[2,46]},{10:[2,48],22:[2,48],46:[2,48],47:[2,48],74:[2,48]},{10:[2,49],22:[2,49],46:[2,49],47:[2,49],74:[2,49]},{10:[2,50],22:[2,50],46:[2,50],47:[2,50],74:[2,50]},{19:46,26:77,44:43,45:44,46:[1,45],47:[1,47],74:[1,23]},{33:[1,78]},{50:[1,79],66:[1,80]},{38:[2,68],40:[2,68],50:[2,68],52:[2,68],59:[2,68],60:[2,68],66:[2,68],69:[2,68],70:[2,68],75:[2,68]},{38:[2,71],40:[2,71],50:[2,71],52:[2,71],59:[2,71],60:[2,71],66:[2,71],68:[1,81],69:[2,71],70:[2,71],75:[2,71]},{52:[1,82],59:[1,83],60:[1,84]},{34:[1,55],49:58,51:[1,52],56:85,62:[1,56],63:[1,57],65:51},{52:[2,63],59:[2,63],60:[2,63]},{52:[2,64],59:[2,64],60:[2,64]},{52:[2,65],59:[2,65],60:[2,65]},{52:[2,66],59:[2,66],60:[2,66],66:[1,80]},{54:[1,86]},{66:[1,80],75:[1,87]},{5:[2,5],10:[2,5],20:[2,5],24:[2,5],27:[2,5],42:[2,5],48:[2,5],53:[2,5],55:[2,5],57:[2,5],64:[2,5],74:[2,5]},{10:[2,6],20:[2,6],24:[2,6],27:[2,6],42:[2,6],48:[2,6],53:[2,6],55:[2,6],64:[2,6],74:[2,6]},{5:[2,19],10:[2,19],20:[2,19],24:[2,19],27:[2,19],42:[2,19],48:[2,19],53:[2,19],55:[2,19],64:[2,19],74:[2,19]},{22:[2,28],30:[2,28],32:[2,28],35:[2,28],41:[2,28],46:[2,28],47:[2,28],74:[2,28]},{22:[2,42],30:[2,42],32:[2,42],35:[2,42],41:[2,42],46:[2,42],47:[2,42],74:[2,42]},{34:[1,88]},{34:[1,89]},{32:[1,70],35:[1,71],38:[1,90],39:91},{32:[2,37],35:[2,37],38:[2,37]},{33:[1,92]},{33:[1,93]},{5:[2,23],10:[2,23],20:[2,23],24:[2,23],27:[2,23],42:[2,23],48:[2,23],53:[2,23],55:[2,23],64:[2,23],74:[2,23]},{5:[2,22],10:[2,22],20:[2,22],24:[2,22],27:[2,22],42:[2,22],48:[2,22],53:[2,22],55:[2,22],64:[2,22],74:[2,22]},{5:[2,24],7:94,8:[1,14],10:[2,24],20:[2,24],24:[2,24],27:[2,24],42:[2,24],48:[2,24],53:[2,24],55:[2,24],64:[2,24],74:[2,24]},{22:[1,95]},{10:[2,47],22:[2,47],46:[2,47],47:[2,47],74:[2,47]},{10:[1,96]},{49:97,51:[1,52],65:51},{51:[1,98]},{51:[1,101],65:99,67:100,71:102},{49:104,51:[1,52],62:[1,103],65:51,70:[1,105]},{7:106,8:[1,14]},{34:[1,55],49:58,51:[1,52],56:107,62:[1,56],63:[1,57],65:51},{58:[1,109],61:[1,108]},{52:[1,110]},{49:111,51:[1,52],65:51},{5:[2,89],10:[2,89],20:[2,89],22:[2,89],24:[2,89],27:[2,89],42:[2,89],46:[2,89],47:[2,89],48:[2,89],53:[2,89],55:[2,89],64:[2,89],74:[2,89]},{22:[2,33],30:[2,33],32:[2,33],35:[2,33],41:[2,33],46:[2,33],47:[2,33],74:[2,33]},{22:[2,34],30:[2,34],32:[2,34],35:[2,34],41:[2,34],46:[2,34],47:[2,34],74:[2,34]},{22:[2,35],30:[2,35],32:[2,35],35:[2,35],41:[2,35],46:[2,35],47:[2,35],74:[2,35]},{32:[2,36],35:[2,36],38:[2,36]},{34:[1,112]},{34:[1,113]},{5:[2,26],10:[2,26],20:[2,26],24:[2,26],27:[2,26],42:[2,26],48:[2,26],53:[2,26],55:[2,26],64:[2,26],74:[2,26]},{5:[2,25],10:[2,25],20:[2,25],24:[2,25],27:[2,25],42:[2,25],48:[2,25],53:[2,25],55:[2,25],64:[2,25],74:[2,25]},{5:[2,44],10:[2,44],20:[2,44],24:[2,44],27:[2,44],42:[2,44],48:[2,44],53:[2,44],55:[2,44],64:[2,44],74:[2,44]},{52:[1,114],66:[1,80]},{52:[1,115]},{38:[2,69],40:[2,69],50:[2,69],52:[2,69],59:[2,69],60:[2,69],66:[2,69],69:[2,69],70:[2,69],75:[2,69]},{38:[2,70],40:[2,70],50:[2,70],52:[2,70],59:[2,70],60:[2,70],66:[1,116],69:[2,70],70:[2,70],75:[2,70]},{36:[1,117],38:[2,71],40:[2,71],50:[2,71],52:[2,71],59:[2,71],60:[2,71],66:[2,71],68:[1,81],69:[2,71],70:[2,71],75:[2,71]},{38:[2,80],40:[2,80],50:[2,80],52:[2,80],59:[2,80],60:[2,80],66:[2,80],69:[2,80],70:[2,80],75:[2,80]},{69:[1,118],70:[1,119]},{66:[1,80],69:[1,120],70:[1,121]},{62:[1,122]},{5:[2,53],10:[2,53],20:[2,53],24:[2,53],27:[2,53],42:[2,53],48:[2,53],53:[2,53],55:[2,53],57:[1,123],64:[2,53],74:[2,53]},{52:[1,124]},{52:[1,125]},{61:[1,126]},{7:127,8:[1,14]},{52:[1,128],66:[1,80]},{32:[2,38],35:[2,38],38:[2,38],40:[1,129]},{32:[2,40],35:[2,40],38:[2,40],40:[1,130]},{5:[2,67],10:[2,67],20:[2,67],24:[2,67],27:[2,67],42:[2,67],48:[2,67],53:[2,67],55:[2,67],64:[2,67],74:[2,67]},{7:131,8:[1,14]},{51:[1,133],71:132},{34:[1,139],38:[1,134],49:137,51:[1,52],62:[1,138],65:51,72:135,73:136},{38:[2,72],40:[2,72],50:[2,72],52:[2,72],59:[2,72],60:[2,72],66:[2,72],69:[2,72],70:[2,72],75:[2,72]},{49:141,51:[1,52],62:[1,140],65:51,69:[1,142]},{38:[2,75],40:[2,75],50:[2,75],52:[2,75],59:[2,75],60:[2,75],66:[2,75],69:[2,75],70:[2,75],75:[2,75]},{49:144,51:[1,52],62:[1,143],65:51},{69:[1,145]},{52:[1,146]},{7:147,8:[1,14]},{7:148,8:[1,14]},{52:[1,149]},{5:[2,55],10:[2,55],20:[2,55],24:[2,55],27:[2,55],42:[2,55],48:[2,55],53:[2,55],55:[2,55],57:[1,150],64:[2,55],74:[2,55]},{7:151,8:[1,14]},{32:[2,39],35:[2,39],38:[2,39]},{32:[2,41],35:[2,41],38:[2,41]},{5:[2,51],10:[2,51],20:[2,51],24:[2,51],27:[2,51],42:[2,51],48:[2,51],53:[2,51],55:[2,51],64:[2,51],74:[2,51]},{38:[2,81],40:[2,81],50:[2,81],52:[2,81],59:[2,81],60:[2,81],66:[2,81],69:[2,81],70:[2,81],75:[2,81]},{36:[1,117]},{38:[2,82],40:[2,82],50:[2,82],52:[2,82],59:[2,82],60:[2,82],66:[2,82],69:[2,82],70:[2,82],75:[2,82]},{38:[1,152],40:[1,153]},{38:[2,85],40:[2,85]},{38:[2,86],40:[2,86],66:[1,80]},{38:[2,87],40:[2,87]},{38:[2,88],40:[2,88]},{69:[1,154]},{66:[1,80],69:[1,155]},{38:[2,79],40:[2,79],50:[2,79],52:[2,79],59:[2,79],60:[2,79],66:[2,79],69:[2,79],70:[2,79],75:[2,79]},{69:[1,156]},{66:[1,80],69:[1,157]},{38:[2,78],40:[2,78],50:[2,78],52:[2,78],59:[2,78],60:[2,78],66:[2,78],69:[2,78],70:[2,78],75:[2,78]},{7:158,8:[1,14]},{5:[2,57],10:[2,57],20:[2,57],24:[2,57],27:[2,57],42:[2,57],48:[2,57],53:[2,57],55:[2,57],57:[1,159],64:[2,57],74:[2,57]},{5:[2,59],10:[2,59],20:[2,59],24:[2,59],27:[2,59],42:[2,59],48:[2,59],53:[2,59],55:[2,59],57:[1,160],64:[2,59],74:[2,59]},{7:161,8:[1,14]},{52:[1,162]},{5:[2,52],10:[2,52],20:[2,52],24:[2,52],27:[2,52],42:[2,52],48:[2,52],53:[2,52],55:[2,52],64:[2,52],74:[2,52]},{38:[2,83],40:[2,83],50:[2,83],52:[2,83],59:[2,83],60:[2,83],66:[2,83],69:[2,83],70:[2,83],75:[2,83]},{34:[1,139],49:137,51:[1,52],62:[1,138],65:51,73:163},{38:[2,73],40:[2,73],50:[2,73],52:[2,73],59:[2,73],60:[2,73],66:[2,73],69:[2,73],70:[2,73],75:[2,73]},{38:[2,74],40:[2,74],50:[2,74],52:[2,74],59:[2,74],60:[2,74],66:[2,74],69:[2,74],70:[2,74],75:[2,74]},{38:[2,76],40:[2,76],50:[2,76],52:[2,76],59:[2,76],60:[2,76],66:[2,76],69:[2,76],70:[2,76],75:[2,76]},{38:[2,77],40:[2,77],50:[2,77],52:[2,77],59:[2,77],60:[2,77],66:[2,77],69:[2,77],70:[2,77],75:[2,77]},{5:[2,54],10:[2,54],20:[2,54],24:[2,54],27:[2,54],42:[2,54],48:[2,54],53:[2,54],55:[2,54],64:[2,54],74:[2,54]},{52:[1,164]},{52:[1,165]},{5:[2,61],10:[2,61],20:[2,61],24:[2,61],27:[2,61],42:[2,61],48:[2,61],53:[2,61],55:[2,61],57:[1,166],64:[2,61],74:[2,61]},{7:167,8:[1,14]},{38:[2,84],40:[2,84]},{7:168,8:[1,14]},{7:169,8:[1,14]},{52:[1,170]},{5:[2,56],10:[2,56],20:[2,56],24:[2,56],27:[2,56],42:[2,56],48:[2,56],53:[2,56],55:[2,56],64:[2,56],74:[2,56]},{5:[2,58],10:[2,58],20:[2,58],24:[2,58],27:[2,58],42:[2,58],48:[2,58],53:[2,58],55:[2,58],64:[2,58],74:[2,58]},{5:[2,60],10:[2,60],20:[2,60],24:[2,60],27:[2,60],42:[2,60],48:[2,60],53:[2,60],55:[2,60],64:[2,60],74:[2,60]},{7:171,8:[1,14]},{5:[2,62],10:[2,62],20:[2,62],24:[2,62],27:[2,62],42:[2,62],48:[2,62],53:[2,62],55:[2,62],64:[2,62],74:[2,62]}],
defaultActions: {26:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = tstack.shift() || self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = tstack.concat(token.splice(1));
                token = token[0];
            }
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function Loc(start, end) {
  this.start = { line: start.first_line, column: start.first_column };
  this.end = { line: end.last_line, column: end.last_column };
}

/* AST nodes */

function HtmlNode(text, loc) {
  this.type = "HTML";
  this.body = text;
  this.loc = loc;
}

function VoidTagNode(tag, attrs, loc) {
  this.type = "VoidTag";
  this.tag = tag;
  this.attrs = attrs;
  this.loc = loc;
}

function TagNode(tag, attrs, text, block, loc) {
  this.type = "Tag";
  this.tag = tag;
  this.attrs = attrs;
  this.body = text ? [text] : block;
  this.loc = loc;
}

function TextNode(words, loc) {
  this.type = "Text";
  this.loc = loc;

  var w = words, t = [], s = [], i = 0; 

  while (typeof w[i] !== "undefined") {
    if (typeof w[i] === "string") {
      s.push(w[i]);
    } else {
      if (s.length) {
        t.push(s.join(' '));
        s = [];
      }
      t.push(w[i]);
    }
    i++;
  }
  if (s.length) {
    t.push(s.join(' '));
  }

  this.body = t;
}

function NameNode(path, loc) {
  this.type = "Name";
  this.body = path;
  this.loc = loc;
}

function WithNode(path, id, body, loc) {
  this.type = "With";
  this.path = path;
  this.id = id;
  this.body = body;
  this.loc = loc;
}

function IdNode(id, start, end, loc) {
  this.type = "Id";
  this.id = id;
  this.start = start;
  this.end = end;
  this.loc = loc;
}

function PathNode(component, loc) {
  this.type = "Path";
  this.components = [ createPathComponent(component) ];
  this.methods = [];
  this.loc = loc;
}

function createPathComponent(c) {
  var comp = [c.id];
  if (c.start !== null) comp.push(c.start);
  if (c.end !== null) comp.push(c.end);
  return comp;
}

function updatePathNode(node, component, methods, loc) {
  if (component !== null) {
    node.components.push(createPathComponent(component));
  }
  if (methods !== null) {
    node.methods = methods;
  }
  if (loc.end.line > node.loc.end.line || loc.end.column > node.loc.end.column) {
    node.loc.end = loc.end;
  }
  return node;
}

function MethodNode(name, args, loc) {
  this.type = "Method";
  this.name = name;
  this.args = args;
  this.loc = loc;
}

function MethodChainNode(method, loc) {
  this.type = "MethodChain";
  this.chain = [method];
  this.loc = loc;
}

function ForNode(id, path, body, loc) {
  this.type = "For";
  this.id = id;
  this.path = path;
  this.body = body;
  this.loc = loc;
}

function IfNode(cond, v1, v2, body, else_body, loc) {
  this.type = "If";
  this.condition = cond;
  this.value_1 = v1;
  this.value_2 = v2;
  this.body = body;
  this.else_body = else_body;
  this.loc = loc;
}

function AliasNode(id, path, loc) {
  this.type = "Alias";
  this.id = id;
  this.path = path;
  this.loc = loc;
}

function FilterNode(filter, body, loc) {
  this.type = "Filter";
  this.body = [body];
  this.loc = loc;
}

/* expose AST constructors to parser */

parser.ast = {};
parser.ast.Loc = Loc;
parser.ast.HtmlNode = HtmlNode;
parser.ast.VoidTagNode = VoidTagNode;
parser.ast.TagNode = TagNode;
parser.ast.TextNode = TextNode;
parser.ast.NameNode = NameNode;
parser.ast.WithNode = WithNode;
parser.ast.IdNode = IdNode;
parser.ast.PathNode = PathNode;
parser.ast.createPathComponent = createPathComponent;
parser.ast.updatePathNode = updatePathNode;
parser.ast.MethodNode = MethodNode;
parser.ast.MethodChainNode = MethodChainNode;
parser.ast.ForNode = ForNode;
parser.ast.IfNode = IfNode;
parser.ast.AliasNode = AliasNode;
parser.ast.FilterNode = FilterNode;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

  function strip(start, end) {
    return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng-end);
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.pushState("comment"); /* ignore */ 
break;
case 1:this.popState(); /* ignore */ 
break;
case 2:/* ignore */
break;
case 3:/* ignore */
break;
case 4:return 20;
break;
case 5:this.pushState("expr"); return "FOR";
break;
case 6:this.pushState("expr"); return "IF";
break;
case 7:this.pushState("expr"); return "ELSE";
break;
case 8:this.pushState("expr"); return "ALIAS";
break;
case 9:this.pushState("expr"); return "WITH";
break;
case 10:this.popState(); return "END_EXPR";
break;
case 11:return "IN";
break;
case 12:return "IS";
break;
case 13:return "AS";
break;
case 14:return "NOT";
break;
case 15:return "BOOL";
break;
case 16:return "BOOL";
break;
case 17:return "TYPE";
break;
case 18:return "TYPE";
break;
case 19:return "TYPE";
break;
case 20:return "TYPE";
break;
case 21:return "TYPE";
break;
case 22:return "COND";
break;
case 23:return "COND";
break;
case 24:return "COND";
break;
case 25:return "COND";
break;
case 26:return "COND";
break;
case 27:return "COND";
break;
case 28:return "COND";
break;
case 29:return "=";
break;
case 30:this.pushState("tag"); return "VOID_TAG";
break;
case 31:this.pushState("tag"); return "TAG";
break;
case 32:this.popState(); return "END_TAG";
break;
case 33:yy_.yytext = yy_.yytext.slice(1); return "TAG_ID";
break;
case 34:yy_.yytext = yy_.yytext.slice(1); return "TAG_CLASS";
break;
case 35:this.pushState("tagargs"); return "LPAREN";
break;
case 36:this.popState(); return "RPAREN";
break;
case 37:/* ignore */
break;
case 38:/* ignore */
break;
case 39:return "EQ";
break;
case 40:return "COMMA";
break;
case 41:return "TAG_ATTR";
break;
case 42:yy_.yytext = "data-" + yy_.yytext.slice(1); return "TAG_DATA_ATTR";
break;
case 43:this.pushState("filter"); yy_.yytext = yy_.yytext.slice(1); return "FILTER";
break;
case 44:this.pushState("name"); return "START_NAME";
break;
case 45:this.popState(); return "RBRACE"
break;
case 46:return "ID";
break;
case 47:return "DOT";
break;
case 48:return "LPAREN";
break;
case 49:return "RPAREN";
break;
case 50:return "LBRACK";
break;
case 51:return "RBRACK";
break;
case 52:return "COLON"; 
break;
case 53:return "COMMA";
break;
case 54:return "INT";
break;
case 55:yy_.yytext = strip(1,2).replace(/\\"/g, '"'); return "STRING";
break;
case 56:return "WORD";
break;
case 57:return 5;
break;
case 58:
  var tokens = [];
  while (0 < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }
  if (tokens.length) {
    return tokens;
  }

break;
case 59:
  var tokens = [];
  while (_filter_indent_level >= _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }
  if (tokens.length) {
    return tokens;
  }

break;
case 60:/* eat blank lines */
break;
case 61:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;
  if (indentation > _indent_stack[0]) {
    _indent_stack.unshift(indentation);
    return "INDENT";
  }
  var tokens = [];
  while (indentation < _indent_stack[0]) {
    this.popState();
    tokens.unshift("DEDENT");
    _indent_stack.shift();
  }
  if (tokens.length) return tokens;

break;
case 62:
  var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;

  if (typeof _filter_indent_level === "undefined") {
    _filter_indent_level = indentation;
    return "FILTER_START";
  } else if (indentation < _filter_indent_level) {
    _filter_indent_level = undefined;
    this.popState();
    return "DEDENT";
  } 
  /* else ignore */

break;
case 63:/* ignore all other whitespace */
break;
}
},
rules: [/^(?:""")/,/^(?:""")/,/^(?:.+)/,/^(?:\n)/,/^(?:<.+(?=\n))/,/^(?:for\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:alias\b)/,/^(?:with\b)/,/^(?:(?=\n))/,/^(?:in\b)/,/^(?:is\b)/,/^(?:as\b)/,/^(?:not\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:Hash\b)/,/^(?:List\b)/,/^(?:String\b)/,/^(?:Integer\b)/,/^(?:Number\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:%)/,/^(?:=)/,/^(?:((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)))/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:(?=\n))/,/^(?:(#[a-zA-Z][a-zA-Z0-9\-\:_]*))/,/^(?:(\.-?[_a-zA-Z]+[_a-zA-Z0-9\-]*(?=["."\s\n])))/,/^(?:\()/,/^(?:\))/,/^(?:\s)/,/^(?:\n)/,/^(?:=)/,/^(?:,)/,/^(?:([a-zA-Z][a-zA-Z0-9\-_]*(?==)))/,/^(?:(\*[a-zA-Z][a-zA-Z0-9\-]*(?==)))/,/^(?::(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:@\{)/,/^(?:\})/,/^(?:(\$?[a-zA-Z_][a-zA-Z0-9_]{0,254}))/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:(\+|-)?(0|[1-9][0-9]*))/,/^(?:(('(\\'|[^"'"])*')|("(\\"|[^'"'])*")))/,/^(?:([^\s\n\{][^\s\n\{]*))/,/^(?:$)/,/^(?:\s*$)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"comment":{"rules":[1,2,3,57,60,63],"inclusive":true},"tag":{"rules":[32,33,34,35,44,56,57,60,63],"inclusive":true},"tagargs":{"rules":[36,37,38,39,40,41,42,55,57,60,63],"inclusive":true},"filter":{"rules":[44,56,57,59,60,62,63],"inclusive":true},"expr":{"rules":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,46,47,48,49,50,51,52,53,54,55,57,60,63],"inclusive":true},"name":{"rules":[45,46,47,48,49,50,51,52,53,54,55,57,60,63],"inclusive":true},"INITIAL":{"rules":[0,4,5,6,7,8,9,30,31,43,44,56,57,58,60,61,63],"inclusive":true}}
};
_indent_stack = [0];
_filter_indent_level = undefined;;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}